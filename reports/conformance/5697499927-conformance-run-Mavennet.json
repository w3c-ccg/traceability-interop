{
  "collection": {
    "info": {
      "_postman_id": "4bd78d4a-8f35-432a-a4e9-9e5a47c7c93c",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "0a7a3982-7633-4921-8cc8-ff0c74d3aa76",
        "name": "Clear Cache",
        "item": [
          {
            "id": "1db9ba2a-be3f-4cb5-b088-760ef9098a3c",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c971bad1-a549-4ed3-b1df-d75558ce1c66",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "81e84eb0-0e69-46b6-954d-5b5858b0a6dd"
                }
              }
            ]
          },
          {
            "id": "018db6eb-98d1-4522-a4fd-023a45b48d96",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d7b93253-5b7b-4ac1-847d-10d7e8f07745",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "1587930d-114b-44d5-8ab4-2cdcb9759283"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "15820cc6-e447-4e84-b6a2-b5d151f2fca2",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "82c12764-af7b-46f1-ad98-9c83f5962126",
            "name": "Positive Testing",
            "item": [
              {
                "id": "63aae3fe-8fe6-4681-b3ae-cb162fad5234",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7046d7d5-e848-4d30-9f4d-c8459e7d3ad0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "48fc8491-3851-45f5-b9b9-1921f2ac45a0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0a5b847f-5800-434e-9680-c6bc06e158b8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "40191078-e053-473a-8c2f-47326b63bdc4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ac9ada9a-a216-4085-ad03-8d3b77d48740",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3f1e4820-b95a-497b-9228-7f1a30dba8e0"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "baf0f009-e42f-4d4d-a1b4-bb167b552a58",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "45c65da5-148f-4dcc-89ab-ccc963d82697"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d212ffa3-ea71-4c3b-873e-6e4fd45d225b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3f06cdbf-fb26-47b4-86c3-7f2ee26129cd"
            }
          }
        ]
      },
      {
        "id": "6d0e21b7-18ee-4bdc-a750-66c39c03d6ff",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "9175acfb-32ea-4065-a21c-0260150527ae",
            "name": "Negative Testing",
            "item": [
              {
                "id": "964590e4-7f31-4562-871e-dc981261e858",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1321bfa5-ec54-43e3-8c30-ac2752fc6026",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1027d9c-662c-4cb5-b4b7-0877bc7e76c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0f5383d9-0d53-4378-a62d-12ca8c6389ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ad6a5bb-97ce-46ce-9fca-cfe06a5544bd",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "814195ff-f79a-4115-b6ae-33d7214b6e0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8aa77ab2-ce88-4e75-beb7-08bc2523aa65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cdf2e5e-ab8f-43b6-b69f-5557bacbfb47",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82612b30-c15a-4603-9316-237663e175fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2d8285ed-3d4c-4263-b466-09a2df737a82"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f6cd34e2-5ff7-4b05-a171-e3ccb093e498",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8727ba7a-ca13-421e-a08f-df8c9f11fccc",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beeb8c72-0c91-4917-a945-3eea70b4e10e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6b519de2-b9c1-4c35-9193-c3cc8a5d128d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "750cab7a-4d1b-4e57-8598-3e1cf5a25ff7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc29900a-ec8e-4d22-b5f1-cd0c5bb687ce"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "71506f0f-a643-4381-a752-f9ee537ee84d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b8864978-ca74-4f3d-8cd8-df9a891d36e3",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d072a6d2-b83c-4ddb-b1c8-58ddb37cc220",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "c74b0b5e-4736-4075-81c1-b48a149220d7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "165e57fc-6bb8-4993-a026-76f860c645c9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "2cd809a8-00de-45b3-85f6-d997eb2646be"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "944da8f9-2af7-446d-92b1-8aa3407b873a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4ebadcf3-930c-4dfa-abad-f61a19e1c008"
            }
          }
        ]
      },
      {
        "id": "c3d066bc-ff94-4298-97b0-412f90f7684e",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "38846f7a-ffbe-44ce-be6f-4e1ce5ca5889",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e1ba474f-1f40-4ef6-9983-f53510d0ccc4",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "a3ac4554-3787-4412-a0e4-015a75347b3d",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec1a45cc-0ec6-43b2-814e-4ad0c504fd84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18a86027-a11f-4f40-be22-858f411ece82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a3f8290-175b-4c7a-abf7-0c5591844e10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0084170b-417f-4099-bfff-2895c4dd6f36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32b45bfd-c45e-404e-be97-1770b342bd2b",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db95e8c6-9bcf-4c8e-982b-802f0b1b3941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30ac430d-bca9-457a-b386-d2b47e4aa7ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22e5337d-555b-463b-a525-0cd130d3f24b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6086b8be-3850-4780-9b11-f15fd60af419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9d928b9-b6de-4ea3-bdba-bebd26d2e5a1",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6591e52-3476-4449-8b4f-d6bea89c92c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c63f816b-2683-4450-81f5-2be86e9e3683"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "899ca624-b6dc-451e-92a1-f64d8be5986f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "035ce66d-b134-411f-affd-dbe92802faf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d05c6fd4-2f65-452a-8903-8627b2ac6aae",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a438653-4322-4cfb-a6aa-58eacbd86fd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5996500f-b5ea-4d8d-b977-6c5a89f0e8d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c76b37f-f1e6-4b4b-8c42-3077eeb25411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "10010531-cb4a-4515-9064-b580b8cddf29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "743e679d-6a02-4390-b80b-fb8b57cae59f",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8afbf992-0953-4ed0-b48f-ede768df7586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "468c51e7-be5b-4ff3-b1dc-d3a22b5f2884"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30abff79-7926-405e-89ae-55a09e5bcc60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "45604f57-2ffe-4342-b6f0-52a1972c43ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7198aaf1-1786-42b6-b925-f97a2066492d",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99d74e72-e029-41cd-b510-a4d747624673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "862b8632-7208-48f3-92a4-d35381969737"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b3f90eb-b030-458f-b00f-f55f9dc6eba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "728f9765-edaa-4777-8938-23f7008a8dec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a40f7705-e8e9-40b1-a277-55faaed146b5",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8833216-f77d-4c19-a21a-80abb6e68784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "721defc1-e7b8-43b1-bf56-f62399c7d631"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36e9738d-c1fd-4c73-bd98-1d8443d8adb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8de6eeeb-4860-465a-98e7-699d5aac04f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cfb9194-a7c9-4e22-8319-eace9e79879a",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61ba5962-81ec-4123-9d2c-8ef385af74c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "280f81de-3ba5-4a86-bb94-9ac297b39715"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7eb1de9-0de2-43d4-a979-599f0962e366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7ed1d379-4286-419b-b3e4-ac78b0a541e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dbf4e5a-6763-4a67-b6ca-bcaf8ba22ad4",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "423b55c8-c18e-4481-9d7a-d40bb064dc11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9b32784-8672-4604-a300-0621aeecbc2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "439fdaf4-cac1-4dca-9b0d-e608c29ff8b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f8b03e44-f1d6-4297-85c0-a13633272a54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ebbe6f4-a5cc-49f2-a4ac-631504bf4db0",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d889ae85-48d5-4ca3-a0f9-665157015bfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ece4e6c9-ef4f-4316-a1d1-4dba8146dea9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "457d3eb8-6c00-40a2-9e2d-02b183169768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2f6719a2-8011-4ade-85ee-a42ee59b6d09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a61b49c3-3360-49ea-bd3d-01f77477ec97",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ea9d611-6b5c-417a-8a77-9ea5259798f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f41a9eb-adb0-4606-80e8-2e0eafc7c5ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "768a6768-597f-488b-a460-eb487a7eedad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5194dc0-8219-41c1-873a-e3542d17366d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45ed2887-abe1-4ed0-b559-e4c85362ba80",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e55a94c-d88b-4e93-81fd-99bfb0e33237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e04a0eda-2619-49a5-b50f-ae6bc058d57c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9041337-59e9-4031-8082-c4ec31da6023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dc64530d-25ed-411c-be34-8b50e50ec9f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e59e4f30-9b12-42ac-abcc-41240383cd7c",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "023fd421-51be-40a5-b6cd-68c0e8098a95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "413a2b7b-1947-43ef-8312-c516804229be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c028dd58-aa54-47f6-a74b-5a703eab2251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae7f2afc-3d1e-433e-a090-4235191f3bc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92e9d3b2-9d8b-43f9-9d88-bc58987c2e06",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f8deafe-18a2-4411-a5c4-7d50f16544c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62d4d7fe-53f5-4528-825e-f5cbda8d8efc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f1932f0-477e-46a5-9102-5b08d77ab6a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1f1b5e54-f5b4-4587-8dbf-36051881f5cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5df41476-9652-4190-bc5c-5b08cdb50527",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2303a532-71fe-4b9a-89ba-7139c3672843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e2f5cc4-c900-44ae-9448-21f244798528"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cb8c23a-024f-406a-ae57-dbd419863882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "89017b7e-abd9-4f05-9f0f-354c720679ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2ca225a-c634-463e-ace9-efe0affb1085",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fb711ff-aeef-4a30-8466-f54cbc9ba2cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d8596a1-ed4a-420b-a4d6-a761d9758133"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4248552-6ece-4ba9-83e1-d7a0c1d90fc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "943e8220-f694-4184-b518-aeda8dc0d727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eda7abd-512c-43be-9ecf-381108ac06e2",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "159567a4-5c4b-47ed-82d9-8515c240356d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a031a662-a216-46da-a33a-11cbdc116b6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06285897-e4ee-4fd6-9ffc-498de7f51f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fac88632-3bf9-48cc-ab94-abb513dffeab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06855fe5-c1cd-4951-a52a-1e692568b59a",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e254f5d-a95e-4de4-a0f2-6ff14d63406b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01185db1-d765-4937-876a-58bd8529b077"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57c90f3c-e413-4bdd-91ae-c55d82127d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ff9cddf-1259-446a-b33b-e1c37c860068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60a683f2-959a-4360-9fbc-99bdac8dc1dc",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d019a72a-e077-4d85-afe2-6319172ebd77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87ae8ae2-d3a4-4544-a831-e636e01228a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "124b0aa3-27b1-4583-97a9-e8434cc72793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c32ea8c-1764-45cf-bc16-0cb33f16c5de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27545611-97a8-4ad7-915f-70885eac962a",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69da3401-846a-4cc7-bde0-e4b6b6d685b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57cb52aa-87b3-4348-9f8c-ff73cdc19c6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91e08660-1e4a-4760-b7d4-2f43423d4d1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b31e8c6-13cd-4baa-bfab-bc478f4339a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8d19810-3673-4314-a78c-cf322fc04fb9",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0257d51-3fc1-433c-b73e-9ed1f6f81440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f158a6df-6468-4d54-99c9-8ff4add4b042"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa2bb9a6-4429-4236-9c20-4ddad2016b33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "55518376-cf5e-4ffc-98da-60923ab7bf98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccf543dc-11a9-4230-a9a9-764e014a0535",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b861f9bf-d4e1-43cf-884a-6db4fec6b6ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4796cb69-a0f3-4d0b-b90b-3a9b164b4d08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efb9834c-6465-4f17-bfcd-23b818508613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "36b2bca7-3331-4430-8963-47801634a055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a73e1e85-2173-4d05-855e-3b505521d804",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea27911d-a588-4665-ab0b-1f92b636addc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "442f5365-f41e-426e-a094-0e4a4ed4be05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3bf92a2-ac12-4a6b-b79c-f93dc766c0b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4d087ba7-01b9-4796-ba6b-540110ffbd3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3325bd6a-3438-4846-affc-98047c280fc7",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7100a693-8b2e-417a-aef7-af4a46382b4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f094390-44a0-4956-bb5f-bfea8d3966a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d9dd86d-91f2-4fed-907e-b714aa20161c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "53e41e0f-1f89-4054-926d-953245a6e589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d72d15bd-26b9-4710-8120-992731df5ac0",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92e4a7fd-9ab3-4334-becf-97999df9d8d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f7a6d9d-ccbc-4053-95b5-ac306b39bf8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f243ab1-672f-45a0-849f-78fad8212271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "db039908-e2f5-4235-a4c9-358367f2df5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c997bc93-8f43-4e93-87bf-87486d6ff41e",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3142b93e-9ab0-4d0f-b36c-b0cfeb0c4f07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f75ef21-4fd1-495d-be74-ac8a2b245595"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "479a3393-8752-49d3-ab90-153754f0a7a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "165bb455-05f4-414f-96ac-7f0ae0ea30a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f7690cf-294a-4f02-8557-7ddc6616b9f5",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65d35ba2-650a-4e4a-96a5-fa883a9e77c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba995ea7-4b8a-4f32-917c-303dd0680e65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14ea6a20-2f63-4a8c-af46-80eb38709e1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d15c6b83-90eb-4789-82a3-d9d43203a916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f14bce8-8391-4a6f-95b3-cf145721d9a1",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cdfb68e-26dd-4a84-9298-9aef9ee6dbaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82459ba7-cff6-4295-b9cc-38858e19f51a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef71d20b-1f33-4ecb-9e9f-90f5fa91e565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4429b891-685f-4cf4-ac1d-35b9ea212929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32189365-8f68-4d34-824f-6760e7eeee51",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3115a1cc-6bac-4161-9bff-e4722a21a379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f9de4d1-8644-49ff-b277-d9c9cade6b01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6bce37b-7711-492e-97cf-1b233f5bbf5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c8c9f1a-89e4-4df6-b54f-fc1f4ef78cf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83d2f05e-b848-43ba-a4d3-39df0d382a2f",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a8b05d9-530f-4aac-be1c-b796a722ad43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58cbc0ec-d4e8-409e-b767-5e6a935b6e5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cce89925-65b8-45c6-8be8-01140075c994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "564f4575-b2df-423e-a81f-d3dc30dc42d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "909f5e2e-b260-4c17-a346-5e61e4e23604",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd3984a5-91f2-4481-9fd1-540a11850628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "112152fc-240f-4405-8d19-870a10d61641"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53de7ed0-c2b6-4ae3-978e-22a0074d2792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "26365a8a-9484-4101-9c13-00db21aca964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af973991-5972-48ca-b40f-3de73fbadc20",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b255237f-c52b-4d4f-aeb3-3cd06c1824e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0900bbc3-c58e-427f-af70-b81841773773"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d24a64b6-5fe1-41bf-ab64-09bdc2fcb7fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "da647160-e98d-46eb-aeca-7449ccc2bc92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9312430a-2796-4009-9af2-175056ae92f3",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e4ad75d-75ef-4373-b2c3-efd288d65e35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "016a3693-190a-4ea8-91ff-6a323b651642"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dfac538-c84d-4d67-b58b-8bfa7ecb54ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "958756da-91bc-4fdd-ab5c-72bece5f4e63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3ddbef6-2698-4956-ba54-7ec5483895ca",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44952685-5ec7-4e29-88e5-164179e519fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca7100e5-a775-48ef-b653-4dba2565f6b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9a16a97-61cb-4aa9-b55e-c86a371989d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed078652-76b6-41aa-839d-c105d9b8b8c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f09374c7-4b12-4049-bec0-57dac8abe9a0",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5fd11db-bc13-4692-8ad3-ab7dce9b4e33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce02a109-c81d-422a-85a9-f2f1927ab543"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18e28751-8722-47ee-a7dd-b6c0f7066e8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "b4ea3876-0fbe-4859-ba2d-e20561167e5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b5523b1-fdde-49c6-839e-332e98d1d230",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7ab707e-9001-47bd-acd4-d2316ebb7205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cd4ddcc4-d9e5-41c3-aec9-95d3134dbbd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16557278-f23c-43e3-9800-4807088b3319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cb96467a-296b-4cd2-9084-7dc440216f3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff10f771-c24d-4285-a2a1-7276413ed406",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b970894-c8ef-4814-8a8d-b4645fdb9ea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90b2f0f3-4d38-4963-9fda-7b798f003f33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8de8e793-7023-4272-ad6c-83c1172e0529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed9e3337-ab7e-427b-a694-797d34645d6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "701e5e7a-6124-4925-a637-07429c4142d8",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0b83e7a-aac0-4758-809b-38c53cc18e97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a26a09fd-8505-42d2-84a5-375a894f26c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41443fc0-7ac9-4744-9be0-c3160cbb5b66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8047b9c8-6e8c-4a6e-b7be-b551bc256a3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e67ad98-0ad1-47b2-a91f-a4900a6cd00f",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66d482ff-c2da-45fb-9ac7-e0a6d085474d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6e69efa-43f9-4ce0-aa64-d5784fcd5b14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ed11437-0f6e-44b2-b551-ad02d50c9341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8dfc5cd-6269-45ba-aada-cdfaebfb29dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2563725-262e-419d-9fce-a50c297d4b06",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cf9d745-74fb-4035-9071-dba147241d26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb368895-49cb-4c90-b1c2-bf6cc9b26112"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "798fd55b-e871-4ad0-9ffd-58a622292cf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f30fc3c-2035-4667-9808-3e06b7433d0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1caaefe-4013-4676-9c0a-7f725b5d04e3",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25b690a0-eaf8-479b-8adb-57493a7f537a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02648a8d-55fb-4646-87e2-0b8a58f8ba5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e077e61-df1e-48cc-88ed-3b55321462ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b1204ff-b063-42e2-8317-fb940f020de9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de524679-82db-4824-9087-18176a5db2a6",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fda42e7-681c-45c1-8023-8cbca40db9d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af2a8ea9-f7e8-4d17-8dde-da0bd7214b5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50c8c84f-f3aa-4e4f-89db-e06845146118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "6cecfba9-e6fa-4d6a-9470-dd2fe1a49bae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfa5090e-bd90-4c3b-8063-302d5cb4c712",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c5925e8-8ded-473e-9c10-11e44fad5309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "028a21ef-b1a0-4df7-ac54-7da8f087ccf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bf6eca1-1977-4a54-81b2-5ecd43d3f350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4886048-8b41-484f-8103-2ba2d81bf534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35d937a9-b0a5-4458-9841-a2013f24b8cc",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c6ca47e-09b3-4691-af95-eeed1d854818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc427f46-b2a0-42f2-bc44-f5031475dde1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50e5ecaa-bcbb-4a70-9fcd-78e6ec871a5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "391fa2f1-fcd9-4af7-a764-60526073563c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afb64c66-6d01-4b14-8381-9963ce5e634b",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87f3c4ba-ccf6-4288-b623-f0f974f10fcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e14f3f5-f122-4236-87b8-9efe35a9ce9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17dca8fe-ae6e-4a9f-8e4d-7cc1ee0c64d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "56d5a270-bc4b-455d-84da-e7c5892aaeae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aba3194-82d2-43d0-9d1e-27cc9eede4b1",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7732bb2-58c9-4a98-a590-52414ca85ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41b543ff-73fd-4451-978d-c7c79439d5a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60d912de-3a25-488d-8de8-210746bd38e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "084a45c3-788b-45f8-92fa-2756733060cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bb98090-6037-4aea-94fd-74982a482caf",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73684a43-ae99-4d6e-a073-7a8c42e38fe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed814b5a-f74e-4440-91b4-1d667aef6df7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd585971-eb84-4422-ba5e-1c9128a2d896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b78aa07-c83e-4e6b-9be1-8d5094c65c00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a9b16ab-e7ac-4a3c-9f7f-534f6a26f2b4",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94dcf337-b9b8-4e91-94a5-7af350ed85c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e51c60d-5265-41df-9ede-e76ea9810817"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1f8aad8-f4fd-4b0e-81f4-7f45c1fb9a3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e10fb2dc-3443-458c-a43c-90c6786b17df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f27c14c-2fbc-49c2-95fd-efa2fef296f8",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaaed3f7-4638-4b2a-be85-df3d0fc97513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d30ef0f-bb4a-427c-9c37-c943fa17c083"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8354a073-53c4-4610-81ae-33f47f27c144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "31efbf73-5cda-4bec-9505-f55348b2f945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de1dc93b-0fc4-46ee-a0f8-17f77ae09cfc",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "247d238a-a1f4-4bca-8661-6da723bff55c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e67ff2fa-447a-40c5-9a62-b53441726ab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00d2bdfc-2878-4a91-9968-7d8b17cacbe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9fc39cc0-3b5a-43ea-a58b-1394c741a6af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "524428c5-44c8-4d57-b911-4f7a72be7217",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf3c9004-bf71-4a3b-8906-4da0b1c7a628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72dd64de-fd31-43a5-a892-137a393f94ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b9824ad-3e82-40a9-86f8-4502392bd4b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e970c86-cdca-4b0d-90d2-e09fa42b200f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4458612-a69a-4ed8-924a-4fc9963ae29e",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2e8ee1b-d49e-4d4b-9f70-1fbe9e5eb08f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c8d1f24-61d2-4f18-952b-7b926efdb425"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaaad6a6-87dd-4eb4-8e37-484a917f144a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "70165f43-d588-459a-bc45-e1c912861558"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7a1fd77-7669-400d-b2a3-7205b7aab1b6",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bf30c99-e6a1-49b8-accf-8f97edf87a55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7cb22a0-b837-4f1b-bfb8-9864526db105"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbbcb45d-f9b5-4ed1-8444-0fe1d179fd0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a017ed6-77bc-4bdf-8510-fd3f40b8954b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa7e8239-aad5-4054-ac43-eafc937222ce",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d136b55b-9c2e-449f-bb97-eba922af9f43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f66e05f4-829b-4968-a11b-68052491d2ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c237082a-1bcc-4099-ad77-f70d5fdf03d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f3a9b6e-7822-4d18-a319-975cd3d1b078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f1b6180-6a06-4e50-a043-7ee5c8bf5d33",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c9b9919-759d-4d74-bbc8-4a57434c3b85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94bc4e56-a56b-4ce2-b0af-21a1500d55ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d46cefb6-915d-49fb-91a1-a49988b529a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3331187-679f-4e9e-8bcf-59ad009e57c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef83448d-8ed2-4c13-a00a-0534d1f4834f",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84c58941-e153-4ba6-9e03-a0d38c761a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f88d0063-d954-487d-9dc5-cf6a92d31965"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00dc9eef-abfd-4697-a10d-db95a6e5fb90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "d9205676-8ba9-40eb-9f94-4c9b290d5e61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c0399ec-b6cb-4b79-8931-3508eb43f1c0",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2592403-5247-485d-a2ec-ef8e5d02ddd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "467a6706-76ad-4389-b3d4-64fe3366a863"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5bc11d3-3346-4470-bd54-db6ccdfbfac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7a6ccec-9f3c-4602-b831-b05a5cd66a9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49db0831-3add-452d-ae4c-cd524ea1eeb1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57880e4e-ef6e-4851-9721-f795bac63c2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c29dad18-117c-47fa-9e65-0c613e8ecd4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcf66bac-d65b-44bd-8c23-c5e90f1a75cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a02aced-dcef-4e0c-a674-463482ce23f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b93965aa-c385-4304-926f-ee525d261963",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9979d15-02c4-4e6d-912c-bdce294e9a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "661dd67b-f700-4ac4-a150-aa9a3cfea004"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cba478f-575c-4551-8719-d0f1af3e848a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "755091a9-95c4-4f69-b497-e5c9bb28e359"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c1a0bce-2c9e-406e-aaa5-7e3af6bcffa5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45e05ace-9e98-4864-b384-b04531259a15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92d63fbc-3d8b-4c79-be26-f3848584444b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ccc74d7-f8de-4c68-81a7-2e86b13c5e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "512eb01d-e4e2-4aad-be04-b879506fb774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f005f27-67ea-4d12-acd8-200c9e9c7522",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ad639fd-f351-400b-ac23-0b485e4dbf36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67c015e6-0aff-4104-9c39-c5844aac2dce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "812d8b44-bc53-4055-a0c9-5dd1378515fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7af228ad-53f5-4cb6-8562-01e9d9aaed19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1546f917-6d93-4d4f-9d45-5875bce8f0bc",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "802245b8-898c-4495-a576-04835fe1d5ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6f299c8-930a-43b7-b6d0-977f63b3fe74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aefb4591-8e44-486b-8181-96dba6d82508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e0a90b7-f199-40a2-84d2-fc1142db04f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59004adb-8e10-42f6-a67c-a63ac406a9a5",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccb4e5ba-f31f-484a-939c-fc3f8488ce48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c38ea971-2e86-4b3a-9514-7e1dc3f68828"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89053be5-32de-4efe-81e7-d6b588095d35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "78eccb6a-0d4f-4ed3-92cf-e603282e5208"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32109fee-59d5-49fd-b2db-95b2d95f5bea",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d136c6a-cebe-4d68-88a3-860620e69ff1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1aa112d2-b50f-4f3a-a93d-1ac3715f7f1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a8dd084-9bcf-48a7-bb06-b8348cfa11ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2824fa3d-343a-4d9f-b903-065e6b6d2b9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae6e025c-ddb7-4b62-af78-1676a752bf3b",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71f321ee-b44b-42ac-b06f-7c71fabbaf7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da23801f-061e-4fe0-baf3-e2c940c2e188"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cdbf9b3-6436-43ed-a14b-6f9b4503cbc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "af47b70c-313c-42d7-a711-b7fb95310d04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a67dfc0-12ad-4a54-9831-0b62a1ccfbd3",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c604ed3-f82d-4fc2-8e1d-66c10c48acfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffa543bc-9e31-4693-a710-d801c873572e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ff6eca2-357d-4661-8646-150a77ba722a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b596580-c4fc-4ce2-ba39-2ec39744b40e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c743748c-b38f-4d42-b6c6-d2286f9e398e",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f87d98a-e7d0-4cd3-af38-026c11768d68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b149a540-f24a-46f7-a0bb-49957143e343"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a6109b6-4eea-42d9-ad7f-7deadacf334c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9a2996d8-bd51-41d4-b8c1-bdb343a67ffb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "425af6de-6869-4aff-a5a9-3edd2cd180ee",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20b83b4d-d19b-4581-a222-52bb4af541c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23093136-1996-4fa2-bd3b-6401148234c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c310068d-e773-4544-8d72-61ae290b3a15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4cac4a9-90ab-44b6-a531-c3f7255c6844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eda44632-4a3a-439a-9d26-1e38242ca3d4",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88646166-9ac2-4651-8a8a-6bb8322a9787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4779393-541c-4af5-b531-f80ab1ea6197"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07192f25-7fc3-4764-a3aa-36f0461f9550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9fef82a-c64c-468e-b1eb-9cdace4e6a94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e578eb07-afb5-40d4-80de-4555380a4be3",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38b701ef-d66d-4f66-a7c0-956a79376a5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ff61bd0-b8e0-45fd-97c6-314c21f0ec91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d274435-c300-4784-8dc1-78dc54211d59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d763762-c5dc-4085-91c3-658f0c7843ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4902ee0d-de72-4cfe-9953-bd6b2e3a3af0",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc93463a-6fdb-4942-b7f6-c745207b5a23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef6b6a9f-51da-4389-ab6a-5ced1f37976c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "693e9b74-9b45-4458-a66b-58137473939e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e442e3fa-3c6e-4211-8a9c-f1392f49eee2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c70250f8-948d-4f3a-b114-cb8fee45e9af",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94f15a1f-5184-427c-a452-bfc3c8782232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6343550c-ba3e-417e-a495-38861c35ca92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07d838b4-cfc3-4a51-bf35-b6045068103a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "01b04f64-3399-4122-b7a6-f68f2bb5d93a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deca69ef-b0c5-47fd-888a-ff63bb101e23",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "376d36b3-d315-4928-99f3-72c2fe8f1eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f1b3765-b09c-478f-9045-d062f792c2cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5d32e15-54e8-45ea-8771-06bdd3ca7e4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "30b14331-7ab8-42d2-90af-cf3afecba3b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "008dcd22-167c-4b21-9559-160f78c51b75",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "988dc29c-4e93-498c-be1c-e1dd88fb40b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49853906-1bad-4b5d-b7fc-1acbabb0c129"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f62e770-e944-4455-9388-c9e48625c210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d7bc80fe-b410-4dfe-afdb-54216c0d2b90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dce0fec9-0725-4b25-98e3-e9e173b9a860",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc866f9f-905e-4ac8-b999-8b46db29a2eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2176bf7-f27d-43ac-bdc5-0ed02e6d442b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24094916-d184-4d00-a7bc-5883d4fe2151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1dddb3b7-334f-4f16-a874-ad0c8c89a7c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb7106d5-eefa-4f9b-8e5c-d56c6dd9b7ea",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "209c0dd2-ac54-4288-b8ee-87be5903ca6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "644fc7d1-475b-40d8-a0b2-d9ece5ec4228"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36ddcc62-ad0d-452f-a992-629a1555443e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f738b6b8-e334-4ba8-8c06-888fbe6b9f40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48cc3377-34f5-4184-9689-afc8af737bed",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cd1082d-a439-40f9-ad2c-d469f75625a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27eb8eb9-e25c-48a4-a0f1-6539a73aa30b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3f5a1b1-ab45-489a-9679-45db0e25431e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fdce93d3-b204-4cd3-b051-e8a60ac280d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "436afe0c-01d1-4403-9e71-49dd2926e0e8",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f00fa29b-6b52-40f7-b02c-628a99571d8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e336ef64-ed58-404e-837a-91f17495a3d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8b7b53e-cbd3-47f1-beed-a90b50eeb2e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d873fa8c-1eef-45d1-a70e-a0e2cd29982b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9649d2bf-b1f9-4be2-bfc7-647927f780a5",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85486db4-7292-4480-ac99-a4164c760e95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98e5479d-5a09-4c2c-8630-7f302604650b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dc976a9-71b4-40de-b794-b0cab91e653c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec034cec-6502-4ce7-945b-5fedcd44250c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58ef2432-d24a-49bb-b378-f882e5155dc6",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66b14033-6e1f-492e-8e5f-71c12701bab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df82afe3-a437-454e-8255-3fd42899d72a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "068c829c-5211-4f1e-ad62-a8c5a3cfca7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "39b4fed5-820f-4508-a79b-7778bb4f7adf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfc677ff-e4bd-412f-9179-3941ef03b38b",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4d6b656-b9b8-49d5-8915-e751919d8848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "711b891b-6a6f-4dc9-b4e1-b0916ef882e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "108c7ba4-82e1-40a2-9e4f-36dcceb88f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3523e2e1-44d5-4a08-9ae1-12cf84b26230"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f5ed13e-af0a-4f0a-8b5c-f506ff0541a7",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca76cf17-ca62-4dbe-ab84-232592faaec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b32aec80-009c-48a2-be67-6b125bac77a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20fd848a-e9ab-4b4a-b957-7870bb128723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "47d22a93-6635-44bc-8fb1-ece4f1681829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a20e73c5-5108-46ab-a03b-72dd9b1ab0c8",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96416b33-4a54-40f1-8d3f-d21b92a2dc8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ff06e5e-4a5d-4bb4-9053-698aee303ac0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71696afc-05e8-449e-93f6-be5bacad2227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "28b53cdd-08b4-410e-9441-d49f563de0fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ae978ca-84e4-4ec4-a816-760ebb966aba",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1931baa-ae1f-4944-a3e3-39c369ccc99a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39bcf3eb-9f32-438c-a982-86004ad884f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4799467d-e223-4862-b5a7-1db0f093273c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "10d14673-8e83-428a-8e46-afe8a09f2576"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c08942c4-2440-4cd7-aace-9c4067278ba6",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "222edb89-d8b6-443a-b64b-a49423ffd8b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee05c428-d04d-41a2-9dc3-8faefa8e18b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c96277d4-083d-4e3d-9c3b-b93bc4ff1ae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "45711b98-dddb-4f30-83c0-0b8fd287b13f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7925ec85-8e77-49c6-9db6-a974f6bc68d7",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69c220ba-51cd-4a6c-abf8-089914135055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "902c4678-9d93-4c35-bfcb-5c8569ae7692"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24303ddb-1807-43ab-a4b3-462fab31398f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa888420-07b0-434f-849e-676152e6149b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a99c30e-f9d5-4257-bed3-3b54e075499d",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6520fcd0-66ff-427f-a1e4-c8f35d66dbd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f0991d8-6a2d-4c5d-8b1f-857f09534372"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "854755a1-8e0f-4815-a696-47afe57cd29c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "421e4868-1dfc-4a01-b130-af3b277ac5fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfaf6b90-210c-4be7-a353-d69d705eb2c4",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00cf290b-fad7-4e1b-8954-1e28a2329b4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51b59370-8c89-4bde-8ec3-c22d762cb4d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cd9e39b-f9c7-4cc4-b7eb-6585d7ca2408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5abb1651-ce22-4f0b-9ba2-822b9bb60239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae7dde86-286e-4112-ade4-afd3b68149b7",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8d9e5cf-79dd-4536-8b86-978f47246dad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33292c6a-3427-4da6-9722-38b641909ed7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "750456d2-d7ff-485e-8a18-d8b2ba9f6908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5d9604a4-73bd-403d-9c2b-c4c2c04ec551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7ae7ed7-0a62-4ad5-b2ba-0ac85787c487",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "012a2fa3-92c2-41de-b7ce-06c0595c680d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e6c1ae5-3c1b-4df6-8bfa-6aba1a45144f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efeb6214-549d-4410-ab15-467cb232f2f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6d8db4bc-9027-40ba-bd5f-43a146e5cb7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f4bae0a-1ec2-4bb4-b802-51259db37bf4",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa3716a2-5680-4da9-9902-77ee4c85be2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5743a275-0cc2-4f0e-bf60-503989cbfa3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec55b71e-eed2-489a-8169-490dfce92d24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "46f5b69b-f032-4661-9f6e-0994f35a65c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e12b4a3-789c-4d45-bd34-4bcd62428fba",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c97043c-a328-4a16-92f2-cfa06bb1adea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f81fe115-77a7-4ff2-86fa-8c5bac3f99db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f5d5cb5-8ccb-4118-b453-66844b48f004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "211355f0-665e-4ef1-9c9c-3f25b24aab68"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bb5f7c2c-97b1-423c-89e5-bd004bcbda37",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "582af00d-1b5f-4955-8d07-b70bba1000d3",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b898391-c91e-4599-acf7-baf9005ea007",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9a4fbbe1-6fb2-4cec-85cf-f5e67a768a1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58b8cc3b-abdb-4ed5-b6f0-df2a18bc16b5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "12f9aeb1-03dd-4545-933b-8a2f2d179c3e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d2e10ac5-edbc-4bf9-abf9-c6b76061729c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ef2efda5-cce3-49ed-a1fd-d8492b63a939"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8fabc105-29ee-4ba2-933b-6283bfa738b4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6de0f02a-8593-4f14-8318-5ce4e298f79f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bc6c0c42-59f3-4c2e-9bb9-772757e5b4bf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "def061d3-f308-4273-a2e9-171e74643c6b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2e6c6d5f-b3f1-494d-89e8-2ba4f8552329",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9f33c7ba-a0fc-4cab-95f8-3f7e32a3a546"
                }
              }
            ]
          },
          {
            "id": "dd2df1d6-e9ed-4240-8894-092453ab4ddf",
            "name": "Positive Testing",
            "item": [
              {
                "id": "116cc37f-1996-4324-81f2-cf0e77f2cb80",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "573cf30c-2086-4918-8d2b-d54c9d03fcc2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e876c353-3a99-4653-8ca9-a731c3f9dc46"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ff7eb99e-5987-4f25-b451-533620d08865",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "82fa8dcf-c03a-4070-afd0-de50c8d11bb8"
                    }
                  }
                ]
              },
              {
                "id": "04aecb0b-1927-4431-80d1-f2703c55c79b",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "93eeceb7-df4b-412d-a7b5-91e8a58915a1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0b2d0b96-3578-4f18-ad1a-de9af84b0e34"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "69f1363c-ec26-4d40-a0a8-1461f3fcdb33",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "dc2a0960-d905-4141-9975-1eac04651588"
                    }
                  }
                ]
              },
              {
                "id": "c162b13e-5de2-4ffa-8ea2-a69600945fba",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c32791b4-f50f-4c1d-9fd5-59b6413a2ffe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "07ccec6b-b913-44b0-ac38-3881be192c6b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9e185f57-c721-4efc-8d2f-6a07fa7b3a93",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a25ee7d1-2a91-41af-a455-25682f5be50c"
                    }
                  }
                ]
              },
              {
                "id": "fd030ae2-ad41-4e62-a010-74d326029b0b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0b41c012-4c39-4772-8bc1-43972483816f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d9126846-805b-4887-86af-a9d62b04997c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f68feb7b-fb24-4523-ab5f-d87d27145cbf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "952d8be0-29f1-4d89-b308-af2483cbbfea"
                    }
                  }
                ]
              },
              {
                "id": "67322b58-9bbf-4800-9b3b-38d06f23c079",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4fa3b944-12ef-470b-a5b4-f676d2c33927",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9a81fb1c-b22d-4ba1-a9af-dc2cdce1a4c1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c864d8ce-894c-44a5-9e8a-938a4dc19a18",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "44ccda8d-129c-4de5-9fa5-0691e6f8c6a0"
                    }
                  }
                ]
              },
              {
                "id": "ee3f994c-88cd-47f4-99a1-3a3cbbe64ec5",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "00903e9a-a9d2-4717-915b-5eeac0c3157e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a1df6a7a-ff14-4558-9afe-707d80732d71"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e0170c55-9874-449e-b343-9ecdbb77a573",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "402de7ae-340e-48e4-9da6-0be2ca5d5354"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9c649f44-0d54-4dc9-a461-14db7bf2d6d7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "077e6416-2267-46f5-8822-924824009e05"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1a261458-879f-4701-a6d4-dee307d22aea",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2595a362-0637-4737-8361-98b4961cde83"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "52699caa-ab7f-4346-9f9d-42893663944a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "4bdeaccb-fbf0-43d5-910f-5d2c917eda5c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e6cc9b0f-02ab-4b1b-89c7-58db642c6277",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ad30e783-46d7-4da6-8b71-0f29415741d1"
            }
          }
        ]
      },
      {
        "id": "ead28704-531a-4cbd-9c13-88043d3341ef",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "6409a2d4-848a-47d0-b8ee-5ea41905814a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "488c695d-eda2-4c75-8a31-6595a168778b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d6e60902-b1ab-4fb3-a2c8-e8ecb34f30e8",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ae9d698-6b73-4f48-87f8-acda36f0412c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1235bc30-c7be-4537-82f2-6a682b11df31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8678a3c-cfe4-49ca-8ea5-0375211e38ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "7afb9773-86ef-44e8-9630-29294082d64c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbb49640-0f7e-4959-ab2f-cdb0a6e32fc7",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24b270f2-0fa0-493d-93c7-478b40c045e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d479943f-8d7e-44a9-beee-c03105917bd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e83d4a2-8ebd-4cdc-9429-cffee75e5807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4913740-7b6b-4c99-9350-8dfbd764827b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ec01662-d9bc-48e8-968f-5bb89d8cc80e",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3ab390f-5328-422e-be67-ce86badcfb3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d14c4a2-cc4d-4431-8377-87cb3d438ffc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af7dd14f-6418-4974-aa8f-623a20fa95e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "32497425-00a1-4f9a-bf41-ea090f357d5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "494d3f87-2561-4b71-b94b-2a842a870f64",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3efa8d75-2f3b-47d3-9f5a-ea6d3e89b5d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6fdd8e3-dab8-40d8-b21b-55a421c0bc23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8903e655-8989-4b4b-b1be-ec079ed8ee31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e879b9a2-092c-4da3-b584-8764659e5c6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e5c60dc-3c47-482e-bbd2-74c8ecb87fda",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e7e951d-fee0-4dff-b4f0-17130e972b8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47c0df8e-8df5-4e93-9f9b-7aec13b4ae49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f822043-dd8d-4025-bfcb-ae6405699751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "701e6cbc-1fd2-4380-b21d-3399d6b9924e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0b6db09-5c61-4898-a638-452ab2f2caaa",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98f18fe0-88d9-4e3c-bd0e-0a34613b9efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "823599d8-e2cc-48c6-a97c-055319358da2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44958d8a-81b3-4d57-98d3-f10b8ae80512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8dbae7f-306f-4fdb-b14a-35394141d0a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9ba6ffb-502b-47d1-841e-887ce7b3bb90",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cbda648-f73c-47c2-b979-780c482dc452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84aa331d-7ba4-4501-8f0b-283f4557bf18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42ebb4c0-4a42-463b-8539-de63db0cb430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "158933c5-4666-4234-94ae-eae4fc0203cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "126e9ddb-2423-4aad-9650-df41062a621c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3874b02c-8604-442c-b479-5d1f2eecfe2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ad52c6c-79e5-42c9-8937-6803c7180276"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc1e5bcd-7f6f-45e0-a2d5-6fa434a5a1d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae1673b4-3cdf-43ae-a992-7872117262de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c8911af-3d21-4614-970a-19f7913760ea",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "443ba078-55fd-4851-9d8d-154abaca69c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "168818aa-ca2c-48f8-b638-12059730c319"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "088dd477-6b01-4d53-aa38-8a385211b8c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac138667-0b12-4545-a754-3df70c5752fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d25f39f7-174f-4f2d-8f0d-a7681fcab5ec",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09681699-06f6-45e3-bce0-45bb71d3f48b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70d2e0d8-9924-4345-8d4a-6792e5ea9c06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "328704f7-7936-4f97-9a6f-40166e1a2de9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "85f1176e-2c9c-47c8-b8bf-bad9008ec427"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f840432-89b5-4a7e-9554-8038896870d9",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaf11827-43d4-4eb7-a763-c4b1b500d9c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d008c0c-223b-49c0-b3c4-e9af1737d098"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "693f10f5-c789-432d-8ec5-4793ed7f5d7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "212d6b16-ae32-41c7-a6f5-4ab84b1834a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecd2cd3c-5e62-462d-9bff-9cd7910f2471",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "938541d5-e863-4553-bdd0-043df028fe6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c5b2733-5f69-4d8f-9039-ae42e49c497c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08a98f7b-bc48-4026-befb-644045c9ee72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4191c8b7-c333-4c72-a346-17fa7850c172"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c82650d-ac61-488d-8410-c9896289fff0",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b58d6af2-d2df-491e-ae54-064deae6e4a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f313dc49-bac3-4d6b-bbee-2cfaeab2fe10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a685949e-d397-45d1-ab52-8f1cf713351c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d0ecbfc-1310-48fa-8f7b-e4a383ba2bd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d749f4de-e469-4625-94a6-88a9c166fe5d",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20edf075-22f7-460b-bb99-3166353fd2cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "046d4e49-b198-4e3a-b311-fc32ce54731d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5d27b85-9aa4-455c-bf71-9786dfc642f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "29ea8a08-f086-44c1-bd2b-0aad49c85ec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fa28d80-21f9-4303-8085-54970fe69739",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f974b93-d9e2-41d2-b0e2-d42b8b3f8563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ed58722-8496-45bd-a811-b6ab5974abe8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24e329d2-b647-453a-929d-a1ee5ac85f61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5b860db-0d7b-4f6a-b2d5-9e6f827ea0f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c9558bf-8060-4e16-8ae0-0777c5b6aa41",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec07585b-117a-4c76-9f0f-675123e3f5ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9753749-7773-470f-b4da-ea3dd4f216d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "816f6413-0abf-40ed-8f96-76f0537c80b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ae3eccb-3af4-4920-9c79-cbeae05ce1c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d559615-0adf-4c47-bbd2-71d778a7220a",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "078fed54-660f-4777-b9b6-c5f5e053e604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfd4a0e6-66ef-49c1-a99c-6cc368efb427"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1123c84e-d5f5-4c4a-94c7-676d7cb4458b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f08c0667-1ae8-4a95-bf5c-30b95f573a69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a81b975f-075d-4f38-9c53-68bc787d5bdb",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e10f2dd5-ef36-4b06-bbb3-a60a1af7d36a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e970fd0-d02c-4ef3-b88f-dd1b0c2daa31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6282157-d6f5-4def-aad2-04288dc77553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "995e2025-0b0d-4fa5-8d21-235657d9dd1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4d13cc6-875b-4c87-94ef-9022b2e4c686",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb7a8a6c-b34d-40f5-95d6-ad99c06df383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84bb091d-2e42-484c-b84e-96f2f24a0dee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdf06fd4-10de-4b82-9228-38a8cc69fc8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7223d7d5-e685-4c8c-9768-421a954339e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "101f93b1-0ff1-40c4-980b-6623ff40fce1",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ffa5b0c-86ba-4d18-853c-3fb82b5bfcdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "398158a0-35de-43e6-a08e-a0a2af834acd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b1d3657-55dc-4b7b-a43f-0c9299d89ddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b333447d-a2bd-4f4f-b12c-8b63671e5fb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "097bf5ee-383a-4dd2-845a-ef310c6bf285",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10b59ad9-10de-435d-aea7-20582dca258b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d95d918b-edd7-46d7-ab13-fbdef748f5a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e05a8d56-1cda-419d-a545-0e568e19f9da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5f7d8d6-63d7-4cc1-8ad6-0b997d71e1f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91b52089-8358-4c63-aaae-c4c23d1dcd98",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0b12f17-cda1-4b90-b618-e4efee9ab1fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dfa72bb-c4ed-4f29-b766-f9949ce64b80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88eee7e0-d8c5-45d5-bea5-0e36a34af6ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "001e7099-18fd-4552-826c-6f0e9c5d2a95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00f478b3-06bf-4536-b53d-f9ff7b90bb5c",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa2624ea-ad2e-4c68-b0ca-888c3d404f47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfa4a098-d45b-4d9a-9265-757878eee171"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a3c217e-47d9-4c8c-8bb6-a5c5860a9b65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c44cb486-58c8-49e1-a36c-70168347649c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6cd9461-218a-4347-a790-6631b0e355d3",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "969e3f59-282d-4cb6-9e8b-4ac7b0936b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ccf6bdb-3b5b-49b2-b9d2-d44266841d31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "178f7767-3a33-4dd2-9560-01d4f9010f26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ccaca13-c934-480c-8e91-cdaeec7c5166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "358a5037-8802-461f-9ec6-71edc441761f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6c8168c-2b26-4ab1-ba63-db5c8cc5c222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc815349-50ae-4edd-8770-7c0242d4292b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a23fbc04-2423-45f8-bf17-939ee8a872e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "867c8505-1314-4069-9100-221f28384599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61568481-d8b2-4ad0-8b39-00fffd5a1617",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56f24427-0cdc-4fc8-8505-7d80a72fd0e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dd439a7-04b2-4b41-8106-a2630e4aba2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3c40a03-1084-444c-97b2-8b5eeef56aed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a98e98ea-c154-4ef2-886b-845386c9d6ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4305f73a-b2fa-4960-9cc0-c5741aab8c8c",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a39e8873-cabe-43be-bbd5-33db459d984d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b46b0ac9-2858-401a-9d5b-7d348ac4a30b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "540ec2b2-7da1-4388-a399-34be043eece4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c96d5365-da9f-4153-bb62-8ba05567db5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dbb3315-1aca-402d-9abb-4d4a74b1677a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c605ae60-3c46-4d9d-b133-8826ada13371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11e560e9-4b6a-4c1d-b392-d4af15eaba5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57499203-eb26-478b-a383-075474c8bf0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2f9379d-6f58-45e7-8c81-6878aece0f6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbd9e9e8-96de-4e68-b680-b26bdc4fe765",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c31ba1b-417d-40a5-bbbe-e11c524a7949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57cf0af2-ce1d-481e-851d-95e8e25c5f42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0af08afc-87fb-4a5c-8f69-39f5362ee935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e08fae9b-cafa-4b9e-8326-04e9ff697a16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12b02ad8-f850-42a1-b6fe-00c97d51253f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4edc9ffc-bff1-47b7-912c-c74e1723bcb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81dafbfb-3178-47fc-8840-2e11532f0f93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b20efa1b-cea0-4097-ad00-5f12a8d3bf39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "66a4c07e-0fbc-4df2-9a23-86c791e70c70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ba7e79b-083f-4b5c-88d4-caff02bee7bb",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77858aaf-dd5a-48ef-876c-0d868efa09af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa227f5f-8de3-433d-bfe5-6228ff26fcf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24867fbd-fae6-411b-aeb5-6f0015bb39f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d85dbe3-7e5e-4778-bfb2-705b6b018033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dc3683a-5896-4982-b752-f16299819981",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "259fbd48-46cc-4f81-9330-83a37c8d31d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a0892ab-55ab-45d4-affc-6e94d619ba23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72ae0928-7fe7-4360-94c8-0ede781a477f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f7a555c-921f-4d69-b499-c136538d51f8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a038e121-4e37-48e4-bf21-95fd168c3ae1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "58fc74da-77a5-444f-a91b-1c384353b17a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c0247b3-f3be-4d80-a0fb-01ac68f88f69",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "806dd54a-fcb0-4827-ac56-dace590aca33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21510d6b-b454-49df-9c06-1df71575574c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "19d1a1e2-3964-40bb-85ba-eec0ebd72092"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "81e3de6e-d3c0-4e46-a613-77bb2024a885",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "65c001ec-7fb5-4e90-9a0e-a92848ef5949"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "852fdc7f-7691-4d2f-aa00-52ceb4bfac16",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "53491be4-c4ec-4435-bdbc-3f8c60335cfe"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "34a10f2d-1fbc-4cb0-be8e-c6163ea3f5d6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "13c98c2b-b92e-4070-94c4-f289722e856e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eea1712e-ae1d-4424-a796-36a3068fb14b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4e9343c7-7185-48de-ab9b-b6eec096aadd"
            }
          }
        ]
      },
      {
        "id": "6881a966-67fc-4cd4-ad1d-6b58acf051dd",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "277d5c6a-8c00-4b77-980e-f9ad2eee8dd2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dcfe7b14-4e9c-419a-add0-1e9aadf4fd0e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ecb8432e-721d-408b-890a-effb7b40c149",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b545d79-ca85-4001-a165-502ebe3caf02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b094d153-c137-40da-b707-394596eec2be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f95000c2-15df-4235-a587-354bba1e6a1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "04555031-ea13-49a5-bbb5-42cbc73c4705"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eec3c37-acb6-40a9-a932-7ceb53e8c96b",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15932028-468c-48db-958f-9a0678a638bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89ebb428-58ea-4a76-9f6f-97d8bbe28a83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5b4a78c-2fe1-4878-9ba2-a4b08d374be6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "aeef9e63-0a21-4383-9f6f-8787497fdb18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ed3201c-2ec8-4625-ae3e-2ca6a5736348",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6b2bfa9-c24e-4b27-a8b5-f5733954e60e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9f282f8-5700-4ce9-a523-4952c6cb4a3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1909c576-1ab9-40ab-8432-5cc1f8cdeaa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f0215b4-a397-4202-8943-75caa3565a8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4978138-2761-4972-9161-dc35e5d5b720",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ff20081-848a-4793-9408-603b2762a878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2338fae8-aa17-487d-935a-cd4941723573"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d959e933-1502-4735-817d-b56ecd4fe0ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6478826b-b7fb-4ff9-94ef-b054c48bdb65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f980e5f0-695b-4e60-8461-f5966f842672",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6b2b8cf-c092-485a-a545-640bae68c08c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e397da95-0bca-4aa8-9b1f-8e0d62a33483"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a41926ca-d72e-4170-a57d-bbffcc2f919d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e4016a6-6f9c-40fe-bddd-f4644221f575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2437356-4225-4839-99a0-9761cac76dbf",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "714820ad-770e-43e8-b527-500fe0e2f8ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25b07f1a-14eb-4f82-8fd4-7bef5135624c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e36582c-0b3b-4ca4-b7bf-5ae51ef6fba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "79eae810-3023-4c43-ae62-9ad41f370141"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c636ff8f-d082-4209-a403-b862e6ffee10",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c73b33f-ea93-4f5f-b081-c4a6ce49653c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cc1a4b8-ed88-4366-8e1a-cc662e026db3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dff11fed-1a08-4017-85ee-fb18f780f00d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6202418-ea66-41c0-8d92-9269a3d55ce6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7453c8f9-6630-41e7-853d-e4c2683415fc",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16db334b-15f4-495d-9cac-520588eb6f51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "931194f7-2a70-4a1d-a5f9-75fb58e93ae8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1004b8b5-2d68-4160-a64c-ff2b77548413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5fb0766-d528-4723-90bb-0b359ed2cb67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d611f92-1df2-4d86-a6f3-14c3b4c3b41c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2215d7ea-b63c-4af6-848e-8393b2962c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3aaa3aa-294f-4bc4-b521-8b8a29067bc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7846bb29-4763-4e4d-acdf-eab4b0c856ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6f3fbc4-e7b2-46d7-9a28-07072b591312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d83828f0-bcb5-4159-abae-8b279111ed25",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d1af780-75cb-4d1f-a7ad-017996f6a2f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea941876-a55f-4166-8a49-2988d488a45f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d2c3446-7b37-4684-9428-25e37c3eb10c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9033cc5-126a-4fbd-b195-315672f5a477"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7515e840-bb4c-421c-ad72-03fcda26ff8a",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b12ba54d-b750-41c0-8516-104823206a17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d406f85-c12c-4ccc-abd6-10422199f0bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51e37bcf-de6b-4155-83cb-8d2d0dd4d0fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a24abb44-7ead-4166-a176-9ff5af8086c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da9b35bb-c12d-4c25-bd41-4345fecd7a67",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4297e30e-d920-4316-a61e-9c8c0c9b9690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a6e1341-877a-498d-906a-3620925ed1e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3478a6bb-d5ae-440b-a888-c6dd9e313b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "67023f3a-a437-47a2-bbfb-d494cbef8185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fd34652-a867-44d9-900f-5bd47cda6345",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d657f900-8451-47f7-a6d4-eb9387ef9a03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3c5a56b-79d8-46c0-ae1e-00f0f6b733fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7290e4d-3e77-4f82-94e6-411653e11e3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7fd6743-9cce-4819-b604-88970062f466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77d22cf4-5a3a-4226-811c-b6bc0135d89a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f0d7337-a9ca-4d89-b0e0-bde49a3facb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fab41c49-1ce7-48ed-9cfe-fc99847cc813"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0064593e-66a4-4194-b39f-63b2d99731c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "872bb21e-7e3c-4bb7-8f71-36c1d9938760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "528c514e-6712-4f90-85bd-32ca51269691",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e08c8824-51bc-4459-a7c3-8ff1d5c186d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90581157-710f-41c9-94a4-0548b8ea256b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dddd889-6f6b-4591-9964-bd9f549770e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "961da213-8dcb-47c5-a557-a866d4e543b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f694882f-87d5-44f6-b249-7a73b8802f9b",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26db25ee-d1a2-4db3-a158-dce9d807d91b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4919a770-d459-438a-a9eb-ec1c7a5bd924"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d10f3fa-7c0d-4e2f-969e-1de4118b2a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "826eb717-914b-4204-9c61-1790b1598d7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd8660de-4fce-42b3-92a6-d1ae5af3d40e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "380e13a4-1380-4e0d-9040-5e5eb56a6bd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84a1b755-c4a9-4812-8951-03781ec646f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6967e678-a451-4fa2-8de0-b674c9cae227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a199104-e07c-4b99-aab5-48080237096c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21f2e721-cdad-456b-bda9-06f8975d13a1",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d42019e-30d5-471f-a81d-f44711c2a125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf7f80ef-fad9-43e1-a8ea-5118c2883f91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31f0ef13-01b3-4bd5-b9fa-7156475cd6c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "33d0fbde-1eb3-44b0-b701-bf6f610f4ac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c9b3fdf-303e-49ff-be51-6ad3f30d902b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f19261f1-1b04-4a88-9ec1-22d6e00fe2ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3999520-cd09-41da-99ab-fe3e79fd3345"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15689be8-7dd8-40a5-8988-6197a56371db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf0d645e-c4b5-4717-9bd4-0a2a5e705e0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82642cc4-8b14-4456-b206-1830060ac4ae",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e47b83f-dfb2-45db-8cb0-23eb584710b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e75ac70c-5196-4e53-9f02-3e1d25f99772"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b925caf8-102f-4b60-9c88-293486bf2d74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "96ec3ad8-25d7-4051-aa12-4fbea46f7c65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0b63919-7424-49fd-b9f6-c9a22b383a19",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a367d0f-c4f4-47d9-9130-cf2c24e44dc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37e6f4f8-eb89-45a3-ab32-d7f59f006d1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd5488d6-1ecd-4a81-8a07-14d642571f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e34f27e-d607-4cab-a296-a99dd3e46919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6eeed3d-8a09-4b6a-82d0-28d0adca12e6",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48e83be6-44a5-4a0a-8376-205ab82b3115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d28e13c-eed3-4a0e-9ed0-74b9cc2173bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f92d1be-3987-4211-ac71-281da47d202e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "27128d4c-7f45-4292-b345-a5b2c3701784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d10658af-e369-4870-ba8d-2b170599e6e5",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a269226-9e80-472f-a43d-3b1f299a0eaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a027a13-f6ec-4fd4-9123-516c105cffcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55cc3179-f46a-42a4-9e42-63352724db18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "98dd1ece-a325-4832-82c5-e950ef145db6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6864f5b2-671e-46b0-8d79-15fe029bcdfb",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aa03302-a93d-4ba0-a451-383bb826927a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97462c46-3bac-4031-8eba-d24a74c5ce46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01651000-6bcb-4c4d-a76d-8b9bbf6bd2cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3b6fc1d-77c1-4e1f-934e-c85d8f9c36d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "591bfb02-68ef-4e7e-88d3-6ff033587a3b",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0158428-09dc-42a8-8f0b-372f565eb207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf610263-ef01-497d-b2f2-dc14c2d3081b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ced4791-ddb2-47f3-8f77-e3804cf17473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6f2bee2-dd7a-4ee0-a68a-3cb1b7743274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3960ff2-9bf5-4003-9eb3-9f262a7a32c6",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a12cf36-695e-468f-a9b5-b39c412f92e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a0a7120-5e46-48b5-9dfc-c09f78d34e5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18939284-9f44-4cd5-8154-3d0aac44dee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db6edcb0-0eee-476a-b4bd-7d8317983cfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37b97892-c55b-4da5-a333-de829503615a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4600c9e7-b44b-40fc-ada7-189c9b058e17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1bb2db5-d5ee-409c-a291-d70f83d9d2ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fab7dc9-2f25-4f0d-9c29-a64495c61b3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38dd1c67-d2e1-4f83-b70d-c77df37f52a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24ce91f6-d0de-4dfb-acc9-567b28646994",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1e52b41-5800-40fc-96b6-ece0f96ed655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0d84f2d-7768-4ac1-b741-b3a9665367d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ddafbe2-9be9-4b0a-9ae9-422347919846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d72129bc-25f0-4c15-ad5a-3a6621a850a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1e1510a-25bc-4c9b-ab03-ee090a6dffdd",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d313c4f-6b75-4c07-95cf-b0bf27e32312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5ca9016-7796-4743-92a4-02bf5a4d63a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49286bac-1753-4117-96c6-4fe0097e6076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "edd9c98b-bb73-4f0e-978e-c2f668ef5c7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f2a14e2-5a8d-4cba-85db-345cc8fdb7ef",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "868a3f8f-3405-4590-b3e1-2f02571bf247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00e80090-1561-4f8c-a47b-3523703c362b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b98c1594-07ed-40d4-a88d-9ea3fada4f07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee21b165-4eef-46d7-a6eb-3f44cd20578e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1eaeddb-eb38-4734-a986-d6c70a133486",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d08e6947-11cd-4057-a190-bd66bbdc5e50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cf84ec1-a826-40bb-b4db-6f3de49e5367"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "644ada15-ba0b-4e91-b375-1916242de9b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "14ee39d9-b2b6-4e78-80f4-c3b1ae14b354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2bc9c19-daba-42cb-8fdf-207f15ae6077",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de8ba25c-5e37-4efe-a854-be083e76a5d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32a31eb3-1d64-4c69-a9ae-27efa0ff2eed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ae70ff9-14db-4066-ab10-4288c6ba317a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a046cb2-0061-44d8-aca4-9d0f7161b6b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dceac1b2-acef-4c45-a22f-dcc04e87123f",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01fc46dc-5d9e-4299-8e93-a173850195aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0383f49-e546-425f-86c4-bb046536fa38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b04e199-7ff0-4db1-a7d4-1364b445498a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f5574a4-0095-48ae-82b5-6a9848c83af9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc35e59c-def2-4f09-aab5-5c3475c70031",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d109d94b-3077-4a40-8ad9-83578d598c75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c94dd1e7-4a29-4d32-a039-ae3608b21879"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ebbef18-c8f6-482d-babf-0c08d4cb70b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cff12573-7f29-4111-913c-3e125c0c07c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26aa679e-9967-469e-b203-41ff99d9dedd",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed5a710d-d9dd-4ff6-b617-564f92032005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fc02618-707b-4eb8-bd91-addd46092b8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "914f91fe-8726-492a-9bb6-7510c2bd6b51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef303135-260c-4e89-84a5-3ff16603044f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7ff5b56-184f-460d-9acc-9df185fab67e",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d8917b9-aac1-4716-91f3-f7168618f7cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c281a9b-f449-435a-9985-32751b22b5af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df92fbb3-5f25-4e56-8823-7986ea81b73d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c3d2404-50f8-4024-9a36-304d595761eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "397b5b95-b331-44e8-9872-243c900a55a4",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08f027f3-3d39-4380-8676-885640b2c1bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad8153d6-4099-4007-8e77-de9b0c383727"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9049dade-e5c2-40f7-8224-9f3e8046e57a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "124eaa89-ad8d-4c3e-a579-ffe88e10db94"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3bb8e70c-8478-4edf-a3ca-cf1765732eb4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4851ae77-2e0f-4b88-a054-dbeb3812b159",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7089e42c-b3ad-4c25-8fc9-8570838e7fd2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "97b4324f-e651-426b-a345-62e2a22b1cfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfa5b7c3-88a1-4a66-b6e1-4f0f08a14241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f7522045-239c-446e-a69c-f43587d07d90"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c20987d3-b3a0-45e9-8484-385b8a832455",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5274257a-5752-4fc3-87b8-57cff9593926"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "02b1e226-d44c-4f4c-b996-767be4f3bc45",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6a621a79-8272-4b60-b20b-b7e3d785113a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "65c28e1f-0dd7-4734-81e9-c1051fb6ecc9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ac05e13b-a314-49af-afe8-4ab7b60856a2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b29347dc-4f76-46a5-834f-8f04384fef87",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b63015a7-e44c-4ba9-a27f-61cb0c65fa4b"
            }
          }
        ]
      },
      {
        "id": "f1205e73-bc2e-4ac7-a0f5-22cc26f49f7d",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "cf049a20-2185-4013-9021-43cb3a7a178d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "12c0a524-58ca-4d5d-a36e-2f754b3d81cc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "af013b70-d339-4df9-bd93-554c1f8c9543",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7db336f4-ea3b-4429-9199-0a3ad3475a3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "145c7b45-f652-4d5e-8a93-1e0384d96d3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8900612d-01c4-4b24-a1af-7648ff979851",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44281b7a-22c7-498c-ad1a-2b46373907bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55f1d9c0-ab2d-4cbe-bcb3-2f4a33a6a07a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7194100e-f245-4716-a2f1-63e1589b5e8d",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88442b5e-9e8b-410b-882f-1b9105a7c86d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7ef2f0f-74f0-4315-81f8-0e6e1708d661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73e3703f-50be-4e78-a205-046102f0f34d",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e658b92b-0fe8-4cda-a0bf-4ff8b60ef2e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbd9ab22-b65e-4755-91c6-5c7c2025abe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "987d9abb-25af-447e-86ad-9e39a994f3b2",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "080caeed-66ea-426d-8879-1df50c9569cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db481739-c244-4e2a-97bd-2099f6e8531b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3cd3052-ed88-413c-beba-e30140ad5fcf",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aadade9-1e72-4379-9720-5486d1970f68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88e255fc-639b-495a-a0ad-a66b89ab5408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "554211cb-ef82-4304-abcf-9af423592be5",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48b4a57b-8d89-4f0b-93cd-6ec817b7b986",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b71321e9-410b-425b-8df0-c057ccfc8582"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28e14a88-50a4-4337-8490-de1b36b9575a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d986cc5-e71b-42d9-bf07-a3b26dadc1a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94b46d51-3594-4281-b5f4-0daaf6f8f66b",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ba005ed-5a7a-4e53-a24d-3c4f9254edc8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8c52112-2227-4c15-b386-7f9e76c61bcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f42bbc-0697-4bb8-8b05-8e7f646c2a5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "758054b5-a13b-4da8-914f-c676413f484a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7017758c-4ef0-462d-aa68-41fb66a19374",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44c0c72b-9af3-45e4-942e-9105080c0de2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d8a089b-f26c-4812-a697-8522fbda476e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d125c03-078f-411b-816a-ef537828c38f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e9415c4-a628-4ca4-b947-3a6e3ec17d3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8410d3a-cbb0-410e-b198-da28a2d76392",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "210dd3d9-da3d-4865-9bf2-a0ae3dd3d7ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "125fd7dc-b3a5-4e77-8bf4-20c808b962ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "905b79f5-33af-4e73-984c-8d7625fb59c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d36ba0f1-3627-43a0-97d7-6c3ed096f983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f687836-7cae-4694-bea6-0cdc3df304db",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "438f7e9d-ab9b-4b06-89e2-4d2babcac21d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8b3373b-f1f8-485f-9bcc-05a5cbdca733"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5db45cf-17e2-4031-953b-70bb428c7705",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61e15b8f-8b14-4d25-bd45-02ed8f09b2a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c679be74-68bc-4f04-93c4-c49e85e19f46",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16abdacb-82a0-43d4-af23-008c88ad613d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e717e0bd-d095-4a81-9a73-b9e40a7af157"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c63d2952-e65c-4809-873e-4154843ed0dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37b40186-1925-4fd9-b7d5-7e1aeb57038b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1060d380-23c6-4cf0-b063-9c98aab53d60",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7c02f25-7eff-46cc-b16f-b2423a87a087",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df6889e6-0fd5-462b-9921-6b8439b4b495"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9db515d-98f5-4487-871f-c7f84026f25c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20a53f04-904b-4906-acce-694a9d29e0e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "381c26be-54a5-44dc-9d8d-cc1851d27390",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df074cc2-f75e-4be9-8b0b-bdceb244e328",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88a397bd-75d8-4771-90d3-9d997aa0f7b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3217e3be-40e7-4982-972c-715e10e0731a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7904e3af-a127-4b36-bc1f-71cdae9e10b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae612439-d75f-4e76-900d-2e04f50492c7",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41678ff5-d0d7-4e32-ae5d-8a5ce071193a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3ece202-6bc8-4724-843b-2d947561fe3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9cb6606-a7c4-4563-b62a-3beb5e575975",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cbea500-5882-4e8b-bc83-ff5eff7f6b6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "712ec47d-891b-4a63-87d1-ddbfdc4f430e",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4b3ca6a-428c-494a-87b5-976c2a9c2dbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92858280-769d-4772-9548-9d3e1ae4ff5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d98f2498-8df5-4019-8c65-233f2cd88792",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "779f5857-f277-40a5-81d1-cf2d182146b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98860f27-d6e1-4c51-b197-4f7589fcac75",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d8502f3-b694-4e00-b8e0-9fab307965dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27a5fbd8-12f6-4fda-803a-6808ed767d65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1e0fdd8-fa6e-452c-bea3-2fe7f0d12d6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3886e233-f910-4189-b8b5-057fe516b67e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bac220d-762d-4de5-be33-e2a8c6e6ed75",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3962c1f6-954e-4eba-9b5a-96609190e688",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0217c066-1c7f-4ef2-8027-51fa7c2f9d47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a96beec4-e376-4f1e-83e4-b0d38aaf1f9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79adea73-8c52-4980-b898-852ac8ce055a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a72df41-f6cd-48d5-a169-c39b2a98e64b",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "896aa647-6ef8-4a75-b460-9b1390ed8abc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b60e81d5-71db-4e5e-a48c-095efa423471"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de43dbe2-aca9-4a63-87c2-e74f941483b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32c585b3-e10c-4aea-9255-50aa4f7ccdb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08509d39-231d-41a3-9e8a-1fd3f861d7d9",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cd570c0-b348-4a22-aed6-e59664ed7cf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "870b7d94-0020-4a26-8d18-bd03fe368299"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92192fc1-5e71-45f5-8071-117f7e521789",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbf45bd3-fa61-4a36-8917-f58a0206fb17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23075375-fe92-4c57-b398-ba378ac41f03",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e67563f0-47d9-4488-991b-e53b4ccf42e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1325acd4-6908-4170-8d0d-263f37dbe9de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63ae800f-5262-437a-9f40-083fe99bd4e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39c0c27b-68d1-45a5-95f2-b48cf2626e64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c1809ae-d4a8-4127-bc2f-a8e1de4cae52",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2af5141-7c28-442b-94a5-e7552d8f04fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90596820-c1c0-44fa-b474-799727a611a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4840ffb-e7f3-4485-a168-93194638b756",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86f34709-4197-44da-87e3-d225706f7bff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d0c1a00-5d2b-4195-91e5-6b81c5a9e2a5",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aeab9f0-6b59-4a32-bb0a-26e953e00c1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "130b2eca-f83c-4a6a-889e-c5a045ca3899"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02ae72fd-8c72-4456-8b2b-5d2a5ad6fad2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f0afe02-10e4-4515-8828-fa22e11e5307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10fdf812-386b-4314-882b-ff833b9719a2",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb09def6-8141-4fb9-b4d4-c869cf36cf5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3b25aa3-e8d8-4685-b4c3-8ab1f9c056a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14b02270-1776-4a5f-957e-68da10224558",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13193e47-95d8-44e4-9f23-17b3783b3380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee7e2ab8-3808-4019-b28b-9fea5d1096eb",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad0ee5b4-e061-40e3-9fe5-44ef06520295",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3437243-bead-4354-8e4b-2574f728aa25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecb887f4-b9bc-437a-9efe-9c57cb9b93ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4da34595-5f5a-45b9-a705-4469e8a6f37f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c1e96a4-3491-4cf9-96d8-ac6df1d3ca41",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5584784f-bbe3-45ab-a54f-b2fc211b4b7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "511df6db-ae93-436b-8fd3-80efb594b98b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74a0c72d-dc03-40e9-b6ac-27609a420347",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84c7427f-b9d0-4540-8c97-38c9a0a303c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32ca4986-d376-4026-a793-29877ead2fba",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb1f54b1-7ffe-4d05-a529-27b2844b759a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c145ef5e-459b-4558-b07a-a6982bfc23d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4711729c-afb2-4c40-95b6-5598af2e6914",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7a32f20-8dc7-42b9-8cb8-955887efe59e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d855ede0-b4d7-44e4-a69e-df2f94d8b7d4",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "594ec628-05f5-4b82-88ca-22e243ba3f4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72dd82ca-acd7-4d74-add8-c16c5d18d486"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8247b223-7754-4e33-99cd-8c0ed2697f67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "960bb470-99e7-4d3e-a1f7-a1de169113a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9f0bec2-eb85-474e-ae70-e72932530f16",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da56de4-d799-48b4-81c4-4528f7127eb5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3353b9f3-f3f1-4467-a374-2cda79d4ebc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0740cb47-5c99-4d27-8fee-ee9e83ddfb2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f568d908-489a-433e-995c-49596874fdf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bc3b8b3-a873-476a-b388-c3c482d4dd39",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efd5def2-3633-48ab-a5cf-f07f40233305",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0f09969-6481-4e48-9753-6f1d2c67e726"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56fe93de-5afa-40d5-9db8-c58e1d7d5b25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb75cc94-b20c-40a1-a7be-af54827f4045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6013d9c-9660-4871-8d58-0d793151366c",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13cab0cd-14e1-48f1-9f48-b952241c9037",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f31b388-7c38-44c7-8b0b-c69ca9f66c4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "962be9c4-1afc-4c1b-8502-cb0529c48164",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47a26abf-0f5b-41ae-93e2-ed98d4a28288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07156ba3-0982-4d28-99b2-0cc4ade4da4d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2beb7a9-4965-4db5-939b-43ef9189e963",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57a14694-cf93-4d36-ab9e-ec8b3ad730f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c16f0ff-ddbb-4eb3-a74e-86ca021e1ff1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9132777a-6507-4ff5-9f74-ff8c2cd9cceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20eedff0-2d59-4b7f-b4c0-0c30839831cc",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf3d2ec8-d72e-4282-8489-944ff64c19ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2f9eadb-5d97-4d32-becf-4bb1df4afc99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2749a013-33d3-46dc-8832-a8b63a11d78e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64d8c698-e43f-4da7-8882-685c20663aaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2867415-8316-43bc-9b25-d48517132937",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f02a320-3f0e-438c-8b7c-6cdfa44c567a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af678a21-3db6-4216-9ee0-e5dbe2575b8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35f0dc84-09d3-42ec-9b26-df5aa81eef8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b3968f7-bdf6-4158-88cd-540973a80485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d75fb4fa-1ba9-469f-9b3b-06c7df6fe9bb",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc539074-399c-4690-ae3f-491adcf22a04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e894140d-cb4f-48a2-a369-8dce33bde480"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71debbc9-e0f2-47e3-8c06-39fa07f7fd41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b9b7429-9b00-4f4f-98fe-143461d7b3ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e158960-8a89-48bd-a181-fe5666c8352c",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddb4a131-921b-41cb-951e-b2b905e965b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "196008b5-56ea-4458-b239-bdeb13540bb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50972357-6f1c-4030-a36c-a130c922c3da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6035195a-e649-4efc-99c6-b02c125ed0c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f79db8e-7c00-4966-b4ab-a37f1fed7d04",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed8ea2c0-4e06-45ba-a7e1-7d29b81e5875",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f53c8094-e934-4ed2-88fa-145ce5d5cdf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef356b4d-2196-41f5-b503-df4c0208d2e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "729c5855-0a9d-47ad-9802-c13cd92e7e35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58f23295-e895-4633-b35c-9685bca90a6a",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26c4dcbd-b392-4a3e-bd62-fbf6e3ae4b57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcef61b3-06af-4126-909f-1b73083834a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad6b0cbb-194b-441f-99ab-31fe76162d64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2381b9ed-ac87-48c2-b645-93d91f18b94b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adacf600-55aa-42b3-a8fb-1abbcd386d0c",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ded7e749-88c5-4237-b73b-3759f115cbcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "352c6483-f4d8-4367-a895-dd6e9556936b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e512f74-9a19-4ddf-b9ad-900799c11827",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73895128-bde0-4795-8c16-f21740a280ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a363b675-1418-47af-b0a7-c9353768c8f6",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e35b7560-0ec0-4475-a3c6-f408888c3d9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8475ad1-4942-4d4c-83e1-16fab2403c99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fb7c7c4-cb87-4bcb-8b49-5799230c378a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3281a231-0b7e-41e8-a15e-9c9731104de2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "345ffb26-c1b1-4585-ac46-6bd0405cc966",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dc0deeb-0d58-45f7-bfec-a1e028f2b373",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3500ed8c-497e-4bb4-8e05-861cd12e7069"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d91ae2d0-e72b-46c2-b18a-2300fefed234",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f951ab54-9780-48e0-b1a1-2d1ca31ff03c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbcff8de-1251-43ed-a89d-b48801074f66",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27b1bac0-2355-467f-8a65-a5af24e2563c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4e8c3cd-6c2b-4061-9a13-c6ec56faab57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b969dcff-8142-4569-8cea-8c50e277c3c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88f499d4-4b54-4018-a9a9-a4c42c58b12d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9dd0055-48bb-4425-b897-f14764ddf84d",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17ede4ce-5952-4731-a716-9f8a5f8e54a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "178b9af2-5815-4408-a409-1003476624f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61dbcbad-efb8-4530-80a3-0acab3ab6335",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb267710-c507-48ef-bbdb-0a708ea93544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f7f1a58-1bfd-4463-a13e-f7d10eaab665",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06f7895d-9c22-4c70-985c-7469bf98cff7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4bdcc81-e61b-41bf-9eab-9fa6b98ed537"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69b63fb7-d48a-4be9-8206-bc425ce7c7d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "581dde33-7bb6-479a-8776-5a74ac9d6fe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd6ede35-9511-406b-a40e-90c3457ed2b7",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1073dd95-7f94-468e-94a7-41467b301804",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f50c93fe-a2b2-45ff-b8c3-b1b5e19e126a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22d7af41-ea0f-4838-b7e3-b1d49ff332b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7659cfaa-1afe-452a-b3ba-3730e4c9082b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f61d8d4-773d-4e1f-a7ce-c9703c237f5a",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07e673a4-377e-4efd-b220-bc0023b02158",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "332e5d18-f7e6-43dd-bb4d-2e087fa42beb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "612e838d-e4ef-4aaf-9e8d-d0930b8e36a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6c61627-146b-4a92-889e-cd28d9804ecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "405ab7d4-977b-4449-9de4-bf358e7527d4",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e40b8e4b-e0a8-4090-bbb8-becc5eedcabf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f823aac8-9873-46d2-95d1-213f462da4c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76acbc51-1619-4fdc-a67b-3517dfe171bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a2063a1-24e2-4012-97a6-805f0d212615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbb4fe7b-8a53-4d1c-b53d-6464525b0e4d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75b4f165-ab98-4f7e-8b77-0f7d1cffd37d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00a7f6fe-28f3-453a-8db8-d039d48d4843"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdf0fc0b-b422-496a-b04b-63e665603899",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c92867a-edd1-4556-b691-af343ac90327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cdde7e1-7dd8-4606-8c57-4cb9c2920a23",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d1953e2-1eda-4ad4-9fad-6b165c89c45c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d7ecf0d-d4e6-45c0-b841-f0ebea613752"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52ef7a0a-fd1a-4caf-b77e-0ebb959e84bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc5f5874-ad68-4b00-83ff-fbef7e281d54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f9ac4d8-2c0b-4660-8a7a-38c2a69e7e3d",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62f03bae-96a3-4928-9ff7-4ae288fbbd1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82123b93-7a56-420c-a411-e07b1c66294a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c6430e2-2447-42b2-b2d0-7ae28374a2d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f859ac6-804e-4f50-a197-8499942c860f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9c8a1d4-83f3-4f3d-b6d6-2341b138f963",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac77bb7d-2863-46fb-9d9d-ddf87996cb8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd189815-a860-4b03-811d-262cb2f84d9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6370c768-673b-4b6e-adc9-3db7905d6cdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a55abfe3-1bac-477a-a050-81e6093fc39a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12e5cf2d-c277-4599-94aa-a8df8b4baad2",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "429f86e8-8fdb-4d3f-b470-ee62bf94f970",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee191d0f-b986-4de6-acd4-85cfe6518997"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc047afd-4586-4df1-b5bf-5185cc617346",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c679d18-1058-409e-9f5d-9ace7c0f2f0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6be2b825-421d-47b5-b1ae-05ed3ae85031",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71a31388-bbda-47b6-b3db-ae4ad7967293",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92ecf2e7-71bc-4d1c-80e2-494f87865233"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aafb01c-fb92-4c54-80a9-aba0f03a15fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87c9a95b-2cf2-4c4a-939b-9b0c27f5f18e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae44fb96-c9f0-4df7-9c5a-7f63fa623aae",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e6cb295-b07d-4544-a65e-b930b84371e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48f6858e-bd0a-431b-92df-af5ceec5eece"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ba2a4a2-c538-4a1c-b2cd-3198c3b9ac45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a321e442-cb1d-4253-af09-6748f44c9789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3b229cf-d08c-42d9-b37e-e61b26a28d8d",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c83ca8a-647d-47da-abfb-aa0e6949ed08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "229506e6-fd27-4891-9909-c3579798d98d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dff757cb-a561-421b-aab0-72cac6ea3956",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7326b7f6-4040-4db8-be26-9e8229cb4fb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68a537a6-b2e1-4767-b74a-496329e41c26",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0accbcd6-a293-4332-bf1e-a5e88c7777db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83f171ec-ef4d-4285-8aa5-e085d5b59f5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06b8405c-a915-48f4-b60c-c15809fcdc03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa0c0714-c227-4aff-90b8-d68af64bdd5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5edb1c40-b4e9-4164-ad50-7f61b6fd1c47",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "934c5cfe-87e8-4c87-bbee-27e88096637c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2049d914-6b4a-48ef-bb55-96c0d84a3883"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26b6beaf-4775-4673-a066-e5e7786a9430",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec7d2220-e7d5-4ebc-9ac0-62df74d63bd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4be699a1-b6aa-478e-a440-fb9027c39bbe",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9893a007-0f6c-4d18-8fe5-2b9b579ee3cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b3081f5-dd09-4fbc-8ede-3628394538b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f1eaebe-3658-4cf0-a592-5f303e406e10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73f30be3-d1f7-41db-87bc-fcf71530f28c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40557fc4-c37b-46c8-9864-ef41d115a746",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f213717c-98ab-4ab6-96f3-dd4d20f48cff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5bd7ba8-0e8f-4d28-9abe-0f967f8adbfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d8812e8-9ba2-482b-90b2-3cca8c8a92cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60c416ac-ad2a-4823-8539-f9ba170a6848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67152456-2171-4256-beaa-f1542e5a520b",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "237214a3-7e07-4d9e-86fa-ec9068f30c4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6995b667-9c9f-4abe-b357-526a0bb1b73c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48824e9c-9f65-4847-93e4-dd33a5dbb58e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76738dcf-bf0a-4377-904f-6e39bbf992d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "177663c2-cc1d-4cb6-86fe-7b0ab1e3417c",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b93f091c-6b67-4950-8c1d-f1d0013368dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72f9f907-b52a-4bd0-8cba-3302c9b41bc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96b16b14-81bd-49d9-8a2d-365baf19cbfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eeec4eb5-ebfd-4400-8470-ed5fdb70a25c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c65e7959-f5e9-4df9-a11b-20448b709260",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c52df97-3487-45f9-9d3e-62cc63ea6cc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3457711e-c37a-43b8-935e-f2cc2570212b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c706c57-7a4e-4cce-b301-08212963733a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbf1aa6d-bc94-49af-bffb-46dd0ef840d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34c8037d-ec5e-4ce7-99d3-bdaa3837d916",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5f37363-d532-49fc-b455-182b3712113b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a5bb8ef-e1ba-415d-8413-c43365aac6a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13a0d97f-2756-456b-9228-9f28493ada31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef807a4e-a176-40b1-8583-6ebb45f68fb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b72393f0-2ace-49a5-9a5a-3a5e7f4f3d97",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1380f8a4-f360-4e7d-ac80-aa3850fa3620",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75dc3ff9-cacf-4bcc-bd58-dcadd7c12ef1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ee45bed-2144-414b-820d-26f930dc5649",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "366b587c-6a68-443a-9a38-c5dc1892e5ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0452f562-6e03-452a-bf6d-756ab036d3ad",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f060128-6db1-4c6b-8030-5399b380b04b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44c58e09-6a35-4170-bbbf-3e6ff16961b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6336a35a-3b77-45e8-907a-269869b3b4af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "627713d4-23ee-4047-bf12-edbc43e765ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d9a9fa1-8a25-43ee-8235-8713e7e388e5",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfd47642-33f6-4062-8080-9a553ea2b58c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "852e4fc3-6c9e-45d9-94a3-292f7a0da190"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea84d050-5caa-4cb5-85a8-24e83f25a34b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1aa0c50f-2b00-4bfb-8100-cbcd5fcd8eb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "061d5cc9-c2c2-4a1b-97e0-227a1c5fce53",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c906149-6d4f-4a31-9cde-75fa41d62c50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a24527c4-9f2c-43c8-b4ab-916db5b13f8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b70bec3-4aa4-4166-88e2-23320c845b98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d5b0209-b257-47f7-a6c1-4ff36fd2be66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83e7253f-6e8e-48bc-a70b-3af1453b785a",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77ce6526-5ed4-427b-8ebe-383c0bdbeb65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92832357-8d13-466a-af64-31d8f0fa071a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f4251cc-dc16-4ab1-b279-07306453dd84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "955cd84e-c2cd-4300-b9cd-cec1617a92da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d334f7e-25cc-4ac3-8465-71351e769be5",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0d0069f-0fc8-4f82-ac58-8530c842ea67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b19f9620-140b-4692-8dbe-6db937b45d7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acdb8892-6e66-4955-ac5b-ae23de9a95cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6331e3c1-1498-4799-84f1-04a37bff6443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18957b41-5a99-4901-8f2d-c4010fd223d3",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82911650-074f-46f8-8622-dfbb499c2d27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74206e6c-5a58-4103-af23-10763abd853f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f47c3009-cad3-45d3-9226-2dc4b31c2f66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94e38d0c-3cf5-439f-a26e-dd4460ae57d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29deb85e-8a99-4af3-b75f-abab8e0dabfe",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd96c6ad-f339-4542-9501-49de76092177",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "daaf0f3f-95ca-4588-acfb-f33fa43964d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1546bf06-24b2-411e-bd72-4e8ae1d52dc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf84fc4c-c66d-4f9d-b1e6-be105301f699"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e50d8eeb-a473-4e99-8374-786a9392ebe7",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca1fc47b-8f01-4692-a978-354f1def84ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6cbcda9-3a2c-4389-8f64-fd7002177c26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8213eb4f-1cd5-4b08-bfa1-8efa7189d25d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "235eee79-5b49-4dcd-a03f-aa2f0bcf8fb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28facb9a-2118-423b-ac27-ed4f8415367b",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "351f3d48-dab2-4b69-8732-fb7a156ceba2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6dd293ff-05f2-4588-9f8d-02301e782a5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "837a099f-9898-4961-a88b-79ee72dae586",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6f3fa07-cc7c-48d1-824d-5686b5ebb82d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbb2f6fc-4d30-4efa-a889-d5db9ede0e5e",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8efad6a4-3b48-437d-8298-52e6bc91fb31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3df13648-9869-4734-bc71-bce0c1212886"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b9de578-8c3b-4133-91e5-4e3a8b2bbcbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3160dca8-d7e5-4159-8ba5-a666df1311c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31e19aaf-90ea-4da7-9e84-2c950a17b9a7",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60f7158b-359c-45d1-a88f-42e0431861a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa406a7a-9ddf-43af-bba7-206b80846c81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ec3bd81-2611-4c85-addc-051904f6463d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb05dd03-4ee8-4ee4-9709-630f25a93815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "216f59ae-f73b-471e-815c-30e9952de712",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d0466ce-ee3e-45a3-a54f-ee54dca81fdb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd232720-c5b5-4149-99cf-443b3b31ff1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "921d16ec-30a0-4787-8aff-c39e71ca1704",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "debb9c10-75e1-449f-bbe4-338330785917"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f9c495-db44-4f39-882f-8b1c3a043911",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd8f4ee4-d516-45df-bdc6-fdfddd1ecfa3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "786bd646-aa62-46c1-b05c-e1fd4eca02c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c50fd71d-7dd2-48a3-b88a-aac50f06c1e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23322b18-a5ed-4961-ba17-6afbd89ab3b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8bbcedb-02c6-42ed-8f8e-306403cc3167",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "533aee96-c64a-44c0-a4f2-e678efecfccc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5e90140-bae8-44a7-9220-a49a708da09d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2306c12b-bed1-4709-a815-ef3a445ecdc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06f09d95-8194-4b7b-96bc-640c41963b1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac30af4b-09fd-459a-9bbc-3edcc607b31b",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79af0825-b8f8-4a74-9abe-17ee5d2a5a9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "336d07d6-060c-473b-aa9f-a6af05bfde3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fba6d920-4385-4642-a8f5-f5c88cb9e01b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3376300-0c4a-4585-81f2-85d7e038aaa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "243358d1-b8d8-4d81-92b2-e9d89ccc2b68",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8183cad-7d5b-4350-8b38-4ad40761cc53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "386e7109-879a-4460-a133-9c220faeb6a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2de4ee88-203e-49b4-b966-fab099773c10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "216a8170-c13c-45de-bd1c-94006f35ad52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ba5bc19-8695-4e85-93a6-f5b191657580",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d15111ca-c4ee-459d-b1a0-9c1a053dcdec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f21897f5-0c42-4c54-98df-e661b507d8ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5536d52-1914-488a-b75a-e801dd7d125c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af0ea626-65e1-4afe-9d18-00d04d259543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3c8d1ac-5fba-499b-b51d-16abf58deeeb",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e872fc4e-fb23-44d8-8846-133af5f1b3ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4a0dfb1-54a6-4172-b3ed-6fd76958c2d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a3bba4b-4ca8-4df5-a84e-6e9c825cfe3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07c74ed9-b21a-45b1-9ea1-d7794e041c61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1225824-4688-4689-8c01-28c93df6e38f",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dfc263a-5fc2-40c1-8c89-0faadafe370d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e58c484e-f94e-450f-9c50-a574cfc7b910"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e782d68-4ccc-4d56-bab3-64f92d61316e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "091153a5-fa2a-4bda-8aca-b609cb31bbe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16944e08-9e11-433a-a6d4-77ed708adb05",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e659183e-ee03-4b95-8292-6f7e1938090f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c26ac0cf-da41-4ae5-836a-5dbe1bfaaec7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ee1c342-850e-46a1-a4ed-91ec411a0ff6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "290139b1-28bd-493a-a6af-e123ad93eeed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fecc3f34-7caa-48fc-9ce6-e88ba60244fa",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7c206e2-9dd4-466c-97f0-26b9f576cafb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7ea8171-d8ad-4f3d-ad26-420476bbd60e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67e88879-5129-4395-8c06-8538824d62df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81e0f74e-511a-4d23-86db-4180130df583"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf710e9f-5418-43f6-a783-04a764649d09",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c354ad7e-048b-497c-ab1d-7f61826ea52a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e94baa60-41b4-4fef-85ba-23bff8d9d3a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e68564b6-2c01-4f60-92bc-38d2389671ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20762ef2-dbd8-4285-bdfc-03b488e94e77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d89a5fc5-d622-4c26-bc5d-7311b0a66b80",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d3e7bbe-52ef-44e6-a7be-75a594cd1533",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e65502b-9076-4fe3-b9ed-a547ca5ace5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "461a8c2f-a0be-41db-aaa9-073f9ecf9907",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7207279b-6534-4e75-b9d3-4853e0d35756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cb2b0f7-3d52-4416-b856-b732d98071ae",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da419dbd-7fc1-4c2d-b9ab-5a639d44f14d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07100c8b-1e09-4f6d-85bf-b2912049b589"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32e051ff-a54a-4e45-ac93-8e1dce444f21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bb1656b-6429-4f62-ac12-ea7fe81a271c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "455a404d-3883-428d-9790-1b57d401ef4f",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f40546ec-c3ed-441b-91f5-d868a844ebf5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afd6f814-ca3e-4410-8cea-ff53f90a894f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3515ba6-12b3-4ec0-9778-c82d760376ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "892571d0-3a78-4344-96bc-f22628387d35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cb6371e-176d-4efd-b63c-33c953c74cff",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08e0c33e-0260-4199-b9eb-1e045899b261",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4987f1f-de08-496f-8ba8-61d8182e94e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6bbcc7f-c48b-4d45-b092-f801ceb47a1e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d387f9a-4326-4a77-a05b-d8211c7df4e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01544679-4ee2-4a5f-a087-0bd5d727371f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df5e9e94-b4cb-4fa2-8952-2be2dd0f5141",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81bcf75c-d2a9-4262-b81e-af09b2bc8095"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e948986c-a817-471c-a907-be26d47fdf2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96f95077-d3f0-4383-8c27-5083617ee814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8132c7d-07c3-400f-9c25-4dff14fa9d2f",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9568bb1d-570c-4284-9597-cd16219cad01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "721cb0a6-5a2c-4c88-852b-80552c32b662"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2969a89-cde7-48f2-b997-60d728ee9865",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "229b0581-52b9-4d6a-b7a0-67fe440bbaed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0680bf4e-8c72-45ad-8861-93916130d9e5",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c86a2ed5-e15d-4957-8058-16986e63694f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf9e8df9-1d7e-4dc5-bc94-3c1c648a6a9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6757ce9c-8d4d-4024-9fc0-382b3fd6d3cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "342562c9-94af-4fb2-b1ea-a1056262d812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30f32f06-9711-4ab5-b3c2-d88d9e651f04",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c415ea3-64aa-4234-9ade-5cc1f9d5c7d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42c96731-4714-4a0e-82e6-9d562b1cd6dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57f2e1a4-9112-4282-8464-d669ff0d920d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6ab5943-c19d-4a83-9ffa-a98e029761b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "743ef7fc-65dc-49e9-896b-7393d3b82784",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e6d26dd-9aba-4148-bd6c-6bd4e18ec116",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f455be5d-ea6a-4cb0-a81c-10800e1376d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad361971-63c2-45a4-98b4-65a285d83588",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6032598-1893-44ad-bae4-0dd827965f12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a3ab941-6776-4e7e-a751-1eec3bf9fb99",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34234231-6d00-4dab-bb57-4a8fab6c3ced",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5338e18-d3ff-46e4-9d41-0873005d44d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ee3e70-9bf3-401c-aa3c-620cd0357fd6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cffcddd7-deb7-4705-9bc5-416aef8922c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56b6bf16-1dd7-4cc8-b301-c074858e49f7",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "763a77b2-605d-4d99-917a-feb4a68222ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4ab429f-baf0-470c-998a-ab8f6ff06a6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "919de684-6e9a-48d6-9bb9-f87737d31579",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9e47e40-9e11-4ad9-9e46-ef7602e5462f"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "91cd089c-cf64-43f0-bd7b-cc04ef684a86",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "857d12d6-2192-4def-a277-fc379fc08efc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "022e3737-ffa9-4dc4-9d17-3afe92ee6130",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5345076a-f641-40c6-96e2-aaeac750801f"
                    }
                  }
                ]
              },
              {
                "id": "93e4a86a-ddf1-444f-a23a-c6ed884e63f7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e77bc4e9-8e42-4467-b39a-b785b14ae8f1",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b099c0fc-2c9f-4a41-9c2b-79c3799dcbab",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "3c6c484d-e668-4f28-bb4b-95f9d12d425f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "824e7050-299c-4038-940c-ae3272f5b167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "106eae7c-263e-47dc-ad36-313a3a1bf4d5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "43e16558-67af-4aed-a1a7-e9fcc5a4801c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fcaa8d80-98e8-4e5b-ae64-7271f344f636"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "aad74bcb-f1ed-407b-ae78-a06be1b2fa0c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a9fa37b6-eabe-47d9-ae66-f2bf142c7902"
                    }
                  }
                ]
              },
              {
                "id": "8df264c5-dd32-412d-9422-0f2d7c00c5fa",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "b4dc3e87-34db-4ef0-91c4-93b71e793033",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48abf4c9-c803-4f90-ab86-654427558db0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "57c234fc-4190-42e0-b5d9-065f8243e21b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1119a6ad-c54b-48a1-9e08-fe3aeaa5eb1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c16ed5c9-3e21-4239-9a19-eb692f24d82a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "94b6e337-8a02-48ff-8407-f37feed8945a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c024b162-5384-48c2-a3ae-2a741c96c142",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "156ae1cf-01a1-445f-b4ba-04c9281e1d19",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "79606e2a-3ef1-4cbd-9e32-970ded669574"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c1c28b7d-5530-4e0a-b9c0-600d138f0123",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f3f397dd-632f-4aa5-bbee-66d88cf24d67"
                    }
                  }
                ]
              },
              {
                "id": "7ef01a10-a4bf-4a78-acfa-0ab54b25e3ab",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ea1c71c4-5380-4afe-8708-495a7fbdf9a5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0dde8e62-7642-4e86-8f71-8e84e17d17de"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f102990a-f266-4b7f-bd3a-0bde9f15173e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7d7a8043-097f-4515-a503-f5f7ecb06be9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d0a6e057-e0fa-42c3-8613-96b8d1575f4b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "6d1b72d8-1f68-4f0d-a793-0eefe77fad8d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d08a2005-807e-42ac-b0af-45803a41a4d9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2a07371d-1d7d-4d38-a51e-731afa902051"
            }
          }
        ]
      },
      {
        "id": "970133a8-cf80-434c-bcbd-31bba0818fea",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "ae0d9de7-0ed0-4993-82b5-fc206ef65bb5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7628972b-d532-4375-a2fa-747322e95df4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f639d811-e7ec-4f89-b976-8d64ab06665f",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f98e1ce9-7382-46f9-9f72-a7e9f4ec5f99",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bf25dc4e-a71d-441a-af60-54e6fe230e22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "739e9e65-1da1-496d-929c-99f38b9576b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2d83b98a-9af5-4eca-b6b9-b8d0dd2c0fe9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "75c077be-aff4-449e-8601-06745eeec1d2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4750432a-c41f-4971-91b1-1b8bc5ce63bc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9056553e-8142-40e5-ba60-903907ba22ee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "12b1ffd0-f6b4-49cc-b9da-49bee2299915"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6efa2be0-65b7-447b-893a-533f010a1dbd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "1586c34f-fca0-495d-8270-26ae3aa065a0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b97770c1-7afb-41f0-a9af-38602aaeb0ff",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "95b6cdb5-a929-46f1-92b8-582b80a840e1"
            }
          }
        ]
      },
      {
        "id": "2ee12a90-185b-4f47-8b69-52f5a57b05c2",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "744147d6-238b-4b8b-9bf3-b14cbb1bedc3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b2b9972d-ac4e-4df9-a3e6-4c597777a9e3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "db3b1d4d-b991-4950-90c4-9c6a757b9b97",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee7ccd17-7c32-4dbf-a022-732ec43ea1e1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f4214c0c-ecc8-4295-bce5-c864a6834a24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65fa1b36-d803-44b6-87a9-2cb8ec626f2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "68a00c33-c2af-4def-9896-4500f9b6f3dc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f07212ff-497e-4286-a9fd-d6af31ac1a41",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e43bc9d7-fd13-466a-a731-07f754112d6f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ac1de5c-1898-4161-9ad4-ba04247ad8bf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6953fff4-80a3-41fa-b092-ed2da47af2c2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "98df8ea7-a0d7-476b-894c-acc1a070d024",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "eaa325ff-8f30-4a70-a508-e499dbd282c7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5f501460-683e-493d-afff-a9745d1ed86c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "165270fc-076e-4a04-b8fe-506dd9ece6ae"
            }
          }
        ]
      },
      {
        "id": "bf412fea-9aa0-48f1-8d0b-fee5669acdbc",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "c87593f6-1a47-4469-af86-fd00cb28a9c0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c1ece3c5-2cc9-4135-adec-d8b9bb5bdf4c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7e2b972d-b9f6-47bf-bbc0-178f7b51c127",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92b9ee5d-f003-4c40-8f16-17dba8dc2ac8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "37176d3e-c520-485e-a69f-cdf58e98955a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7ddbb02-7b39-479b-abb1-5c97c98c4850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "99543b13-4c27-49d5-9474-4cc690b5f6bb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "08c237a2-68a4-4c0b-8446-b9e2c0d0f01d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "84eee699-7035-42d6-a410-5620e76327ad"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2aa03c33-7551-4374-a9ac-e6138bd7c318",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f45b21c3-9319-45cc-b475-30772f6c457f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9753666b-efdd-44f4-820a-51e52119f393",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bf2c6c4f-384e-42d2-9e13-163bc495330b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c353c624-cc14-478e-85fc-2efd95c8e0f5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fdc77000-d0e4-4ac4-87b6-269f03e9e15c"
            }
          }
        ]
      },
      {
        "id": "c7d6f4aa-9338-4743-9544-1f72c813aadd",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e9c17a5f-07a5-4093-8e64-0cad8c232e51",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "174a8ca6-5137-4192-9a0e-95bd3feab95d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "6cff79e9-8060-485b-8fff-047b5d2afb4b",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "12ddbd0e-5799-4044-a01c-98820fbceeb5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c663cf0c-1f2d-4e60-933e-ece16a8a39a1",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 571,
        "pending": 0,
        "failed": 87
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 128.17253521126773,
      "responseMin": 19,
      "responseMax": 1538,
      "responseSd": 217.83965341002113,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1690591103265,
      "completed": 1690591154144
    },
    "executions": [
      {
        "id": "1db9ba2a-be3f-4cb5-b088-760ef9098a3c",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e53b4931-24d9-486b-9541-f824c2a79339",
          "httpRequestId": "99d78316-0814-46cb-b02d-53f813a8907c"
        },
        "item": {
          "id": "1db9ba2a-be3f-4cb5-b088-760ef9098a3c",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "09412dff-619c-4cd9-912e-93fea54b3db6",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 0
        }
      },
      {
        "id": "018db6eb-98d1-4522-a4fd-023a45b48d96",
        "cursor": {
          "ref": "bacff7a3-78d7-4f47-a47d-4a15ab2af7f3",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "159ab9b8-4e92-4088-9ec4-4cde037ba6b5"
        },
        "item": {
          "id": "018db6eb-98d1-4522-a4fd-023a45b48d96",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "897459ab-dd5d-42df-b362-bf65bc7efd73",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 0
        }
      },
      {
        "id": "63aae3fe-8fe6-4681-b3ae-cb162fad5234",
        "cursor": {
          "ref": "71862686-8a50-4179-a553-4c03bfdf775f",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "bdd2a1f1-771b-4a04-bdf3-8bb31740246d"
        },
        "item": {
          "id": "63aae3fe-8fe6-4681-b3ae-cb162fad5234",
          "name": "did_json"
        },
        "response": {
          "id": "2ccf38b2-9386-462c-b1ea-e758a3a85dbf",
          "status": "OK",
          "code": 200,
          "responseTime": 225,
          "responseSize": 1102
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1321bfa5-ec54-43e3-8c30-ac2752fc6026",
        "cursor": {
          "ref": "39fb6cea-258d-45fb-b349-34278c7d596a",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "062e1699-5543-4dd1-8ae4-f98444806836"
        },
        "item": {
          "id": "1321bfa5-ec54-43e3-8c30-ac2752fc6026",
          "name": "did:invalid"
        },
        "response": {
          "id": "c5ac343e-6322-42e9-8093-6d0c9f0aa597",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 300,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1321bfa5-ec54-43e3-8c30-ac2752fc6026",
        "cursor": {
          "ref": "39fb6cea-258d-45fb-b349-34278c7d596a",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "062e1699-5543-4dd1-8ae4-f98444806836"
        },
        "item": {
          "id": "1321bfa5-ec54-43e3-8c30-ac2752fc6026",
          "name": "did:invalid"
        },
        "response": {
          "id": "c5ac343e-6322-42e9-8093-6d0c9f0aa597",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 300,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ad6a5bb-97ce-46ce-9fca-cfe06a5544bd",
        "cursor": {
          "ref": "504f5011-3889-431b-b94f-db4d72b0b1a6",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "fc841ff6-003f-483f-b3eb-82f903953798"
        },
        "item": {
          "id": "8ad6a5bb-97ce-46ce-9fca-cfe06a5544bd",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "7ce2da65-5e22-4025-9289-e7811f2dcf88",
          "status": "Not Found",
          "code": 404,
          "responseTime": 113,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cdf2e5e-ab8f-43b6-b69f-5557bacbfb47",
        "cursor": {
          "ref": "ed364546-cb87-4416-9acc-78b6028f29c1",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "d5618d9d-aef3-4e7b-9c58-337bbc67ddda"
        },
        "item": {
          "id": "8cdf2e5e-ab8f-43b6-b69f-5557bacbfb47",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "6db8bf27-7c93-48c5-b9ac-05d0e80fd65e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 67,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8727ba7a-ca13-421e-a08f-df8c9f11fccc",
        "cursor": {
          "ref": "837367c7-ea14-476d-999d-0198db0e5bf3",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "51acfa00-e0d1-4017-9fb5-e756953a312f"
        },
        "item": {
          "id": "8727ba7a-ca13-421e-a08f-df8c9f11fccc",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "cd693b0f-adef-427d-bf80-e28ea0d15ca5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8864978-ca74-4f3d-8cd8-df9a891d36e3",
        "cursor": {
          "ref": "3cee5ad7-6a43-40a8-bc82-736f2cd3a637",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ff14ed4c-d778-4e50-8bc0-c3f5237ce80c"
        },
        "item": {
          "id": "b8864978-ca74-4f3d-8cd8-df9a891d36e3",
          "name": "identifiers"
        },
        "response": {
          "id": "1d2dbb39-708b-4035-a9ae-87b86e48a582",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 1118
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3ac4554-3787-4412-a0e4-015a75347b3d",
        "cursor": {
          "ref": "6a919801-b475-4858-9f03-db7a31c96c10",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "759102a9-f9be-4b3b-9114-f770f568f946"
        },
        "item": {
          "id": "a3ac4554-3787-4412-a0e4-015a75347b3d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "6d1a2a8b-943a-4650-a31f-6c203f1a16c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32b45bfd-c45e-404e-be97-1770b342bd2b",
        "cursor": {
          "ref": "93851677-cfe6-4beb-86b1-7c2c1a14cf6a",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e0829ced-9628-4a2d-ab20-0a94cb91b66f"
        },
        "item": {
          "id": "32b45bfd-c45e-404e-be97-1770b342bd2b",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "5a6cbf87-ef4a-40fb-94ca-3d09815dff6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9d928b9-b6de-4ea3-bdba-bebd26d2e5a1",
        "cursor": {
          "ref": "c585e60c-f567-4e72-a894-92ce3bd353b8",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "29ba3e59-dafe-48c9-9975-b4cc31d7c28c"
        },
        "item": {
          "id": "d9d928b9-b6de-4ea3-bdba-bebd26d2e5a1",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "d6bbee26-942c-429c-ba3d-37af7455655a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d05c6fd4-2f65-452a-8903-8627b2ac6aae",
        "cursor": {
          "ref": "fa109b2c-5ed0-4b54-bd6a-1fe5e5ab9341",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "99fdbbcf-0e12-4a6b-b3f1-113ae819314b"
        },
        "item": {
          "id": "d05c6fd4-2f65-452a-8903-8627b2ac6aae",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "de9d9c2b-e581-4d43-8685-e10fc21087a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "743e679d-6a02-4390-b80b-fb8b57cae59f",
        "cursor": {
          "ref": "c9c612f7-bcd6-477e-8748-292c318cb00d",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b2c5ffdf-c3cf-44e1-b3ab-094f8ca12064"
        },
        "item": {
          "id": "743e679d-6a02-4390-b80b-fb8b57cae59f",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "1cbc08ba-ab89-459d-a054-6b0e119a47ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7198aaf1-1786-42b6-b925-f97a2066492d",
        "cursor": {
          "ref": "f8421134-f73e-4447-9b92-f6f33dc5aaf6",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "4f27a970-c223-44f0-8aba-a1dd8f1f5229"
        },
        "item": {
          "id": "7198aaf1-1786-42b6-b925-f97a2066492d",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "2bfe1c9d-27d3-48be-92c3-75c7957e7946",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a40f7705-e8e9-40b1-a277-55faaed146b5",
        "cursor": {
          "ref": "e94f7fbb-0714-4589-9c85-a93003207b3c",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "59de57d5-2e22-4af2-987e-26210c5b2bd9"
        },
        "item": {
          "id": "a40f7705-e8e9-40b1-a277-55faaed146b5",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "11b8de7c-4d94-4bf6-9299-ac90b670e60b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cfb9194-a7c9-4e22-8319-eace9e79879a",
        "cursor": {
          "ref": "24a6f634-e85d-41ff-a8cd-31276a647630",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2bb0560d-aa0c-4435-ba7d-c06a34a7bf4f"
        },
        "item": {
          "id": "1cfb9194-a7c9-4e22-8319-eace9e79879a",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "b7226a10-43e9-47bb-a661-8c65a4bb9469",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dbf4e5a-6763-4a67-b6ca-bcaf8ba22ad4",
        "cursor": {
          "ref": "ef988c57-653c-4995-85bc-7228a5097c78",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "ad3d5167-e04e-4b09-8aff-7a009a5169bf"
        },
        "item": {
          "id": "8dbf4e5a-6763-4a67-b6ca-bcaf8ba22ad4",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "8d0bd576-695f-47f2-9064-4a65ece7c9ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ebbe6f4-a5cc-49f2-a4ac-631504bf4db0",
        "cursor": {
          "ref": "c5a6c03f-3cb4-409f-8288-bb24cd0ac555",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "12982fcb-ed7f-4ee2-ba18-218af726ccb0"
        },
        "item": {
          "id": "1ebbe6f4-a5cc-49f2-a4ac-631504bf4db0",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "ea1bc3a2-f7ea-4a00-8ed3-461c6d6701cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a61b49c3-3360-49ea-bd3d-01f77477ec97",
        "cursor": {
          "ref": "bdc01ed3-74cc-47de-948e-9ebbb26c94b9",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "615e69a2-71e5-4156-8583-0cf1a72447a5"
        },
        "item": {
          "id": "a61b49c3-3360-49ea-bd3d-01f77477ec97",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "e06df0ea-81fa-43b7-bb31-dd0a866a3ee5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45ed2887-abe1-4ed0-b559-e4c85362ba80",
        "cursor": {
          "ref": "8d399d10-d2c1-4bf3-bf0f-4d48b4cc135a",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f8f21b9d-7e56-42ec-a76b-e07a350b0c83"
        },
        "item": {
          "id": "45ed2887-abe1-4ed0-b559-e4c85362ba80",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "a3811bf6-8ccb-45aa-95bb-b9d4a6d8ac3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e59e4f30-9b12-42ac-abcc-41240383cd7c",
        "cursor": {
          "ref": "a78f0b71-c52f-4d56-b44e-697604d6c4ae",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c700dc4a-d211-4300-9883-0f044f0ab519"
        },
        "item": {
          "id": "e59e4f30-9b12-42ac-abcc-41240383cd7c",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "1c82e819-ed2f-4f47-8ca6-82bde42292f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92e9d3b2-9d8b-43f9-9d88-bc58987c2e06",
        "cursor": {
          "ref": "59857937-a08c-4290-b0b8-7cd082f2f1b7",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "4f742792-6e91-43fb-ba7e-2e68aecd4818"
        },
        "item": {
          "id": "92e9d3b2-9d8b-43f9-9d88-bc58987c2e06",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "3f46b6b2-3ecc-4fb6-80d5-779c49c2e6c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5df41476-9652-4190-bc5c-5b08cdb50527",
        "cursor": {
          "ref": "02d364e1-25ef-43f1-ad0d-2e44a0bf646b",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "3564d12a-8356-40d9-87c5-f4d0d07c5499"
        },
        "item": {
          "id": "5df41476-9652-4190-bc5c-5b08cdb50527",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d31bd43a-b8df-4dba-b911-98684de9ecd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2ca225a-c634-463e-ace9-efe0affb1085",
        "cursor": {
          "ref": "54240b35-c8ed-41b0-a0d6-54c559a49d7e",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "77a3ad5d-db23-453c-9aff-ffd83c9be447"
        },
        "item": {
          "id": "e2ca225a-c634-463e-ace9-efe0affb1085",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "25d5349c-5a81-412b-a189-1f235ab09dc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eda7abd-512c-43be-9ecf-381108ac06e2",
        "cursor": {
          "ref": "6d9e1b36-4933-4a72-931c-ce877b6dc54f",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "db1b8bd0-ae44-459f-bd6e-cca64e4c675b"
        },
        "item": {
          "id": "5eda7abd-512c-43be-9ecf-381108ac06e2",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "18abd3b8-b2aa-4685-a8a6-5228cb7a6c11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06855fe5-c1cd-4951-a52a-1e692568b59a",
        "cursor": {
          "ref": "ddc06d51-e36c-47f1-aa3a-c1161cd6545a",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "10cab607-e6dc-4dba-9329-6bf4cf8f9d66"
        },
        "item": {
          "id": "06855fe5-c1cd-4951-a52a-1e692568b59a",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "4f90e088-54ad-42b0-a3cd-2d0b253a3a34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60a683f2-959a-4360-9fbc-99bdac8dc1dc",
        "cursor": {
          "ref": "b98d12ff-c627-4b06-96e1-ff11a6c8df98",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "10afcfad-a030-4cf1-aa82-a9d1675e6776"
        },
        "item": {
          "id": "60a683f2-959a-4360-9fbc-99bdac8dc1dc",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "2da3c59f-44a9-454d-9fe5-4969e6529883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27545611-97a8-4ad7-915f-70885eac962a",
        "cursor": {
          "ref": "2074c16b-c405-402e-b987-3c2333e97075",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a97360b7-a8f1-4985-bedc-25b312e964e6"
        },
        "item": {
          "id": "27545611-97a8-4ad7-915f-70885eac962a",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "e4639a37-4dac-43f3-abde-89d8bbd4226b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8d19810-3673-4314-a78c-cf322fc04fb9",
        "cursor": {
          "ref": "4c4d1b9f-d0f5-4d40-887e-791a0c5567bf",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "c4d979ed-d726-4c27-aa4f-cb8108581961"
        },
        "item": {
          "id": "e8d19810-3673-4314-a78c-cf322fc04fb9",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "794cb225-57f4-48c0-ad5a-f1fc657c766a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccf543dc-11a9-4230-a9a9-764e014a0535",
        "cursor": {
          "ref": "aee83bd2-34f7-4b43-b20f-33a3474ccb21",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "706207ea-4a44-4134-9704-0b465574b53d"
        },
        "item": {
          "id": "ccf543dc-11a9-4230-a9a9-764e014a0535",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "68f96730-e2f2-44bb-a484-a96196658c53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a73e1e85-2173-4d05-855e-3b505521d804",
        "cursor": {
          "ref": "32bcd61f-a1a0-48a4-94d2-7c8b9087f2db",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "5bfa1d86-6a34-4d77-a2aa-948beb66b6ab"
        },
        "item": {
          "id": "a73e1e85-2173-4d05-855e-3b505521d804",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "82aba5e9-27ee-431a-8702-af3995e3d3e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3325bd6a-3438-4846-affc-98047c280fc7",
        "cursor": {
          "ref": "dc8fe3b7-292d-41b7-af70-b43f3a7a89e4",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "7666da51-589c-42b7-bf23-0481b077982c"
        },
        "item": {
          "id": "3325bd6a-3438-4846-affc-98047c280fc7",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "be7fa834-927d-43be-9379-cfb4286b5ea2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d72d15bd-26b9-4710-8120-992731df5ac0",
        "cursor": {
          "ref": "48cc1bb3-29cc-409f-ac31-1aa2118b9c02",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "5f6b522c-b997-46a1-a506-d181095a88ae"
        },
        "item": {
          "id": "d72d15bd-26b9-4710-8120-992731df5ac0",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "9a53fc37-6fe2-471f-981d-42ec3d865b3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c997bc93-8f43-4e93-87bf-87486d6ff41e",
        "cursor": {
          "ref": "8fc11d85-5da8-4e2b-b68f-f40e92269bf3",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "e30b0b39-bf32-475a-ac8c-f9f07218add7"
        },
        "item": {
          "id": "c997bc93-8f43-4e93-87bf-87486d6ff41e",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "f9bccb48-22c6-4313-b66a-4c8e53dd4dd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f7690cf-294a-4f02-8557-7ddc6616b9f5",
        "cursor": {
          "ref": "30560757-1f9f-44fc-a406-53be4ecce9e9",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "d0b74dbc-9e54-48b0-933f-dc38f630914d"
        },
        "item": {
          "id": "6f7690cf-294a-4f02-8557-7ddc6616b9f5",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "178c1007-47da-412e-a52e-cb05b028b376",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f14bce8-8391-4a6f-95b3-cf145721d9a1",
        "cursor": {
          "ref": "02c1b243-cc6f-4f3f-92fd-fcd1a093a420",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "5143afbb-d15d-4ec8-bb7e-0bd0f3405c68"
        },
        "item": {
          "id": "5f14bce8-8391-4a6f-95b3-cf145721d9a1",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "d20522ee-364d-40d0-ad35-9518e50b5ee1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32189365-8f68-4d34-824f-6760e7eeee51",
        "cursor": {
          "ref": "ee764bd7-5f8f-421a-9d66-bc9192e0f368",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "ce9dafff-9e3f-41d2-b882-67d260eafd5b"
        },
        "item": {
          "id": "32189365-8f68-4d34-824f-6760e7eeee51",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "500cf600-230e-4c81-a8af-7c3451a70f6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83d2f05e-b848-43ba-a4d3-39df0d382a2f",
        "cursor": {
          "ref": "9bcaa910-1e16-4ef5-b9c0-693d7b33e30e",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "6c483c1a-e0ff-4e20-b9fb-1cdd792e3016"
        },
        "item": {
          "id": "83d2f05e-b848-43ba-a4d3-39df0d382a2f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "edb79de0-fbb7-499e-9868-c6dfdf636fbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "909f5e2e-b260-4c17-a346-5e61e4e23604",
        "cursor": {
          "ref": "a0635280-4f95-45b7-9f5d-40d2e84f00ca",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "7e5f8d5e-3bfc-424e-a3d4-2e7fb0bc6605"
        },
        "item": {
          "id": "909f5e2e-b260-4c17-a346-5e61e4e23604",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "9d566566-af3d-4b56-a681-fc110a683735",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 73,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "af973991-5972-48ca-b40f-3de73fbadc20",
        "cursor": {
          "ref": "229b0b12-6c47-4778-86b8-01bfc6c3b76e",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "8eb47387-8615-4447-8311-9a0a4fa3aa84"
        },
        "item": {
          "id": "af973991-5972-48ca-b40f-3de73fbadc20",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "16e1985a-678e-4774-8cff-11bafba2e6c9",
          "status": "Created",
          "code": 201,
          "responseTime": 1538,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "9312430a-2796-4009-9af2-175056ae92f3",
        "cursor": {
          "ref": "fc55c659-845d-42cd-ad90-0f2afb305a41",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "72bf9407-e475-47ef-b3bc-1895490a3741"
        },
        "item": {
          "id": "9312430a-2796-4009-9af2-175056ae92f3",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "977cbf9e-3d72-446e-80b3-4ddf9d13cc1d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "c3ddbef6-2698-4956-ba54-7ec5483895ca",
        "cursor": {
          "ref": "2d6c8030-fe47-4b99-b43d-bdc3a684954a",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "30b9e758-a4f1-42b3-acc2-91601ad3f239"
        },
        "item": {
          "id": "c3ddbef6-2698-4956-ba54-7ec5483895ca",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "e4ac6977-ed31-44b2-aa7c-6e1913002c17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f09374c7-4b12-4049-bec0-57dac8abe9a0",
        "cursor": {
          "ref": "f261bf4d-692a-4629-ba53-74fb219020c3",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "fcd0401d-634d-471e-834a-b5c97a74eeef"
        },
        "item": {
          "id": "f09374c7-4b12-4049-bec0-57dac8abe9a0",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "3eae78e7-dc24-4992-b846-d45d64935239",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "3b5523b1-fdde-49c6-839e-332e98d1d230",
        "cursor": {
          "ref": "30a43e04-9a3b-4b5e-805f-4f5979e01c8f",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "2bbd4ed0-fdba-404f-a935-fb92efee4826"
        },
        "item": {
          "id": "3b5523b1-fdde-49c6-839e-332e98d1d230",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "ceb843e7-f83f-4b5d-85de-aadb3c80a50f",
          "status": "Created",
          "code": 201,
          "responseTime": 1077,
          "responseSize": 752
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "ff10f771-c24d-4285-a2a1-7276413ed406",
        "cursor": {
          "ref": "606ffb71-a806-4e2d-81e9-47fc173056e9",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "d084f60e-2dd6-441d-a0d2-95c5026942de"
        },
        "item": {
          "id": "ff10f771-c24d-4285-a2a1-7276413ed406",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "3c77137f-f9de-4b5a-a2fa-e35dd61814bc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "701e5e7a-6124-4925-a637-07429c4142d8",
        "cursor": {
          "ref": "92bf6720-9dce-44b8-993b-0e9ec6e0e82c",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "648733bd-c4e7-4aca-b7bd-2b6126b1f063"
        },
        "item": {
          "id": "701e5e7a-6124-4925-a637-07429c4142d8",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "df155515-db5e-48bc-a1cc-00125a73e6f4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 595,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "4e67ad98-0ad1-47b2-a91f-a4900a6cd00f",
        "cursor": {
          "ref": "c6b06daa-89a4-4971-bad5-a0bc6e1073f9",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "f121c03a-d651-49b3-bab3-8ac91fa607d3"
        },
        "item": {
          "id": "4e67ad98-0ad1-47b2-a91f-a4900a6cd00f",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "3f05e26d-6760-441b-b0f7-77853da6944d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "c2563725-262e-419d-9fce-a50c297d4b06",
        "cursor": {
          "ref": "561b9e3c-6259-498a-bc64-8039a21f9234",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "ef3a0fbf-d2ad-4bf5-8fc0-f3b87b245317"
        },
        "item": {
          "id": "c2563725-262e-419d-9fce-a50c297d4b06",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "bae0c202-d7bd-4bb0-a49a-effa0af744c8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "f1caaefe-4013-4676-9c0a-7f725b5d04e3",
        "cursor": {
          "ref": "bf733b9c-1cd8-4721-acb7-1df7af994181",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "d36d6299-5452-40e9-9750-b0f7577b44cf"
        },
        "item": {
          "id": "f1caaefe-4013-4676-9c0a-7f725b5d04e3",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "34fbd232-3a7b-4c8d-a497-585b51ae8d80",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "de524679-82db-4824-9087-18176a5db2a6",
        "cursor": {
          "ref": "1177c82d-8a98-4a70-b4ae-77554daf131c",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "9392877c-37c8-4945-bea7-9f242e10b673"
        },
        "item": {
          "id": "de524679-82db-4824-9087-18176a5db2a6",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "8e7f39d6-4000-41f6-ba51-8612a8a5eabb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "dfa5090e-bd90-4c3b-8063-302d5cb4c712",
        "cursor": {
          "ref": "bd9767ea-44aa-4529-af80-b8288b18bb10",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "91bdcd57-9029-4c30-8425-ff0ae55391ad"
        },
        "item": {
          "id": "dfa5090e-bd90-4c3b-8063-302d5cb4c712",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "ded3b92d-bded-4cb2-98fc-a2d08ad7f1ac",
          "status": "Created",
          "code": 201,
          "responseTime": 807,
          "responseSize": 759
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "35d937a9-b0a5-4458-9841-a2013f24b8cc",
        "cursor": {
          "ref": "1c464369-df12-4553-bd23-55141b9a0bcb",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "2070796a-8da7-4ff8-b2af-3ebd48c79d66"
        },
        "item": {
          "id": "35d937a9-b0a5-4458-9841-a2013f24b8cc",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "9e3568b8-a197-420f-9078-574c366afc99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afb64c66-6d01-4b14-8381-9963ce5e634b",
        "cursor": {
          "ref": "22fa3bba-b2f3-44cd-a846-b70c51280dff",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "dcf8f0f7-13c7-4e04-b3b5-bdadbdf90097"
        },
        "item": {
          "id": "afb64c66-6d01-4b14-8381-9963ce5e634b",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "22d5ec16-cf62-40e7-9443-5f413f99bfee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aba3194-82d2-43d0-9d1e-27cc9eede4b1",
        "cursor": {
          "ref": "472835e4-902e-4a45-8a84-501bfa214891",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "a74d0d1f-15b6-43c2-b3f4-bc5896ca1e38"
        },
        "item": {
          "id": "0aba3194-82d2-43d0-9d1e-27cc9eede4b1",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "73042c24-b783-49de-ab70-e2560d7023c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bb98090-6037-4aea-94fd-74982a482caf",
        "cursor": {
          "ref": "1bf3dd24-7797-4dee-93dc-aa163d4c944d",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "acffc095-4f1a-4b12-9685-c10c486e6e29"
        },
        "item": {
          "id": "1bb98090-6037-4aea-94fd-74982a482caf",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "5d0d02e1-c630-4438-aba3-e42621d5e3dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a9b16ab-e7ac-4a3c-9f7f-534f6a26f2b4",
        "cursor": {
          "ref": "fe4bc929-c902-4b35-9beb-00bd94260953",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "e4f70dd0-2457-40d7-80e2-c3454e78533a"
        },
        "item": {
          "id": "0a9b16ab-e7ac-4a3c-9f7f-534f6a26f2b4",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "b594219f-28af-4d0d-9157-2c4cf37d8d45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f27c14c-2fbc-49c2-95fd-efa2fef296f8",
        "cursor": {
          "ref": "5dca8736-22ff-4e8f-b1c7-e8ac53ffc7d0",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "ae0f4237-dcf4-4dbf-9679-f9d0c6a1c606"
        },
        "item": {
          "id": "8f27c14c-2fbc-49c2-95fd-efa2fef296f8",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "0ed2e06b-7e08-4cf8-b2e0-9e0e8797fd4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de1dc93b-0fc4-46ee-a0f8-17f77ae09cfc",
        "cursor": {
          "ref": "5a000234-d5dc-4072-97f2-6e8400e28556",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "8897e27e-cadf-4fed-9e40-93433a5587f9"
        },
        "item": {
          "id": "de1dc93b-0fc4-46ee-a0f8-17f77ae09cfc",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "2b85ed36-b719-41e6-a41a-159c02b67701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "524428c5-44c8-4d57-b911-4f7a72be7217",
        "cursor": {
          "ref": "b0730abf-e345-42d2-a44c-fc2a22ca3373",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "a9969acb-f628-4bf0-a1b5-0b94aead13bb"
        },
        "item": {
          "id": "524428c5-44c8-4d57-b911-4f7a72be7217",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "782aea00-c3db-4793-bff4-1adbae877e76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4458612-a69a-4ed8-924a-4fc9963ae29e",
        "cursor": {
          "ref": "a76c1eee-3be1-42aa-8085-a66b64744095",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "0fdffb45-95f6-469a-af59-6260c7c90492"
        },
        "item": {
          "id": "e4458612-a69a-4ed8-924a-4fc9963ae29e",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "424024f8-9425-4dd1-b77a-815d5346ccbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7a1fd77-7669-400d-b2a3-7205b7aab1b6",
        "cursor": {
          "ref": "97a503ff-01cf-4905-b99c-793f8ace38d9",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "7509256f-7a4a-44f7-a15e-863068a84498"
        },
        "item": {
          "id": "e7a1fd77-7669-400d-b2a3-7205b7aab1b6",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "ee6f6ec0-c153-4098-bfbe-08f60c2d0656",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa7e8239-aad5-4054-ac43-eafc937222ce",
        "cursor": {
          "ref": "e266ae5f-565a-477e-9e41-25bea281a0ff",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "25dd105b-94ec-43d2-b1de-aee786160a0c"
        },
        "item": {
          "id": "aa7e8239-aad5-4054-ac43-eafc937222ce",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "31e16532-49f0-4a59-8b28-dbe5697dcc13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f1b6180-6a06-4e50-a043-7ee5c8bf5d33",
        "cursor": {
          "ref": "c5a684de-e952-4b8f-b407-8ca5566a9df1",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "f16a9c39-1bf1-4e06-aaeb-23b534d2a590"
        },
        "item": {
          "id": "6f1b6180-6a06-4e50-a043-7ee5c8bf5d33",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "7d9f59d0-fcb5-4d77-8972-493882587ee7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef83448d-8ed2-4c13-a00a-0534d1f4834f",
        "cursor": {
          "ref": "893dd93d-b3dd-4293-934d-67092399cf66",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "3e6d627a-feaf-4d6a-9aa6-9a785319814f"
        },
        "item": {
          "id": "ef83448d-8ed2-4c13-a00a-0534d1f4834f",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "2a86047f-5d52-48aa-899e-eb0a82164b07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c0399ec-b6cb-4b79-8931-3508eb43f1c0",
        "cursor": {
          "ref": "f39177b6-29e5-4ec5-8f8b-c02791c24946",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "bd011dff-e330-42bd-8ce9-b039eaa27afe"
        },
        "item": {
          "id": "6c0399ec-b6cb-4b79-8931-3508eb43f1c0",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f584f917-08fc-4395-b19e-db324de5963d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 674,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "49db0831-3add-452d-ae4c-cd524ea1eeb1",
        "cursor": {
          "ref": "ef8e9f2f-8c9b-4315-8355-7a79b8a02f15",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "2bf6d333-28f2-4014-ac8a-7db5ab9672ef"
        },
        "item": {
          "id": "49db0831-3add-452d-ae4c-cd524ea1eeb1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "3221d00e-c3f1-4bcc-aae5-4eec8ca1991f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 632,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "b93965aa-c385-4304-926f-ee525d261963",
        "cursor": {
          "ref": "33c6799e-4846-4eb2-80a9-36d39579fcf2",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "1240aace-f0ac-4c31-8a6c-a14a22dd7fbf"
        },
        "item": {
          "id": "b93965aa-c385-4304-926f-ee525d261963",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "401ea4ab-d290-498d-a4fb-11aacda19d64",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "8c1a0bce-2c9e-406e-aaa5-7e3af6bcffa5",
        "cursor": {
          "ref": "5af73708-6a47-4732-b3a6-9ad3bcae5092",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "7879999d-86e9-4104-aff2-54f3613740f7"
        },
        "item": {
          "id": "8c1a0bce-2c9e-406e-aaa5-7e3af6bcffa5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "8bff6f4d-f350-4010-93a9-3da3684e198d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 629,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "1f005f27-67ea-4d12-acd8-200c9e9c7522",
        "cursor": {
          "ref": "0e43dbb2-7e44-4b5d-8262-47df4c9262c3",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "49b6bcc0-5408-4f08-94ae-dde56b07064c"
        },
        "item": {
          "id": "1f005f27-67ea-4d12-acd8-200c9e9c7522",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "3854eebd-521f-44f6-b23a-82cfc971cfec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "1546f917-6d93-4d4f-9d45-5875bce8f0bc",
        "cursor": {
          "ref": "02dc4872-e295-4e4e-b353-d1b9a60e9556",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "2bb16b92-46fd-4573-9398-f74f720d7ec3"
        },
        "item": {
          "id": "1546f917-6d93-4d4f-9d45-5875bce8f0bc",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "ad45084c-42da-4a8d-bb40-85cb33708ada",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59004adb-8e10-42f6-a67c-a63ac406a9a5",
        "cursor": {
          "ref": "36ec8973-6f69-4e56-bc78-940377912633",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "1f7dde60-c32c-4a04-a428-bc6648f0d996"
        },
        "item": {
          "id": "59004adb-8e10-42f6-a67c-a63ac406a9a5",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "877d5feb-fdcd-41a5-88f0-f38bcb9b5da3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32109fee-59d5-49fd-b2db-95b2d95f5bea",
        "cursor": {
          "ref": "8c536da4-2e03-41bb-b183-9bcc89e9dab7",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "5558cf55-2e14-48ec-82bc-78b457c48b03"
        },
        "item": {
          "id": "32109fee-59d5-49fd-b2db-95b2d95f5bea",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "41d0ee89-db33-4cd1-b0c1-21bd300eb99f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae6e025c-ddb7-4b62-af78-1676a752bf3b",
        "cursor": {
          "ref": "e2dcac7b-2d65-4ce4-8882-c5d029c527dc",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "b519825b-0705-4c9f-8fe6-80f519e2a8e6"
        },
        "item": {
          "id": "ae6e025c-ddb7-4b62-af78-1676a752bf3b",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "29ebda33-cc73-4486-a8a0-d83e936cb04a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a67dfc0-12ad-4a54-9831-0b62a1ccfbd3",
        "cursor": {
          "ref": "4d49b961-8212-4bb4-9ad6-e95934a129d0",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "8444f03a-19f5-4e28-a1a2-9b3872461bc2"
        },
        "item": {
          "id": "4a67dfc0-12ad-4a54-9831-0b62a1ccfbd3",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "d63b65cc-6196-41bc-b5d5-93e48d486dae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c743748c-b38f-4d42-b6c6-d2286f9e398e",
        "cursor": {
          "ref": "0e414350-10a1-4419-bfbf-31e1015302c1",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ca94e0c4-e094-4854-891b-ae18e2a0a80a"
        },
        "item": {
          "id": "c743748c-b38f-4d42-b6c6-d2286f9e398e",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "d623b2d4-1c12-4058-8767-90593902f672",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "425af6de-6869-4aff-a5a9-3edd2cd180ee",
        "cursor": {
          "ref": "a6a728ce-ba96-42b8-9b15-ad4dc12b9157",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "979b0d68-d43f-47e7-90d9-16191251a9da"
        },
        "item": {
          "id": "425af6de-6869-4aff-a5a9-3edd2cd180ee",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "cca172ca-8d91-4dce-b4ea-ca52c4dc2156",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eda44632-4a3a-439a-9d26-1e38242ca3d4",
        "cursor": {
          "ref": "e0ae0b3c-441c-499f-abd7-cf2dec566496",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "91e47774-82b3-4b8e-a4e8-3134269e7776"
        },
        "item": {
          "id": "eda44632-4a3a-439a-9d26-1e38242ca3d4",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "21d8a021-9b10-44d9-ad4a-eecbeeab4c51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e578eb07-afb5-40d4-80de-4555380a4be3",
        "cursor": {
          "ref": "3e252997-c4bd-4406-b1f5-b0ad91dfad4d",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "30300259-415f-44c8-9f01-ec4cbf63ed78"
        },
        "item": {
          "id": "e578eb07-afb5-40d4-80de-4555380a4be3",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "731377cc-25e4-403d-a1c3-359a33ef7cca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4902ee0d-de72-4cfe-9953-bd6b2e3a3af0",
        "cursor": {
          "ref": "6fcc88c4-a85c-4c80-8e19-4e62cf39ec03",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "efea3c6a-7c58-4627-9ca5-1ab8248e2376"
        },
        "item": {
          "id": "4902ee0d-de72-4cfe-9953-bd6b2e3a3af0",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "96c6d404-93b9-4135-8230-55722e571e8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c70250f8-948d-4f3a-b114-cb8fee45e9af",
        "cursor": {
          "ref": "df9ae9ee-d293-435e-97a5-8f0178a7d8d7",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "23244d62-c764-4b3d-b359-e468f2e60264"
        },
        "item": {
          "id": "c70250f8-948d-4f3a-b114-cb8fee45e9af",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "ef4c0a79-20ee-439c-b4ca-bcb411a7d0f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deca69ef-b0c5-47fd-888a-ff63bb101e23",
        "cursor": {
          "ref": "316b5359-e6d2-414d-bc0e-f721d5c7fb6d",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "38983b19-2443-43f8-aa81-13af1baddbd1"
        },
        "item": {
          "id": "deca69ef-b0c5-47fd-888a-ff63bb101e23",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "f2237aa1-e58a-4777-8741-7296a9c8ee52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "008dcd22-167c-4b21-9559-160f78c51b75",
        "cursor": {
          "ref": "2ae60903-1502-4ff8-bbdc-9dda489b736d",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "39811934-3be4-4a65-8f92-5c15c8398473"
        },
        "item": {
          "id": "008dcd22-167c-4b21-9559-160f78c51b75",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "5a0b51e6-4aed-40d8-8c3d-9209cd6146ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dce0fec9-0725-4b25-98e3-e9e173b9a860",
        "cursor": {
          "ref": "ea7b5787-0858-4260-90b4-8ee4a29a6a5b",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "bd3d4b43-3c24-41b9-8b5e-dd5363c880ff"
        },
        "item": {
          "id": "dce0fec9-0725-4b25-98e3-e9e173b9a860",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "4bd31b3c-8243-487f-b81a-507b9ce0a00c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb7106d5-eefa-4f9b-8e5c-d56c6dd9b7ea",
        "cursor": {
          "ref": "a16d7e3c-8563-4b23-8f4f-6d6cbf84ab2d",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "fd51eeb9-2bad-4db8-a510-902644ce1d9e"
        },
        "item": {
          "id": "bb7106d5-eefa-4f9b-8e5c-d56c6dd9b7ea",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "3398850f-5ba2-4eb3-bc56-52090f6de91c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48cc3377-34f5-4184-9689-afc8af737bed",
        "cursor": {
          "ref": "4fb8635d-9b26-4cc6-ab19-d8f27ceecb19",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "4b145e7f-7b98-47fb-88ba-66b89128568c"
        },
        "item": {
          "id": "48cc3377-34f5-4184-9689-afc8af737bed",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "7da0ea74-51a5-4489-bc99-bb777ac523eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "436afe0c-01d1-4403-9e71-49dd2926e0e8",
        "cursor": {
          "ref": "a3aa87fd-5b2f-4a7e-a10e-d690e2c8f2e1",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "e552e95a-8313-4684-969f-0020941d8b35"
        },
        "item": {
          "id": "436afe0c-01d1-4403-9e71-49dd2926e0e8",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "1b2d51d6-5e90-4420-bb53-acf256e06894",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9649d2bf-b1f9-4be2-bfc7-647927f780a5",
        "cursor": {
          "ref": "4d2a5a07-5e7c-4824-914a-3c961c9b6b76",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "9be0ce04-c590-4c17-a6a8-240615d464a4"
        },
        "item": {
          "id": "9649d2bf-b1f9-4be2-bfc7-647927f780a5",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "2556f481-ee4b-416f-928e-87c1f8125da3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58ef2432-d24a-49bb-b378-f882e5155dc6",
        "cursor": {
          "ref": "40b5b3d7-3c36-4f26-a728-cdba4b4ba582",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "92894ea0-a85a-48a6-a6ca-863b65ff7f7c"
        },
        "item": {
          "id": "58ef2432-d24a-49bb-b378-f882e5155dc6",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "625f06aa-85b1-4506-99d5-a341c16420d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfc677ff-e4bd-412f-9179-3941ef03b38b",
        "cursor": {
          "ref": "02447d99-26c8-4a4f-95fc-23d8d37f071b",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "8dd16912-fdee-4ce7-8110-033b514e7ca0"
        },
        "item": {
          "id": "bfc677ff-e4bd-412f-9179-3941ef03b38b",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "a8e46bb1-5f64-4cb3-a388-a9647d42b433",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f5ed13e-af0a-4f0a-8b5c-f506ff0541a7",
        "cursor": {
          "ref": "4ada91f4-bef0-47cd-852a-4fa228a2fe98",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "b23e7481-35fe-475d-8b3c-92ff233d0c70"
        },
        "item": {
          "id": "3f5ed13e-af0a-4f0a-8b5c-f506ff0541a7",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "1cba28b7-9ea0-4268-9208-c366831de9e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a20e73c5-5108-46ab-a03b-72dd9b1ab0c8",
        "cursor": {
          "ref": "c33ce5bb-d76b-480b-8647-2ad8f3a4b2e3",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "2eb88769-a7cb-46eb-a4b6-e09441852498"
        },
        "item": {
          "id": "a20e73c5-5108-46ab-a03b-72dd9b1ab0c8",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "5dc756d8-cf0d-4cc3-b601-e649f6f77f6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ae978ca-84e4-4ec4-a816-760ebb966aba",
        "cursor": {
          "ref": "a812e0d3-3e8d-4704-8369-32d6e2f1e0b0",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "ddc813d5-e657-4e6e-b4e4-de792ef8d3c1"
        },
        "item": {
          "id": "4ae978ca-84e4-4ec4-a816-760ebb966aba",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "dbcea318-b9a8-44de-b807-8496e121ee66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c08942c4-2440-4cd7-aace-9c4067278ba6",
        "cursor": {
          "ref": "08a838f8-4e39-473a-a44b-e087b4ff72aa",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "f8cba102-91d8-4a67-9ce7-012fc3049d86"
        },
        "item": {
          "id": "c08942c4-2440-4cd7-aace-9c4067278ba6",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "f820383e-99d4-412f-87aa-fac5530b2ef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7925ec85-8e77-49c6-9db6-a974f6bc68d7",
        "cursor": {
          "ref": "7a4985fb-1a14-45d8-9ae3-00a20f4b8cc6",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "c40c8cc3-8f44-44e6-afb1-f8b5eda533ee"
        },
        "item": {
          "id": "7925ec85-8e77-49c6-9db6-a974f6bc68d7",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "5e75eb9c-166a-4f39-a8cb-62d790e486e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a99c30e-f9d5-4257-bed3-3b54e075499d",
        "cursor": {
          "ref": "f7ac3d4a-2c28-442c-a771-f8696fa17e46",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "a56de917-be77-48e7-8da7-0e3fea26efd2"
        },
        "item": {
          "id": "6a99c30e-f9d5-4257-bed3-3b54e075499d",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "fa9e093b-1b57-42b4-b597-b9ed11791ee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfaf6b90-210c-4be7-a353-d69d705eb2c4",
        "cursor": {
          "ref": "5ba29daf-20b4-408f-80aa-53e2a388b5b4",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "fa764538-5319-42b8-882e-4aadd195bbb7"
        },
        "item": {
          "id": "cfaf6b90-210c-4be7-a353-d69d705eb2c4",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "8f4fd524-e8ec-4904-ae97-ad3c19f3ef48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae7dde86-286e-4112-ade4-afd3b68149b7",
        "cursor": {
          "ref": "44ebeed2-dcae-4461-81b8-6e3c82ec6b51",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "901cc2cd-d658-4d2d-a6dd-8d41dc7dbecd"
        },
        "item": {
          "id": "ae7dde86-286e-4112-ade4-afd3b68149b7",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "9094aa8c-ffc6-4d0a-9aa8-8b8029fc576b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7ae7ed7-0a62-4ad5-b2ba-0ac85787c487",
        "cursor": {
          "ref": "0812ada6-255e-4757-bf42-7bdb887cf802",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "3c7b4054-c376-4aa5-b202-a9aae88aa5bf"
        },
        "item": {
          "id": "c7ae7ed7-0a62-4ad5-b2ba-0ac85787c487",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "f41730f3-4187-4050-979a-da4b18bcdcfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f4bae0a-1ec2-4bb4-b802-51259db37bf4",
        "cursor": {
          "ref": "70fa59ee-9dfc-44ec-b3b0-24d0c070e62e",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "2a5a133c-bd36-4bf9-8a88-f5841e644d5e"
        },
        "item": {
          "id": "3f4bae0a-1ec2-4bb4-b802-51259db37bf4",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "5829ecde-95c9-42bd-a977-3b3078d3b71e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e12b4a3-789c-4d45-bd34-4bcd62428fba",
        "cursor": {
          "ref": "b23402f8-4525-472a-aa7d-585a40874c07",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "b8314374-f6ce-4497-95c5-6c5f8d5bf9ad"
        },
        "item": {
          "id": "6e12b4a3-789c-4d45-bd34-4bcd62428fba",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "e60f36fa-f1aa-4777-b5f9-f94b467d1d96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "582af00d-1b5f-4955-8d07-b70bba1000d3",
        "cursor": {
          "ref": "9e605295-bb8f-4ee8-8887-1c6fa42297a4",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "1c4f6ea7-ce97-4036-8ff6-1fdf6c2bf8f1"
        },
        "item": {
          "id": "582af00d-1b5f-4955-8d07-b70bba1000d3",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d2244778-78ef-40e2-88ff-25a53ff0c86c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "116cc37f-1996-4324-81f2-cf0e77f2cb80",
        "cursor": {
          "ref": "551fb7e4-1f45-422d-bf65-7655f0bd1a56",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "44529d4c-eddc-4b55-869c-83090254802a"
        },
        "item": {
          "id": "116cc37f-1996-4324-81f2-cf0e77f2cb80",
          "name": "credentials_issue"
        },
        "response": {
          "id": "68b9c861-04b6-4142-8ddf-8750f8966811",
          "status": "Created",
          "code": 201,
          "responseTime": 892,
          "responseSize": 749
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "04aecb0b-1927-4431-80d1-f2703c55c79b",
        "cursor": {
          "ref": "ba6c0016-af4f-40d5-8f07-4750a95d7129",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "60b3c769-cf39-42c4-969c-47840692f37a"
        },
        "item": {
          "id": "04aecb0b-1927-4431-80d1-f2703c55c79b",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "518c4cc6-08a8-485e-a152-5007abe79d46",
          "status": "Created",
          "code": 201,
          "responseTime": 1187,
          "responseSize": 703
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c162b13e-5de2-4ffa-8ea2-a69600945fba",
        "cursor": {
          "ref": "f84b8040-8fc5-46df-834f-86b544a7affb",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "254d0443-0444-4f33-bbfe-f07b509a8273"
        },
        "item": {
          "id": "c162b13e-5de2-4ffa-8ea2-a69600945fba",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "22f19a62-117b-4214-bc98-ce2a566868a8",
          "status": "Created",
          "code": 201,
          "responseTime": 837,
          "responseSize": 756
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd030ae2-ad41-4e62-a010-74d326029b0b",
        "cursor": {
          "ref": "5540ba66-dd8e-4c43-9e18-2bed95d98baf",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "3fc5b045-575a-424b-b315-5fb14a76aeb7"
        },
        "item": {
          "id": "fd030ae2-ad41-4e62-a010-74d326029b0b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b02d1bc1-265d-4800-8123-b9cd28b8c684",
          "status": "Created",
          "code": 201,
          "responseTime": 800,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "67322b58-9bbf-4800-9b3b-38d06f23c079",
        "cursor": {
          "ref": "8d88e3a3-53a0-425c-890b-0c2ac86a4516",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "cff2e57f-f552-424b-b468-6eb3e5121f7c"
        },
        "item": {
          "id": "67322b58-9bbf-4800-9b3b-38d06f23c079",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "696581e1-f674-4ff9-b733-ada4d2038d3f",
          "status": "Created",
          "code": 201,
          "responseTime": 800,
          "responseSize": 749
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee3f994c-88cd-47f4-99a1-3a3cbbe64ec5",
        "cursor": {
          "ref": "948a1c10-76d5-432d-913c-4a9026447f07",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "fffde776-2ea1-4bf1-b427-291fdef6b708"
        },
        "item": {
          "id": "ee3f994c-88cd-47f4-99a1-3a3cbbe64ec5",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "4c54e8f5-b607-47f2-93f7-9b605ba19fbd",
          "status": "Created",
          "code": 201,
          "responseTime": 933,
          "responseSize": 1082
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6e60902-b1ab-4fb3-a2c8-e8ecb34f30e8",
        "cursor": {
          "ref": "63e683bb-b89a-4bab-8c21-f4bb7b179847",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "7d1920a0-5f37-47bc-a19b-a309af1bc47b"
        },
        "item": {
          "id": "d6e60902-b1ab-4fb3-a2c8-e8ecb34f30e8",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b2625df3-75de-4f11-9b03-5517b8360441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbb49640-0f7e-4959-ab2f-cdb0a6e32fc7",
        "cursor": {
          "ref": "8cdcc6d4-95f8-4537-bbf6-9e338ff53ef1",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "3e97876b-2178-4a56-8c06-71963674620b"
        },
        "item": {
          "id": "dbb49640-0f7e-4959-ab2f-cdb0a6e32fc7",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a43c1ce1-6278-416e-827f-320bac179bc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ec01662-d9bc-48e8-968f-5bb89d8cc80e",
        "cursor": {
          "ref": "e1f3ab62-37f3-40ef-99d4-db081a694a80",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "88a194a8-ec03-4dc5-ba04-5be49ede8c10"
        },
        "item": {
          "id": "4ec01662-d9bc-48e8-968f-5bb89d8cc80e",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "570afcf6-9811-4b1a-bc01-d99217d323ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "494d3f87-2561-4b71-b94b-2a842a870f64",
        "cursor": {
          "ref": "215cedaf-5e76-4e8f-9f4b-90f6a49b9cde",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "00b9e4c6-53a7-4607-ad58-122a3f87c6ae"
        },
        "item": {
          "id": "494d3f87-2561-4b71-b94b-2a842a870f64",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "51f58a13-7956-40f1-a18d-35c48b8a2132",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e5c60dc-3c47-482e-bbd2-74c8ecb87fda",
        "cursor": {
          "ref": "24ed763d-10f7-465c-8500-b5f93da66d45",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "6a63549f-99ad-4a48-bf2b-f03d96ef3539"
        },
        "item": {
          "id": "2e5c60dc-3c47-482e-bbd2-74c8ecb87fda",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "aae3f3aa-9d61-4fb1-bc78-d6dad550227c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0b6db09-5c61-4898-a638-452ab2f2caaa",
        "cursor": {
          "ref": "4d3dc927-c50f-49d8-bd1a-b42caaba8f9e",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "eb5809cf-2cbb-439b-b8d5-a4ae15ef0ed1"
        },
        "item": {
          "id": "e0b6db09-5c61-4898-a638-452ab2f2caaa",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "40d1a8b8-d9f4-4e15-a536-3b2abfd975ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9ba6ffb-502b-47d1-841e-887ce7b3bb90",
        "cursor": {
          "ref": "e6d30236-0b43-4918-840a-12e26f769a20",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "bbb4dfb1-d83d-43f5-b958-bf310c8dc7c6"
        },
        "item": {
          "id": "b9ba6ffb-502b-47d1-841e-887ce7b3bb90",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d1e8355e-d4bd-478a-9aeb-8a65b2f711c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "126e9ddb-2423-4aad-9650-df41062a621c",
        "cursor": {
          "ref": "2c089976-0dd9-444a-8220-8e27890bae72",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "5efa6bff-7934-48ee-84a7-862fc07f09eb"
        },
        "item": {
          "id": "126e9ddb-2423-4aad-9650-df41062a621c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "dea310dd-20b9-40f8-9ecd-cac65a1fb3ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c8911af-3d21-4614-970a-19f7913760ea",
        "cursor": {
          "ref": "f317215b-20d0-4db4-8119-370601838b5a",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "b5f00276-38cf-421b-a401-a7a8bed0df2a"
        },
        "item": {
          "id": "6c8911af-3d21-4614-970a-19f7913760ea",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c806c03b-20bf-4212-b326-e2b5951b30e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d25f39f7-174f-4f2d-8f0d-a7681fcab5ec",
        "cursor": {
          "ref": "c0e53885-0235-46ca-8a39-95d9935d3c99",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "308437ce-2957-4255-95c4-8277f2420433"
        },
        "item": {
          "id": "d25f39f7-174f-4f2d-8f0d-a7681fcab5ec",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "499a9387-5504-4b02-aaf1-1bf8631377dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f840432-89b5-4a7e-9554-8038896870d9",
        "cursor": {
          "ref": "562e1948-2bd6-4c04-adaa-b85e43f4bec4",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "119f4922-3eb3-4424-be47-739e71e719b9"
        },
        "item": {
          "id": "6f840432-89b5-4a7e-9554-8038896870d9",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1fb06506-95d6-4fb1-bb95-a2bf65214657",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecd2cd3c-5e62-462d-9bff-9cd7910f2471",
        "cursor": {
          "ref": "57fca269-58cd-4efe-a400-0a6a7d716fac",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "576ef21f-3846-48ba-ab79-468a840cd4af"
        },
        "item": {
          "id": "ecd2cd3c-5e62-462d-9bff-9cd7910f2471",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "250a40c8-fa1c-4b5c-96ee-433dceb4e683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c82650d-ac61-488d-8410-c9896289fff0",
        "cursor": {
          "ref": "f8813ff8-c4a6-4d34-9968-d3cb2b711fe1",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "033a82db-d29f-43df-ae69-535b54b06b5b"
        },
        "item": {
          "id": "7c82650d-ac61-488d-8410-c9896289fff0",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "9b0f913b-21a0-4e53-886a-2869763cea71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d749f4de-e469-4625-94a6-88a9c166fe5d",
        "cursor": {
          "ref": "91371962-8e2a-43f8-8cc4-1871a9962e37",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "a4fc9725-5769-4eee-b6c5-5b095de088d0"
        },
        "item": {
          "id": "d749f4de-e469-4625-94a6-88a9c166fe5d",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "49bc68c4-a8da-4164-b907-bfc58f153804",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fa28d80-21f9-4303-8085-54970fe69739",
        "cursor": {
          "ref": "bf2590b6-be30-417e-9d22-6abb7230b5bc",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "92fb83a4-61ea-44a2-a045-c808af99383b"
        },
        "item": {
          "id": "4fa28d80-21f9-4303-8085-54970fe69739",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ee665ce8-aaed-4116-b7b6-3397391dcebb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c9558bf-8060-4e16-8ae0-0777c5b6aa41",
        "cursor": {
          "ref": "84484ccb-9bd6-469f-b10e-61f1fa81cc78",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "37a47d48-fe0e-432b-888a-aabfec658dc7"
        },
        "item": {
          "id": "5c9558bf-8060-4e16-8ae0-0777c5b6aa41",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ba513b06-2b27-4523-9eaa-c8f178471d0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d559615-0adf-4c47-bbd2-71d778a7220a",
        "cursor": {
          "ref": "919b2a53-12fa-4c18-9241-3fa851625425",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "fb426d09-0bd8-4429-8848-d5b07fe7dfca"
        },
        "item": {
          "id": "5d559615-0adf-4c47-bbd2-71d778a7220a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "f8999553-8d81-47f4-8697-b55416d0a001",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a81b975f-075d-4f38-9c53-68bc787d5bdb",
        "cursor": {
          "ref": "bc6058fb-fb64-4684-9717-1da8374b1b86",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "e191a16f-41cd-4f37-b0d1-7c10bbd059eb"
        },
        "item": {
          "id": "a81b975f-075d-4f38-9c53-68bc787d5bdb",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "508b7a39-a43b-422f-8739-eae0b8a33cf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4d13cc6-875b-4c87-94ef-9022b2e4c686",
        "cursor": {
          "ref": "803b3bb3-0059-400b-b1d4-182a130da8c1",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "8d5509ea-920c-4a41-abd0-aa318327038c"
        },
        "item": {
          "id": "f4d13cc6-875b-4c87-94ef-9022b2e4c686",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "8bb4526d-3c15-419b-aa8f-3b41704f309c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "101f93b1-0ff1-40c4-980b-6623ff40fce1",
        "cursor": {
          "ref": "f2cc5a01-574d-41e3-a754-bbdce826777d",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "bb9c775c-7cbe-4186-b4b4-56155cee97c3"
        },
        "item": {
          "id": "101f93b1-0ff1-40c4-980b-6623ff40fce1",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "38263fae-c8ad-4205-9540-39fe43694134",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "097bf5ee-383a-4dd2-845a-ef310c6bf285",
        "cursor": {
          "ref": "a0b72ac6-5bfd-4671-8d4e-974a8ca02e1f",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "0a3510d8-a2b5-4ab5-b4ad-b37269f52d01"
        },
        "item": {
          "id": "097bf5ee-383a-4dd2-845a-ef310c6bf285",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b6448083-9415-4c92-a7f2-eb6ba40cfc6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91b52089-8358-4c63-aaae-c4c23d1dcd98",
        "cursor": {
          "ref": "a241ecc8-90fd-43cf-a4bb-0789b8c76e98",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "83e04549-a432-41f4-b333-f6635e67bb9f"
        },
        "item": {
          "id": "91b52089-8358-4c63-aaae-c4c23d1dcd98",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "9e0fcf8a-af1c-43ed-ba1a-f7d173d896ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00f478b3-06bf-4536-b53d-f9ff7b90bb5c",
        "cursor": {
          "ref": "7610a9e4-7d44-47e1-bdcc-5dd6e93de6b5",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "5c969f90-99f8-4191-9f63-db66e34e71d0"
        },
        "item": {
          "id": "00f478b3-06bf-4536-b53d-f9ff7b90bb5c",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "f84b1306-2dd0-4411-a771-0a77434bd8ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6cd9461-218a-4347-a790-6631b0e355d3",
        "cursor": {
          "ref": "31a3b5b9-f04b-4cd9-a27d-f84f5bc1e6c1",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "564aa2b3-6d8b-44de-92ed-1a8332b63eb4"
        },
        "item": {
          "id": "b6cd9461-218a-4347-a790-6631b0e355d3",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "faf0d885-5c20-447e-ba6f-975d2d7c2ac0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "358a5037-8802-461f-9ec6-71edc441761f",
        "cursor": {
          "ref": "6f27dff3-a142-46da-b621-e50edea208de",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "115ec647-51e1-46f9-a343-2995ffb241f5"
        },
        "item": {
          "id": "358a5037-8802-461f-9ec6-71edc441761f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "249241b0-1bc0-44b3-8dbf-7d43819e64dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61568481-d8b2-4ad0-8b39-00fffd5a1617",
        "cursor": {
          "ref": "2482972c-ecfe-4a4c-9870-d1732e50dc86",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "5cc213fb-5cce-49b1-91ac-81c8edff980a"
        },
        "item": {
          "id": "61568481-d8b2-4ad0-8b39-00fffd5a1617",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "f4824df7-ef01-49b9-9712-4b2d2c1fe6d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4305f73a-b2fa-4960-9cc0-c5741aab8c8c",
        "cursor": {
          "ref": "6e7219c6-a6e0-4a16-bdd6-2372006d42c0",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "cfede4fb-5f24-4437-a8f5-a03ed9a33bf3"
        },
        "item": {
          "id": "4305f73a-b2fa-4960-9cc0-c5741aab8c8c",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f798b131-719b-4533-8578-94962348835d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dbb3315-1aca-402d-9abb-4d4a74b1677a",
        "cursor": {
          "ref": "b644372e-c4a3-4ca3-b587-ee312fe56a41",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "e89a25ea-b316-46a8-8e28-aef26614092d"
        },
        "item": {
          "id": "1dbb3315-1aca-402d-9abb-4d4a74b1677a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "63dbb42f-4de6-42b5-8c90-7946f3bcdaad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbd9e9e8-96de-4e68-b680-b26bdc4fe765",
        "cursor": {
          "ref": "5cf8b25b-696d-41bb-b1aa-6c9ea708575f",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "3b987de1-be2b-4e73-88ee-5d5c5d512e35"
        },
        "item": {
          "id": "dbd9e9e8-96de-4e68-b680-b26bdc4fe765",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "6650122f-de48-4d31-aca1-525c76b6af66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12b02ad8-f850-42a1-b6fe-00c97d51253f",
        "cursor": {
          "ref": "8ef600e4-3b1d-46d6-bb72-9b35422b816e",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "ceb5cecf-a037-472b-a74c-80893c711c46"
        },
        "item": {
          "id": "12b02ad8-f850-42a1-b6fe-00c97d51253f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "be013137-4b6b-4be3-8de2-72a8c9a53641",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ba7e79b-083f-4b5c-88d4-caff02bee7bb",
        "cursor": {
          "ref": "dc4e52d2-35f9-4e9a-995d-bcdc0f477a6c",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "3a408891-911d-4419-83f5-b33aca698f42"
        },
        "item": {
          "id": "3ba7e79b-083f-4b5c-88d4-caff02bee7bb",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "da5beb58-ac25-4171-a66f-fed77587af4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dc3683a-5896-4982-b752-f16299819981",
        "cursor": {
          "ref": "58755faf-a82c-4e4e-ad07-b4f88245d87f",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "03217d73-e280-4e7a-aa76-72deb0d202c3"
        },
        "item": {
          "id": "5dc3683a-5896-4982-b752-f16299819981",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "b4890ed7-33c5-44bc-8c80-06c8da78d66b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58fc74da-77a5-444f-a91b-1c384353b17a",
        "cursor": {
          "ref": "4b485f53-5527-42e1-9582-83c9a4fa4b4e",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "9b8ccf48-3a0a-4a18-bf7c-db58092300f8"
        },
        "item": {
          "id": "58fc74da-77a5-444f-a91b-1c384353b17a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "40123c38-14f5-49de-9c06-dcb38a78531c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecb8432e-721d-408b-890a-effb7b40c149",
        "cursor": {
          "ref": "4282f7cd-695b-41c2-a7f1-d8e79f3addf8",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "586b2995-3056-4ebf-b431-b457ac784a44"
        },
        "item": {
          "id": "ecb8432e-721d-408b-890a-effb7b40c149",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "174572e9-33de-43bd-a63e-6b949ccac03e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eec3c37-acb6-40a9-a932-7ceb53e8c96b",
        "cursor": {
          "ref": "60a07cf6-63d7-4361-8c93-813a0a6553d5",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "a55d01f9-6a4d-44b4-86a3-1d0b374ad2b6"
        },
        "item": {
          "id": "8eec3c37-acb6-40a9-a932-7ceb53e8c96b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c2a6c358-9114-46c6-82a9-b5a1580e72be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ed3201c-2ec8-4625-ae3e-2ca6a5736348",
        "cursor": {
          "ref": "900bd22e-887b-4739-8ef8-e2e223401b66",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "21c9870b-63f8-485e-aaba-40747d5f988d"
        },
        "item": {
          "id": "0ed3201c-2ec8-4625-ae3e-2ca6a5736348",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "4210fc9f-7b11-4811-a05d-8e16b369379d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4978138-2761-4972-9161-dc35e5d5b720",
        "cursor": {
          "ref": "c1fde85c-860f-46df-a7b8-6801e235a97f",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "0d261d4a-8e9a-4d62-aa09-4f1a7f2ca495"
        },
        "item": {
          "id": "f4978138-2761-4972-9161-dc35e5d5b720",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "661797c9-6761-4085-add8-9605435f0e7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f980e5f0-695b-4e60-8461-f5966f842672",
        "cursor": {
          "ref": "a5802e8d-c8fa-4e8d-8f06-19e16a500a99",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "4075cfb5-9b13-4fc1-9c51-cbb6d6251bc6"
        },
        "item": {
          "id": "f980e5f0-695b-4e60-8461-f5966f842672",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "f6558ebd-e39d-49d6-8ce7-260c56f3d9a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2437356-4225-4839-99a0-9761cac76dbf",
        "cursor": {
          "ref": "2f2c7ca5-cd78-456d-9573-1d8ef24fc248",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f5891777-603a-44ae-8f5d-20e11272446b"
        },
        "item": {
          "id": "e2437356-4225-4839-99a0-9761cac76dbf",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "cc05b445-77d0-404d-b84e-27b4c62713dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c636ff8f-d082-4209-a403-b862e6ffee10",
        "cursor": {
          "ref": "7f45e12c-c3ae-42e3-bc49-b9c7f6ff8c9e",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "642f1c23-f867-430e-b3d0-c6dff84357d3"
        },
        "item": {
          "id": "c636ff8f-d082-4209-a403-b862e6ffee10",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "2e2873b3-5cd8-430b-a522-0bb1c95caa7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7453c8f9-6630-41e7-853d-e4c2683415fc",
        "cursor": {
          "ref": "371cc7f3-44eb-44d6-a44b-6cc21574c9bc",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "02cdfca3-a6fc-4773-be80-c79c9c703f17"
        },
        "item": {
          "id": "7453c8f9-6630-41e7-853d-e4c2683415fc",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "75292905-ddf4-426b-958d-48467afe8ef3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d611f92-1df2-4d86-a6f3-14c3b4c3b41c",
        "cursor": {
          "ref": "28de55dc-f1ec-4101-a400-35224c4012e1",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "8e8d6a83-bd49-4ffc-89e8-d9d5fedab1ec"
        },
        "item": {
          "id": "9d611f92-1df2-4d86-a6f3-14c3b4c3b41c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "4ee078d1-8eee-45c5-91a1-b6990d036ad9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d83828f0-bcb5-4159-abae-8b279111ed25",
        "cursor": {
          "ref": "37eb10d5-a35d-4a99-8e0b-5d461002c605",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "9411da07-1787-48a8-b27b-eec9bf5c7419"
        },
        "item": {
          "id": "d83828f0-bcb5-4159-abae-8b279111ed25",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "4d1eac98-dd30-4665-8611-1988ce6434a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7515e840-bb4c-421c-ad72-03fcda26ff8a",
        "cursor": {
          "ref": "a301a002-81a6-4d79-8833-1110eae09c95",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "a52d2df3-48a6-468e-9feb-7514c914bb70"
        },
        "item": {
          "id": "7515e840-bb4c-421c-ad72-03fcda26ff8a",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1822899e-7723-47ca-bb73-05afe216ddf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da9b35bb-c12d-4c25-bd41-4345fecd7a67",
        "cursor": {
          "ref": "a2ad17b9-7611-4c61-b33b-db754f916226",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "550ec1ab-fb92-491b-937d-6e1ce3dc0333"
        },
        "item": {
          "id": "da9b35bb-c12d-4c25-bd41-4345fecd7a67",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f3f1ea32-11f5-4363-a31e-20ab8acecfe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fd34652-a867-44d9-900f-5bd47cda6345",
        "cursor": {
          "ref": "4b158102-a098-4c1b-9b3c-7abd93db0ab6",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "b235d255-f3dd-4535-a9e9-7c91486a325e"
        },
        "item": {
          "id": "2fd34652-a867-44d9-900f-5bd47cda6345",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c669bc61-9d63-4542-bd88-30b93f934a82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77d22cf4-5a3a-4226-811c-b6bc0135d89a",
        "cursor": {
          "ref": "ad57e703-92fe-4ebd-bf61-24d99fb7b621",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "5a0887e2-b80a-4bf1-9cc2-5fa67d3f443b"
        },
        "item": {
          "id": "77d22cf4-5a3a-4226-811c-b6bc0135d89a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "8140cd15-a85c-4338-bfc1-fc39b59bdd7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "528c514e-6712-4f90-85bd-32ca51269691",
        "cursor": {
          "ref": "e4f12e18-29c8-412f-a4d2-0e0b8c9e67c3",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "9f9bb072-d551-4c70-bc50-57f0ec852598"
        },
        "item": {
          "id": "528c514e-6712-4f90-85bd-32ca51269691",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "e1741a8d-5871-4afa-a8ea-aacde6b55daa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f694882f-87d5-44f6-b249-7a73b8802f9b",
        "cursor": {
          "ref": "12930237-40e4-40a6-b2fc-8845d9b3d12c",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "246912dd-4868-4d78-9fb4-222a9d991456"
        },
        "item": {
          "id": "f694882f-87d5-44f6-b249-7a73b8802f9b",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "99fbed32-5494-4f44-a997-75db30014806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd8660de-4fce-42b3-92a6-d1ae5af3d40e",
        "cursor": {
          "ref": "4f9b74b8-1557-49b7-8815-5006087aab8a",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "918c9a07-a64e-4017-bcf2-3dbbe4ca0eff"
        },
        "item": {
          "id": "cd8660de-4fce-42b3-92a6-d1ae5af3d40e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ec19165f-00a6-4a1a-a4a5-b3c37b847e98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21f2e721-cdad-456b-bda9-06f8975d13a1",
        "cursor": {
          "ref": "17c89ab3-52ec-4187-9d93-9348e93abd33",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "db02f5ad-4c41-4a18-952b-6fbcf76e1538"
        },
        "item": {
          "id": "21f2e721-cdad-456b-bda9-06f8975d13a1",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "7d97eb4f-3845-4016-94bd-8f54c843768e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c9b3fdf-303e-49ff-be51-6ad3f30d902b",
        "cursor": {
          "ref": "e720b98e-7e36-405a-8d61-24a615f6e837",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "1f37c8e3-f41d-4799-9b9d-ed71e7db4b58"
        },
        "item": {
          "id": "1c9b3fdf-303e-49ff-be51-6ad3f30d902b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "8f06036d-ef7c-46c2-ab22-d95bcdf976a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82642cc4-8b14-4456-b206-1830060ac4ae",
        "cursor": {
          "ref": "f5b21517-8f9d-4c13-9771-673d1e8d0ec4",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "fe8fe911-c80e-4972-875e-dab3a64a64d9"
        },
        "item": {
          "id": "82642cc4-8b14-4456-b206-1830060ac4ae",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c019b0ba-1947-4afe-b0bb-32526964c732",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0b63919-7424-49fd-b9f6-c9a22b383a19",
        "cursor": {
          "ref": "02cb4852-410e-4058-857d-f5b0a671b184",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "d211ee6a-df68-4fe5-af69-39801e8b756a"
        },
        "item": {
          "id": "d0b63919-7424-49fd-b9f6-c9a22b383a19",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "8884eb82-f67a-497f-bd27-37b5f800dc45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6eeed3d-8a09-4b6a-82d0-28d0adca12e6",
        "cursor": {
          "ref": "6aed8f63-8d63-49ea-b3d4-961bb366eab8",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "f792f61e-6fd9-419b-bf37-c6e1d4836db4"
        },
        "item": {
          "id": "e6eeed3d-8a09-4b6a-82d0-28d0adca12e6",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "6b3dd780-e87d-40f7-a705-3532e510abfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d10658af-e369-4870-ba8d-2b170599e6e5",
        "cursor": {
          "ref": "bfd3c204-0bfc-4cc1-a4f5-be4edb01d5d6",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "ecfc4197-e6a0-4eeb-b669-b993c2ede879"
        },
        "item": {
          "id": "d10658af-e369-4870-ba8d-2b170599e6e5",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "eca6c8ce-d9f7-4790-b832-1d0714229117",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6864f5b2-671e-46b0-8d79-15fe029bcdfb",
        "cursor": {
          "ref": "36244927-55e8-42a5-bb45-0b6fc5661ac8",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "47adabca-9150-48e9-9f0b-c2fb7d331a2e"
        },
        "item": {
          "id": "6864f5b2-671e-46b0-8d79-15fe029bcdfb",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "4fe9d05e-8af0-4d6f-b119-569faec3c447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "591bfb02-68ef-4e7e-88d3-6ff033587a3b",
        "cursor": {
          "ref": "48fe4d96-b2c9-4db4-acf1-5f0bf51b2289",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "2bf0478e-c34f-4339-87f2-e7ddf96db1ba"
        },
        "item": {
          "id": "591bfb02-68ef-4e7e-88d3-6ff033587a3b",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "54d3392b-2c16-49ea-be96-a848acbd93e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3960ff2-9bf5-4003-9eb3-9f262a7a32c6",
        "cursor": {
          "ref": "6b7a7d1b-c78b-4452-a773-c4336b996f6d",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "68554c0c-43e1-40db-bb8e-f00d102d44a8"
        },
        "item": {
          "id": "a3960ff2-9bf5-4003-9eb3-9f262a7a32c6",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "2c16e6e6-6227-49ec-b228-72a6277c3e97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37b97892-c55b-4da5-a333-de829503615a",
        "cursor": {
          "ref": "9ffe3ff9-0049-4444-8684-492fd552fa12",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "4b3ae22b-a0c5-4ffc-9544-4f67961dd5e0"
        },
        "item": {
          "id": "37b97892-c55b-4da5-a333-de829503615a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "8a5799c7-b6fe-4a63-981b-554bcbcd9334",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24ce91f6-d0de-4dfb-acc9-567b28646994",
        "cursor": {
          "ref": "e2ecfed5-6eca-4649-8259-ac9cefc1d67c",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "eae89f21-7147-469c-b470-c1143b6ca21c"
        },
        "item": {
          "id": "24ce91f6-d0de-4dfb-acc9-567b28646994",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "821fd9a0-726c-4148-8d2b-3622e7ca3099",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1e1510a-25bc-4c9b-ab03-ee090a6dffdd",
        "cursor": {
          "ref": "f737cc51-e078-4e66-9c23-bb11c84920cf",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "362c4fcb-adb2-4b19-bf3b-fc334d7a7244"
        },
        "item": {
          "id": "d1e1510a-25bc-4c9b-ab03-ee090a6dffdd",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f0574000-ebe4-44f4-b248-e299e38b156a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f2a14e2-5a8d-4cba-85db-345cc8fdb7ef",
        "cursor": {
          "ref": "f50a94bb-4d76-4a46-b615-b36783fcb430",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "2977eb33-c027-405b-afb5-ba4a12a73b36"
        },
        "item": {
          "id": "1f2a14e2-5a8d-4cba-85db-345cc8fdb7ef",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b235d8ba-3021-4f22-9b68-4361ac6f17e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1eaeddb-eb38-4734-a986-d6c70a133486",
        "cursor": {
          "ref": "f28ba415-7dfb-41d7-bca8-43c35373ee3c",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "3f28d36f-d788-413b-b38c-0105a9658ae6"
        },
        "item": {
          "id": "d1eaeddb-eb38-4734-a986-d6c70a133486",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "5ba0d06a-c14d-4af4-b5ae-e06d22755e01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2bc9c19-daba-42cb-8fdf-207f15ae6077",
        "cursor": {
          "ref": "7c2cafb5-8638-4ba8-a616-45d68a62e556",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "5d6a14db-303b-40da-b286-7abf10a9a679"
        },
        "item": {
          "id": "e2bc9c19-daba-42cb-8fdf-207f15ae6077",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "64425e95-0712-4b8d-b59a-799955e09c7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dceac1b2-acef-4c45-a22f-dcc04e87123f",
        "cursor": {
          "ref": "9d76a150-3015-44e6-882e-b628dbf375d6",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c9ddd707-8705-4002-a1fc-589ab7f30465"
        },
        "item": {
          "id": "dceac1b2-acef-4c45-a22f-dcc04e87123f",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "a86feae0-c8ff-4ef5-9e09-167ee8777118",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc35e59c-def2-4f09-aab5-5c3475c70031",
        "cursor": {
          "ref": "e7dab541-ea4d-45e0-9a7c-8a49561d9c94",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "9c802e9d-f275-4af6-8ff5-68ede17c2740"
        },
        "item": {
          "id": "cc35e59c-def2-4f09-aab5-5c3475c70031",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "501e4cde-1599-4e7f-a7c2-39f431994829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26aa679e-9967-469e-b203-41ff99d9dedd",
        "cursor": {
          "ref": "7335f901-f6ec-4eff-bc84-6371c7d5b083",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "2bfa816e-a33c-46e2-a529-cdb0bda574c2"
        },
        "item": {
          "id": "26aa679e-9967-469e-b203-41ff99d9dedd",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "f24b8c6f-1ade-4c3c-87fb-72d3b5ea939b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7ff5b56-184f-460d-9acc-9df185fab67e",
        "cursor": {
          "ref": "bcef21c0-3d6d-4814-8e33-fa8fb861c735",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "bdc0894f-749b-49d1-be84-62686e84c20f"
        },
        "item": {
          "id": "b7ff5b56-184f-460d-9acc-9df185fab67e",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "892403d6-c7ec-414c-b110-4c4cb02ba815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "397b5b95-b331-44e8-9872-243c900a55a4",
        "cursor": {
          "ref": "eea90b5e-4568-44d4-b664-8711f9c9c4c7",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "f23535d5-e7d4-4353-97e7-ff6d8f210174"
        },
        "item": {
          "id": "397b5b95-b331-44e8-9872-243c900a55a4",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "d4aeb910-1d93-4b8f-9969-af91e952e044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4851ae77-2e0f-4b88-a054-dbeb3812b159",
        "cursor": {
          "ref": "5574311d-604e-4ed6-971b-253699866132",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "6bd2f3ec-add8-48d1-aaac-71f3602b0298"
        },
        "item": {
          "id": "4851ae77-2e0f-4b88-a054-dbeb3812b159",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c0bba42a-52e4-4f10-a378-325efcd6526f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af013b70-d339-4df9-bd93-554c1f8c9543",
        "cursor": {
          "ref": "1dee9327-eeb9-4834-a777-f4db2b48e949",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "7ae3cffb-22e8-4d1a-a371-0e7d43061bb1"
        },
        "item": {
          "id": "af013b70-d339-4df9-bd93-554c1f8c9543",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "cd8a80a3-2eb7-4ee4-b80d-740271dbc874",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8900612d-01c4-4b24-a1af-7648ff979851",
        "cursor": {
          "ref": "2ddf9bf7-8710-407f-8857-e34b03ccb8bb",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "23f3dbbe-e21a-4fa9-96ef-979e249c4fd4"
        },
        "item": {
          "id": "8900612d-01c4-4b24-a1af-7648ff979851",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "a562f297-57f6-481f-b1da-4b50d2c3cbea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7194100e-f245-4716-a2f1-63e1589b5e8d",
        "cursor": {
          "ref": "ba31bdd1-f58c-40f7-afed-dc8e223f75a0",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "f92f7a31-7716-4708-a5ca-b3e415ab2daa"
        },
        "item": {
          "id": "7194100e-f245-4716-a2f1-63e1589b5e8d",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "3932d2b7-d3ff-4562-b414-f7725f1cd614",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73e3703f-50be-4e78-a205-046102f0f34d",
        "cursor": {
          "ref": "400298fd-e4d8-4faa-ba5e-8cc394ea3637",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "abbbbeb0-127d-4f9a-88c4-6a18120e2e1f"
        },
        "item": {
          "id": "73e3703f-50be-4e78-a205-046102f0f34d",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "e68a8fd6-2bb5-4c2f-90ff-9674862cbf6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "987d9abb-25af-447e-86ad-9e39a994f3b2",
        "cursor": {
          "ref": "384e31fa-7f9e-41ba-98ac-8c7b2944f347",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "37cb9343-70d5-46c0-969e-6cce84b417ad"
        },
        "item": {
          "id": "987d9abb-25af-447e-86ad-9e39a994f3b2",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "f7499c94-f972-4aba-b297-e62835b8ce5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3cd3052-ed88-413c-beba-e30140ad5fcf",
        "cursor": {
          "ref": "d29bbaa0-3530-4646-8a89-dc0d4605f61f",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "c3430c6b-f7ff-4caa-93e7-4204c0ae7792"
        },
        "item": {
          "id": "c3cd3052-ed88-413c-beba-e30140ad5fcf",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "80129624-f544-4cdb-a00e-6f50596fe9b2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "554211cb-ef82-4304-abcf-9af423592be5",
        "cursor": {
          "ref": "b6065615-a86a-48e8-a103-11ade7a6add4",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "413bd498-34d7-4e00-9515-e70686e1fbb8"
        },
        "item": {
          "id": "554211cb-ef82-4304-abcf-9af423592be5",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "86743ce0-9188-47bb-9c5f-a6d81a1f7277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94b46d51-3594-4281-b5f4-0daaf6f8f66b",
        "cursor": {
          "ref": "ce8607b9-dc73-417f-b286-740cd451ba7d",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "669e0d2e-2da2-4cb6-88f8-79e294220265"
        },
        "item": {
          "id": "94b46d51-3594-4281-b5f4-0daaf6f8f66b",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "56e82af6-1338-4174-82ae-2555c87c4c96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7017758c-4ef0-462d-aa68-41fb66a19374",
        "cursor": {
          "ref": "28664b06-a080-4041-abcb-6476464339e2",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "5c0b4fec-e5bd-47f7-b505-2c7ce169b52c"
        },
        "item": {
          "id": "7017758c-4ef0-462d-aa68-41fb66a19374",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "f88a126b-8d3d-44ed-9c13-725273127103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8410d3a-cbb0-410e-b198-da28a2d76392",
        "cursor": {
          "ref": "9dd6fe1b-59ba-41f6-a2f1-692e0774eaed",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "935f63b0-52fd-4393-b9fc-13fb55b7e027"
        },
        "item": {
          "id": "b8410d3a-cbb0-410e-b198-da28a2d76392",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "1ce7d01e-55de-4dec-a4f6-84b4d50aec86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f687836-7cae-4694-bea6-0cdc3df304db",
        "cursor": {
          "ref": "250be624-97c7-4ecb-8674-a866d01bb43e",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "3dfc4d6d-16c2-4fe6-9942-6ec8804d54cc"
        },
        "item": {
          "id": "0f687836-7cae-4694-bea6-0cdc3df304db",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "92289c12-ee28-452d-8332-8215b72ab85a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c679be74-68bc-4f04-93c4-c49e85e19f46",
        "cursor": {
          "ref": "5cad4cd7-1e5e-4d76-9250-506944bd473e",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "f9478c2a-b15c-453a-9239-360f6aca80b7"
        },
        "item": {
          "id": "c679be74-68bc-4f04-93c4-c49e85e19f46",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "5c963fdc-0d0a-4797-9f88-c9b73eb51a8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1060d380-23c6-4cf0-b063-9c98aab53d60",
        "cursor": {
          "ref": "0d7aa7e3-e0c8-411b-a37a-56e63d025282",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "4488af68-4930-4a42-b9f2-e9b90c580306"
        },
        "item": {
          "id": "1060d380-23c6-4cf0-b063-9c98aab53d60",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "e7978650-2ec7-40d3-84ee-aa9771bbc922",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "381c26be-54a5-44dc-9d8d-cc1851d27390",
        "cursor": {
          "ref": "a174323c-7a19-4bbc-8d6a-f67d7ab7a772",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "4b3c57e9-b64d-482a-9b84-11e64dd35c30"
        },
        "item": {
          "id": "381c26be-54a5-44dc-9d8d-cc1851d27390",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "1f3c7e89-7528-47e0-aaa4-b10f92f06827",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae612439-d75f-4e76-900d-2e04f50492c7",
        "cursor": {
          "ref": "5a88c00d-c3d3-4874-9b7d-c428f4e3d310",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "25d1d7aa-e579-4ce2-a596-ba10310d3942"
        },
        "item": {
          "id": "ae612439-d75f-4e76-900d-2e04f50492c7",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "0f1ebbdd-06f1-4487-a0e5-d3642062588b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "712ec47d-891b-4a63-87d1-ddbfdc4f430e",
        "cursor": {
          "ref": "1059e3d8-d18c-4bb0-be68-d693c04c4862",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "f51508af-80aa-4803-89b1-d7db082ef025"
        },
        "item": {
          "id": "712ec47d-891b-4a63-87d1-ddbfdc4f430e",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "6923ff48-a4aa-4a7e-9daa-297cda791a9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98860f27-d6e1-4c51-b197-4f7589fcac75",
        "cursor": {
          "ref": "4090d6e3-9988-4d4d-af90-397e5220629f",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "e0296018-8b05-4b37-8a90-e6199f84f5f6"
        },
        "item": {
          "id": "98860f27-d6e1-4c51-b197-4f7589fcac75",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "ae33b4ef-61b9-4c38-9976-7816b6a6bb1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bac220d-762d-4de5-be33-e2a8c6e6ed75",
        "cursor": {
          "ref": "911e51a9-2c42-4f21-9741-6807428768aa",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "61fb2264-c083-4eb6-a46e-8bbe5567167b"
        },
        "item": {
          "id": "0bac220d-762d-4de5-be33-e2a8c6e6ed75",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "1bca2aea-f1f3-4e55-8ac8-9c3b7dee50ef",
          "status": "OK",
          "code": 200,
          "responseTime": 788,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "3a72df41-f6cd-48d5-a169-c39b2a98e64b",
        "cursor": {
          "ref": "a55f7739-bf0e-4b7d-9ebf-658ed5c8d465",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "48d5e3cf-4e6e-4cd1-840e-c6d27398db64"
        },
        "item": {
          "id": "3a72df41-f6cd-48d5-a169-c39b2a98e64b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "245cd869-10fa-442f-9c43-911bd7f765f2",
          "status": "OK",
          "code": 200,
          "responseTime": 957,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "08509d39-231d-41a3-9e8a-1fd3f861d7d9",
        "cursor": {
          "ref": "545d813f-86ed-4e31-a9e4-4f351e3b4edb",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "af00a6bb-4c2f-4a56-b997-669455cd7c88"
        },
        "item": {
          "id": "08509d39-231d-41a3-9e8a-1fd3f861d7d9",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "1ef9c423-12d8-462d-950a-ce5d24e96a29",
          "status": "OK",
          "code": 200,
          "responseTime": 631,
          "responseSize": 131
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "23075375-fe92-4c57-b398-ba378ac41f03",
        "cursor": {
          "ref": "eb889260-7ebc-439f-bb59-29f618309a94",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "282dabf3-6613-4b66-9a2a-365ed5c607fb"
        },
        "item": {
          "id": "23075375-fe92-4c57-b398-ba378ac41f03",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "502899a9-8ba5-4fff-87cc-f4df5aa9eaa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c1809ae-d4a8-4127-bc2f-a8e1de4cae52",
        "cursor": {
          "ref": "6a586c85-5bad-4d2f-9c0c-1bd89e4664d2",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "cc0f7c91-27f2-4458-b634-cc2f3723dcf3"
        },
        "item": {
          "id": "4c1809ae-d4a8-4127-bc2f-a8e1de4cae52",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "b3be5837-c6a5-43c2-b096-07d201a5dbdf",
          "status": "OK",
          "code": 200,
          "responseTime": 626,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "8d0c1a00-5d2b-4195-91e5-6b81c5a9e2a5",
        "cursor": {
          "ref": "5ee16818-8a6f-4ce8-be0c-eb5504ca85b5",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "ee972cfc-ee5b-459d-8b6d-5c691f81eda1"
        },
        "item": {
          "id": "8d0c1a00-5d2b-4195-91e5-6b81c5a9e2a5",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "39f9b161-4325-4621-a65d-c15793b4a93c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10fdf812-386b-4314-882b-ff833b9719a2",
        "cursor": {
          "ref": "80430be2-c308-416c-8e6c-b5a062714a4e",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "94acebb0-443f-49c1-b8e9-5ddf84cfe883"
        },
        "item": {
          "id": "10fdf812-386b-4314-882b-ff833b9719a2",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "fd4b3723-0908-4a9a-8c16-520fa3873d27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee7e2ab8-3808-4019-b28b-9fea5d1096eb",
        "cursor": {
          "ref": "2813a697-fe9b-48d5-be5e-9fe2dee214bd",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "14ae5c0b-09b3-4efe-8929-0a63bd2eba38"
        },
        "item": {
          "id": "ee7e2ab8-3808-4019-b28b-9fea5d1096eb",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "d9f2545c-4273-4201-b493-c3caa1f724cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c1e96a4-3491-4cf9-96d8-ac6df1d3ca41",
        "cursor": {
          "ref": "6c690a6f-0e0d-469a-af39-504c63de424c",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "24260bd6-a6bc-469c-ab11-4a09ea816bfa"
        },
        "item": {
          "id": "9c1e96a4-3491-4cf9-96d8-ac6df1d3ca41",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "3e6b586c-c88a-4e9c-b7b5-870d6f86a797",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32ca4986-d376-4026-a793-29877ead2fba",
        "cursor": {
          "ref": "cb36965f-67a0-42e3-935c-536fdb1fb40f",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "7e969bf6-1629-4aa6-9d23-e2fad6cfb45b"
        },
        "item": {
          "id": "32ca4986-d376-4026-a793-29877ead2fba",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "662f5708-0608-40f5-ad8c-cf882b7b8859",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d855ede0-b4d7-44e4-a69e-df2f94d8b7d4",
        "cursor": {
          "ref": "7550a6cc-de1a-404a-8f07-16e3a255e7ca",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "2f46f1e2-e969-49d5-bbb0-02fc4ff48b28"
        },
        "item": {
          "id": "d855ede0-b4d7-44e4-a69e-df2f94d8b7d4",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "7eac2d5a-eb8f-4a20-8689-9a6718987088",
          "status": "OK",
          "code": 200,
          "responseTime": 630,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "c9f0bec2-eb85-474e-ae70-e72932530f16",
        "cursor": {
          "ref": "91cdfcc6-ce58-41c5-a5a6-d553432dc463",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "10a57cf6-6229-4e4c-952c-40504fddf546"
        },
        "item": {
          "id": "c9f0bec2-eb85-474e-ae70-e72932530f16",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "21a1cab3-03ae-42f4-b3b8-7cb26024cec0",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "2bc3b8b3-a873-476a-b388-c3c482d4dd39",
        "cursor": {
          "ref": "a596153a-0523-4957-a26e-561af95962b7",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "5d393cfc-d2ed-4bae-a4b6-0d2a58cdbffd"
        },
        "item": {
          "id": "2bc3b8b3-a873-476a-b388-c3c482d4dd39",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "2e4abea9-ae98-422b-871b-04374b95af5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6013d9c-9660-4871-8d58-0d793151366c",
        "cursor": {
          "ref": "130799de-7893-42df-bfe2-732fdc6372cf",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "cd22ebf9-1929-410f-978c-5a95916fcbdd"
        },
        "item": {
          "id": "e6013d9c-9660-4871-8d58-0d793151366c",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "44b927b6-eda9-4091-90e9-552c38ffc199",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07156ba3-0982-4d28-99b2-0cc4ade4da4d",
        "cursor": {
          "ref": "8dc8c4a9-a861-409e-a2a8-d80c7658384f",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "0e752b08-c55e-4e45-98ad-cfbb817d59b0"
        },
        "item": {
          "id": "07156ba3-0982-4d28-99b2-0cc4ade4da4d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "2247f355-e5cf-4060-b6c6-657ec40401d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20eedff0-2d59-4b7f-b4c0-0c30839831cc",
        "cursor": {
          "ref": "5c8abb8d-b7d0-41a7-ad75-ea4fee4c9df1",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "5ccc345c-4a54-4b49-b069-9b11fca5284c"
        },
        "item": {
          "id": "20eedff0-2d59-4b7f-b4c0-0c30839831cc",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "9fcd7e3c-1c54-4d93-bb53-523a53cde571",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2867415-8316-43bc-9b25-d48517132937",
        "cursor": {
          "ref": "c6d856ca-dd13-4a5a-8c4a-4f83b361b4f3",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "d3387b3e-7ec4-455b-8817-bfe333a957ee"
        },
        "item": {
          "id": "b2867415-8316-43bc-9b25-d48517132937",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "16351169-b82f-4243-a5d6-68310fb77ef8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d75fb4fa-1ba9-469f-9b3b-06c7df6fe9bb",
        "cursor": {
          "ref": "0da2177e-18b3-4c32-8e31-523e63735b86",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "2da6a822-9dab-44ef-9730-5c337e7d63c7"
        },
        "item": {
          "id": "d75fb4fa-1ba9-469f-9b3b-06c7df6fe9bb",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "555223a3-f29d-4c12-a72a-cf1716db773b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e158960-8a89-48bd-a181-fe5666c8352c",
        "cursor": {
          "ref": "443367fa-1c4f-4fe9-afe5-5a049947ee83",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "c6db6e75-f8b5-408f-bb35-de284597742b"
        },
        "item": {
          "id": "2e158960-8a89-48bd-a181-fe5666c8352c",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "58fac8b1-d16a-4e08-8a5b-507df4a05367",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f79db8e-7c00-4966-b4ab-a37f1fed7d04",
        "cursor": {
          "ref": "11972296-7ca3-4023-9990-158b659a6c0c",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "1cff3a26-f372-44b6-8ac9-827f43d84245"
        },
        "item": {
          "id": "5f79db8e-7c00-4966-b4ab-a37f1fed7d04",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "8ce28dcd-0837-4de2-b813-d467458e2d79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58f23295-e895-4633-b35c-9685bca90a6a",
        "cursor": {
          "ref": "5ad31064-6dee-4a31-81d0-b9faac7d05ef",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "bfb9d917-429a-42a5-a076-1f3c1d56ecc2"
        },
        "item": {
          "id": "58f23295-e895-4633-b35c-9685bca90a6a",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "3fc328c0-75ed-4232-b9ac-75730c23b6df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adacf600-55aa-42b3-a8fb-1abbcd386d0c",
        "cursor": {
          "ref": "c1622bb6-c64c-4ff9-a6e4-6f89c697f7a3",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "5e034a98-cdf3-40e5-907c-622ddbf99ccd"
        },
        "item": {
          "id": "adacf600-55aa-42b3-a8fb-1abbcd386d0c",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "37446f71-cc18-4218-82cf-a69d94907a1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a363b675-1418-47af-b0a7-c9353768c8f6",
        "cursor": {
          "ref": "51a9315f-929f-4969-ba7b-1283df4fe736",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "54172bef-ef55-4bed-9eec-b506c41fb57f"
        },
        "item": {
          "id": "a363b675-1418-47af-b0a7-c9353768c8f6",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "ce130058-7a58-4596-81ee-2dd2ff93dcc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "345ffb26-c1b1-4585-ac46-6bd0405cc966",
        "cursor": {
          "ref": "6c0e96bd-b64d-407e-ad91-3bee1011db5f",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "8efad19d-fefb-4a67-8bba-a8ba48d8d460"
        },
        "item": {
          "id": "345ffb26-c1b1-4585-ac46-6bd0405cc966",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "f966e63f-b209-45c0-8a5d-7251407530ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbcff8de-1251-43ed-a89d-b48801074f66",
        "cursor": {
          "ref": "745de30b-a194-47ae-b6dc-979a7781aab7",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "7a5fa836-8fa5-41d1-8816-c2e5bcac7788"
        },
        "item": {
          "id": "dbcff8de-1251-43ed-a89d-b48801074f66",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "2c764f7c-b167-4739-aa42-85850246b80a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9dd0055-48bb-4425-b897-f14764ddf84d",
        "cursor": {
          "ref": "56da303a-a13d-45c0-b0b0-d5d060596507",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "8d1e14c2-f42b-4f8d-989d-1f8b6245f84b"
        },
        "item": {
          "id": "d9dd0055-48bb-4425-b897-f14764ddf84d",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "c8b7b518-2d59-4ef6-994c-0bf262b2d4ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f7f1a58-1bfd-4463-a13e-f7d10eaab665",
        "cursor": {
          "ref": "0c0ee388-c9ad-404c-b2eb-5a20323cd489",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "c56215bc-22fb-4ceb-8015-99ee8fee5662"
        },
        "item": {
          "id": "2f7f1a58-1bfd-4463-a13e-f7d10eaab665",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "44b5ac59-3609-4919-a813-1cb6bd19786a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd6ede35-9511-406b-a40e-90c3457ed2b7",
        "cursor": {
          "ref": "e46ec162-6b30-4226-b06c-cec22623e5da",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "03de5317-d536-416d-a6e5-685c671eb3a6"
        },
        "item": {
          "id": "cd6ede35-9511-406b-a40e-90c3457ed2b7",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "57e1b889-549b-44c0-97b2-4ef051e35f48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f61d8d4-773d-4e1f-a7ce-c9703c237f5a",
        "cursor": {
          "ref": "9ccce515-2c3d-4b43-8485-aefdd9c3deb7",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "adc86078-da5e-47db-8b22-76ee45981996"
        },
        "item": {
          "id": "9f61d8d4-773d-4e1f-a7ce-c9703c237f5a",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "01b8e955-0856-487a-9eb2-0cc401bf4714",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "405ab7d4-977b-4449-9de4-bf358e7527d4",
        "cursor": {
          "ref": "2f7ebcbb-72cb-4a8f-8573-702c9f93312e",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "4ff32bd7-39f3-4fb7-a947-b58cb2fb132c"
        },
        "item": {
          "id": "405ab7d4-977b-4449-9de4-bf358e7527d4",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "b7f80560-98cc-4045-88a6-64042cbfd618",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbb4fe7b-8a53-4d1c-b53d-6464525b0e4d",
        "cursor": {
          "ref": "50ecb840-3426-4edb-a863-255da8f39a68",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "15f46d1e-858e-4f99-8f79-4d7c3c0e8b08"
        },
        "item": {
          "id": "bbb4fe7b-8a53-4d1c-b53d-6464525b0e4d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "8cd13fe9-12ed-451d-8389-713abe351588",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cdde7e1-7dd8-4606-8c57-4cb9c2920a23",
        "cursor": {
          "ref": "2a081cbb-3838-48b1-b791-019fb1c98436",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "4260b37e-403b-41a6-a70b-6aa6a1817344"
        },
        "item": {
          "id": "9cdde7e1-7dd8-4606-8c57-4cb9c2920a23",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "626a58b6-e1fb-4813-8129-6a79a4636a62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f9ac4d8-2c0b-4660-8a7a-38c2a69e7e3d",
        "cursor": {
          "ref": "473f56d5-4f4c-48c0-9093-fb0c5606ddcc",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "c13d1328-07da-4821-b512-f03a42bd36c2"
        },
        "item": {
          "id": "8f9ac4d8-2c0b-4660-8a7a-38c2a69e7e3d",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "60f834eb-b0b2-41a4-9e11-f1e8eb9606d2",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "b9c8a1d4-83f3-4f3d-b6d6-2341b138f963",
        "cursor": {
          "ref": "1d7e8ce5-79dc-4b61-ab03-e0f74868a390",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "cbc20557-6927-4d6e-9c22-e74dc208e018"
        },
        "item": {
          "id": "b9c8a1d4-83f3-4f3d-b6d6-2341b138f963",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "6b37bd10-d2aa-44db-af83-8c5ef21a8a33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12e5cf2d-c277-4599-94aa-a8df8b4baad2",
        "cursor": {
          "ref": "696fd693-d9cd-4d77-a72c-4f99c82754d5",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "e0dc5aa1-6478-404f-97db-3f407dcc255b"
        },
        "item": {
          "id": "12e5cf2d-c277-4599-94aa-a8df8b4baad2",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "9c712bb6-64af-4416-84fe-0208d63f1b9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6be2b825-421d-47b5-b1ae-05ed3ae85031",
        "cursor": {
          "ref": "83a0b321-ca99-495f-ae76-bd205432b09b",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "071dd4b0-e091-4e34-8ceb-19eb83516e8b"
        },
        "item": {
          "id": "6be2b825-421d-47b5-b1ae-05ed3ae85031",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "305d88cc-3797-4e15-9998-f233b7878b01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae44fb96-c9f0-4df7-9c5a-7f63fa623aae",
        "cursor": {
          "ref": "f2cb9205-9aff-4d1d-855e-59185a382710",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "3d5b5289-fe35-4776-bfe0-560622f4b1d6"
        },
        "item": {
          "id": "ae44fb96-c9f0-4df7-9c5a-7f63fa623aae",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "d6b7c147-75d8-49c5-b6e6-17ef2a4661a1",
          "status": "OK",
          "code": 200,
          "responseTime": 632,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "d3b229cf-d08c-42d9-b37e-e61b26a28d8d",
        "cursor": {
          "ref": "b9059dec-f95a-411c-adbe-a77890045824",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "ed69709f-a5c0-48ac-a4dc-d20413e6e784"
        },
        "item": {
          "id": "d3b229cf-d08c-42d9-b37e-e61b26a28d8d",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "1ba92bad-f847-4ba4-813f-553f7286ad74",
          "status": "OK",
          "code": 200,
          "responseTime": 59,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "68a537a6-b2e1-4767-b74a-496329e41c26",
        "cursor": {
          "ref": "f8411052-4adf-4300-925c-5a43a4cebab6",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "86ed4251-8b56-46c0-bb7a-2c61fa88764e"
        },
        "item": {
          "id": "68a537a6-b2e1-4767-b74a-496329e41c26",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "6f1fad5b-88cf-4eaf-b998-9cf340182ae9",
          "status": "OK",
          "code": 200,
          "responseTime": 637,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "5edb1c40-b4e9-4164-ad50-7f61b6fd1c47",
        "cursor": {
          "ref": "18a8b96e-3e81-4eec-b3a6-6e2a10dd412e",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e6dc42a5-2dae-4d81-8130-6e5498164005"
        },
        "item": {
          "id": "5edb1c40-b4e9-4164-ad50-7f61b6fd1c47",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "803eb6c0-41c2-4097-9ed7-9d3bae959e85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4be699a1-b6aa-478e-a440-fb9027c39bbe",
        "cursor": {
          "ref": "c9543ce0-0d7c-490d-8433-d01eb44c8bdc",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "eff328b1-a077-4b01-b772-fe961e8981d9"
        },
        "item": {
          "id": "4be699a1-b6aa-478e-a440-fb9027c39bbe",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "15ae4c1d-f5bc-4770-a11c-d69c72c433cc",
          "status": "OK",
          "code": 200,
          "responseTime": 984,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "40557fc4-c37b-46c8-9864-ef41d115a746",
        "cursor": {
          "ref": "c5626079-f17e-4fd5-8bbd-759f07eea573",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "3bb52ded-1ec1-4b95-8a11-9db80a8f2cf6"
        },
        "item": {
          "id": "40557fc4-c37b-46c8-9864-ef41d115a746",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "6a7f3786-ec9b-4628-804d-60064aaa5e21",
          "status": "OK",
          "code": 200,
          "responseTime": 599,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "67152456-2171-4256-beaa-f1542e5a520b",
        "cursor": {
          "ref": "36c7be41-3a9c-477e-ae93-bcb456d1ced9",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "b7327b66-22d3-4946-9c32-ec467f244b61"
        },
        "item": {
          "id": "67152456-2171-4256-beaa-f1542e5a520b",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "19b510e3-0f14-45fa-b0be-3a039657daff",
          "status": "OK",
          "code": 200,
          "responseTime": 615,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "177663c2-cc1d-4cb6-86fe-7b0ab1e3417c",
        "cursor": {
          "ref": "a706de98-41ac-4e27-8847-5f0488b01ffd",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "009c9a0a-0e2d-4b67-ad81-aa6dd4fd2bab"
        },
        "item": {
          "id": "177663c2-cc1d-4cb6-86fe-7b0ab1e3417c",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "76cd85ac-6dc4-4302-9d62-9c4be93f7c21",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "c65e7959-f5e9-4df9-a11b-20448b709260",
        "cursor": {
          "ref": "56f75c34-e159-4ed5-a7da-e7bfcaa1e3fb",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "1ebbea64-6d59-4ef2-b9fa-9188a4bdb8fd"
        },
        "item": {
          "id": "c65e7959-f5e9-4df9-a11b-20448b709260",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "49cabc85-1789-4bd6-8c1f-f2749b523b7c",
          "status": "OK",
          "code": 200,
          "responseTime": 604,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "34c8037d-ec5e-4ce7-99d3-bdaa3837d916",
        "cursor": {
          "ref": "0140d2c8-7dd9-448e-98da-8ace74d46904",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "fcb77e96-8851-4988-a74c-a1f3b87ef6f5"
        },
        "item": {
          "id": "34c8037d-ec5e-4ce7-99d3-bdaa3837d916",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "b989f836-70d1-40eb-a9a2-35272a73e02e",
          "status": "OK",
          "code": 200,
          "responseTime": 56,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "b72393f0-2ace-49a5-9a5a-3a5e7f4f3d97",
        "cursor": {
          "ref": "2142f979-fea2-4bae-93bf-ff7303983270",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "73cdcdc0-f312-435f-bf6c-db85f27f11e5"
        },
        "item": {
          "id": "b72393f0-2ace-49a5-9a5a-3a5e7f4f3d97",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "060a68a2-9cad-4d95-8c72-25364f59ec2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0452f562-6e03-452a-bf6d-756ab036d3ad",
        "cursor": {
          "ref": "f3e254b5-a478-4753-8929-966146d2e2b8",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "9bc1ee11-3bdb-4424-af18-f863b980e12e"
        },
        "item": {
          "id": "0452f562-6e03-452a-bf6d-756ab036d3ad",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "b0058d33-6cc2-42fd-82bc-620e5e654aae",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "6d9a9fa1-8a25-43ee-8235-8713e7e388e5",
        "cursor": {
          "ref": "3863a068-e750-488d-b32b-35e1aa881e9a",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "ca71295b-2b9f-4b68-b13f-90d2f9d2a467"
        },
        "item": {
          "id": "6d9a9fa1-8a25-43ee-8235-8713e7e388e5",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "41941e24-99b0-43b4-8ca5-e0157e71748f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "061d5cc9-c2c2-4a1b-97e0-227a1c5fce53",
        "cursor": {
          "ref": "3b40b72d-971a-401e-9fc8-b783e00257f2",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "7a6ff55b-06b8-4489-a018-fcbd3be10935"
        },
        "item": {
          "id": "061d5cc9-c2c2-4a1b-97e0-227a1c5fce53",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "c25c61a0-5279-4092-9214-8c010242de7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83e7253f-6e8e-48bc-a70b-3af1453b785a",
        "cursor": {
          "ref": "9eb9d3da-7dd3-4660-beda-9439001fbf7c",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "3d4806c1-91f6-41cc-abd4-d73fae11ba2d"
        },
        "item": {
          "id": "83e7253f-6e8e-48bc-a70b-3af1453b785a",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "34ac5b61-bd1e-4e1e-8971-e41d339b3aaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d334f7e-25cc-4ac3-8465-71351e769be5",
        "cursor": {
          "ref": "df2bb143-5683-41e8-9b80-5e5ed610171a",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "c274f18f-b55b-4b0a-b69d-2661ae446523"
        },
        "item": {
          "id": "0d334f7e-25cc-4ac3-8465-71351e769be5",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "b4b97196-2937-4d5a-99bb-3090972f4fb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18957b41-5a99-4901-8f2d-c4010fd223d3",
        "cursor": {
          "ref": "7303edf4-f9e8-447e-9ac0-6b53bf7412a8",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d6c59d2c-56fc-484b-a292-07c3600c7f16"
        },
        "item": {
          "id": "18957b41-5a99-4901-8f2d-c4010fd223d3",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "3fa8965b-d9e2-45e2-b1fe-bb8880afde01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 579
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29deb85e-8a99-4af3-b75f-abab8e0dabfe",
        "cursor": {
          "ref": "bdad533d-1c5f-4899-b6d7-c26c4c23779a",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "5793e4f5-04d6-4110-9fe7-c06292b98aa8"
        },
        "item": {
          "id": "29deb85e-8a99-4af3-b75f-abab8e0dabfe",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "81b03861-f83d-4faf-bf30-bcbaf763e0f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e50d8eeb-a473-4e99-8374-786a9392ebe7",
        "cursor": {
          "ref": "6e357796-6c89-4d58-8d25-a912bc7100fd",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "3211cce8-d041-4d6d-8b22-2ea23208fc4c"
        },
        "item": {
          "id": "e50d8eeb-a473-4e99-8374-786a9392ebe7",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "e2a8c18d-da1d-4ee9-83e9-84460f638efa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28facb9a-2118-423b-ac27-ed4f8415367b",
        "cursor": {
          "ref": "a0fcf703-ccfe-4505-8c65-24cd3d89d26f",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "530d1d66-ddf6-450b-835d-cd67d49afb8b"
        },
        "item": {
          "id": "28facb9a-2118-423b-ac27-ed4f8415367b",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "5a7e5f58-2b4a-4f62-b458-fb15b7ab1dff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbb2f6fc-4d30-4efa-a889-d5db9ede0e5e",
        "cursor": {
          "ref": "e1e85d2c-0c43-4ca6-bee3-6e46fdcde6a6",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "10dd436f-fe40-47a4-9844-e832414b047e"
        },
        "item": {
          "id": "bbb2f6fc-4d30-4efa-a889-d5db9ede0e5e",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "eeb1229b-f685-40be-8b24-4d9a1ac3d59e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 579
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31e19aaf-90ea-4da7-9e84-2c950a17b9a7",
        "cursor": {
          "ref": "8f242206-3188-4d70-9676-2ab3bed9f90e",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "207b512b-718c-457d-a60c-e451610f2c3a"
        },
        "item": {
          "id": "31e19aaf-90ea-4da7-9e84-2c950a17b9a7",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "4d1aa5f9-facf-480b-97ce-838a849cd18c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "216f59ae-f73b-471e-815c-30e9952de712",
        "cursor": {
          "ref": "ddf19a12-2ad2-4a57-b39f-bf79005a4f98",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "4a3f95a9-764c-415a-a277-1e1e7a23e50e"
        },
        "item": {
          "id": "216f59ae-f73b-471e-815c-30e9952de712",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "3205c7d9-dc31-4c58-9970-67257ee62247",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50f9c495-db44-4f39-882f-8b1c3a043911",
        "cursor": {
          "ref": "175c95cd-9966-4e40-a43f-a8b8c3707642",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "beb2ae5a-941f-4688-b4f3-afc33ac2175d"
        },
        "item": {
          "id": "50f9c495-db44-4f39-882f-8b1c3a043911",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "e2538084-6d56-43c7-b986-b76f9bbb8592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8bbcedb-02c6-42ed-8f8e-306403cc3167",
        "cursor": {
          "ref": "83edabf9-2143-4498-aac6-64fa231358a6",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "634f0e35-cab3-4fe0-8360-ff7fbf051965"
        },
        "item": {
          "id": "b8bbcedb-02c6-42ed-8f8e-306403cc3167",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "983adb39-82d0-4160-bb4d-77c4e0eac71c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac30af4b-09fd-459a-9bbc-3edcc607b31b",
        "cursor": {
          "ref": "65be483a-914a-49c5-9007-546ed6baaf73",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "ac3ce560-02c4-40fc-ba10-9a756d815946"
        },
        "item": {
          "id": "ac30af4b-09fd-459a-9bbc-3edcc607b31b",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "77229750-b691-4c58-b71b-6ac46a117b58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "243358d1-b8d8-4d81-92b2-e9d89ccc2b68",
        "cursor": {
          "ref": "2ad6d251-0615-402d-8523-dedb426c0585",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "4432fe49-6efb-44f1-acbd-dcac76ed8bbc"
        },
        "item": {
          "id": "243358d1-b8d8-4d81-92b2-e9d89ccc2b68",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "d83bb4f6-b982-4f61-82ae-569a8ffe5757",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ba5bc19-8695-4e85-93a6-f5b191657580",
        "cursor": {
          "ref": "c6c517af-8c83-480a-94ad-5b600ea5cc18",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "63cc320f-840f-4be9-95b5-e650552e4e8b"
        },
        "item": {
          "id": "9ba5bc19-8695-4e85-93a6-f5b191657580",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "2679e6af-3895-416f-a9f4-058e933da87a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3c8d1ac-5fba-499b-b51d-16abf58deeeb",
        "cursor": {
          "ref": "72000614-41c0-43b4-89c6-2d03a5029b5e",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "ab9ffea9-3875-4466-9075-5f559e53d5f8"
        },
        "item": {
          "id": "c3c8d1ac-5fba-499b-b51d-16abf58deeeb",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "6bc8529b-6c87-410d-8572-3979096f887e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1225824-4688-4689-8c01-28c93df6e38f",
        "cursor": {
          "ref": "1f141b41-a2a4-4421-a381-33106c6863a8",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "5576e059-8b92-4de1-9d9f-6cf6f384de0c"
        },
        "item": {
          "id": "c1225824-4688-4689-8c01-28c93df6e38f",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "d2466659-6cf2-4c60-84ad-439ee46b9c19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16944e08-9e11-433a-a6d4-77ed708adb05",
        "cursor": {
          "ref": "df93764d-66cb-4999-ad00-e4d4178ea917",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "96994bbb-2032-4eda-b9c8-6e15d6f51064"
        },
        "item": {
          "id": "16944e08-9e11-433a-a6d4-77ed708adb05",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "1e7afa4f-41ff-4a8b-8d2f-a3edc0bf40d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fecc3f34-7caa-48fc-9ce6-e88ba60244fa",
        "cursor": {
          "ref": "212d9ac9-e89b-400b-a39a-be7e08f87460",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "99e32001-568d-44f9-a19e-8bfa0dd0648d"
        },
        "item": {
          "id": "fecc3f34-7caa-48fc-9ce6-e88ba60244fa",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "1992cd18-8050-4613-a63f-be011928bbed",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:263)"
            }
          }
        ]
      },
      {
        "id": "bf710e9f-5418-43f6-a783-04a764649d09",
        "cursor": {
          "ref": "fc4915ac-8a56-4922-afb2-94cf68a06922",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "e01d9eec-1325-4046-a1a4-1b877d78d452"
        },
        "item": {
          "id": "bf710e9f-5418-43f6-a783-04a764649d09",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "c9c4550f-a283-4009-b59d-8ab28f76cffc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d89a5fc5-d622-4c26-bc5d-7311b0a66b80",
        "cursor": {
          "ref": "979ce0fc-e08a-4276-89e8-e288dfef0a49",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "ee867b8c-24c0-46db-8953-6da4b797a5b9"
        },
        "item": {
          "id": "d89a5fc5-d622-4c26-bc5d-7311b0a66b80",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "fd3bd420-947b-4605-886d-1e2b1146b379",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:265)"
            }
          }
        ]
      },
      {
        "id": "6cb2b0f7-3d52-4416-b856-b732d98071ae",
        "cursor": {
          "ref": "9ee70ace-8a33-4237-8caa-9a012f4b39a8",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "14e870b6-b865-449a-8771-454c4702acbd"
        },
        "item": {
          "id": "6cb2b0f7-3d52-4416-b856-b732d98071ae",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "ae87c213-f09e-42da-846e-4bbe3aea0521",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:266)"
            }
          }
        ]
      },
      {
        "id": "455a404d-3883-428d-9790-1b57d401ef4f",
        "cursor": {
          "ref": "6b99cc53-0650-48a5-b1f5-c93e681b69ea",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "27f20fc2-553a-43cc-8c44-bdf024adeaa4"
        },
        "item": {
          "id": "455a404d-3883-428d-9790-1b57d401ef4f",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "26910382-a839-45e9-88a9-2d089123a9d9",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:267)"
            }
          }
        ]
      },
      {
        "id": "8cb6371e-176d-4efd-b63c-33c953c74cff",
        "cursor": {
          "ref": "e907ac38-2e5e-44f7-aa35-a6662e9d5818",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "e3eea209-000c-4d10-b7fa-54f68d265291"
        },
        "item": {
          "id": "8cb6371e-176d-4efd-b63c-33c953c74cff",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "a30f703d-f785-4007-8378-5e4f60b3d0be",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:268)"
            }
          }
        ]
      },
      {
        "id": "01544679-4ee2-4a5f-a087-0bd5d727371f",
        "cursor": {
          "ref": "7502a2f7-8268-4fc0-848e-9d23f53d039f",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "828c56f8-34e9-47c4-b8ae-c2530578075b"
        },
        "item": {
          "id": "01544679-4ee2-4a5f-a087-0bd5d727371f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "88cf7f2a-1cda-42e7-8219-9cb91bd57919",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:269)"
            }
          }
        ]
      },
      {
        "id": "c8132c7d-07c3-400f-9c25-4dff14fa9d2f",
        "cursor": {
          "ref": "f15091f9-1909-4f73-ae1d-2781a23493fe",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "08ebeddb-3700-4416-880c-08f68cff72be"
        },
        "item": {
          "id": "c8132c7d-07c3-400f-9c25-4dff14fa9d2f",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "55ecccb8-b336-4216-bf4b-49a04603a740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0680bf4e-8c72-45ad-8861-93916130d9e5",
        "cursor": {
          "ref": "4d28f69b-cf93-4ce3-9d49-c1a965f6e7b1",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "06f18dad-1746-4876-b907-b6b10dbae93f"
        },
        "item": {
          "id": "0680bf4e-8c72-45ad-8861-93916130d9e5",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "7e4ad8eb-f70d-424b-8bf2-484ebeaf2ec7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30f32f06-9711-4ab5-b3c2-d88d9e651f04",
        "cursor": {
          "ref": "fbfa3e88-d3c4-4bae-95d4-f849f8cbd66f",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "7d254304-6a12-488d-a5e7-cd9042aa313c"
        },
        "item": {
          "id": "30f32f06-9711-4ab5-b3c2-d88d9e651f04",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "80981aa5-3bdc-48e3-84f8-b1e7cb6bb6e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "743ef7fc-65dc-49e9-896b-7393d3b82784",
        "cursor": {
          "ref": "a0744db6-d8cb-4185-afa7-07937e390792",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "a1cde0de-9a9e-4a9b-8ea0-62980b960fe4"
        },
        "item": {
          "id": "743ef7fc-65dc-49e9-896b-7393d3b82784",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "945c6b67-97d4-4763-a17e-6f0813fd40d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a3ab941-6776-4e7e-a751-1eec3bf9fb99",
        "cursor": {
          "ref": "80eb5ced-216f-44c7-af21-4d6d62c85fae",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "d2802ae0-2ce5-4917-9d38-6895f49f40f7"
        },
        "item": {
          "id": "0a3ab941-6776-4e7e-a751-1eec3bf9fb99",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "a3c81ad4-f695-4782-9efe-bcd2a7ae3cfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56b6bf16-1dd7-4cc8-b301-c074858e49f7",
        "cursor": {
          "ref": "0bc5e912-91ca-4ea7-a269-b83b00ef24f7",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "8facd0ff-9572-4833-87aa-2b028e036db5"
        },
        "item": {
          "id": "56b6bf16-1dd7-4cc8-b301-c074858e49f7",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "9c0b9cdd-d2e2-4d4c-89a9-92f805e97cf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e77bc4e9-8e42-4467-b39a-b785b14ae8f1",
        "cursor": {
          "ref": "763c5ada-938f-488a-b48b-574eab5b55d1",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "81b6780d-11ce-4f3a-9f1d-ea8b769b6609"
        },
        "item": {
          "id": "e77bc4e9-8e42-4467-b39a-b785b14ae8f1",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "e17ee8cf-6089-422e-8515-8347f00f590f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4dc3e87-34db-4ef0-91c4-93b71e793033",
        "cursor": {
          "ref": "09fb7520-3daa-4fa5-b6b2-f7b6a198d0e1",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "00c0d77f-00be-4354-9169-ba8ae5031d34"
        },
        "item": {
          "id": "b4dc3e87-34db-4ef0-91c4-93b71e793033",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "cc3d61a9-f91b-4d2e-a54e-09dcfe30b01c",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "c024b162-5384-48c2-a3ae-2a741c96c142",
        "cursor": {
          "ref": "318685fa-e408-43aa-8d19-3227c0c303f6",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "8666538e-872d-4d86-bbaa-e26c9d1892a1"
        },
        "item": {
          "id": "c024b162-5384-48c2-a3ae-2a741c96c142",
          "name": "credentials_verify"
        },
        "response": {
          "id": "e46c3923-33ff-4668-a8f1-223ed002962b",
          "status": "OK",
          "code": 200,
          "responseTime": 727,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ef01a10-a4bf-4a78-acfa-0ab54b25e3ab",
        "cursor": {
          "ref": "fcb739d8-8ab1-4505-9e99-e8bdcee500e0",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "be3dd4a1-b354-48f6-a936-fdff6f41f567"
        },
        "item": {
          "id": "7ef01a10-a4bf-4a78-acfa-0ab54b25e3ab",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "5cbabbe4-cd9d-44e6-ab85-2fdeba5fa836",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "f639d811-e7ec-4f89-b976-8d64ab06665f",
        "cursor": {
          "ref": "3ad2c157-162f-4319-ac62-62370cb4d1d3",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "e2d2bb19-4702-4557-8b31-1d2b9f85edb4"
        },
        "item": {
          "id": "f639d811-e7ec-4f89-b976-8d64ab06665f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e25ae65c-a408-4554-9d87-d0015b2fcc6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f639d811-e7ec-4f89-b976-8d64ab06665f",
        "cursor": {
          "ref": "3ad2c157-162f-4319-ac62-62370cb4d1d3",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "e2d2bb19-4702-4557-8b31-1d2b9f85edb4"
        },
        "item": {
          "id": "f639d811-e7ec-4f89-b976-8d64ab06665f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e25ae65c-a408-4554-9d87-d0015b2fcc6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db3b1d4d-b991-4950-90c4-9c6a757b9b97",
        "cursor": {
          "ref": "8bfd002f-b541-45e5-9429-853be8b5d9f0",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "1a87e9e1-1585-4643-b116-a3bf933d934a"
        },
        "item": {
          "id": "db3b1d4d-b991-4950-90c4-9c6a757b9b97",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "82156837-9b49-46d7-8215-c31e4d060b64",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e2b972d-b9f6-47bf-bbc0-178f7b51c127",
        "cursor": {
          "ref": "e1c763a5-d0d2-40a6-a8e4-61ba01c652c7",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "8ed3c69a-529b-4189-9f96-785428a40986"
        },
        "item": {
          "id": "7e2b972d-b9f6-47bf-bbc0-178f7b51c127",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ff60de03-9603-4721-9cee-09278a892c6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}