{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "852a164b-7730-4894-9bb7-c3c56279260c",
        "name": "Clear Cache",
        "item": [
          {
            "id": "9acedc3a-2756-46c5-832a-cb0420357378",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7e303301-22b5-40ab-8eb9-3cecf4fe0604",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "acf65995-c945-4b6f-ab28-1d97feb9fcd1"
                }
              }
            ]
          },
          {
            "id": "c79c9b65-8e7f-4072-a965-ce25f10dd42a",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "56193462-f5df-4229-8e4b-767be9399c6a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "233914b4-184a-4b80-9f99-8172dc994714"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "884a41f8-907a-43bb-b19b-80c68f6097c3",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "6613da42-df43-4091-914e-b053cde00984",
            "name": "Positive Testing",
            "item": [
              {
                "id": "26ebb8c4-fcbc-44e3-89e2-9eaeda0f8012",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "088ed8a9-bed3-4c2f-9e66-3b25b063e1e3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5feb340a-9b7a-4381-9253-6ad72117f075"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "569ea568-127e-45fa-b7b4-0f7ba1529ad1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9613ba36-0a37-4507-b233-8add408135f0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1a676ebd-9dcf-46b3-a1a3-a4edbb05530c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "53abb10c-66ec-446c-aa96-d4b56e3b0e8a"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0384cac1-d811-47f7-aad0-25f01b160ede",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "93a2a99f-ea6f-4419-971c-28214e4c43ce"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3a15dd63-5ebb-42c9-bb68-58d60c90ccc0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3f5a2d1e-0060-49eb-b712-05cbeca5c0ea"
            }
          }
        ]
      },
      {
        "id": "6d1573ed-b569-464e-a33f-5e8962afb54f",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "228f7c10-4406-4c29-808b-fadb33a62d55",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0d1b8108-f591-4b2e-8cd4-d13ffbe93df0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "72a96984-315c-4768-a031-cba40aa992ca",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6a72ca2-56b5-4453-b893-2e3b3cd542f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a192892f-339e-4e12-ac8d-8367181552f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48f03796-f4aa-47c8-a9bf-7b3809371399",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37c20cd2-189f-4893-923e-094ab67479eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bf76babf-929e-4488-9c09-253309ee1945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "242c96b5-708e-4fbe-84b7-021ada92d35a",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9716419-44bd-4ef0-8d59-19ff846855cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5180ee6f-6e5b-4b66-a040-d820e17d9bf7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ecd90bf5-d2e6-45af-a506-fd64628764aa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d69503d2-8d66-4b4f-99d3-c0f5161bed67",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f035d90-d0f6-42d7-887a-311b780bb950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ff0c1255-f44b-4476-be6e-ad48d0dfe581"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efc8abb6-ee79-42c0-81bc-e7fe889cf934",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed1f181c-e3ee-416a-a784-9f0ce4fa7f48"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f062862a-8b3d-462c-baab-5693d4f9d8c5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8772aa17-c9e5-4638-8601-0f37a32e4a24",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "620108a4-049f-48d6-8075-2e644660b132",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "5a8d41a8-505f-4376-8429-1b95992f75b9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5700a18e-94df-4d64-8a6e-cb937c852894",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "2c78aa12-93b3-46e6-9bdf-1642141f2454"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "626d190b-700f-4690-ab02-7c05c6f1e400",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5b8adeab-6b53-44b6-a371-fb7d7b7c58d3"
            }
          }
        ]
      },
      {
        "id": "247825bc-c439-4ded-960b-abffa9713765",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "24c2de99-32b5-405f-922e-3a80fb0877f5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "08cb18bf-49c0-4667-8e65-8f1550178266",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "c65f6927-f6bf-4650-b443-bafb15f610a5",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3ec32f7-7c99-4c6a-b090-4b9fe56a9665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b540e4f4-19d9-4bcd-b7d7-b19c8864a6fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e52181d7-e45b-45b2-ae4b-1bddc2b48ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f18b2561-4021-4fe9-996e-9715a3240191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54c47b13-a3d7-414d-a0a5-7e6d0deb7a4d",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "095531df-1761-4daf-8ab7-7ad48a80ec07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "890ef30c-3d3b-4c07-8055-14ad7d108f59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2786160-eebe-40ad-9a91-e2ce3d45e0c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c2d58051-d26e-4119-92ef-76f8eaf15efa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb3c43d1-1674-4e01-a2b8-8655c6ac73ad",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ed1aa70-13db-4d50-b7da-183e80101777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8534db2c-bd71-4251-abf8-dc0653bbcf9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61cf5e19-ada8-43ad-9c13-82963c70deeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "94d281d2-fe1f-4830-8887-bb0a99d43d1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca6c5651-ffd7-42dd-9141-adfa614c6d9f",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a37515ed-f44d-4f49-acc9-c72764c4791e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4044abcd-4dab-444f-876a-7b9f06035ff3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae977825-abbc-452c-97e4-08c3bf3e74bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "900486da-6225-4b85-811b-232e3da452cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9ab71e8-8b37-4ced-8425-6d984e363ff0",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39e4efcd-c753-42cc-aec2-172f8eeefcad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "328ce3f5-4a67-42db-811e-6fbaa2125813"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6777026c-c5fe-4ad8-8864-68fd67771c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fecceff8-1c8e-4905-b70d-8e773233310d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed08215f-845b-4a39-bf7b-159920983864",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01821310-7f9e-411e-984d-81fa4534ff8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60ed8a00-6fe8-4645-9b4a-9974d72a400b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99b20272-0577-4685-9306-82802bcc7edf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7829faad-adf1-46fd-890a-9e9da3da604e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa8a45b0-52ea-44a0-9b4d-75aec36697ec",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c85ee46-b2f1-48e8-ad72-07160d23400b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b16eb50-3613-4f1e-a3a1-972f7a3466b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b3eb927-858d-46b3-9f99-6364e306b67e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6354de5d-87a1-4cd9-8564-98ff23a7ee81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "033a0d4b-265c-4830-8dff-3746c015e589",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8b4923f-50b0-4e31-8321-11ab61dd1e85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1743874-2dcc-4418-851c-91701d88170d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f47a396b-9d11-415e-a65c-9df6e47c696e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e2624f1-b92d-46b2-a760-ad6cd7942a6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a33ea830-b470-4304-b4a8-f698fcaf4f32",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31725892-0d5a-4fd5-91de-6daeb37a557c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9af30ddc-e04b-4d57-acfc-b8abbb1df325"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32bc80c8-ef66-4bff-9089-d93c271a1024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "57737d20-c87b-485d-8c34-33dbfe5ca259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7b1a74d-9182-4e23-bf18-c9276c5a09bd",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "123cc984-96f4-4f0d-8cd4-836ac0bf3f9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e50ca49-3b09-4ccd-9041-ac6ecaae0cbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdbec138-229a-4402-ae35-86a044db0d8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fbf6b916-1f50-4a11-b695-a3ec6a132bc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57cf1eed-81e8-44c6-ad67-e5fa7741ffd0",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b3321ec-be25-45c8-baf7-b9e5b8dfcd20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be7150a2-17d4-46fb-9439-5247c75bb173"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf09b794-dd7d-4553-8da5-b275f8b59e40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d29b743f-54a5-4c1d-b70c-dd8fd780f966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "967cfac0-2d90-438f-aa9c-056e70e29daa",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ed7ddee-0426-4b03-a56a-a789d213ad4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06107089-4528-47c3-9ad3-ccaa98c82703"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e2d445a-d4d7-4f6c-8d24-9f2d9346fc38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "61525a30-a6d4-4e45-8ab4-0d30728ed794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa5851fe-c208-48f3-ab36-9c7f0c2ed422",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5cb9b07-8350-49dd-90f5-b18d1b050bc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "559bbff3-b4ad-4c07-9ea6-b64f62cc5452"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fe45eaa-9d51-4163-98ef-3f3ded578173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "049ee77f-86fd-4cc8-b741-eca9d15b4cf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff3511e6-f7ac-49c3-bc51-efaaf571b77c",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb95cdc4-1789-47bf-895c-974c4ae6d33c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ccad592-c6bf-4db7-8969-ae26bc5a7a2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d56e1192-e4f7-40b4-9aa3-c2c25a47218d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f8c4e7e3-1d6e-461f-839b-d99d974d447a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02ee739f-1998-44a2-aa03-cf707f29f512",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e49dc691-3bd0-4cc2-9b3c-7d96dd44079f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d961e35a-5be0-4c0a-8f39-af78369ce592"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f28d40a1-9b48-47ab-a4c2-3c02928f9f80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1afe64a2-9a2b-4843-88f8-493f8e029562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d962b0b0-ca91-483c-89a4-c3bdabf34052",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09f29caf-5c78-4b11-a5ed-8d73a88a9ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f63eb9e1-d97c-4f8a-b6f3-aeb18dda0d24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b3d8794-889c-4a1f-9e96-d189ab031eb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "273d63cf-b9ac-4622-a16d-81dd35d66578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9caaaa5-1ef3-4233-aaf4-9017fb1b8b0c",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4dd7992-ae19-4772-92e8-7fde7331eea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "539ea067-ba32-43c2-9022-038d9f559d9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "365b056a-2fa7-424d-b86f-e7ace2a528e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1e4e9508-52d5-42fb-ba6e-b567ca07f4e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3690e559-2805-4726-831b-8ad05387d00d",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e82db59c-802c-40b6-bf75-3db950dd7ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1c89145-ec84-47c5-838f-d3f350d0ce6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ea67a1a-873c-4d1c-ba2e-9339c1e80c6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "398c48d3-dce6-4230-a08a-3cd5f53081ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40ed14be-69a9-4fb4-a17f-1f6b5408d73f",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a30f9f54-7980-4f37-b6d7-1e6b4489bd3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9054063b-4fbb-43cf-8be6-f32f587613e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a2d4ed9-6455-4c24-99f0-2151392ed9ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "60cd3fd5-21a5-4686-aac5-099f8beaa9ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29d7c8a5-fd2f-4930-abea-053a7f6d67bc",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35ee8b96-c170-45a5-9f30-805db1d2a4f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c55faa4-7bcb-45a6-a715-46abb00b9955"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e050dac-1f5b-4696-8e1c-6fc7cef3f5ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "099a36d4-095f-40b2-ac96-cdb4d322e864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91c5ee94-0935-4104-a283-656f58fa6c06",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3b8d648-62a0-4839-afba-8c573f00e6c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97ae7d70-1cb1-4e04-a69f-9956e6193516"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efede002-3ece-4778-933e-d73282676efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d77d1baf-14fc-4436-bce6-40a78b2cb863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2831a5c1-59cf-479a-8ffd-fa68ee57e125",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d04144e2-6c79-4e82-9870-fd687e0a8919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf1ce329-e9bb-44c6-8233-121fc72e40b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df4bcd0e-b65c-4360-a76e-0d176673cca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b642fb4d-6fa4-43d7-83dc-460f51dcb38f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "780d7605-a0bb-401b-87b9-4827583b8962",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73294886-d50f-40c7-994d-7018bee2a175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d4cb8bc-25b1-4c7b-912b-7be928b56dec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ec14d6b-5af9-4e6a-bbd0-44f45e7f314f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "63d330de-4dfd-4223-9832-e3529f26a17a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9765a27-b066-4381-bc66-56933e2a2b7e",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ca48e82-9b9d-4024-88a5-abf6b9b0b5a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e65cb4ab-8eff-4ede-8df0-d82e53d9f127"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56661ea5-af46-40fa-9bb2-448b1876741b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "13f142d9-2c22-4752-909c-f60326b50d27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f560a3c-7429-4b92-b9d7-1f9a609604bf",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59d8e0d2-94f7-4ab8-8345-454d8a101532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f40980c2-0382-43d1-ac3b-6692f999fd08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46f17dee-3b1b-4dff-bc4c-1a5631e4f4dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e254c224-1ccd-4b50-8bf4-b83847d409cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3de3d7c0-525e-402d-a3f5-6e36e4f4712b",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b08e6ced-cccf-453a-9646-38c4ffb6228d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c82f278-64d7-4196-821e-1aa75ccc1674"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "530d3ff9-1b3b-4b41-af3f-319bcebe0303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3eee5c94-0981-4af0-90c9-21b9effed47d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e692fc67-c1db-4a51-afe9-bbc049cc50c2",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89fff5e5-45d1-4373-b2c6-56541d154d9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d940f9c-7421-41b3-a73a-4fe6313b48e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40f87e13-590e-430f-8cbf-09266c5f8d4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd6d47ad-a068-4df7-a572-210b82cff1a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ef108e2-afcb-46a4-9a5f-544266b93c61",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d412dca-51b3-49b4-a8ae-ee95e3bccf84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffa2024a-4ed6-4a78-8771-2e2ba550930e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5629115-a0df-45ba-9300-298b2821cc40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "faae07ec-5d75-4a71-b292-e6f6078ca06e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "691dd817-1940-49ae-9b4b-2644240539a3",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d04f751f-f116-44e6-9e86-5938259d88cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd7434dd-5870-4b83-be02-7f8ec1fc7808"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dd6b04f-bb8b-4f8f-8beb-f892b75c53da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6bd1f3dc-0791-4ae2-876b-30486c9ef3b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "912b3840-9c85-4d9e-8110-adf744060b13",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d235cba5-5fac-4a32-8fac-8db2bfd6db5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef9e7fb1-d473-44cb-87c3-e12d37f6679c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a211d4d6-3701-418e-9e12-5d4a2f520802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4ca6d27-3853-492b-8a10-361c4d2fa0fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07460789-6153-4509-bc88-6422a7732404",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2c2ca95-7e07-42cf-acc4-0c1c3cefeb07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a5c021e-bbc7-4bd1-b045-abe27d91df1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f79e916-aaf2-41dc-a4c2-b598a804244d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2130314f-2ccd-4cc8-a2a6-c69e82a3846c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c59001c-e55e-464b-9dc5-ded5f35e59c5",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dc0ab01-af2f-40c6-b5a3-f64196b7b3c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d1aa68c-e625-46f9-967e-ed1c42eded4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c89816dd-f72e-43e9-9249-5ccdfc6afe8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5948995d-3760-4302-bd9e-0cfd486529b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c62fdee-fbac-40f3-814d-d587d733e1e1",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "053a7be7-50c6-4d40-9df3-4e49decd5f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4e55cc2-05fe-4f7d-a398-c9e9037e8d58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92706444-eb83-4186-910d-ac344e2645b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "51821808-9943-42c7-a315-4283068a6b3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1319e21-a207-41a4-ba45-e9bb73af9279",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ce8de9c-a441-4bc7-8ca8-7c354ca9b101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8dce396-db81-4eb2-a0a7-86e168d0369c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71ab05a9-537f-4fe9-8b21-aaaabed1aa4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "202373f3-55c8-446d-832c-1f0724b553d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f7c6d70-1775-4952-89f4-d3caa125f39f",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08bde41a-38f6-463f-83f1-b5f9b61e960d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbb904c5-3955-4528-a2d7-ea736987904a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f269b438-951c-4ed4-9de4-0e9e7960cd0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "fe119364-4efe-4ab0-b2f3-d4889fb6413a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a06f937-ba86-4179-a627-f954f2214b3e",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a42e23f-87da-4642-9a96-9d7596ef4437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a40920d0-a53e-4f6f-bd8b-6c7f391d4b56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b57af1ba-d07e-4aa3-a317-d26b1ab38812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a4d9e771-f171-4a21-bcab-80ad7fb92268"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15275a99-b677-4134-9ff4-232b08881317",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77ffee7f-bc82-4ada-ae25-5b32b94745e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e31ac09b-2f04-412c-af30-7dacf8958227"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb2d0512-c4a9-4a7a-9196-b2f3fb0d9bc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "083ccc10-103d-4d80-a26e-98026e82e10b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "705be46c-8ab2-4dcf-9a0c-422d0ca722c2",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a190d126-24d4-4170-9937-7f7adddc4f0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5801029d-5ad2-40ea-9255-72a0bfa4462c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce18cc23-68a9-4db2-8e3e-9f1a1c530708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "867105bc-e9c3-45cc-918b-951c41470d92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4f7841d-4dab-4317-817b-ca64747966c2",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fffd08a-ef3f-446b-9e02-b2b1fb04422e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbb03db4-4cac-4a3b-85dc-97135d567835"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "371bc160-80b4-42d6-84a1-e08c539492df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b5cf1f95-5c5e-4119-86e5-4341810dcd99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef457f5e-8d3a-4109-ad76-5cca581f25a6",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cf374bb-ca3a-463e-abbb-22e867384ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec6ac9db-97a5-4580-92ea-5cf44e975e51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91ccfe32-f301-41c5-81eb-b208098e8766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c66378dc-b785-4b5c-a4fe-829be04d07bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a14a2dc4-5782-4420-94ae-9b27f5bba3ec",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "186a1abe-7cff-45e2-9dbb-098609688340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbd3dee0-89a7-47b8-a202-21865ccd4639"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "465b9528-b060-4498-83ed-6cd93047ff04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "de669929-0051-4a44-a4d7-39ba22241d05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7161734-04ed-444c-9eb6-5dbc342c77d4",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39281158-15b7-4cd3-bcd6-967abc8661f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a477d4a-7deb-45a4-bd08-bbd9c2b1dc6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a81ef78b-e68b-4510-be05-6ac77ca03a38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "b6af860e-3069-4f54-9e07-d074f5e25e7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09c7edfa-27e0-4fd1-8a10-80282467ef4e",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cff5f98-6c91-46f8-8f59-8fb62c2d6fa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2aa4dcd7-bae1-414a-9b24-b8d5ef7b2a3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f619266-d05a-42ee-aede-48c8a7a1dcd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe3bd6ce-565e-4e09-9ca6-378e3c59101c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cbc39f1-14db-4bd2-8809-e68f1d810f69",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "501fea87-f86f-441d-9503-dd975d466a2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8c0f04b-b6dd-4014-8a23-c56cf18d1e25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55af0f56-4997-480e-bac6-dc366d7cb031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a2c2eb2-3b85-4434-94a5-cffa4ee61135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fa3b880-5516-4645-8279-1704e291e67f",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f92e4c3f-7a50-40fb-9ccb-4b04e3353ed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77b5295f-7808-4087-8b2e-cdb9975fa29c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98ea5370-25ec-4c32-af49-f7183b739c44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d140ca34-0d35-4457-8780-199928b2193d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "153bb34e-0f62-4e5c-91d2-52a953041fca",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "870dae24-4319-494f-8031-a7aa1a3e2d62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4da58be-037e-481d-a912-a21184d387be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edaf6741-a30d-4046-af23-2c633e473bbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d346ada-af3e-4464-ae1f-043ab3c6319d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e52050c-c0cf-452a-a70f-416f3800e966",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a3845f1-256e-45c9-b6b1-57136b871a16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7309f2e-c0ae-43b0-90d1-f30023338de2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe9c282e-f9ef-495f-bed2-85823d16f41c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "712f32d0-7f33-4b8c-9dc0-fa4032924065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ecbd6ee-95a6-4a75-a8de-9277d23ad7d6",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9385d91-d4f7-410c-906e-f9df00434c73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7472388d-442d-4505-af7a-4e7ccc21fc89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b5c3d70-2757-4e2e-ae95-0bfd2147b5d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b84a1458-06f4-4694-b39d-ea2fe193f5cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0813e88f-6305-4d0a-ac46-029d2c7dfe4c",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3297fdb8-3f25-47ce-8fd3-3c392534ba95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a219b9aa-c176-40b9-a672-ee0693e2bd99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c86338d-1385-4099-b7f2-a9a6728f345f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f13c9ff9-281e-43a7-8878-e72f1da4f297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e362161f-8a55-4484-95ee-1c3003e2ee0e",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8997589c-d7c3-4e0e-9c46-811d74d461d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d52b9b8-e0b7-4322-9c8a-236ba1455295"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58f5a05a-e5b2-4c23-b1bc-0bc59cefe8bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dd6759a3-3d52-4544-9e52-9611c5ae0522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3db99d7b-4579-4967-a073-d56c10969216",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f4f416d-bdf4-41ae-87e4-f3d53d942949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb8755c6-10d1-416e-8306-44adcaa5c272"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85ef7d10-40eb-4de6-a725-464109f71e26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "88413d91-e453-47c2-a3c4-8802aa0b4174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "914ab3d1-ef9d-431f-a49c-e04bae733f10",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a6a5838-4cf4-40f4-89b6-3238825f4dd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "874cf572-9b3e-492e-a2b8-4386ef754f23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a78e7b3d-bd9d-4798-a09f-3e35bb0c6b53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2aaa7ea0-de4c-4447-b0d2-808f420dc22e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c381cfcc-bd55-4681-a9e0-0f016ad030ea",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3039fd2d-19bc-4f5d-b192-9223d3f293a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1a85bc2-6048-4cc7-a263-2647776dd54e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22250783-415e-41c2-ac0b-abfc321d7a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "55da60d6-81b1-4aa2-a109-0e8371b2350d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4718635-0d70-47aa-b4dc-a0a54c902fa2",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0842ba1c-a405-4e1f-b643-14c533b8f38d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed5acd99-6f4d-4c57-99c2-9a70415d84e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71f67642-97a1-457e-a22a-711d6b6f758f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc2c112b-476f-4e85-8a3c-ff0afe67449b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce859513-ba1c-473e-b6b7-e593f5d30e26",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cb53830-432f-4fcc-8725-7b2c3e0ed34b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75825408-62bd-46eb-bb91-3f397234e3f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ee925f8-ce02-4180-9f69-baa1fd3cf4f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "05084291-f228-4708-8ca1-b9104622769c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8abada70-951e-4b1f-9089-8d4a80d7e563",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6b6d232-17c9-4a6e-ac37-01d587d3dbb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "086f8ec7-c407-4b96-a1aa-b99676155e43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec0e4a5f-9be6-4326-93ef-26fb92f5973e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "bf3d7248-ffbb-40c6-874c-351aab6012f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0525449f-0fba-4515-ba93-9b0a34924809",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc230a25-9f0e-4b8b-9b3c-18d449c97f88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2591519-f936-48d1-87c1-28a0b8b501ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25a29b40-378f-4764-88f1-32ab8315e06a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b7fffa3-113d-43d4-96eb-8a749a75c18e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad14269a-7296-4191-b676-bff0ba9d0854",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b12e7639-aa15-4992-a3a0-8036b0da1075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce07ca10-2eef-4130-8a26-a3254a3ff3ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "041e8ac5-3da2-41b4-8c1e-f492c8301638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5b6c2839-2dac-4f66-a58d-2e6fee576190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e65af48f-706c-46ad-a52a-22b948c3e7f7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97ad1a3c-8ca4-45a6-9c76-1afb8714f7e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ef5cb8c-e405-496e-87cc-51dde0b081e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c73eb46-04c3-4a1e-ad33-e83114be0aa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "96d02924-f23f-4acb-a29c-b93bd626193d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff022a70-3431-40fc-a276-920b3619a222",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "845372f2-e6b6-4021-bbf3-b7cde967727f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3944eafc-fa93-46e5-8b71-1363add38770"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12f94bff-2f6b-4a26-a531-1f1e17abee11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0801e984-cf5f-485d-974f-2e27edfafe16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d54e4de8-3793-4b9d-83fa-92adff630a85",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8dd8893-e9d3-41a7-9348-a87a76d60e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "518057e2-f628-4d0c-9815-fb64e6b84cb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64faa0ac-b6ef-4212-9cfd-fffeddfb2e47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "acd2a032-7828-4298-a818-973b9c8ab991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6559c6d-4e34-4ef5-9729-383bcd4da9c3",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81dd314e-4039-46fe-a00d-7b9626750334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25dbab33-55c2-4ffd-8fab-a772730bde24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "269d029b-ecd8-4c75-94bb-74a4b3647ac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed4c9b47-4364-4272-9920-a731a6132e86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d458186d-feb0-403f-94f3-e175657f8a8a",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6ef60bd-f503-493f-842d-5381702b81ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "323cc5c3-26b0-4826-9a0d-398b46945923"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c38e59c3-7df1-4351-a03d-90a6eed9e62e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "845952c5-bfa0-4560-aada-c363edc982af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a32c201-8452-4bf5-97c8-b49b0c6bc72c",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf0bc9a0-dc7d-4b15-aab7-fc6aee0ac9e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cd6452c-97f8-47b8-8ed2-eb7219f6f3ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f452ded-c717-4d96-bcfe-7c36c2be4504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3ee8001-758a-4153-ba2f-da21c6fb3b76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f4968a0-4d3a-4929-9414-adc9e9e36f16",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfefdbfd-2249-4344-8527-1e4bf0d2c09e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2db7264-fd93-46b8-822b-0360114d5127"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d256e24e-b8f4-4b2f-bacc-103274c9f9bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "482a6463-8687-41f7-bf82-094d13b26d90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "339f90a8-74fd-4ae2-b58f-fcca3ec16e05",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c2035af-720e-4930-b75a-56b7065c933d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b03d414-b5d5-44e2-97b9-be163f41faa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4e5fd93-f927-429b-b370-20b1cafd42c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0abaa37-c64a-4600-b787-c6560a10ba34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19d5e4f4-7f90-4757-af2d-41d3085bd75e",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d74638cb-d5a8-4941-a76f-a5460b3173aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a714b40d-6c30-4200-98cf-0d4cc5f78015"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "351228a3-e435-4104-b509-e1f626629bda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f67d88b0-ec30-49cb-8439-f9d70eaa0e33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3f1c8b1-4939-4390-9f26-6018fa80492c",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3107f33b-05dd-405f-8ce4-f64a2049f143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7745c1ca-d477-416e-b6e1-daa8a65d05f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43ea8475-c92a-4d93-a952-aed37cc4922f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f737c61f-68a2-4e5a-b725-ff5e0725e40a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39070c28-efff-471e-9623-d84b9be26299",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b54856af-efd2-424c-ac32-5cd13479df8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44786826-c86d-4a07-9a26-ff3b0fcfb536"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d291b9ce-ff26-448a-b7d4-446b36416381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "050d9f07-1db6-4bb8-acbe-8b9f759d2f85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da02f7ec-4701-4d34-a437-6c8710524f6a",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87fff5a6-2eb1-4cd0-97d1-bd23d43c2476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c273611-8f80-4576-a3fa-3807a89c5d31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80c05fbf-012b-4c0b-bc7e-8171cf733034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "50e5421a-bf4c-4b46-bc64-f4f52358b4a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69928906-f725-43af-8338-b7911d9d5bd5",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e9b1e45-467d-43ab-8585-0e396c3c091a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1e20c85-db22-40a9-b31b-40be6abf7cb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b85148a-e01c-4a90-97e5-dca80d34689e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6cc8a0cd-c844-467c-a998-2d7bd7a5f399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6dc95f7-1aa9-4c63-880f-1d41ecf0904b",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ce4e2d7-b364-444d-b82c-a3221949a755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "131ee9eb-440d-4d5e-b505-afdda95cffa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f23153b-afec-46ca-aa4d-7d450838645d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "912f94ae-3c5f-4cd8-8dba-08e7fa6c86b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75ac68a1-24dd-4286-ac39-142f95b40fc6",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8ef0c60-78c6-4bfa-a3f5-c918fc5db731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a23a8ef6-c849-4bf9-a3e8-c548a5eb0074"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1427c69-5c26-4d6d-9bd5-02d08cec8bf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "70b959a4-9445-4712-9d01-71afb15ae1ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4560d86d-16ca-462d-bb58-949ba3c61b10",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d20d01ad-1645-4941-a1b3-6345f7941a24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55a89f06-7448-4bd7-9ac8-68c6c818ed7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a3e63ed-c0e5-4475-924b-bea8e4d6588c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8e740dd2-93dc-4e6c-94ad-48c9d2af41f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15a79504-94f8-4e45-8397-5b3cdd3fc1cc",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92895fb1-43f1-4216-a3b5-01025b8fc943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "378504fe-74e7-4bcd-aa11-764303467dfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c532134b-43ca-4b43-ac84-70863a68afdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3426610e-e606-4bf6-894c-01e5d05e612c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d11fd44d-7b3e-40a2-a175-b976cf3c55fb",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12efed41-82b9-4734-adf5-4793ff400236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "918e34c8-820c-42c3-a9f8-e9cafc5d3a66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7875a10-2ff4-4dbd-b88c-4670eaf9fdae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "201b3270-386a-4196-841f-f8f4690325c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf4061d3-aba5-4b20-9294-37cff89ae162",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c493b96-2f9b-42c8-9cf9-285748beb4d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d7aaf6f-bea5-41a4-9784-7090af529410"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f127d70-67ea-4642-96b9-01bb26e947b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7fc13c50-7a9c-4a6b-b0ee-dcf958baf465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b424da14-70ba-40ba-802f-138196a18a0f",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b5d4512-ea30-4454-b2be-951f4e4d51d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b65322a4-2ed9-42dc-bc12-5e33262b8ea7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e67c15f-8381-475c-9c38-66cc1d378b9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "935ef021-173d-4dda-8d55-c7ab11d83412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b40a309c-d669-485f-857c-815d59691968",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cabe5033-2b60-4edb-9b7b-2eddbc20ec82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adbcb1b8-ac38-4f50-9d53-0b5010d6bd73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49c4e2ab-2269-4c3f-8f55-c713c6164ce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "22ed6abc-28e8-4649-aaf6-7e5dccb1823b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b989765-bef6-4456-8ee2-5bfdd82f7cf7",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47d5578a-515d-41b2-8088-8d49555f7a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01f643b0-e70a-47e0-81a1-d6936bbc9f8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bb1cc51-032c-4ba9-bfe0-a2af2e0942f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a16cf895-35ef-4577-af87-f186ddec3d93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa2b331f-bccc-4b95-a7d3-0d3957f6c418",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b25d7bb-64cd-4ca8-91a1-9cf5b9522e91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a41e3c5a-b89a-4fb4-84ac-a15e1962b46c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f47f5b40-3b72-413c-8dba-a509d3ab331a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e8156de-b52a-4ab4-a472-41bd2f14c6f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8545c42d-c981-4de3-bb6e-e4b3bab25c76",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68536d19-b7c2-40bd-9cd5-78b91fc823f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8989480c-8f6b-4161-983a-7564877d4e85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93d1aa85-f120-46e5-bc6d-0cc2abc365fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c060783-9268-4828-b55b-ac65322cda72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bf0f041-de67-4645-bfbd-6533f4f0373e",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b650b81-3bdb-482e-be93-8b20b3d24a7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "598589d9-cf08-4dfc-b280-c668160e27aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19a19e99-c166-43a6-b2fc-370bf3a5a120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d842d86-7757-4caf-aa93-2b24ef3c514b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f100f63f-0cb8-4336-8429-7e4214437016",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d2d1d17-137e-4055-9b64-d8de5e810df5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d3c7ac5-75b4-4777-9c69-7ddbf57ad3f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f2066b7-fb66-4682-9c29-7231feb17e2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "05cc79da-d22b-4e5f-bca9-8def67fc2dcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b10ea58-089c-49a7-be61-51e627b2623f",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f739e6c4-9ca2-445e-86d7-39fd9538d34a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "391b13fb-0eda-4914-ba5e-da037747ba01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6d4c5ea-0511-4bb5-8a8a-82517af0a727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ea9889a3-50d2-4618-b6eb-6b575f795247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a4b344c-b893-4052-a548-1d23bd41c177",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dec1c9cd-c644-4e8d-816d-dd68237eadd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bef609b-ddd8-4225-9413-23a732004a53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d9aa5af-93d2-492b-a760-264dbf27c931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "52920194-acbf-4ca5-9ac3-a736f18aacc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f59883f3-7607-4e43-bff5-14509581344e",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58eeb6cc-cc3c-4f1d-8aed-c2a6e468b357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b7485bb-48e2-405d-8af1-7cff646cb6c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b48ea77e-10db-4de1-86f1-9249a6cb251d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f3697b3-c534-4c25-8730-efdd3645d0d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "997a0b1c-6100-479c-b949-957c7e595616",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b75cdd71-31ac-4548-8eb7-4be556296f89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9d51aa8-f46f-450c-91a1-8bad043613f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4112ae9b-aa94-479d-ad48-f9f17050161b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f6a00833-8f4a-4252-80d8-e0cab27100ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b1d5bde-5116-4c80-b64f-394d44600a05",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2758cf22-2082-48b5-8d0b-fe6f26132291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "841ea769-7b82-4f21-a56b-2233b462da3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bad3d69e-d518-4997-9310-8bf78464f3af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5b7f254f-f08c-4326-a0e4-81835c20a0cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5efd1d1-dbce-4154-9b49-36a03a9a9016",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5fa025e-6646-4c86-8d0b-02c354e39399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8959d89-7a84-403d-8419-a9c1d9fc3622"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15a60eb2-9159-47e5-85e2-c29b01a70497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f5b78c78-0ad0-49ce-9b66-5692ff3ac003"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33549fbc-eda2-44bd-a968-6855423d4b44",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f03b986-efad-4f29-ba7a-836d57183fa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62dd23e3-1dba-415c-9219-37d1bc931466"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2071f94-8d15-46c9-ba0d-4543de62b8bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "df64b8e2-3eaf-4091-ac19-f82d3f841258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da82aed9-1cf8-40db-ad63-c9ebf02960b0",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d323187-9075-4e25-a2d0-70adc8a4ec0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "21b3f892-ca36-4714-8274-dc5a83955609"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "654dca2c-0574-4974-a736-825c6fb1f9eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c464d43-46e6-4d24-87f1-d2274be7313c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6c299e1f-71a8-4a51-bedd-f8bcbcf0cae9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "24500269-335a-4b79-98e4-f60a1eea29e1",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56a0a6ba-5e2b-47c3-8572-af81b81affb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d84bd2d8-000f-4698-b1bd-b7e4da8883d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d84e791-81b4-48ca-bf80-0b9f61e2be1b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c468d476-b1ce-454f-ac63-8833c84ef2b9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "91ca70df-b43e-4a80-b371-9f2c99076c7f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "53958309-d767-4cd9-8efa-03da9ab0d1bb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "817a637c-1d45-40b3-af8d-b337cac439ab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "97618cb4-4250-454a-9a20-a409bf348cb5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7535801c-8649-4328-8c06-0b6c4cfe0591",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "aa0cd00a-35c8-4bfb-ad1b-5ee7d3dac1fd"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7de93db4-e663-4440-b35c-dd1dc8f1e74d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "76ee144a-8030-414e-827d-3bb15363734c"
                }
              }
            ]
          },
          {
            "id": "780f05b0-16fa-4650-93e2-c52045d2af18",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1413851e-53bb-4f3d-a02f-a0a86e1e70fb",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "c17f43c4-0a41-474e-a552-814b20ebfb47",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d55def32-5887-42f8-b02a-c571359d35e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "69bd6e56-4219-46cb-a296-40b962af2344"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4ec5f73-8d71-4c9d-88e3-f450d9144d90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f2fcb93-15ad-4bfa-b9f4-8a40b097385d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b7bc0248-f6a3-43ef-b785-b4bda548f408",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9f71dc02-02ad-4346-980a-d206fb8a9004",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b38738a0-640d-498b-adc1-20d058e03d77"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7a82a422-63dc-4e04-86e7-e82aa97c8ce2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c3ca3165-0c31-4693-b692-14f75d53e772"
                    }
                  }
                ]
              },
              {
                "id": "03cd1c76-8c21-4560-891c-495663a6e5ef",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "33884995-ae38-464e-8def-af76ba79d278",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6ea2326d-0b5a-493c-8390-53ce3003e4a5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "021cd23a-bcc0-4705-aedc-be5d474407da",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "13f0137f-2a4b-44ee-b8b0-2834c0350b6e"
                    }
                  }
                ]
              },
              {
                "id": "e896ffae-710d-4870-94a4-e41ab4cc4c30",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1df0610b-31f7-49e1-af72-35a141a7c057",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bacc6415-18bf-4364-9f04-09cc3c3b8723"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "20d94e82-3f69-445c-bd50-9cf1f60d53f9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a0acbf1a-410f-4e91-97da-f3ce5e26139b"
                    }
                  }
                ]
              },
              {
                "id": "0cb77e34-9550-4577-b751-379aa06b8c75",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8d3e02b7-fb4c-4734-b468-5ad4b10365c0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fe70cb30-d5a0-45c8-98b0-8ccf3823f7ef"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3382cfab-c117-47d8-9357-4a47ea3c6a65",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "6b1b3058-3f0c-454f-8ce2-b04c7a04dabb"
                    }
                  }
                ]
              },
              {
                "id": "582ebfca-cee8-439e-a668-894cc946e140",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ab845b3-8964-4d14-9cc1-09b4134d728c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f2200b20-7969-4afb-aff9-1877594601c2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3cbded9f-1438-4c9a-9cbb-f598502837c1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "6d66e67f-6e79-4327-b269-9f23aff6621a"
                    }
                  }
                ]
              },
              {
                "id": "ef45814b-7dee-44f3-84bd-ccbdf777197a",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9557ada3-d826-428c-8e8f-abebd4781c77",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f313686c-e798-49e5-b5f3-61241f60dc44"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eb56d388-ad15-47e9-af9a-e23da89c528c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d0888c1b-b026-4f99-a10e-323b57812dd9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3dc48570-5a38-4780-89cb-4b4e9115b7ce",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "159b94ca-a1bc-4478-9d15-982e00e9a017"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "dec4d28d-ddda-48b7-962f-102063989a7d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "71e6c5de-0975-4c50-8558-cedb60f84f82"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bcfd2fac-0889-44fc-8915-ed142c827d60",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "b41668b5-2f0d-48b1-b8f6-a50648aa9c42"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "30acf0a8-d488-474e-a9d1-925da88c072e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "99c0ad4e-c24d-47d8-a880-ffd6ba33b9e2"
            }
          }
        ]
      },
      {
        "id": "7a46e533-7ec3-48b9-9dc4-0e1d9dfe31df",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "667a1052-b46e-4e13-9d3a-dd2c08b63b0d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a14654a1-fb41-4336-946d-b97a42c475ff",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "52bddeb3-6692-4b18-a5b4-cdde05148bed",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e77390fe-2fb2-4cab-8754-17ff35c63c55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "299534cd-bdc5-4d7b-b9da-bd739d37b898"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50d77d9d-1492-428b-8db8-8fac1d284c26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c54cb2f8-61fe-4c19-9d27-36a00871f742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5cab177-7cad-4783-a622-e814f3bb61db",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6131bc34-d1b3-49b8-9684-165963fad8d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c468c5c3-538e-45d4-83e1-76ae4b201fdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af73d379-6fad-4b0d-9cc5-689080d81178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "349201d2-8b2d-485c-9df9-86918cfcd589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb07d3d8-0497-4f3c-b264-1b880c59e052",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e331262-4641-4d52-9143-aad319b2f76c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "380654bd-1886-4d8c-bcf8-55be67f8171c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6238441-1bc3-41e6-9839-2cc47f2c8d74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e670239-06c4-4ce1-822a-869303ae1673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68eb3410-b4c8-445f-8f11-e523036ffb0d",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82780993-c359-4f27-806f-626a331e90a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "596d830d-3b88-4256-a6ac-8c182b3e4923"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2da568ad-8b53-4e8d-bbc8-5364f81237e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee4ac27e-a646-4cc7-8b17-c539d311c4c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf2e288c-42d5-4926-8386-6683dad9b51f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b662762-72dc-4f99-8b26-e5f74edd2c3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abcc771e-8205-4a80-89fd-07852735aea0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c44374a6-b95b-49af-adb5-3049d2d9c51e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "98fd4add-f8a9-4922-a94c-016474d530f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eb65e6f-d931-411c-b923-8ee1e7904741",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73a84200-d006-4a07-9388-4cbdc6679306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5247015-7c88-47b0-9c12-47d7fba1a482"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7684af4e-756b-4a54-8be0-fdae81eb3fdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "55c81ab3-24ad-475e-a7d3-28d69289a3b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2de64e2e-6d92-4af2-b4a6-a6c5b9ec57d2",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7268b2f4-fa02-4a84-abda-835efca7dad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4e07390-ea59-421c-ba8e-5c63eef3b65e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfb3df51-3d56-40fd-af4b-ffbfd1b47235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "fcb90815-2ea4-4b35-95b5-cc91c643d34e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a857f2a-9a0c-4d79-b798-2f258c14c35c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d8c6388-9dcd-4fa4-9d87-0753322d201b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88a49198-c8f0-438a-ac50-818f91ce561f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bda6a13-6f3e-4edb-8e9a-d106f2912717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b5c7386-ed6f-4852-b570-3dff9b44f2fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5fcc93b-4926-4519-81ab-2385c6013ea5",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28d220ec-7546-4db9-8c86-0b5b5394b3f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3218a5f-5df5-4087-ac92-03c4a2554a67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7b632c3-4e1f-472e-8d79-f269b31311fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca91cf9a-5245-4c4d-a733-dffd953363a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07a715eb-0b61-49a3-a760-5d23b6ced2c3",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b68dc65-118d-4638-9cf1-6e6e5296df51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9913f4e3-9135-4c45-b736-253efb97573c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aa23bc1-a43a-4a04-9852-aaa5c26cd773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "81cc3e83-ffbb-44ed-87e7-a5ed235d3af6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2382435e-007b-4ebe-833e-d09ba6e9edf2",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9d7ab22-c3a7-484c-906d-00150cc88489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e01f26c-69a8-4d3e-bdb0-c8e3589a89f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "382c59ba-3d90-4460-b794-990c96eecd25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "af881c3a-7618-4bfd-9c78-39c8f232fe7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa565eff-35d3-4f4e-9f98-416db0a403e8",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a008b81c-8f86-4af3-9047-377c9d061aa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "295e95ac-5a36-4e40-a711-58753fbf708b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad0cfecb-3f97-425c-a6ba-554f16f2c334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "beaef396-c925-4be3-b4cb-cf7035ca72b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67b4bcb8-2c9b-41e5-8ca6-2fd3f8b9480e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fc6dcbf-b19e-4ac2-82c0-27fd3f94c8f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd8f1334-5fc6-47d8-89e2-ba5a45934c92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8d86ea5-38d0-435c-86fa-784714a9f24b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "510977cc-457a-4a33-8f90-d222fe1fdc32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "077fa11f-0649-484c-bbbd-a127a01c0be7",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b37b407-e1ef-4feb-837a-ded5ceea91c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd585520-fd0c-42b6-a064-2af130b76833"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a1925c2-fcbc-41ac-aab1-34ff37a6df0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "df046030-3531-4e6d-83e3-ab780c770cc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9e19a6e-7b07-42d4-93ef-38fe30a0aa41",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "551f6ca0-b5fb-4d57-9a0d-3dab2e2b2420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b69f21b5-c58b-4455-b3f3-eb5a0c60fa4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bfd18cb-cc74-4449-b1e6-5f649e0445f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "544028fc-a918-4424-b8c5-6297f5f80255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e2a3674-71b1-4180-975a-2f3a6b86bd3f",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd6af3a4-0334-43bc-9972-0bf0f4566e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5ef0f85-7041-4e80-9c60-8dc9b3d2eaf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f23028d9-0cf4-41ca-9f69-f5ea226b9fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9194c705-56f6-47ff-ab7d-20634d8a539b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de74d511-b35e-4dcb-b6a0-ed06bad57cd2",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b04a992-b04c-426f-86f3-839e7b0af978",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f99cf738-9b57-4698-887b-256f5a7ef6ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7583fd14-ba94-4093-84cb-2ec005ad9a0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ddb3cd5f-ab91-42cd-93d0-27eb82dcc579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecd31bd5-400d-4501-aa0d-d7eeb07e2c50",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59fc5496-2725-45e6-a872-460117ce297c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76342433-69c0-4747-a2e9-2cc1761f1e61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6252817e-3501-4b88-8581-03e364c9733f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc3e1e13-2e44-43d2-99a4-9d2785c9e893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13df64b9-6ec4-479e-a6b0-0621c8bee1ff",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e7e77d7-52d1-4d39-962f-ef18f520bd5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c107e2f-42af-4fec-895a-dc69fd8658bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "742206e9-d936-40a7-b482-45df71fd0419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "42bc3722-bfc2-4f43-a610-16b50f822d77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e78bbd92-2d46-471b-b21d-970afea29b02",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2e5ffd8-4473-41b0-b04f-84fe7466f828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8244a188-0610-499f-9cec-1d425a6afe48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1052c507-8969-4463-8c5c-f6e5b7f2c655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "205ac34c-190c-4107-8add-c0f1961f232c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fd90930-ccbb-4755-b1af-c98851f1321f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c035e70e-f86f-4791-8e8a-c81cb3a99e5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "263edc38-17cd-4aac-b077-35b06281f8ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c56857c3-480e-48b6-943d-63e38a941835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea1ebbf4-a1c8-4157-af33-566871eec82d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed18425a-569d-4d8a-968a-807302eab3c8",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eded75a4-d99c-443d-92e7-b52a470e16fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "393c3ffd-6593-4c49-baed-c6afafeb100e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57fc30aa-036c-43bd-972a-999127e746c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "634096e5-24e2-471d-b1cd-a650a09e4e15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23986dba-3fa9-4c9b-bb8f-166df4b9a5df",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ebf0316-cac4-4b74-bdd7-13d3899eb2c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0db03d9e-ebb8-4b51-a99b-abf4acad6608"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "271c712e-a4bf-4267-b08f-543b952aeab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "745dd4a6-2112-4df0-8be9-e7fa6ce54a1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d18adaab-8358-480c-81ba-6ce2f41f2a2f",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bde5988-64e9-4879-93aa-1f233022a5f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9973f9a8-78d4-462e-99e7-7ba85e3db7ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "695e73ba-f598-4d08-8d54-66fefcdc737e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cacb35e3-554c-415a-bdde-e22ecf6d6029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e33f0877-e55b-4e30-8add-c972f2bfd232",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2737f57-fd1f-40f2-a469-dfc4e900e60a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12dbae8d-9025-48ba-9c54-d4812fdfbc2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeb15636-97d4-4582-b5bc-7dd9a1450c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "14f1a271-8fb2-476f-bafb-677fdc79c131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08069534-edb2-4987-9241-04f6c0e85143",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c1e2eb5-ca33-403a-a50f-5169c270f54d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e178098c-03d2-48ac-9f46-90f748748722"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2779776-16e1-4931-bf93-32b83e868199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "785f9ff2-487e-4004-8003-c087e271df7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1752e691-cad7-409e-b733-9c997e18cdca",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "432b5916-f3f7-4a53-af43-59692c2d9a0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "604435c3-e433-44c5-b8b2-c74242bc2ad6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72c8b1be-8136-4775-ab30-b8796c0ac673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0572794-4afa-449c-9a99-6c16b50382e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a69747c1-b081-496d-80f9-4c201e814351",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d2ccb3d-92d8-4f2b-b555-ca2b7d648667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ee02c9a-a6b8-4ce0-9c00-8a4b854622bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47999b22-765c-44b4-a350-be98563b38f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6a992a9-6be6-41dd-a1eb-43c82041a7ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85fcdd7c-48a0-477b-8606-b035706a04b0",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f495c3a1-f7bd-4a17-9c23-8cfc6e2fef1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c924d2f-762f-4d3d-8b89-3d38f49b565e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42900595-078b-47e3-9ef2-046f944775ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca6168fa-443b-4a50-8a6b-68c169e62ed8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ea92166-a1ab-4f64-bf8d-2452ea8631d0",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90c49253-e0ee-4555-a121-f36a5d52096e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d282cf6-17a9-4a05-9e77-9eb3ff9682c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "966a4533-58e9-4f09-af21-ac75d47da4da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "edcc0405-4661-49ff-9a48-3e73e6a6a90a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b98794f-2798-48c8-949e-0b93d02974eb",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "310aabff-eb6f-4885-b666-8421d94cdead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "117fb470-322a-4ee0-af7e-0805133302fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9c1c772-e6c5-4373-ae96-5e38ba059d35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab95b745-8f1f-4243-9f87-7800c16a631c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef7493c3-4cf7-4f4f-a969-1b31b192e8f6",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49b44822-7d22-49bd-a1ae-78155d129e8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac154b79-66b6-4640-90c0-81b284df511f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ef8aba3-2e2f-43c2-8ba6-7e019a2c37d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "88fd152e-a9b0-4d0e-82fc-b1e0e92cdb4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cdb0de3-ee50-4831-85f8-6eced04e7f6f",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cca907db-4244-4cd5-a297-706673eb5eeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad702457-dc18-453f-ac5c-49b4dd25f5e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c034d3cf-6540-4730-ba45-b827771a086c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2cc20940-25db-4f3d-8438-75ab96a65046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4319429-4e5f-4fea-841d-f9e97766050f",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "006eef99-f2d7-4744-867a-6ded9f8adb3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0906f878-e5ce-4bb8-9a3f-0257cf01d184"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf46e574-6987-4e62-b684-7e168d9353bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "48c8611b-d885-499e-bdd8-eec352a446bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95bef092-bd87-4ee5-aa7f-2295c48e5ee8",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "879c2e45-26d2-46a2-a996-d1c3ade06a04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "874bad95-3419-4a8b-abdf-1104ed64e3a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57c94798-2973-4a35-af21-f06e1b3cff1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24fada41-d032-4763-b5bd-844599cc56c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79dbac4f-445e-43fc-a08f-86f628b67117",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95c8d773-ec97-42e3-845d-7618f0031f17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8636ecc4-ccd2-400e-a131-30afb09b0fe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aec9bd81-ccd2-41f0-9994-54fa746d0839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab151822-1912-49fb-b432-d341a55dc508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99b4f9c1-1ec5-4a5b-b70e-9e737af87417",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bacf5b39-5ff9-412a-82e4-6d7f9563b03b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39438d3b-2865-4b4e-9ddb-6be4c84fed2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec52afc9-e668-4d98-8799-7a9ba10c6ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be982bd0-cac3-453e-8bb4-9b844a69e666"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a8e4adb5-82a2-432d-a110-c45021c8d60e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e089d0d8-ceeb-45c2-82e9-0c57c3e67370",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "937f8dfd-ef49-4d69-b143-f9d6faf0a284",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "bca69746-3648-4027-a1ec-feb8d2c9cffa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e624a83f-43d7-4968-9b5d-61713a7bf16a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "137cba1d-ce28-420f-a456-42485c0b921e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "372b124b-5491-416f-b56f-ebfa0034ec5c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "636f84a9-e017-4753-bd29-b27ad79ad9b7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f2c9ff0b-cc52-46a5-b684-65651d6e564a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "43312285-8baa-4711-a40a-edde490939c4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b79d0c55-cf49-47c9-bfd8-591a8d9efaee",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f0dddeb9-9b92-4cd3-8ee5-9af300e93f1e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f69f9aaa-5b41-48a9-8fab-3d0e62b37fd6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2f2bcc74-7291-4057-80c0-9101195bd28f"
            }
          }
        ]
      },
      {
        "id": "c5e745b5-e7f9-495c-8ce3-95e6243d219a",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "b06bbc0c-4770-4d9b-996c-83307768dca7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "87d90a59-cb5d-4b1e-8062-416940f45936",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b6dc18df-98db-499d-8b7b-8403777a0917",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c18f140-7397-43b6-a204-b950272e813a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76637daf-7d41-4819-ab76-5efe4b4214cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f889db3f-17fa-47a9-b508-fa02f95a8ce1",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6764243-b846-4a39-854e-b4f683417e38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc7a4aa1-695f-4b27-a1a0-58383c0edc71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c80f5ee-a85a-46a1-8695-60fb8541c036",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "426dae13-7cbd-4671-b6bc-d733c27f0eb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8495485e-79b5-4b0e-8b01-0348854aae7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cffa9b0-869b-443c-8c61-e9a37d06e26a",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5514bfcf-f6ba-4432-9d13-87220a95249f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e504c5de-f154-4545-b865-2d67da157aca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f453c8a0-4758-4890-855f-5c485fca19ab",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf859819-c115-4a72-a280-937a14076a29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24dc51c1-bbf6-4ada-bbc6-2609bd119008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c88da468-41ed-49f7-8d76-474f5b34544d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a738ee5e-c58e-49c9-8628-d6328786a764",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "652d25e9-6943-4ff4-ad15-f10558d3c645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6526bc2-5f55-48e1-96da-6f945fddbfd5",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22b7b5a5-ed4f-44b8-860b-10c2be8c71aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db351981-8d63-4fb5-a8c5-ab87baa27d09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e839420-3ac6-4c4f-bd7e-ded8df84e57a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69a95105-a4f7-411a-9b57-b6810e3c38a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19d8fd44-bbfc-41a7-85f9-eaf1d35880ae",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8272c071-2bfc-4b59-8ab1-279c9664616b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21504c83-f758-4772-80bb-15c6f514bc95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d41acb97-7039-4fb5-b7c7-5ad8a135cc1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4865545-8b9d-4a89-bb83-3a880d87e926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e11d0d4-893c-46b4-83ae-5ffdfd8086c8",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac2d22f7-461f-4134-a79f-9730f014b19e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c27199c-cd0a-474a-bee8-e3985d570de1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d409400-8ad4-4309-9963-8f4f92aec046",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d0a3293-3e59-4959-8e90-557618375020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb4a5b8d-e5e3-49fe-a4af-603d7ec45954",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a20a8cc4-31c3-4c8c-bc2c-360fd394a342",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be48093d-c924-4357-9631-dfe7e07bd63c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e23eb12-0ae6-4f1a-9686-e43db315d4f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f911aecf-f098-40f2-922e-9b3e3c5bb6ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "541f7447-54cc-4e79-b075-a50e5249d857",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "639b91df-8dfd-4dc6-b5fa-547d3728a5f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a71d4f8-5488-413e-a310-469cdb732a08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08fb07a1-b8b4-48ad-9ede-0a088c3c8a5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7618a584-409a-478d-be6a-721b90c1ef40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "970328af-ad8b-4fb5-9cb2-31a45b320fb5",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8464032-c87d-4d1a-9edc-22fc79730dcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbe3a8bb-ab66-4ab8-b348-0841db4f1793"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cee1a9d-a5f0-489e-9849-36399dbcfae4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "374338d3-06a9-4203-9335-749e02b2d8a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7b32dc9-16f2-4438-a299-4fb3e48e774c",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95b9872d-fa56-421c-839e-a7656e32884d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "989a6686-42dd-424b-baf6-47d09cb0b158"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "894dfe82-e34a-49dd-beb9-d25091c79f2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c42ae198-8573-4a02-908a-72b437ac65e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a7686c7-ef5a-4526-a88d-0c6019987db5",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef9b7315-ca81-4a7b-bac7-a510d3c24023",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65fb341c-45c3-4f1e-a470-228776456aa2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ce3de60-f476-421c-84c5-f4611981c4f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ca461d0-7659-4dc6-9f8a-89858f0e0694"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb1723ba-adb6-4bfc-b712-7c5d6f2918d5",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcfbbebf-48d5-462d-970c-ab58c8c22ed2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41f93772-c340-48c9-a722-edcce776e465"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "554a780e-a1e3-41db-8e30-3e8fdc2e9608",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61e4e8be-7bd1-42cc-bb4b-43997715fe88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e959cdd6-99d8-4588-8c9d-ea22b6587114",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e04d675-552a-41cd-a5b9-389c3f39df5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e9848b8-a4da-4a54-a7ee-d602026e822d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39a04f5d-6126-4755-967c-fa2340c66afa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f632008d-eb0e-4aa1-bf9c-0d3393accbf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1987ed58-04dc-4676-997c-b1098fddc9a2",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6144cab8-23db-4b4f-936e-a73a86ec78a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b699a9ed-9c3b-4ae0-9a85-76ee3c86b616"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5d000ec-6cc9-4beb-a7ad-dcd5d458b0fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8960e78-06d8-4ed4-9e24-4f8ee170ea4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78609c7c-523d-41b9-9466-e1cb0003c6f8",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fab73d8c-df0b-40f8-b3a8-9489c4add538",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "675c27c1-bd1a-4294-b980-67f0d4822dc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c5e0992-d234-4ff7-b098-a95602d685aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1ffff34-e311-4b56-a807-b43cd3611167"
                        }
                      }
                    ]
                  },
                  {
                    "id": "414a1ce0-e75b-482b-bfc3-5bec7cc98427",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "550e5d92-daea-4bc4-bb47-e71d762928a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1ec6579-defc-4e47-bbd2-1bcc3b15a108"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0df5d1e6-cf43-49f5-945d-b6195890a66b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e564d5d4-6d95-4fbc-97c1-f654df99deeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46077f87-5625-44aa-a516-cefcf65baf1e",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6f69aa3-921b-4d4b-9bb0-936587008eaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d45c1b3e-fcac-4421-a1a9-e1af8b50a83d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "353fba38-a6df-4750-beeb-7cf32921cf61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d775ab7-3b25-48aa-a22d-f81eb37fa650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "981f5c8a-5138-4b81-a314-3199de2a5b45",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "278cbaf3-d09c-4ba9-9293-244f7380919a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "955392a6-2027-4d8e-a7f7-df849b1aadb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "189ed0be-a8e0-4cc0-b3ed-eb06f1951e3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0b42504-4750-47ed-9efa-79b894c42db0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b6fa97a-dfd9-4ed4-8b64-c6a1555466e0",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16bd1860-af09-4496-b070-b5ed70d753cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbb3e595-138d-4427-83c9-69f715f84571"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b64dfec-9b70-4332-b0d0-396689c33738",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8c52f14-743f-4938-9ef8-f71eb1b7af50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b56e814d-2aa5-449b-b19d-f6e72312f899",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b98d7cca-8ce8-49af-92ab-3bf179d5aa6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c94b7955-fb1e-447e-a05d-d92e254ea256"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b336537-2d48-4296-92bd-e4d693d56ae2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a818ae0e-319e-4932-946e-18b70cdbd4ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaea6f88-8727-4ea5-afc7-8952f201a247",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c795b34a-bcfb-4276-b7f9-45a981575778",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38280729-2cf2-4884-8943-7ac62643386a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25e5c41b-0b98-44b4-bd59-b3de62ed4693",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0fb7fae-38e9-44cc-b27a-54917b1a79ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51ba0c32-b32c-4676-9e3f-a73471d8259c",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c97991e1-3ab9-46ba-83c8-1e2f67872303",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "797c38bb-d1d2-4ef2-b44e-5655e9dbd02d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "427bc36d-4099-4b45-b329-89d64f146e67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea35109c-474d-47c2-8850-3cb6b68d0364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "353c6c20-dd85-4cf2-8f5c-fee4f0fe9707",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8bd17db-2adf-4d2f-8332-2f0bbce66489",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1625d1d-c31a-42cf-a454-cc7b9ad1e3cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cabe2fd-10eb-4b65-a3c2-bf021e1f7fdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d883a4e-1ed6-48a9-92b4-fd98e90f2448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a4c210b-efc9-46d4-b999-d21368599247",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2835c282-ada2-426c-b5d8-4c5f067e2975",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "846ff81b-f9a5-4a25-9bbb-e221fb1c7e80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d18e02d3-245c-441e-a069-25f0840c75c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91827476-6a59-452c-a07a-fe5479484ea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21451107-7c15-4a48-b79b-6588ef45addf",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da7ff1cf-7939-4b88-bf7c-cd1d0c24daf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2fd090a-e5f3-4c15-b9cd-10f45250f6ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcf26ce3-966a-4b28-8065-eeb2a01afed8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3763765-6a21-4a5d-9e88-473fb4105aba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e7bcf35-2de7-4d13-989d-098e376c6a86",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00dc503b-df48-452d-84a2-5944df0cfaae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66bd7c96-66c7-4bf3-8b04-136e1eefeeca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b07b5c09-7838-4604-bff2-0c47e1f02dd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1540807f-19c3-4d6f-b6b7-d4b06fdd0561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac295b20-b08f-43db-96b0-75db28e0a092",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acfe825e-2876-4b51-8794-5251bbbfb4b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb5026bd-4fdd-4f08-8701-7c72f8f6fcf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3840e638-9c2e-48d4-b5c2-3e13d35d2596",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee0d5487-81f9-453d-96ac-1e0137155e1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "435d81a5-cc4d-4cf7-bb26-7c42f4bb440c",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fd81022-597c-42e1-84c8-4d7a0de89c49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccb8e6a8-56f7-4948-8ea8-f46cb3fa4d31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a98de5bc-42f9-480b-89c4-d718d9f0d28d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a16fc384-2457-49ce-a9bc-1dfb4dd6aea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ab8ae46-3a53-413a-8472-f4769f2d3fdb",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50c8d410-5fba-4e88-83f7-84532bc8e038",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a564405-b0b4-4e16-bc2c-cd0981caa87e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f31e7e3-38cb-4397-be26-5aafcb0e9d6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ffc2b26-3687-42e0-b1ad-19e65a55b96d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a40e7e2f-3cd7-4b55-972a-565900009b99",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dc6c408-2c6e-4115-939d-88f91d718aac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8969a53a-7338-4fe5-9167-82998ab76ba7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2805943f-a902-4c95-8007-0a3137673e22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e9177cb-b3e1-4958-a056-9fa976f81995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cfaa2a1-8b5d-4693-9bd0-7857b419497d",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7741f9f5-066f-4303-9052-ebc9fe82fce1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a57bfdd-10f0-4cdb-9672-f5d18369623e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e74cec9a-30dd-430a-be49-0259cf0d75ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4aaeaedf-f65b-483a-9a3e-248e12e94b11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f81f7d70-9e08-4964-8b9f-8b57d9b2cba6",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3333d893-c659-4650-bc71-9cde8d9b8d00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "975bf788-70d5-44a8-8c5e-7c0dc8c366ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f6f3eef-32b0-4875-b986-021caf437882",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e444648-2ca2-49ae-9364-999f28413403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16a03981-7597-4893-8080-246e6874f572",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "725a32c4-3375-4889-bad1-b7b517a9d581",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "337d5db8-38f1-4da7-8d89-515f61a6f088"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a001061-269c-49ed-8028-883d9f46b7f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baa371bc-78fd-4e02-bb04-3fcb603a9ced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3e363a0-9d1d-44df-9a9c-e1d6b4949cff",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab410d2e-b1cb-4101-8f20-02899e211ff6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bb26538-9fdb-4a79-96e0-11a4c4fe023d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bae53631-6cfb-426b-a789-a0cc217f9584",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b198c94e-95c2-4917-910e-62abd510400a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "114ac058-c946-4b90-af1f-2e5d30bc5e09",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "683b9492-64b8-4fb8-9f8f-899bdf59ee54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c73538b-b749-4eda-85be-3b5c309a4736"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a5c886-5db9-4d38-a6b1-d916b68b8a15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e82084bd-ba6f-4aa9-9e29-005f38996a83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45396632-2178-48e5-91c2-d1499da8f9a9",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c08ef040-f5eb-48d8-9e48-e02425b60143",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4702791f-8b71-4016-a6ee-8ceebbe256b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07365d93-2d05-44cb-80c0-6b09fad10d73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "748a2cb5-9043-430e-b57b-fc2a4356fe5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "439c90a4-b89a-4206-976a-40f71bb36dd1",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d806dae4-bc7c-4800-9489-3dc5d957ecb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26d7d9f5-7eb9-4782-afbd-b33a5a96206b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bade939c-674c-4970-b888-45ce9df249b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f111aeea-f44c-4a5a-9c20-f0289a343b9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c55f2a-4927-41bf-9dfa-6e8a77b0c055",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a370b7b8-1d06-4dea-9a08-e47396d0eaf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd300342-8195-42df-9e37-7d89772a01f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73c1679a-be66-409b-aaca-a491169ba42b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3fcc32a-bfba-48c8-9fb4-96a3c73d5bef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3d85961-73e3-408a-8899-c58501bc3ac7",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14a60cf4-68ea-496a-b943-a8ea73eca043",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de5edd15-88c1-4d40-8a63-9987566127db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5210a12-f2cc-47fd-9fc0-dc0b01c0ebd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "925b10a8-0e8c-4b90-ac9e-8bc3b36151f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a256a408-2fae-4a94-bea7-f3069160083c",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "443c2ef7-1956-46c1-b2cb-a0e26807386e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c6c3ebd-2a74-4876-9888-ab3ab1cd55e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7281e29b-186e-41bb-8564-8b8243fcd734",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10cc25ad-85bc-4c97-a656-5092e0564f3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bd4d9c0-54bc-422e-ace2-e9f08c826dd2",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24651d7d-6b33-4c9a-a17b-191cdca5e475",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b23bed5-a880-45be-9edb-a130bbc8bd84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb64cfcf-206b-4fc3-9b21-7d67b855b689",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94ca00d2-3797-46b3-9ba6-089b227844eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a03cb8a-3f2b-4d45-afa5-c5be7fe0eb50",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbab2c0c-78f4-4f0a-875b-bf4a9f104ceb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "825af010-d1a8-41e3-b932-af856144f31f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9f4972b-1b07-4337-abe6-1e94f203e1b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f892cb41-2a66-4028-b50e-aa15549b828a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beaa37c3-d6d3-4e15-953e-5560a717c6d6",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47444f73-eff5-48a6-a2f8-011b33852b0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50db0240-261b-4e31-abdf-8006cd9bfb2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3962505d-4cbb-4086-8627-611450d56e6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "486196af-8d3d-4529-9c07-98044c38ac13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21da8f87-d95b-4bf3-80f8-5123fa89b724",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e3a4c20-7b35-4353-b525-fb6e1872e201",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "413313d6-a192-4e36-a107-5b1b1b54fd60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3df0188d-f3de-4447-8b5b-2012ed40eb12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f79971ae-6094-4b92-82f3-f2453faf0dce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38ff3162-662b-4fe7-8733-6abf8e92d71b",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f99ff02-303e-432a-87fa-0fff1b47d146",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e83eb63-9ad6-4de2-ab23-4c6c7565a6a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7417a31d-9544-4b05-8fea-c8fb82bce269",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "300cc635-b36d-4e1a-a608-2f040e041661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f919222-c394-4d2b-aeb4-b65f6d2df630",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b6db468-d015-4870-b33c-b5e86149c6de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2306a610-2469-4059-b8f7-62a807c6c2b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c337cf88-b521-4b6b-9bbf-f0a388769f05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c606ce9a-ee81-4538-b7ac-a9a54c1e0977"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39c090b1-19fc-41fe-ac0c-ec5f1f3fc55e",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0225e64b-75ea-4b37-9c5c-611499e93a06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "631cb23c-71bb-4f60-9ba1-7ce8ba1768d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5181d11f-c979-4d84-a3b9-1db6bca8aacd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc0dec72-b6b2-4628-b441-c94fa671d45e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "757d56ee-0bce-4435-b2f8-b23a516e8f6c",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a854cc8-114b-4e28-a7ca-ebfed7e84f57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cfd175c-b43b-4bbb-a34e-58ff49d00b37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4400f360-5a40-476e-9d12-5a34c4cc5cf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95b95dc4-b07e-42db-bf4c-18aae122bb56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c10a2c5f-91df-4bb8-9e5b-057434d01476",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24a3462f-dd42-475f-8c16-27d82e986d35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64df636e-b45d-4fed-9aa7-f8003b902189"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f51a629-84cc-4d77-9408-1ce77eaa5f72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45a48c55-5e70-4f33-9529-21bbf76ca8f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cd8a0c2-cc59-4556-9383-5409e0d21855",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6071aa03-7525-46b2-b0f3-899c29885ea0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a702c35-1468-442c-98cc-5f5745ef7507"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b8571c9-364e-4f43-bef3-cbdd0575fc98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cbad009-bbe3-47ac-a85b-e1fc57384c2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ec6fa18-7a1e-409a-b74b-69b984a21f8f",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a79c2c11-a353-423e-8e99-0fe1eb88f9dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7ddf0b2-2d2b-4d67-8f8d-363beb289703"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02997198-4b19-4119-9673-601cf9a0bfb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7759b3e-8b1a-46ed-a584-febc7637dde8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33685373-5377-4118-9dc3-ec9273d4e81a",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff9ba7bf-019e-4995-b8f3-d5901c63b918",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd43debe-af43-4008-ae31-493d8e1ad3f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07dd5128-061e-4ad9-bcd2-26f0ba3a5775",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c5be229-9a1b-4209-9539-cb3a2dbfc76c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2a4ab74-f80b-4221-af25-dd364451d91f",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88923f30-8e13-4a83-a0bf-ce4e056342a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cd87ec3-491d-4c79-b3ff-9e3b5975af3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a64c8480-82d7-4a01-be22-8d0607971d30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12935b82-3bef-4be0-bc22-b2dd1f06a2b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95588cd0-18b8-487c-beaf-286af24bd73c",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a464b34-4d91-40b6-ad72-6cda9ee67201",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d26b760-ae92-4fe8-a5bb-5daa37b3b389"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d503c1af-d2ff-40b4-8d44-a3275241556f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58994352-0505-4b68-8fd8-8eaef0aa8a4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7a574e7-d55a-442a-91d9-8f2d34c6641e",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d1eaef5-ffc2-4cc4-8723-883b54e40f06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd89d6a4-5c41-4741-a2c1-e3aa419c387d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6ef36ae-3793-4a14-b276-fecd8597badb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f405b0e-11d0-4d24-a1e4-beff03fff92b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9593dce0-9675-47c8-bce2-d8b57593aca4",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dec9edc3-4f66-4074-af1c-8d68c1df8957",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "012af87a-4052-422b-a917-8b2fa85e1209"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5fd4e76-de00-4e6c-8e1f-c807ace9959b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8995deeb-27dc-4b0c-814e-4dd2f2d88f73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ede0f31c-58b9-4467-a3c5-e530f19bc816",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72665de5-1984-4752-9ae1-5ffc20681e63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a179dcde-6c2c-44ec-ac87-602c460addcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fdaf2b3-6de2-48f3-9b8c-cf454851e3c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "198bc52c-eca5-4d6a-9940-e1309750386a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfaca111-913f-4d79-89bc-a51f100f142d",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7258c46-1314-4a15-8be8-74981f8f5281",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62740146-e752-4c6f-8b02-4137666cb2b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0db7f60-d8b4-43ad-8fbc-478e34ae4fb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "093fced3-911b-4242-9620-6f904777d119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10685cd0-f3f8-4e26-a8ba-ef54b966bc2e",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28271f65-c502-4352-88bb-1e521eb933ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12a89e85-74b9-4cf0-bb13-b7a1da41e5de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f88dc4a8-7032-497e-ab67-7571ce7e91f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9ca97e2-d9ce-4696-b099-c9d18b7d0c67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "154e8c5d-9f97-48fb-a333-14e6960cd2b6",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de668a10-a57e-4f42-ad1e-d5b6ba75245f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "946f2794-fd94-4094-b744-0aa353a2bc60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34188e6c-be3d-453f-b4ba-ceb7eb179fc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c77b5c10-e80c-44d9-abbd-1510a417bcb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d798078-c30a-4785-86bd-74e35abab7ca",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c6b321f-30f1-4fed-97e7-e24dd9dcccb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78700bae-803f-4c90-b1c6-c65d80c19af9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a14a3104-edf5-407e-a4d4-fdd1c3274558",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08cceb54-cfd1-4a90-8319-2d2647dcd7ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48616d3d-2ab5-494a-8109-84b0167812f9",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a611fdf2-ec83-43db-8cfb-75a5c90c2c89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8363d16-51bb-42fd-b451-5de3f24fe2b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b302523-4aff-43b3-ad0c-98a5ff2cc374",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c56f3e1d-5b10-4849-8f49-c4cd2f281591"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4a452e3-230b-4e8b-a364-ea9294f7587f",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8e7de51-dd40-4250-b84b-28f4dc37373e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "778433ee-869f-4988-a0d6-5df099ccf745"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1108269c-21f8-40a9-98e8-243efba70962",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6665e467-1e9d-4622-b6d3-3673afa55477"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8763eb2b-1677-4510-b1b8-e4b53ae89590",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0be03e1a-8c9c-4194-bc84-13ec9123aa90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c436c3b1-6d17-44fe-8101-424a712f407e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d401fbd-5826-4a52-8830-276b62c5c86a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49c2b23c-e223-4e91-85dd-2931ed9feef8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f78d595b-549c-4a24-8fb8-b33dc8c1a649",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "162b9d65-0f61-487e-946e-85023733d441",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de576bc6-8b23-43bb-a41d-ecaf9172ad8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85e28cc0-5597-460f-a437-67095804827e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "881f3e7f-58c4-45d2-9322-cb5514b0258a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9914b172-0382-4438-9c7f-53d7e975ef55",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b86c5a9-65c6-4e5a-8a0b-8758f94e5c12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f82ec383-edce-40ae-a1e4-a92b74cd98e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d32772ef-f0b9-4bd2-b73a-5d4fcbfff571",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44a79236-9fcb-4056-ba5c-308d10335d58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d745ad17-5bfa-467b-87d5-738799aa08a8",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7d067ce-756f-4599-82f9-0a12ede18398",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fd7cc58-2aaa-4f2d-84bf-25ffd56c7a2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87ac6a9c-0ac0-478e-9930-46766d602cca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbb0675e-3ff4-4b5e-8802-574d888ddb49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cbad961-0caf-4d78-a535-0fd863137171",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3407d150-79a2-4200-bf0b-ff7d8a2d6d80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "117fd01b-be80-4a1f-9488-2bf17987095e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f62d6bc8-bba3-4ffb-8bdf-76c2f5192434",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbef1ee2-d5e2-4b01-a89f-df0a36b1fe16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "131f6a78-b357-4c1a-a631-49c30d28b516",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a5bfca6-f61a-4358-9a2f-b1b9a6359215",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f70959b6-c1aa-4d29-8935-4e715d4be029"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3b0adfc-b271-4cc1-92a6-da1eb0543a86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "270442ba-c79d-44cb-9da5-44b157ec521f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a78cd455-5506-47b0-941d-2e8a8b3a5d69",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35633a47-debb-4ddf-8a7d-d0189c25589f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6a32bbd-cb9b-45a8-92ea-0026760e4701"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fab2efc9-1142-4613-b69e-b9122042fe4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de0d4823-357f-407c-9947-34a67bd70ad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba5223a6-f797-4d5f-8f49-64efdf7543f2",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1357941c-c65e-4767-b7fd-0da0763ad24a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d14fc7e-c9a9-42e7-9d5d-3852439722a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ad6d8ba-a813-4eea-baae-6de301c244c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bec6c459-b8b8-4dc8-b7a4-5e9deefc8376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1d11716-19eb-47b1-8300-7abbcd36fd8a",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "248626bc-32be-405c-97e9-1fad015164d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb272dae-df12-45ca-ab0a-24dc7c056aca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc926d09-10b1-461b-8513-6e51d3a5cd6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a686db1e-5432-495b-94ed-37939b57572a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "612a3e07-5b35-4f8f-8680-6d4947b679e7",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5527a455-a931-4abf-aea3-13d6890be58a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c3bff6e-6463-443b-a880-7f58f993383a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cec643ff-5170-4ce0-918c-ce472c94f396",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0689318a-860c-4855-99e8-f6de01e9f30c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dd70896-2115-4221-87b8-3a1e7a413e96",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "793d6827-1daa-4897-99ad-b56e0db1f9b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "257bb2a5-5349-44d5-8700-33a6d9bdb586"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42573d1b-b3df-4b62-ab4e-d17817b2838c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2f5183e-1617-4e2c-9b7e-550d33199615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84e3fea0-cfb1-40d3-b0e2-782ec2941c87",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a8c0818-83a6-415a-ad57-59c424465ec7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b2746b2-114e-4fb1-95a8-853b6c30b111"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d4ba596-6ffa-45ba-9e8e-db3afe127305",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb68de7f-fef2-4515-9906-0bfc8d7802cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "370939db-7846-4a4d-af94-112bc4371809",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50b593a8-3bc0-409b-afb5-f789e8e529d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5477d8f-c7d2-44af-b9cb-4cca6b90d241"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0813d7c7-68e2-4c84-af0c-57b74c39ba2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abe3a24b-9be7-4c76-b6c9-cfe14994c506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9190abb3-ec9d-430d-9729-c86d8af008ba",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bd20b03-e29e-4b2f-94f8-e035629b9784",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2870ae09-4cf3-4a64-ab9a-d878fe17a331"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d65f2638-47f0-475e-ae9d-b3cd7c1efe74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00e5a88b-dfb7-4edb-9c48-4e5b3c11fc8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d6e664c-b4ed-4464-93d9-d9bf9eb132c7",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d91b78f9-5b7b-45db-8535-04cd03046ebc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e4b65c9-3bd9-449c-b987-a812b1746f95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "326c1d0e-12d7-4512-b9d0-1fcf41a44fa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b44cc9b-f2bd-4549-ae98-990bea18d89d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae18ee49-b073-47b5-b01c-ef2cd78bc832",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3ad81a1-df77-42c5-bdc0-5919e1a65667",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b90675df-6d6f-4921-afcd-b3d94eeac6b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39c4e8ef-5c2d-4ccc-8041-3552281df4df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05b01ce9-bef0-4585-bad8-7cfa17b27b48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06c83324-d045-4d07-83b5-53cd1c5bc098",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "611fb159-a659-4543-84cb-ecfd4f79a67c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d288a34b-659c-4213-80a6-b48663d2347f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74e08c3f-4b3d-4f69-9663-13fdec0747b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4308467-c1e4-46e2-b280-15696c7275dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5727c2e2-0625-42e3-8d39-68b1975fcf40",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "859d0d8a-daae-4898-b243-3dcc9e6fd2d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dafa24ab-5f7a-40b4-9534-88bface29c5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a09a01da-8da6-4789-b6df-a1f4583b54d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d32c8567-6fa6-43e7-b16a-285f717d8e5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33b0efcb-7683-44eb-a073-fcd73771f647",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "989afc73-f561-42d3-a180-843ecb4bc151",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8626f2a1-079e-474b-a2d4-84e977f1a65c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69b783e6-0652-428b-8001-71068cdf908b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "962c7856-1fd6-490f-b2a4-98a07511875e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "822fcbb8-cb6d-4584-b776-c6fdaba7727e",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0e0fa6a-bd35-40e1-bce0-5b801604f454",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f8f65a7-7c52-4e5e-9ec5-083d3deaf001"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "767c2126-c46f-4e69-aeb0-6dac0b84a830",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcffebf3-2c97-4654-bbed-68ea19a1bcdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cf87753-c0ea-4e4e-bc52-ba7447695b13",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b128981e-1717-47b0-88e5-68e53a61b13f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd594b80-44fa-4258-9916-d9892b571ff8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86b9baa9-d546-4733-b864-7e3d28d5e9c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30b091b5-b87e-4bd5-830d-546dd51dac77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0908ae85-2e18-4140-8966-4ab1985697c1",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d636d8b9-ccd2-4aac-b8fe-e81ee7370095",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "539f295a-8351-4c2a-9143-0cc59a6d6e6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "312c4b90-c8b3-4665-9978-dccff5bdf37f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c15842a9-3a28-4000-a125-0bd8d0b23cb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fd572d7-70ec-45c1-82f4-07b91bc6c560",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66771e21-2843-468c-ba35-f6ea85cf04b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b3f3a56-e354-474c-bd4d-3a27d4071d34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f37e89b5-7759-4594-b8fb-2402da20f8ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4a2ab77-061a-41cc-bfdf-75864f2c7da9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3485b2d-e855-4cae-b249-b7e9b2ea7623",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "998dc7fb-5fa7-4a2f-b0f9-00e7de94c8fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bafad45d-515a-4dbe-a9bc-a893c8b65eba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d89c6e7-aa96-4b78-a132-2d2a7e09e096",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "235c58e6-dcaa-41d4-8bf4-f6e3a8b1ba68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51560187-ea5a-4a53-a2df-19fd94765ded",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1288c93c-20cd-4562-a775-34dd3b04b787",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fbdea18-7a87-49ce-9e6a-42864e643548"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93d2685a-78f5-43f6-9e8a-68ed22b2521b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55843329-2784-4b8f-92a9-12b46abe4a51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e698f8a-9817-4594-a904-6c70c8fc92db",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec02b19d-013f-4378-b418-8ff66b58aa13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1918ad2-5916-42e8-ac64-b72c05f20410"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c3c83d5-459a-4171-853f-d0c56e9df042",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c3dcb3a-ea78-475b-a6bf-8921c3153f45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8f3448c-ca52-403e-9967-f6192dff7e0f",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c653378e-ffca-4cc5-a2e5-9ccd84021dad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b0e2f14-9f5f-4fa5-939c-81dfb64f8f83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a952438f-ee24-41ab-a850-e9cf2c496eb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4aa74af7-cdea-49f2-a1ed-ba50a49e9204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b057e57-dd4f-47b8-b3c9-5da81094a96c",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67d4b055-f460-472c-87f9-105dabb888ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db2203b0-8791-40c2-9248-cdee0bb04441"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28025578-37da-478d-9a76-baf1b728a7eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3297b559-85c0-4a4e-955f-37bbbafdd68e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8200220b-d436-48ee-ab71-656022f49a78",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d70df241-8e42-4258-99e8-45bafd2b687b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76939c7a-9f08-4db4-a564-3ae793e983f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51825a93-ad6a-4106-86d9-d32237a4c274",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04d3cfea-f624-4c54-87b7-f8168ff2410b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "220ef794-d38a-4a83-b603-14dd7ccabd21",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b05afcc7-2ebb-404b-a584-faeff2aa1fa8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9edb0eb4-cdcc-4085-94fa-0c952fced8c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "644125c9-fc6d-4c12-8885-4a2696619cdf",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a40842f0-4abb-4468-baef-1826769eaf68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e018383e-39b3-4d29-a217-9736e7915997",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1201d770-9271-4150-9c51-f220956fd826",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "acaf2077-a3b7-4a7b-b75a-456c40b36e2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee485164-2221-42f2-be72-225de6b19089",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d28685a-7721-4fd3-8bb9-9ab0d8d13077"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bbde8849-7904-4145-a358-4bcfc8088035",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "44fd0e8d-7909-4a81-935e-9ff222f552c2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "59cf5553-b710-42a5-b62d-8612e1661049",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ab2468c6-aeb0-4efc-91ff-1effa2b3d641"
                    }
                  }
                ]
              },
              {
                "id": "5a57bcdc-0afa-4676-b2c7-ce4a54ebe7c2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5717bf10-6ee3-4488-8ce3-b8f562a7284d",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e250143f-c77f-4370-b0ee-5bec260de37a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ab671d41-7bcf-4d00-a60c-d2d80fc0c948"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6f98b78-40ad-47f6-b182-e815a300ad54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f35676f1-367e-46fa-aec3-d8dedbfb56bd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8800a1e8-73f5-499d-9a67-c881dc4203cc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e66b0ade-03f2-48d1-af58-27fc72fdb15a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9967c84b-2476-422d-b6a3-93774f63d8ad",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "60ec6c49-9b33-4218-bf69-d4d94f3e96d1"
                    }
                  }
                ]
              },
              {
                "id": "4fee2c48-44b7-4574-89bc-d4b01bebe20e",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "2e5932c2-8f09-43cb-ab62-5e320420ac98",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a128df55-cfec-4b1a-bf3b-415f1868e6a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "f72bd180-cd8d-42ad-9ade-6d11afc89fc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "319499c9-644a-4f8f-816c-c11d9813f0b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bdd1dd0-12ae-49d9-9ed0-60e1893dce41"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ba2342aa-8d13-4931-9447-a50afb16e6b3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3a347ebc-ac5a-4798-9243-11735d0e3b16",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9a81c981-6d07-4b98-9ac7-b3712ed1c065",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2c804742-844a-4fc2-b1a9-288b1f524044"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b7ef9b9-8b5c-4952-9ffc-18ff392e2f1c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "84776ddb-25a9-400e-88c1-d05fbadefdb8"
                    }
                  }
                ]
              },
              {
                "id": "25ffd8c5-6c9b-461f-9c7f-f83420e930d6",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eb27c07a-661a-46c6-84ac-c95dc23f8cb5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "03742c0d-f933-44a4-8225-27e9102f18b8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "72d06232-e83d-4164-970c-99cceaf2c695",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "52a66fcf-6568-40e0-be3b-806fa1c081c0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f8b859fc-32c8-488c-890c-a9c893b3fe1f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "00758472-8121-462c-a930-414201c618e6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d648f88d-703a-45e2-8c08-5236af7ae748",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "210626e1-f75b-48f4-9f71-3ffb81cbc8c7"
            }
          }
        ]
      },
      {
        "id": "b51c93e8-596b-4fc9-a8db-3f577a46f3ee",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "105dd2f2-5f03-4300-9c19-0fef3c167c93",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5f75503e-a5ec-4b76-b013-bed362cb8ce1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d4362dfe-6b54-4ce2-a23b-3d5f4e06025e",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d483c1b6-3030-4c17-baca-462bfea7ed32",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5928b2ef-0df5-43d1-be42-90f3cc60183b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c501e33f-9f7b-4789-b14d-842c48aea5cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0eb27640-7065-4950-a841-8cd6ab549de5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8c2588fe-cd0e-40ae-806f-acbebc6132f9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "10b836d3-45a5-4aaf-a615-23c43470d61d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9f64e86d-950b-44fd-b600-0dce0997797f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "00301f02-c7ab-422c-9a25-902cf7cf9793"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "060690c2-e289-49de-915c-4cdf7a868180",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c8e186c0-f196-4f3a-b420-6c5dd2078bba"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ebed93fe-6ba1-46fb-9625-790069cbe61b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a67972b6-5db3-4504-a257-00daee01ac1b"
            }
          }
        ]
      },
      {
        "id": "2a964b51-1684-42cb-a862-9c1f3a6207b3",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "daa0ca19-41e3-4f6e-8dbb-4d1c612677bd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ded45bec-1bc0-4e87-b325-0403d18bbad0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "40912224-855f-49cd-b114-5b231b1a1b51",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44ecb5df-c1cf-4806-8ab9-db295636172c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6e6d7d1e-3bbe-4769-a712-9b4cd8d208cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "513498b5-7822-4a8e-bf5e-01cd5ec132e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1a510312-96c0-49a1-9c97-cffda9174573"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "596fcd88-eee2-49eb-a699-43c67ee5a857",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "05e471de-df67-4263-9c6a-8654e8859eed"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d8982458-cb3a-4e9b-8304-ad211f4f2171",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "23f18491-448f-4a4d-b63f-41fcefb7b957"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "294065f5-c0b9-45b9-9dc1-0dc11e08bb1f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "316c9fee-ddb3-4f39-ac38-5a1db712354d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "462e3fcc-3cf7-4ccd-bf1c-da2e24c20e41",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cb6d23e0-3153-40e4-bf17-8916c9f0bb94"
            }
          }
        ]
      },
      {
        "id": "ad3b7178-cb2f-4ecb-bd68-229deea3cf6a",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "22644972-264e-4b45-8b2a-eaadb5d1edad",
            "name": "Negative Testing",
            "item": [
              {
                "id": "edd7b8f4-76e4-4131-934f-7960427c800e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c47944c2-fd81-4c12-aa4d-4f84fe3c8f0a",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9762288-79af-4cdc-885b-3f2a0d7efb43",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "94af2baf-f2ef-4315-afb6-b3023b51f266"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb225bb4-ac5c-42b0-9ae0-a2e67e25ea04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "81856f9e-77bd-422b-85f4-09ab3297e1ae"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9fda06e5-5a01-4623-94f4-fd437b7fe43c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5c44d92d-22ea-442b-8269-264ce5f40140"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d28d9283-753b-487d-a4a3-d0cfe6916efc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cfeaae0f-05db-42f0-b79a-1c921be7b53d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "70a77e8d-61d6-43b3-b10d-aa88561b01d5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "736f74f9-ff21-4813-9720-43d7e6950ac8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "69587455-d51b-42ae-a9dd-2e30d8b457dc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "47118fb0-335c-409c-a552-556ede3cbbcf"
            }
          }
        ]
      },
      {
        "id": "11cbfa1a-e0a0-438f-88c1-5b68868b886c",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6428f1fb-e72a-4470-8f9e-2b7cfd92b6fe",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "04e84b49-0896-4f8c-9440-e5b42fb7f593",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "71877aa8-d423-44e6-a671-ff707fa9b85a",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0e0c3262-b76a-4cf6-bbac-99020771379b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d38441b0-7061-475f-83a5-64bbeaf42f1b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 57.797619047619015,
      "responseMin": 7,
      "responseMax": 620,
      "responseSd": 77.72123258370945,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1716856622303,
      "completed": 1716856645092
    },
    "executions": [
      {
        "id": "9acedc3a-2756-46c5-832a-cb0420357378",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "4bd2a544-dc5c-4c4a-8b82-0181f38512dd",
          "httpRequestId": "afd1b325-4399-4bec-abbd-486b4493180c"
        },
        "item": {
          "id": "9acedc3a-2756-46c5-832a-cb0420357378",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "9efdcca0-8435-4777-8da5-b057a1db7bb7",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 0
        }
      },
      {
        "id": "c79c9b65-8e7f-4072-a965-ce25f10dd42a",
        "cursor": {
          "ref": "bae4f806-de9f-4dbb-b885-7c896f93aa78",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "70c648d5-c53a-413f-85b9-c651f79febda"
        },
        "item": {
          "id": "c79c9b65-8e7f-4072-a965-ce25f10dd42a",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "7f9c3e0b-24f9-4ed1-979f-172b4dcdf1e9",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "26ebb8c4-fcbc-44e3-89e2-9eaeda0f8012",
        "cursor": {
          "ref": "f1cc3d2b-0f6f-4ff8-a60e-959133e0a1d3",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "97f609e7-46fb-40d8-803e-cd64b8398ace"
        },
        "item": {
          "id": "26ebb8c4-fcbc-44e3-89e2-9eaeda0f8012",
          "name": "did_json"
        },
        "response": {
          "id": "7fccc6d4-dd82-417c-843d-d61e6ab45a6e",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72a96984-315c-4768-a031-cba40aa992ca",
        "cursor": {
          "ref": "1990b42e-8765-4c0f-b48d-77d0d447ca9b",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c47ac77b-37bb-4b39-8af0-62380613d7b4"
        },
        "item": {
          "id": "72a96984-315c-4768-a031-cba40aa992ca",
          "name": "did:invalid"
        },
        "response": {
          "id": "c6f2f99a-a8fc-4dd2-bcf5-4240170d9638",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72a96984-315c-4768-a031-cba40aa992ca",
        "cursor": {
          "ref": "1990b42e-8765-4c0f-b48d-77d0d447ca9b",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c47ac77b-37bb-4b39-8af0-62380613d7b4"
        },
        "item": {
          "id": "72a96984-315c-4768-a031-cba40aa992ca",
          "name": "did:invalid"
        },
        "response": {
          "id": "c6f2f99a-a8fc-4dd2-bcf5-4240170d9638",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48f03796-f4aa-47c8-a9bf-7b3809371399",
        "cursor": {
          "ref": "977fdf39-445b-43bb-b68c-2fd9ac4a9965",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "897501f2-6da8-47e1-9a8a-d6b5fa5c0aee"
        },
        "item": {
          "id": "48f03796-f4aa-47c8-a9bf-7b3809371399",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "e97f51b9-c0ec-4c58-9a77-5523230a437e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 322,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "242c96b5-708e-4fbe-84b7-021ada92d35a",
        "cursor": {
          "ref": "97d20fbf-45de-4d82-8890-4b94e295a024",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "3158efa9-154d-4971-8a06-37db6913603c"
        },
        "item": {
          "id": "242c96b5-708e-4fbe-84b7-021ada92d35a",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "c5fa00d4-9afc-47a6-a467-043f4e10f8d9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 25,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d69503d2-8d66-4b4f-99d3-c0f5161bed67",
        "cursor": {
          "ref": "f15b5d8e-3dfa-4321-8953-e54fbdb85d0f",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "2be42767-9923-40b5-bdbb-9293f231aab6"
        },
        "item": {
          "id": "d69503d2-8d66-4b4f-99d3-c0f5161bed67",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "60c61f18-a002-4ff1-a43c-373a698e1626",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8772aa17-c9e5-4638-8601-0f37a32e4a24",
        "cursor": {
          "ref": "db544d7d-670a-4fa2-adc5-ca68e75ddc6d",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f284bfcd-b662-4af0-b48f-5bef33b7b87d"
        },
        "item": {
          "id": "8772aa17-c9e5-4638-8601-0f37a32e4a24",
          "name": "identifiers"
        },
        "response": {
          "id": "0936d117-f6f5-4b3a-9b2a-7a9f95fa2922",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c65f6927-f6bf-4650-b443-bafb15f610a5",
        "cursor": {
          "ref": "921a1334-63c9-4279-a81e-722882d1d1f2",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "0341832a-89dc-4f90-a545-554f2844c27e"
        },
        "item": {
          "id": "c65f6927-f6bf-4650-b443-bafb15f610a5",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "123f5574-c970-448e-92a2-83936e5cc017",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54c47b13-a3d7-414d-a0a5-7e6d0deb7a4d",
        "cursor": {
          "ref": "1d06cc45-012d-47a8-a438-0110d50fc85c",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "cc6cc916-a9e9-4b38-b0b0-a60072cf6cbd"
        },
        "item": {
          "id": "54c47b13-a3d7-414d-a0a5-7e6d0deb7a4d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "70f1b954-c724-4a3d-8b84-31bf5af68617",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb3c43d1-1674-4e01-a2b8-8655c6ac73ad",
        "cursor": {
          "ref": "f374c041-3fdd-4264-9a0f-9ce3e328b457",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "6d0a918b-5753-4df9-9208-814ec52c1538"
        },
        "item": {
          "id": "bb3c43d1-1674-4e01-a2b8-8655c6ac73ad",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "4242fd1a-f3e9-47bd-895f-37c1f214bacf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca6c5651-ffd7-42dd-9141-adfa614c6d9f",
        "cursor": {
          "ref": "4fc6bb7c-e42b-4425-8d39-f1c45b784687",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "2e29ecf0-81a9-4bc3-9775-c67569bd5643"
        },
        "item": {
          "id": "ca6c5651-ffd7-42dd-9141-adfa614c6d9f",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "66483b68-7fba-44a0-bc99-c6999f00005e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9ab71e8-8b37-4ced-8425-6d984e363ff0",
        "cursor": {
          "ref": "39e9a6c2-96e8-499f-a56b-74bdd1afe8d9",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "93c7de27-6ea4-430e-9b2b-7abfccfb0aed"
        },
        "item": {
          "id": "f9ab71e8-8b37-4ced-8425-6d984e363ff0",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "3bcee173-c36b-42bd-9475-056fea076f20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed08215f-845b-4a39-bf7b-159920983864",
        "cursor": {
          "ref": "745785ba-37f0-40c8-a85d-b1e9d7c40e0e",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "41de924a-80b1-4a2b-9104-b18365376725"
        },
        "item": {
          "id": "ed08215f-845b-4a39-bf7b-159920983864",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "75525455-d42e-4790-a14f-7387a6f3b313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa8a45b0-52ea-44a0-9b4d-75aec36697ec",
        "cursor": {
          "ref": "acf5c19d-d831-45da-bb8b-8f39754f55bc",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "4494fe8c-b1ae-4b5a-81a8-757d848a1edb"
        },
        "item": {
          "id": "aa8a45b0-52ea-44a0-9b4d-75aec36697ec",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "9a169a5f-ba4b-49c4-9610-31c8bdce3fed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "033a0d4b-265c-4830-8dff-3746c015e589",
        "cursor": {
          "ref": "5bbca77b-0a40-422d-a3dc-9255538dd15a",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "b1ebe404-d516-4841-bfc8-723a5fead32f"
        },
        "item": {
          "id": "033a0d4b-265c-4830-8dff-3746c015e589",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "872add95-4014-4957-9c00-02c822ab8e8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a33ea830-b470-4304-b4a8-f698fcaf4f32",
        "cursor": {
          "ref": "19c3f1ec-44a9-4be2-b7d4-5226a7870a9f",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "0050ecab-ce92-46bd-acab-7816a25de4f8"
        },
        "item": {
          "id": "a33ea830-b470-4304-b4a8-f698fcaf4f32",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "6af66e51-30b0-48b8-967d-3160452b4cf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7b1a74d-9182-4e23-bf18-c9276c5a09bd",
        "cursor": {
          "ref": "34d3d43c-e8eb-40c9-b7a6-d4de249250f8",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f46fac8d-cab5-4cdd-9f09-1882310fcc8e"
        },
        "item": {
          "id": "e7b1a74d-9182-4e23-bf18-c9276c5a09bd",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "ec5d4416-f274-4472-96e9-5234eef12669",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57cf1eed-81e8-44c6-ad67-e5fa7741ffd0",
        "cursor": {
          "ref": "d01342b0-0c5e-44f9-9fb5-75f1f0ed7e57",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "b7720843-c6db-40c8-93e5-8e8ded5982df"
        },
        "item": {
          "id": "57cf1eed-81e8-44c6-ad67-e5fa7741ffd0",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "7715785f-885e-4a44-a5b1-31728c754481",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "967cfac0-2d90-438f-aa9c-056e70e29daa",
        "cursor": {
          "ref": "cb1489e0-e322-481b-af54-f660a0c5e099",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "482aebcb-5bc4-4f60-9bba-d3ac0c6af083"
        },
        "item": {
          "id": "967cfac0-2d90-438f-aa9c-056e70e29daa",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "bbc9511f-25da-4ffb-ab4d-2178952ded51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa5851fe-c208-48f3-ab36-9c7f0c2ed422",
        "cursor": {
          "ref": "40ba9d87-acf2-4bb6-a381-2e5ba4ea9c89",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "94a16849-09c9-45eb-9b71-3c5a41790244"
        },
        "item": {
          "id": "aa5851fe-c208-48f3-ab36-9c7f0c2ed422",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "b167b69f-e11f-4d65-8afa-b7a0ae3244ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff3511e6-f7ac-49c3-bc51-efaaf571b77c",
        "cursor": {
          "ref": "0b73e086-7aa5-4c51-8cf1-4df2fc4693ee",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "c27015b4-8a86-4dad-aded-0f7b6e1bda22"
        },
        "item": {
          "id": "ff3511e6-f7ac-49c3-bc51-efaaf571b77c",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "4f155f35-5a28-41fc-a089-f9ccad0e8074",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02ee739f-1998-44a2-aa03-cf707f29f512",
        "cursor": {
          "ref": "b84ff2ee-e3ef-4922-b2a2-fd3070014ab0",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "708827af-adc5-4490-a80f-ac8a9675818c"
        },
        "item": {
          "id": "02ee739f-1998-44a2-aa03-cf707f29f512",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "a4b2de20-484c-4527-b42d-4e78f888fbdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d962b0b0-ca91-483c-89a4-c3bdabf34052",
        "cursor": {
          "ref": "4eed2e44-d1a1-441b-9dae-2336c8cb3d1a",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "442dd02c-00da-473c-b18c-5b49fdf40e00"
        },
        "item": {
          "id": "d962b0b0-ca91-483c-89a4-c3bdabf34052",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "d7ed988e-0c24-495e-8c34-48e28784a88a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9caaaa5-1ef3-4233-aaf4-9017fb1b8b0c",
        "cursor": {
          "ref": "a80be8e4-8aa6-4248-b3a1-4a82c4101eb8",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "789b1d05-7ab0-4481-9d11-6f343a508ea9"
        },
        "item": {
          "id": "d9caaaa5-1ef3-4233-aaf4-9017fb1b8b0c",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "a81cc314-8ffb-4121-90c4-d8397b5d3a1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3690e559-2805-4726-831b-8ad05387d00d",
        "cursor": {
          "ref": "c2f45e80-90f4-4ed0-a9da-cc36a6d601d9",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "23e4bcdd-2a81-483f-99be-844a57ec9795"
        },
        "item": {
          "id": "3690e559-2805-4726-831b-8ad05387d00d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "064491f6-6588-4d18-8b6a-88e36921cf4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 131,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40ed14be-69a9-4fb4-a17f-1f6b5408d73f",
        "cursor": {
          "ref": "bb66ef8e-d53e-4424-a4ee-61475bd34259",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ad18cf65-fcbc-4169-bb3a-b3ddc965febd"
        },
        "item": {
          "id": "40ed14be-69a9-4fb4-a17f-1f6b5408d73f",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "477d737e-5389-42d8-acc4-11030f17df63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29d7c8a5-fd2f-4930-abea-053a7f6d67bc",
        "cursor": {
          "ref": "03ee7b9a-387d-42ad-b756-50dcdaeb7eb6",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "6309fefa-7ec7-499d-b960-93dc28d9956e"
        },
        "item": {
          "id": "29d7c8a5-fd2f-4930-abea-053a7f6d67bc",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "e7167fd6-ae25-4d55-9f1f-59bad4e6ce72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91c5ee94-0935-4104-a283-656f58fa6c06",
        "cursor": {
          "ref": "4bcff6db-66b0-43dc-9dc7-e3fad0681433",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "96000866-472f-47a9-8ce0-afc0b20fb781"
        },
        "item": {
          "id": "91c5ee94-0935-4104-a283-656f58fa6c06",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "a7681c95-aee7-4462-92a5-a2fd660f4e1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2831a5c1-59cf-479a-8ffd-fa68ee57e125",
        "cursor": {
          "ref": "4ae52d2a-4520-4784-ba14-9d750edac952",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "d0fd6026-3471-4ce8-92e4-a6cb7ebc588f"
        },
        "item": {
          "id": "2831a5c1-59cf-479a-8ffd-fa68ee57e125",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "43c21b18-4ea4-45e0-b026-9d0973d4eea1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "780d7605-a0bb-401b-87b9-4827583b8962",
        "cursor": {
          "ref": "aa7d15fc-926d-4160-88cb-b3323290d6ce",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "1efa3084-ea3b-4851-b68f-617178fa7849"
        },
        "item": {
          "id": "780d7605-a0bb-401b-87b9-4827583b8962",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "fd34ece9-d91d-40ea-9d1a-54954daed57e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9765a27-b066-4381-bc66-56933e2a2b7e",
        "cursor": {
          "ref": "203a20c7-bb2a-4c49-a51e-2b6e7309ab05",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "c90e2097-2da4-439c-b0d2-18842ac5c9fe"
        },
        "item": {
          "id": "a9765a27-b066-4381-bc66-56933e2a2b7e",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "9cbcdc13-ae3f-4ec9-87fd-b4c56a726435",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f560a3c-7429-4b92-b9d7-1f9a609604bf",
        "cursor": {
          "ref": "70dbf436-5b73-41ab-8c88-5e95e7134060",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "f8a9be21-ff7c-4d9a-b1fc-093067109d51"
        },
        "item": {
          "id": "6f560a3c-7429-4b92-b9d7-1f9a609604bf",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "863c6dc6-95f6-496f-ae40-1f2f5b8691ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3de3d7c0-525e-402d-a3f5-6e36e4f4712b",
        "cursor": {
          "ref": "5a9bf9b4-d06a-4167-86cd-de0f09ebf60c",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "2afade5f-c4b4-445a-9d70-1e0af5f05f76"
        },
        "item": {
          "id": "3de3d7c0-525e-402d-a3f5-6e36e4f4712b",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "e3798fd1-e4a3-49c2-bda6-d38c118c5ac4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e692fc67-c1db-4a51-afe9-bbc049cc50c2",
        "cursor": {
          "ref": "a6c1c18d-8950-417b-9990-a82ecb2d3ad0",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "302fa5d2-5a69-4dfc-a88a-e7b70748d71f"
        },
        "item": {
          "id": "e692fc67-c1db-4a51-afe9-bbc049cc50c2",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "1734c862-8cff-42c7-a377-874db49bf5e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ef108e2-afcb-46a4-9a5f-544266b93c61",
        "cursor": {
          "ref": "1feb19bf-3124-4f78-9203-5b7e75c7f6c2",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a12d036a-2fb2-4cbf-b6d7-4cd2cfe0a298"
        },
        "item": {
          "id": "6ef108e2-afcb-46a4-9a5f-544266b93c61",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "24fa49df-81ea-4294-b6f9-ea829c697183",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "691dd817-1940-49ae-9b4b-2644240539a3",
        "cursor": {
          "ref": "477a3eff-5402-41da-8273-2aef675f3409",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "9f4c742a-0fa0-4757-99fc-5eee613b4065"
        },
        "item": {
          "id": "691dd817-1940-49ae-9b4b-2644240539a3",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "5797abbd-b07d-426d-95de-711a0de177ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "912b3840-9c85-4d9e-8110-adf744060b13",
        "cursor": {
          "ref": "ce986e50-796f-451d-889d-2cf3119bf342",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "419da124-ff85-4426-940c-3516ceb7b8f6"
        },
        "item": {
          "id": "912b3840-9c85-4d9e-8110-adf744060b13",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "001d814e-c7c6-4751-b23c-ebf77e9de0a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07460789-6153-4509-bc88-6422a7732404",
        "cursor": {
          "ref": "65e2f654-5ade-4b6b-a818-33c18e3a037c",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "402d09e4-85f4-4876-8843-63c27cf8d5c6"
        },
        "item": {
          "id": "07460789-6153-4509-bc88-6422a7732404",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "580f00a6-e06f-4841-b273-19f123105480",
          "status": "Created",
          "code": 201,
          "responseTime": 620,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "1c59001c-e55e-464b-9dc5-ded5f35e59c5",
        "cursor": {
          "ref": "8d7cbd5e-d0f8-418a-aaee-bd267c8c1fb9",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b9d29bcf-7055-4a14-b85b-60d2b39a43e6"
        },
        "item": {
          "id": "1c59001c-e55e-464b-9dc5-ded5f35e59c5",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "48cba10f-120d-46ef-8e9e-ee8fab7c50e7",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "2c62fdee-fbac-40f3-814d-d587d733e1e1",
        "cursor": {
          "ref": "192d8be8-83f3-46e4-9e67-dd25ca7d2f87",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "f9b3d260-7c38-4bfb-93c0-067da2e93b53"
        },
        "item": {
          "id": "2c62fdee-fbac-40f3-814d-d587d733e1e1",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "60ffbd36-87f8-45db-a9fe-ddd55565707a",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "f1319e21-a207-41a4-ba45-e9bb73af9279",
        "cursor": {
          "ref": "c58ac320-bca3-4d02-b023-4e222b4ae308",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "272310e5-923b-42b1-bff9-df5477e5d81e"
        },
        "item": {
          "id": "f1319e21-a207-41a4-ba45-e9bb73af9279",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "b9c35c79-e971-4f63-8959-b1ebdb9ba2e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f7c6d70-1775-4952-89f4-d3caa125f39f",
        "cursor": {
          "ref": "03723ffd-5538-46c9-8380-b56eac568725",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "59b5b890-afd1-402a-afa4-a87a45329d4c"
        },
        "item": {
          "id": "0f7c6d70-1775-4952-89f4-d3caa125f39f",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "c9fcfbc4-df0f-43b6-a7a8-95794480b8b2",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "8a06f937-ba86-4179-a627-f954f2214b3e",
        "cursor": {
          "ref": "65a0bd11-267c-4612-8949-693dbff4322b",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "6a45d41f-70bc-46ca-abe4-39b58350a8c0"
        },
        "item": {
          "id": "8a06f937-ba86-4179-a627-f954f2214b3e",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "cf6589ba-b18e-4c8f-9e78-3a674766cf61",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "15275a99-b677-4134-9ff4-232b08881317",
        "cursor": {
          "ref": "ca53ce02-c356-4cce-a181-a8ddc6330a4e",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "3bbc82d4-4782-4521-85eb-17f6ada10857"
        },
        "item": {
          "id": "15275a99-b677-4134-9ff4-232b08881317",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "e234a932-16c1-4ff9-8bad-d25a5f95ebb5",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "705be46c-8ab2-4dcf-9a0c-422d0ca722c2",
        "cursor": {
          "ref": "68957878-0b30-4dda-89b5-8ec13fdb144f",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a851262e-7dc8-4153-bd48-73d36e5245b3"
        },
        "item": {
          "id": "705be46c-8ab2-4dcf-9a0c-422d0ca722c2",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "412c72b8-848b-4379-9b11-2a243b78b2f6",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "b4f7841d-4dab-4317-817b-ca64747966c2",
        "cursor": {
          "ref": "629c5555-6d1e-42d8-bc04-defb7dc3f511",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "5cd45b80-fb86-43eb-85e6-2dcf8766ad37"
        },
        "item": {
          "id": "b4f7841d-4dab-4317-817b-ca64747966c2",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "346aec73-9005-48c6-9e6e-68a229b89de3",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "ef457f5e-8d3a-4109-ad76-5cca581f25a6",
        "cursor": {
          "ref": "ccdb84d9-a852-414b-9b28-3cb81c5f7c6d",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f3627bf6-50a5-457e-8ab8-fabe9b4db911"
        },
        "item": {
          "id": "ef457f5e-8d3a-4109-ad76-5cca581f25a6",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "a45d96bf-95d9-41af-a728-112d5c16cc01",
          "status": "Created",
          "code": 201,
          "responseTime": 232,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "a14a2dc4-5782-4420-94ae-9b27f5bba3ec",
        "cursor": {
          "ref": "c183d5da-7ca4-439a-ae29-d77e4740cb92",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "166e4684-aa32-4e2e-bf9d-500460de7c3a"
        },
        "item": {
          "id": "a14a2dc4-5782-4420-94ae-9b27f5bba3ec",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "09226bbd-07e2-4c49-b942-2d6dc0183d8b",
          "status": "Created",
          "code": 201,
          "responseTime": 237,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "e7161734-04ed-444c-9eb6-5dbc342c77d4",
        "cursor": {
          "ref": "59c8548e-5303-46d3-942a-0664b0a6b5f6",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "72dd9d00-fd70-49ef-88e3-325183050ef8"
        },
        "item": {
          "id": "e7161734-04ed-444c-9eb6-5dbc342c77d4",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "e86e0e46-554d-4079-b38f-1a22a0db14e9",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "09c7edfa-27e0-4fd1-8a10-80282467ef4e",
        "cursor": {
          "ref": "1cf75bc1-b685-420e-b468-9e5204a4358d",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "886d1c7c-be62-419e-a733-14f16670ae9d"
        },
        "item": {
          "id": "09c7edfa-27e0-4fd1-8a10-80282467ef4e",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a2e97ea7-0ff1-40b7-8a08-8b302eee9c2f",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "4cbc39f1-14db-4bd2-8809-e68f1d810f69",
        "cursor": {
          "ref": "fb35a4d9-f210-48c2-a926-2ac3289ae2cb",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "53ce40b6-245c-4828-b845-0a26d7c402fd"
        },
        "item": {
          "id": "4cbc39f1-14db-4bd2-8809-e68f1d810f69",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "377538b2-9f6e-46fb-8ad1-d4fa56b7f48c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fa3b880-5516-4645-8279-1704e291e67f",
        "cursor": {
          "ref": "14a91800-5886-47ed-b3d9-00ed00a06427",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "13dedd96-3116-469d-bb4b-a6eddaec83e7"
        },
        "item": {
          "id": "4fa3b880-5516-4645-8279-1704e291e67f",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "a5a6e553-05ec-49a9-95a2-8713a9ec99ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "153bb34e-0f62-4e5c-91d2-52a953041fca",
        "cursor": {
          "ref": "8d1d51bd-df27-49af-a8da-cce1d7d49af3",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "ea5d7ad1-cd24-409b-896a-8b58881fe073"
        },
        "item": {
          "id": "153bb34e-0f62-4e5c-91d2-52a953041fca",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "35d61ae1-5e7e-47d1-97c1-b553c71e8948",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e52050c-c0cf-452a-a70f-416f3800e966",
        "cursor": {
          "ref": "c5fadf8e-f7d3-49fa-a737-b8a49aa3811a",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "1ee5895c-c54e-409b-b98f-5668cdbd625e"
        },
        "item": {
          "id": "4e52050c-c0cf-452a-a70f-416f3800e966",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "95249849-6b00-4fd4-8dae-95de57628ddb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ecbd6ee-95a6-4a75-a8de-9277d23ad7d6",
        "cursor": {
          "ref": "ba5a62f7-67bf-4ae3-876f-c2df9b5ecf59",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "1c8c491c-b470-4ff7-8e6d-9656680137fd"
        },
        "item": {
          "id": "6ecbd6ee-95a6-4a75-a8de-9277d23ad7d6",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "a15db566-c1f7-43e3-8c02-474646159270",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0813e88f-6305-4d0a-ac46-029d2c7dfe4c",
        "cursor": {
          "ref": "501304cf-a1bb-4021-b127-20479230a058",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "2b8540b7-7fe1-4058-aece-c14eb72ad404"
        },
        "item": {
          "id": "0813e88f-6305-4d0a-ac46-029d2c7dfe4c",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "97e4d6b7-a573-4697-a0d4-9ecaa20e1613",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e362161f-8a55-4484-95ee-1c3003e2ee0e",
        "cursor": {
          "ref": "93325ce7-9eca-4589-b740-90f50b990339",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "65ee6527-3e67-4e84-bf24-da580f42fd2f"
        },
        "item": {
          "id": "e362161f-8a55-4484-95ee-1c3003e2ee0e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "9cc1e003-b788-4cc4-94b5-4fbc9e074a4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3db99d7b-4579-4967-a073-d56c10969216",
        "cursor": {
          "ref": "5b50f9cb-4802-4a86-be7d-f6ae890cacd1",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "2e3db57b-10a9-4d1e-b188-30d1fe9b94fc"
        },
        "item": {
          "id": "3db99d7b-4579-4967-a073-d56c10969216",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "0d02a662-00e9-411b-9ce8-13f95ed1a7fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "914ab3d1-ef9d-431f-a49c-e04bae733f10",
        "cursor": {
          "ref": "36050cc6-69ed-4ff6-adfe-7b56ebec39c2",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "9ef247a1-9988-451e-a7d2-53d5c6ccea92"
        },
        "item": {
          "id": "914ab3d1-ef9d-431f-a49c-e04bae733f10",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "824fdb54-5c6b-47cf-a6e7-8bca88895ebc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c381cfcc-bd55-4681-a9e0-0f016ad030ea",
        "cursor": {
          "ref": "ccdd97bc-7860-4d94-bc07-6540f3e81c0d",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "35e7dd22-f9a0-4539-9d73-2f081c2e1e2f"
        },
        "item": {
          "id": "c381cfcc-bd55-4681-a9e0-0f016ad030ea",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "a61ee281-91dd-4b11-ae21-e181f7ae6c1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4718635-0d70-47aa-b4dc-a0a54c902fa2",
        "cursor": {
          "ref": "b0c64d67-19df-49cf-ac62-697b93a9b72b",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "6cafca0c-445a-4454-9512-728d7bb7e62f"
        },
        "item": {
          "id": "e4718635-0d70-47aa-b4dc-a0a54c902fa2",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "321efbb4-325e-4484-b0dc-9de386609513",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce859513-ba1c-473e-b6b7-e593f5d30e26",
        "cursor": {
          "ref": "b8702b37-cd3a-4aa1-b400-9a78c4967a43",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "d8793d35-ebc0-4f1a-bd30-5469937c383a"
        },
        "item": {
          "id": "ce859513-ba1c-473e-b6b7-e593f5d30e26",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "8531d8f7-aed5-43b9-b673-53e40018985f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8abada70-951e-4b1f-9089-8d4a80d7e563",
        "cursor": {
          "ref": "f63e8e25-c310-48d6-9413-bd0da3f287d3",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "c0cad55c-1f38-49d9-8c92-018519954b86"
        },
        "item": {
          "id": "8abada70-951e-4b1f-9089-8d4a80d7e563",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "33a41c11-f394-4b9b-809e-aadc1bfe386c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0525449f-0fba-4515-ba93-9b0a34924809",
        "cursor": {
          "ref": "77b012e5-dfe4-402f-9b5a-3bbb5e228290",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "cc81934d-ca5f-4111-bf70-33bf416ccea4"
        },
        "item": {
          "id": "0525449f-0fba-4515-ba93-9b0a34924809",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "5d4bbcea-95d1-41e0-8067-7cbad0cf070a",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "ad14269a-7296-4191-b676-bff0ba9d0854",
        "cursor": {
          "ref": "83c2c300-d6b4-4941-a3c8-b8b2b3027982",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "ea049d2f-c29a-47ef-8327-c7d86ec365d9"
        },
        "item": {
          "id": "ad14269a-7296-4191-b676-bff0ba9d0854",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "3cc9b6dd-58e1-43bd-a46f-397f535cd028",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "e65af48f-706c-46ad-a52a-22b948c3e7f7",
        "cursor": {
          "ref": "d6983e2e-3b6c-4bfb-a74f-3319a993f5fe",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "a0f00003-3f94-4d9a-9806-fe5b2a49ef1d"
        },
        "item": {
          "id": "e65af48f-706c-46ad-a52a-22b948c3e7f7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "8a7683e9-8442-4988-9c31-e1c76045cd43",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "ff022a70-3431-40fc-a276-920b3619a222",
        "cursor": {
          "ref": "4ecee5d3-1330-4dd0-91bd-7a30c95c8b20",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "1535dd5a-08c7-4613-997a-b382a6823e72"
        },
        "item": {
          "id": "ff022a70-3431-40fc-a276-920b3619a222",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "736c097f-8089-48c2-aa08-078fc966894b",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "d54e4de8-3793-4b9d-83fa-92adff630a85",
        "cursor": {
          "ref": "fd4f67cd-083c-4412-8805-2acf01219c58",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "37cbb8d0-e82b-4dd1-aa0f-6832653d2088"
        },
        "item": {
          "id": "d54e4de8-3793-4b9d-83fa-92adff630a85",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "2e1bcfea-85b5-4bb4-aeae-9e51826c0b9f",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "d6559c6d-4e34-4ef5-9729-383bcd4da9c3",
        "cursor": {
          "ref": "dd35d3dc-1160-4699-bc67-0653e529e11f",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "a6aeb41b-58d7-4982-aef3-4d32ea17d224"
        },
        "item": {
          "id": "d6559c6d-4e34-4ef5-9729-383bcd4da9c3",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "8e1c7840-6687-48d0-a05a-7d60ce721331",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d458186d-feb0-403f-94f3-e175657f8a8a",
        "cursor": {
          "ref": "731a9fdd-ef53-4584-a085-5ed805fe1980",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7486cef8-e3e2-4bf4-9780-6ce8fc9840b6"
        },
        "item": {
          "id": "d458186d-feb0-403f-94f3-e175657f8a8a",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "50519b55-53a7-48bf-b6df-78a42b9c0eaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a32c201-8452-4bf5-97c8-b49b0c6bc72c",
        "cursor": {
          "ref": "fed10d25-b811-4ee8-a3f6-78efdc43c34c",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "4485f243-0d9f-4afc-83f5-ca3bb22feb8f"
        },
        "item": {
          "id": "1a32c201-8452-4bf5-97c8-b49b0c6bc72c",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "5a3a688f-ea94-4f0b-b4e5-89d3cd689e74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f4968a0-4d3a-4929-9414-adc9e9e36f16",
        "cursor": {
          "ref": "ff5b37e4-6139-459c-98e7-1d3648c105e9",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "aab71868-94ec-4469-9203-2e1dd1ce4020"
        },
        "item": {
          "id": "1f4968a0-4d3a-4929-9414-adc9e9e36f16",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "6d70422e-af27-4772-90a6-4f21774ab470",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "339f90a8-74fd-4ae2-b58f-fcca3ec16e05",
        "cursor": {
          "ref": "fc7fee5e-95cb-4b6e-9e32-2a49ae70d653",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "31e7e76e-5521-41d6-a435-a6f722b665e7"
        },
        "item": {
          "id": "339f90a8-74fd-4ae2-b58f-fcca3ec16e05",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "714e6390-a8ea-42b4-a5dd-0be8f88dc38c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19d5e4f4-7f90-4757-af2d-41d3085bd75e",
        "cursor": {
          "ref": "a9f79ed3-1ac9-4d80-8498-87250c9652b6",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ae29e5c0-ebce-46cb-b5bf-4ed165ae6ba4"
        },
        "item": {
          "id": "19d5e4f4-7f90-4757-af2d-41d3085bd75e",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "5143535a-2e72-49a3-a8c8-aec95f38f89a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3f1c8b1-4939-4390-9f26-6018fa80492c",
        "cursor": {
          "ref": "2909fc96-f12a-4633-84ee-81e5befaf1d9",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "0866216d-bdab-41d0-b298-0b9731aca88b"
        },
        "item": {
          "id": "f3f1c8b1-4939-4390-9f26-6018fa80492c",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "72baab81-68bd-49bf-b418-d2cb9eb6c797",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39070c28-efff-471e-9623-d84b9be26299",
        "cursor": {
          "ref": "d5e918ab-7119-43f1-b351-3420183885b2",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "6dca5d5e-08f9-4c0d-a518-5894c21a6551"
        },
        "item": {
          "id": "39070c28-efff-471e-9623-d84b9be26299",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "1890edf7-808a-4bcc-8b15-ad5770755c7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da02f7ec-4701-4d34-a437-6c8710524f6a",
        "cursor": {
          "ref": "487acdbc-6bcd-43e8-b569-830fba9920b9",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "9da6cd32-02a5-423d-9464-232e81b5ccf5"
        },
        "item": {
          "id": "da02f7ec-4701-4d34-a437-6c8710524f6a",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "26118073-de93-43d7-9d5f-ed724502f5f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69928906-f725-43af-8338-b7911d9d5bd5",
        "cursor": {
          "ref": "127d2334-701e-4eb5-a800-49c1bdc8e71a",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "c3c1ee94-2697-430b-8114-7b851d843976"
        },
        "item": {
          "id": "69928906-f725-43af-8338-b7911d9d5bd5",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "f580c752-a3c1-46a5-81fe-0c2d766270f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6dc95f7-1aa9-4c63-880f-1d41ecf0904b",
        "cursor": {
          "ref": "877824aa-7312-4355-9995-6972a6fef5e0",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "91fdbfc0-98c5-41d1-912f-9bf7bdd700df"
        },
        "item": {
          "id": "e6dc95f7-1aa9-4c63-880f-1d41ecf0904b",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "1d4aa65e-f32c-4544-ae54-0eb4d0a35bd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75ac68a1-24dd-4286-ac39-142f95b40fc6",
        "cursor": {
          "ref": "0e413f02-bb6f-4e8b-8fd0-b585534c096e",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "7d9cd0f1-5d48-45ab-9854-163b4b494d1d"
        },
        "item": {
          "id": "75ac68a1-24dd-4286-ac39-142f95b40fc6",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "273e2c02-8c5e-4013-aa0f-b3190abfb463",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4560d86d-16ca-462d-bb58-949ba3c61b10",
        "cursor": {
          "ref": "2d071a0e-17d8-4d7f-a6af-7eebe7facc56",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "6142f6ee-6b2c-45a8-8351-eda0e808d6ab"
        },
        "item": {
          "id": "4560d86d-16ca-462d-bb58-949ba3c61b10",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "c8c0af45-e1ad-4459-8412-e0d90598aeb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15a79504-94f8-4e45-8397-5b3cdd3fc1cc",
        "cursor": {
          "ref": "da80265c-821b-4a60-ad96-3a9549309111",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "92b3b512-1ede-4109-b864-d70bcc3e7117"
        },
        "item": {
          "id": "15a79504-94f8-4e45-8397-5b3cdd3fc1cc",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "d44beb48-86b9-4e36-8d56-0bc37701d8e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d11fd44d-7b3e-40a2-a175-b976cf3c55fb",
        "cursor": {
          "ref": "d6846de9-d9fb-4b36-846c-b9d2a24ede96",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "2e6529f3-74b4-4650-a198-771a0ff007f8"
        },
        "item": {
          "id": "d11fd44d-7b3e-40a2-a175-b976cf3c55fb",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "743b0bda-fd2d-4ee6-ad6b-6e71cebc1cd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf4061d3-aba5-4b20-9294-37cff89ae162",
        "cursor": {
          "ref": "f06e9e6f-97b9-41f0-b3c7-28159d6e6b3e",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "103f176c-0b8d-4e76-9393-d9da00537867"
        },
        "item": {
          "id": "cf4061d3-aba5-4b20-9294-37cff89ae162",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "afde47c8-4a90-4514-8eb2-b465a4f0f05d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b424da14-70ba-40ba-802f-138196a18a0f",
        "cursor": {
          "ref": "d53aeda7-6d60-4d9b-b2be-8396fce40d9f",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "6df89fd2-8865-47ee-bbb2-facf85e0809a"
        },
        "item": {
          "id": "b424da14-70ba-40ba-802f-138196a18a0f",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "0ece6b7e-8a22-40ff-a8c2-e290d31bb4d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b40a309c-d669-485f-857c-815d59691968",
        "cursor": {
          "ref": "9f91c2eb-da4e-4238-9cd1-b9cc404da03d",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "30e6bdf3-1386-470b-b25e-f0269b796111"
        },
        "item": {
          "id": "b40a309c-d669-485f-857c-815d59691968",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "56cf80ce-0aed-4857-9de7-3362a9f0a0e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b989765-bef6-4456-8ee2-5bfdd82f7cf7",
        "cursor": {
          "ref": "f956bd40-8fc9-4794-9b67-132c55795c27",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "9da123c6-2253-4658-b542-26517003d01b"
        },
        "item": {
          "id": "8b989765-bef6-4456-8ee2-5bfdd82f7cf7",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "c0ac266b-92dd-4d13-818a-345dac33b54e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa2b331f-bccc-4b95-a7d3-0d3957f6c418",
        "cursor": {
          "ref": "5acda78a-1322-45cc-b499-2e7e062683c1",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "4769bc37-57fe-478a-a77c-11654d7fbe50"
        },
        "item": {
          "id": "aa2b331f-bccc-4b95-a7d3-0d3957f6c418",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "84c1c221-06f8-498e-ad34-9ff3000b4913",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8545c42d-c981-4de3-bb6e-e4b3bab25c76",
        "cursor": {
          "ref": "b6aa42fe-ca41-453a-b62c-5ef9db948f46",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "248feb5d-cd75-459a-b384-720ebbf960a2"
        },
        "item": {
          "id": "8545c42d-c981-4de3-bb6e-e4b3bab25c76",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "49c8b13c-d0d9-4c67-b05a-3be5c9675a64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bf0f041-de67-4645-bfbd-6533f4f0373e",
        "cursor": {
          "ref": "c717296f-ac9a-4260-b4b8-3803947eea83",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "3c8f1966-9617-4c4d-b7e4-f9d4febc8d2f"
        },
        "item": {
          "id": "9bf0f041-de67-4645-bfbd-6533f4f0373e",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "22a6ba44-ee1c-4486-a2fb-a454d0231f66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f100f63f-0cb8-4336-8429-7e4214437016",
        "cursor": {
          "ref": "898566d2-0e74-4369-aef7-eba301801373",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "f627ebb4-9afd-45b1-8f14-b842ca14310c"
        },
        "item": {
          "id": "f100f63f-0cb8-4336-8429-7e4214437016",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "9533bcce-b3e2-4ef9-b2b3-0891ebad2bf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b10ea58-089c-49a7-be61-51e627b2623f",
        "cursor": {
          "ref": "add317a2-7101-4ec9-9c00-3b8aa47d982c",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "9d3cef0b-10f2-48da-9d9e-7a589cb5a5c9"
        },
        "item": {
          "id": "1b10ea58-089c-49a7-be61-51e627b2623f",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "a8744658-b78a-4526-9acf-07da99359880",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a4b344c-b893-4052-a548-1d23bd41c177",
        "cursor": {
          "ref": "268af1c7-4c1b-467d-98c6-56e91e367b6a",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "07ddba33-b747-4566-a9a0-9cf4943c4bb2"
        },
        "item": {
          "id": "5a4b344c-b893-4052-a548-1d23bd41c177",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "5ab06ccc-a5e6-4b11-8a4c-03096f12a193",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f59883f3-7607-4e43-bff5-14509581344e",
        "cursor": {
          "ref": "8a8d983a-12fd-4d00-a4d7-f3b900d22c62",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "abdb4a57-899c-4465-a4fe-370a067e0dbb"
        },
        "item": {
          "id": "f59883f3-7607-4e43-bff5-14509581344e",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "425b91f0-1df1-4c6c-a596-38eb719f23c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "997a0b1c-6100-479c-b949-957c7e595616",
        "cursor": {
          "ref": "4f22a57c-9f56-421c-9d36-e75ab5d81ff5",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "a604adb0-80c4-47fc-9616-533a996473db"
        },
        "item": {
          "id": "997a0b1c-6100-479c-b949-957c7e595616",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "51490b85-cdfc-43a7-8d3d-ed5762d08edd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b1d5bde-5116-4c80-b64f-394d44600a05",
        "cursor": {
          "ref": "6c91f8f1-76fa-4857-b78b-9134c5ebff93",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "7ffdcf1a-18e9-4152-aa23-814638626af8"
        },
        "item": {
          "id": "9b1d5bde-5116-4c80-b64f-394d44600a05",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "dbe9511d-8f9d-4bb0-85d9-6ea5a571782e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5efd1d1-dbce-4154-9b49-36a03a9a9016",
        "cursor": {
          "ref": "eb1c4416-de1e-4d8e-a241-17a3e6bb3f5c",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "26f2512a-f5a4-4227-94e7-e07738735336"
        },
        "item": {
          "id": "d5efd1d1-dbce-4154-9b49-36a03a9a9016",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "c899dfcf-7b7e-4a18-b615-67e85fdc304f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33549fbc-eda2-44bd-a968-6855423d4b44",
        "cursor": {
          "ref": "5d09077c-a124-467b-ab5e-12dbdfa0b085",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "1f6c8c85-799b-4907-91b2-010294a719bd"
        },
        "item": {
          "id": "33549fbc-eda2-44bd-a968-6855423d4b44",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "d695cac8-e56c-4524-a24e-d62f5aa0e171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da82aed9-1cf8-40db-ad63-c9ebf02960b0",
        "cursor": {
          "ref": "47cea8b0-dd91-4690-baf4-84699d9da668",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "868644db-e3aa-41db-969e-3ba12c344449"
        },
        "item": {
          "id": "da82aed9-1cf8-40db-ad63-c9ebf02960b0",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "6f06f029-e8db-4a26-8f29-f68d098e3f57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24500269-335a-4b79-98e4-f60a1eea29e1",
        "cursor": {
          "ref": "a0f3b1d7-228a-4b60-841b-cc69b7d5daf9",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "b9be3917-8172-40ec-af03-1d391f250546"
        },
        "item": {
          "id": "24500269-335a-4b79-98e4-f60a1eea29e1",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "9eb45a63-0dad-4cbd-84d3-2708a70350f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c17f43c4-0a41-474e-a552-814b20ebfb47",
        "cursor": {
          "ref": "0248616c-db65-470f-a7c8-6e899327ba49",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "8bcb43fa-e28e-4693-bc4b-f03e05f65b49"
        },
        "item": {
          "id": "c17f43c4-0a41-474e-a552-814b20ebfb47",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "93ddd524-faf8-4a06-adf8-1fb9b8fe750f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "b7bc0248-f6a3-43ef-b785-b4bda548f408",
        "cursor": {
          "ref": "4144b3f3-5ec3-4787-8875-c32e23bb24ba",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "083b99de-a5e4-489c-8980-4f67523a4597"
        },
        "item": {
          "id": "b7bc0248-f6a3-43ef-b785-b4bda548f408",
          "name": "credentials_issue"
        },
        "response": {
          "id": "6ac7d249-f4a1-4f52-beff-ce4da7185e0f",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "03cd1c76-8c21-4560-891c-495663a6e5ef",
        "cursor": {
          "ref": "3be59dc2-971d-4f48-b8cf-0ac0a8c59c33",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "2b63e1b5-b7f0-4bc7-a3d9-1100af99809d"
        },
        "item": {
          "id": "03cd1c76-8c21-4560-891c-495663a6e5ef",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "924442c9-0d8b-4c94-955e-71615c71df86",
          "status": "Created",
          "code": 201,
          "responseTime": 248,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e896ffae-710d-4870-94a4-e41ab4cc4c30",
        "cursor": {
          "ref": "73bca576-5a79-4665-9aca-caa4ddf62ffe",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "42e1c040-7746-4f7c-986e-465bfc09ba35"
        },
        "item": {
          "id": "e896ffae-710d-4870-94a4-e41ab4cc4c30",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "1f4c7c3f-a47b-4a44-b048-430298bccd4b",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cb77e34-9550-4577-b751-379aa06b8c75",
        "cursor": {
          "ref": "e6064926-faa7-4f47-a19c-1f826963acd4",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "2c9c3499-3118-4bad-8ace-ce0b191e3652"
        },
        "item": {
          "id": "0cb77e34-9550-4577-b751-379aa06b8c75",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "04ce6e7b-0f2d-4d56-9a50-043a3a3734fd",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "582ebfca-cee8-439e-a668-894cc946e140",
        "cursor": {
          "ref": "cc9bb357-be8c-429d-b4cd-bfc8565cc6f3",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "8c75467f-1d48-42f3-bd9a-6d93b955ed82"
        },
        "item": {
          "id": "582ebfca-cee8-439e-a668-894cc946e140",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "0ccfb55e-8177-4ae6-8b6a-ffe9996acee5",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-05-28T00:37:15.318Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-05-28T00:37:15.318Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "ef45814b-7dee-44f3-84bd-ccbdf777197a",
        "cursor": {
          "ref": "99e48f2b-46c5-4681-a991-b8977a01e944",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "6144aee8-0f52-4aff-90c0-1a5fd8b62876"
        },
        "item": {
          "id": "ef45814b-7dee-44f3-84bd-ccbdf777197a",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "27620321-185f-4573-8487-631eec116ea3",
          "status": "Created",
          "code": 201,
          "responseTime": 232,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52bddeb3-6692-4b18-a5b4-cdde05148bed",
        "cursor": {
          "ref": "b2ea309d-3446-4b0a-b1af-13252d5f685a",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "3d3a7e6e-c467-4b6d-9063-3990016a15ad"
        },
        "item": {
          "id": "52bddeb3-6692-4b18-a5b4-cdde05148bed",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "5dcdc2ad-8bab-4aec-b269-c36b6f24f239",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5cab177-7cad-4783-a622-e814f3bb61db",
        "cursor": {
          "ref": "2d44d140-1f82-4aeb-af59-8aab672877b2",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "45972e86-29be-4599-a007-757fa018ba75"
        },
        "item": {
          "id": "d5cab177-7cad-4783-a622-e814f3bb61db",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "21648238-63f9-4a39-b180-b8528fc0fe04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb07d3d8-0497-4f3c-b264-1b880c59e052",
        "cursor": {
          "ref": "995121f7-36bd-4841-9230-c9c9739cf1e0",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "18e238c4-e929-4476-b89f-b880c7bb83de"
        },
        "item": {
          "id": "eb07d3d8-0497-4f3c-b264-1b880c59e052",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "66d30c6c-0244-47cd-a1af-ca3c90d519c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68eb3410-b4c8-445f-8f11-e523036ffb0d",
        "cursor": {
          "ref": "3af6aedf-3088-4d16-adf3-537968a6f3ca",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "30152b30-3cfb-48bf-bd73-e076c77694a9"
        },
        "item": {
          "id": "68eb3410-b4c8-445f-8f11-e523036ffb0d",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "6393671d-6bba-404a-b293-8d5ae1962047",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf2e288c-42d5-4926-8386-6683dad9b51f",
        "cursor": {
          "ref": "5679c91c-cb2d-47c9-86f5-8ba44aafd530",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "a2aa612f-d80b-4a5a-ba7c-a6988d646043"
        },
        "item": {
          "id": "cf2e288c-42d5-4926-8386-6683dad9b51f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1ab5edbe-f6e0-4adb-b9cd-3781d3f2119d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eb65e6f-d931-411c-b923-8ee1e7904741",
        "cursor": {
          "ref": "e242b912-8a75-4a9c-a83a-b53be35d0b74",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "82359e5d-3433-46d1-b02c-96cd5e1f09b2"
        },
        "item": {
          "id": "7eb65e6f-d931-411c-b923-8ee1e7904741",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "595cadd0-7467-4683-9735-8646db1309c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2de64e2e-6d92-4af2-b4a6-a6c5b9ec57d2",
        "cursor": {
          "ref": "3e90c531-523e-4c83-bf83-f3d66b32aaf0",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "843409a8-338a-4d69-8ada-9158c6bbba17"
        },
        "item": {
          "id": "2de64e2e-6d92-4af2-b4a6-a6c5b9ec57d2",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "ac18e92b-5a75-455d-8e28-9017a3df11e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a857f2a-9a0c-4d79-b798-2f258c14c35c",
        "cursor": {
          "ref": "b113f51f-9490-46f6-ad7c-d864f9642854",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "ef7c7d71-6fc7-4a0f-9216-2e1701d703ed"
        },
        "item": {
          "id": "9a857f2a-9a0c-4d79-b798-2f258c14c35c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "94e34851-dc1a-4627-b296-48cd16b6e753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5fcc93b-4926-4519-81ab-2385c6013ea5",
        "cursor": {
          "ref": "5bdc0cde-1e10-4c9e-8073-7c3438f615d9",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "29a8d4f6-d7b2-495d-a9c6-ad4db4b28619"
        },
        "item": {
          "id": "e5fcc93b-4926-4519-81ab-2385c6013ea5",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c005bfde-3bd0-48d8-89c6-354aac069fbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07a715eb-0b61-49a3-a760-5d23b6ced2c3",
        "cursor": {
          "ref": "2e43c92f-d523-4d02-9494-9d3b2308b461",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "fd4d9998-2f3a-4f67-b42f-452177fd92ad"
        },
        "item": {
          "id": "07a715eb-0b61-49a3-a760-5d23b6ced2c3",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "ffcc036d-26d9-4524-b16f-71a9a00fb694",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2382435e-007b-4ebe-833e-d09ba6e9edf2",
        "cursor": {
          "ref": "8b100587-531d-4b21-8b0a-e0d1cfffb984",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "880deeb9-a7d3-4305-beef-bca3c684c751"
        },
        "item": {
          "id": "2382435e-007b-4ebe-833e-d09ba6e9edf2",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "804ac3a2-28fe-4a89-a7ca-a09cc3a4071c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa565eff-35d3-4f4e-9f98-416db0a403e8",
        "cursor": {
          "ref": "3eee12f1-82dd-4e3d-8b5d-5c9b9420cd69",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "a5e4011a-31ae-45ec-93b6-f00fde71c78c"
        },
        "item": {
          "id": "fa565eff-35d3-4f4e-9f98-416db0a403e8",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "dd837bce-5c42-4bcd-ae77-ed77641cd5c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67b4bcb8-2c9b-41e5-8ca6-2fd3f8b9480e",
        "cursor": {
          "ref": "18aca18f-94c0-43bb-bd61-b69311db598e",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "3081b105-23de-486f-adc1-7e02e98d88fe"
        },
        "item": {
          "id": "67b4bcb8-2c9b-41e5-8ca6-2fd3f8b9480e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "085d4b3d-35ef-4141-aab2-c9b6d0fdae49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "077fa11f-0649-484c-bbbd-a127a01c0be7",
        "cursor": {
          "ref": "3b70c2c0-5c7e-41c1-a1e6-b753a880c569",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "1bdec22c-551a-446f-8ce2-9048d49d64c8"
        },
        "item": {
          "id": "077fa11f-0649-484c-bbbd-a127a01c0be7",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "5008f1ed-479f-44e6-a9a3-5081fa481d71",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "c9e19a6e-7b07-42d4-93ef-38fe30a0aa41",
        "cursor": {
          "ref": "b00b13d1-412b-4a38-8d6f-436c69799ce3",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b62a9bb7-9538-4939-b537-72396f214430"
        },
        "item": {
          "id": "c9e19a6e-7b07-42d4-93ef-38fe30a0aa41",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "608c7459-e3e7-4289-842c-70159865a663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e2a3674-71b1-4180-975a-2f3a6b86bd3f",
        "cursor": {
          "ref": "b5177c91-9f55-421a-8fe7-d5eeb1bd8f30",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "b1b80753-456d-4fa7-ab43-653c996dd5eb"
        },
        "item": {
          "id": "9e2a3674-71b1-4180-975a-2f3a6b86bd3f",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "24f3d439-62c0-4c13-a625-e1d51045e250",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de74d511-b35e-4dcb-b6a0-ed06bad57cd2",
        "cursor": {
          "ref": "d57e5a21-ff87-4717-80f5-ea1e8a71b472",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "c249259d-649f-402c-9272-d4c04d4d4950"
        },
        "item": {
          "id": "de74d511-b35e-4dcb-b6a0-ed06bad57cd2",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "832422b8-284d-4142-ba79-a46f79aeb53b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecd31bd5-400d-4501-aa0d-d7eeb07e2c50",
        "cursor": {
          "ref": "aea767ff-99fe-4e23-b399-69d24466198a",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "b9747eef-320c-4a87-9007-53e00f5bf47a"
        },
        "item": {
          "id": "ecd31bd5-400d-4501-aa0d-d7eeb07e2c50",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "df2a072c-d599-413a-884f-5ed516e3f129",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13df64b9-6ec4-479e-a6b0-0621c8bee1ff",
        "cursor": {
          "ref": "25cebf3e-70da-4a2b-a97d-b7ed11d9058d",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "82b62f74-a47b-4689-850a-0504ad5e6e3d"
        },
        "item": {
          "id": "13df64b9-6ec4-479e-a6b0-0621c8bee1ff",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "4f444cf3-c11d-403d-bf94-205499fc2ba7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e78bbd92-2d46-471b-b21d-970afea29b02",
        "cursor": {
          "ref": "26c37cd1-0904-4ac0-88c8-defa6930c941",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "d304ce2a-326d-431c-b573-94dc0609d1af"
        },
        "item": {
          "id": "e78bbd92-2d46-471b-b21d-970afea29b02",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "7cea1331-443b-4643-9fb1-fe355dcf2c59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fd90930-ccbb-4755-b1af-c98851f1321f",
        "cursor": {
          "ref": "94ba214d-acbe-4069-9abd-eafcc6a6c779",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "05e80cfe-3eee-48a3-bcd7-3d40f707f923"
        },
        "item": {
          "id": "5fd90930-ccbb-4755-b1af-c98851f1321f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "5030f558-ad29-4c13-a70a-a313964f32ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed18425a-569d-4d8a-968a-807302eab3c8",
        "cursor": {
          "ref": "c1ebca27-d26d-417c-bad8-38854adfc363",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "7dbf5645-3e1c-4869-b3b1-0720bc2ea1c9"
        },
        "item": {
          "id": "ed18425a-569d-4d8a-968a-807302eab3c8",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "eee9f943-3f62-4b37-ad44-d7f6753067e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23986dba-3fa9-4c9b-bb8f-166df4b9a5df",
        "cursor": {
          "ref": "287ae262-26db-466a-b60b-91b74d18f3cb",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "210bbf64-e7db-4515-8c67-2c4e186300cd"
        },
        "item": {
          "id": "23986dba-3fa9-4c9b-bb8f-166df4b9a5df",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "be119407-c189-4744-a2f7-4fd0abb48a43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d18adaab-8358-480c-81ba-6ce2f41f2a2f",
        "cursor": {
          "ref": "abbd7826-570e-4dd8-8d5f-ebe7dac3dcc1",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "56e5e0e7-d55f-4e4b-8943-118f8e6f2bd5"
        },
        "item": {
          "id": "d18adaab-8358-480c-81ba-6ce2f41f2a2f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "4b461db5-6cd2-4c85-9567-b710923ec6d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e33f0877-e55b-4e30-8add-c972f2bfd232",
        "cursor": {
          "ref": "85197d44-dac1-4e29-b447-bfa84f257800",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "505066fe-3512-4629-805f-7be97f6f9532"
        },
        "item": {
          "id": "e33f0877-e55b-4e30-8add-c972f2bfd232",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "3a68a59f-463d-42a6-b352-96f02d93dcfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08069534-edb2-4987-9241-04f6c0e85143",
        "cursor": {
          "ref": "f632f0eb-ab31-4e6c-83d8-f1466c9ef941",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "a0668081-49a4-442a-9980-c89e474d6ade"
        },
        "item": {
          "id": "08069534-edb2-4987-9241-04f6c0e85143",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "09309fc4-7fad-4749-9c86-4996b8c481b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1752e691-cad7-409e-b733-9c997e18cdca",
        "cursor": {
          "ref": "f6f61d0f-885d-47e8-b7a4-a1fd40275b4d",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "c03922a3-b3d9-4c1a-b693-14c928ee4e9d"
        },
        "item": {
          "id": "1752e691-cad7-409e-b733-9c997e18cdca",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a633ac33-2365-40af-b2aa-4a0f60d3aad2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a69747c1-b081-496d-80f9-4c201e814351",
        "cursor": {
          "ref": "9a464c6a-068a-47b1-967d-2637e9e784e0",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "ad5efd1b-b7c8-4bb7-a2ef-2ae983b564e2"
        },
        "item": {
          "id": "a69747c1-b081-496d-80f9-4c201e814351",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "13fb375d-ad88-4480-974b-996212158f4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85fcdd7c-48a0-477b-8606-b035706a04b0",
        "cursor": {
          "ref": "11a256f7-9eea-40e8-b245-dd4479b8ca9c",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "4be85662-f2ec-4846-ab9a-9ecf91c85397"
        },
        "item": {
          "id": "85fcdd7c-48a0-477b-8606-b035706a04b0",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f39a0081-aea1-475f-8f2d-50d704c2b0ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ea92166-a1ab-4f64-bf8d-2452ea8631d0",
        "cursor": {
          "ref": "47b8ae1c-38d0-41e9-8a6f-b60b0a25f8e2",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d29404a3-1f77-4899-b7d4-593e64032153"
        },
        "item": {
          "id": "4ea92166-a1ab-4f64-bf8d-2452ea8631d0",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "0392b00a-3133-46a8-abe3-7ff6cdf0d35f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b98794f-2798-48c8-949e-0b93d02974eb",
        "cursor": {
          "ref": "1e6be920-3134-464e-afa2-309d466f5314",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "909c23fb-d6e7-4963-8265-3ffe9c59778d"
        },
        "item": {
          "id": "0b98794f-2798-48c8-949e-0b93d02974eb",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "293e6686-53d1-49ee-ac7e-74156e488522",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef7493c3-4cf7-4f4f-a969-1b31b192e8f6",
        "cursor": {
          "ref": "15818089-7d31-4b81-8375-0fc5db25798c",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "2f024ad7-f9e5-40f6-bafe-484a7eff01f1"
        },
        "item": {
          "id": "ef7493c3-4cf7-4f4f-a969-1b31b192e8f6",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "1ca4345f-7d04-4ec8-9f73-9d757a81c8ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cdb0de3-ee50-4831-85f8-6eced04e7f6f",
        "cursor": {
          "ref": "93048aa5-c684-4887-a630-48f6a7cbaf25",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "2949c91d-5f83-4bd5-ba3e-20d9af59e657"
        },
        "item": {
          "id": "1cdb0de3-ee50-4831-85f8-6eced04e7f6f",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "29fbf815-92b8-4b94-bb3a-e6b5b9c5a07f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4319429-4e5f-4fea-841d-f9e97766050f",
        "cursor": {
          "ref": "889e6bcd-8def-4fe2-8eda-e22a1e3b6248",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "7b119b83-b4a9-4775-8ebd-bfd7a56d7163"
        },
        "item": {
          "id": "d4319429-4e5f-4fea-841d-f9e97766050f",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "0507bb37-0e23-4753-9f2b-27b347f494c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95bef092-bd87-4ee5-aa7f-2295c48e5ee8",
        "cursor": {
          "ref": "d070ce5c-4288-4b71-8659-aee16be5a459",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "15e480c2-f5ed-4a62-851d-55f09b4fe55e"
        },
        "item": {
          "id": "95bef092-bd87-4ee5-aa7f-2295c48e5ee8",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "c89f416e-4074-4b40-a6c3-9c21f8b96e90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79dbac4f-445e-43fc-a08f-86f628b67117",
        "cursor": {
          "ref": "ea736547-84ac-4aee-b473-bda018270dd7",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "1a19e2b0-4058-4493-b636-e463a7f119ef"
        },
        "item": {
          "id": "79dbac4f-445e-43fc-a08f-86f628b67117",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "a8e94ec4-edfc-4bea-82fa-f64e6a576c09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99b4f9c1-1ec5-4a5b-b70e-9e737af87417",
        "cursor": {
          "ref": "2e438d1b-915f-4db3-9dbb-cc887f33431a",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "0f04a10d-df6f-4676-8242-1148e0625245"
        },
        "item": {
          "id": "99b4f9c1-1ec5-4a5b-b70e-9e737af87417",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "f6b70430-a7eb-4272-9f9a-86e9be0ef533",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e089d0d8-ceeb-45c2-82e9-0c57c3e67370",
        "cursor": {
          "ref": "501f82f4-0f87-4f8c-aed4-0d3a9aa9252e",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "3e462a8d-4f54-45c9-a22d-9e5622b3500f"
        },
        "item": {
          "id": "e089d0d8-ceeb-45c2-82e9-0c57c3e67370",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "166c800b-e9c3-40bf-8729-8a05de92b54f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6dc18df-98db-499d-8b7b-8403777a0917",
        "cursor": {
          "ref": "da70cc63-33a2-47f8-98bd-7017019d6b60",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "722e3c1f-ff60-4c4a-931b-f4bf3d70758e"
        },
        "item": {
          "id": "b6dc18df-98db-499d-8b7b-8403777a0917",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "08376938-cafd-494d-8ee6-f429a1e55c42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f889db3f-17fa-47a9-b508-fa02f95a8ce1",
        "cursor": {
          "ref": "399a0b71-252d-4e36-ae35-f3b6b54fcbe1",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "f723e27f-e861-486a-9c77-e53ffed1c22f"
        },
        "item": {
          "id": "f889db3f-17fa-47a9-b508-fa02f95a8ce1",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "21f9ac29-c68e-440c-856b-21bbee2a1c3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c80f5ee-a85a-46a1-8695-60fb8541c036",
        "cursor": {
          "ref": "1dc70c0e-c509-4645-8a05-d5d54d745cce",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "4c6dc519-faf4-4cfb-9ed3-c6833d88ac01"
        },
        "item": {
          "id": "8c80f5ee-a85a-46a1-8695-60fb8541c036",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "1d12ef67-324d-4d7a-81a8-11b04212c1e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cffa9b0-869b-443c-8c61-e9a37d06e26a",
        "cursor": {
          "ref": "8c2b1469-0674-4d93-afc4-fb11d613dcc0",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "da282390-ac02-421e-8617-b1301e6d4fab"
        },
        "item": {
          "id": "6cffa9b0-869b-443c-8c61-e9a37d06e26a",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "198569d8-230d-477a-9ce3-bd6f29136fe8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f453c8a0-4758-4890-855f-5c485fca19ab",
        "cursor": {
          "ref": "1b35c12c-1381-4147-8a0c-9fb9c2927619",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "2840c333-5f38-469f-9b72-f71cf027d2f0"
        },
        "item": {
          "id": "f453c8a0-4758-4890-855f-5c485fca19ab",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "47fcdc34-9b5a-45e6-9dd1-473e9746967b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c88da468-41ed-49f7-8d76-474f5b34544d",
        "cursor": {
          "ref": "15e26ce0-b32a-44bb-98da-567df75d106e",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "c3db35df-3316-4416-8c8a-cff0cc677bb1"
        },
        "item": {
          "id": "c88da468-41ed-49f7-8d76-474f5b34544d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "47de61c2-6503-4a39-945f-44dfe3ba25ed",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "e6526bc2-5f55-48e1-96da-6f945fddbfd5",
        "cursor": {
          "ref": "2ec294f1-a6f4-4f30-be51-66b37adc5605",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "d35c009e-5f9f-4c2b-969f-5d2da9fbb135"
        },
        "item": {
          "id": "e6526bc2-5f55-48e1-96da-6f945fddbfd5",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "9d7e535f-abe1-4a7b-b54d-7f60927df3cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19d8fd44-bbfc-41a7-85f9-eaf1d35880ae",
        "cursor": {
          "ref": "9b1d1845-7c3e-48a5-93d6-f9199967795e",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "b11881f3-3449-4249-8962-70e0531be1b3"
        },
        "item": {
          "id": "19d8fd44-bbfc-41a7-85f9-eaf1d35880ae",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "eba0724f-5ca8-4d6f-8edf-d2297f94a3e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e11d0d4-893c-46b4-83ae-5ffdfd8086c8",
        "cursor": {
          "ref": "7b9ace32-a943-4190-8690-1edf3336297a",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "f89e49c0-6290-4fde-b080-f4ab36959a72"
        },
        "item": {
          "id": "5e11d0d4-893c-46b4-83ae-5ffdfd8086c8",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "dae9331e-de1e-4e45-a788-22838d01d1bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb4a5b8d-e5e3-49fe-a4af-603d7ec45954",
        "cursor": {
          "ref": "271691bf-39a6-4bb5-bb87-3a67c110b0d2",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "d1c53148-5898-4cea-a262-33af839ad806"
        },
        "item": {
          "id": "fb4a5b8d-e5e3-49fe-a4af-603d7ec45954",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "3b58529d-1fc0-4120-a13e-221910f14975",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "541f7447-54cc-4e79-b075-a50e5249d857",
        "cursor": {
          "ref": "37e6ac52-08bf-4236-8577-56cd0aabf625",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "f539766c-7d3c-4c6b-bc92-26c19fcbf6fe"
        },
        "item": {
          "id": "541f7447-54cc-4e79-b075-a50e5249d857",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "e293cae7-9e14-4f36-a87d-f32affbb2b8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "970328af-ad8b-4fb5-9cb2-31a45b320fb5",
        "cursor": {
          "ref": "7261c918-7366-4531-a69d-9257e031b833",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "50408dca-7aef-4816-9169-17b1bcc49808"
        },
        "item": {
          "id": "970328af-ad8b-4fb5-9cb2-31a45b320fb5",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "f34ef53c-4274-4731-aeff-afdc83381cfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7b32dc9-16f2-4438-a299-4fb3e48e774c",
        "cursor": {
          "ref": "6845cd8f-96d1-4aec-b44c-c25005a89b9f",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "4a7b2e99-5eaa-4ccd-9151-95786c32996b"
        },
        "item": {
          "id": "f7b32dc9-16f2-4438-a299-4fb3e48e774c",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "23af725c-2490-4ba1-bc7e-a6f464ace9ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a7686c7-ef5a-4526-a88d-0c6019987db5",
        "cursor": {
          "ref": "0131dfed-fafb-4ace-8bc2-617d5c2b7118",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "7883133e-2f85-4daf-b603-15baf8542ffb"
        },
        "item": {
          "id": "6a7686c7-ef5a-4526-a88d-0c6019987db5",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "8c5b88be-babc-42c7-a090-ee097c3905a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb1723ba-adb6-4bfc-b712-7c5d6f2918d5",
        "cursor": {
          "ref": "a74d7696-c609-4561-abd9-77b3af09401c",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "f21a38d6-a64d-4998-8611-e94ee5547b3a"
        },
        "item": {
          "id": "bb1723ba-adb6-4bfc-b712-7c5d6f2918d5",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "afa52d62-328d-41da-9323-28b01b8e8100",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e959cdd6-99d8-4588-8c9d-ea22b6587114",
        "cursor": {
          "ref": "47e3b224-308a-450f-a4af-e6d8036cb038",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "e04ef9fd-ff11-41ab-805e-d76991d81e08"
        },
        "item": {
          "id": "e959cdd6-99d8-4588-8c9d-ea22b6587114",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "ecd0bcdf-1037-44dc-a6f8-4fbacc4651f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1987ed58-04dc-4676-997c-b1098fddc9a2",
        "cursor": {
          "ref": "0578dcfe-9ad6-4f74-8596-b0387028b134",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "4ed8fd6a-e130-4809-88da-75fae3285790"
        },
        "item": {
          "id": "1987ed58-04dc-4676-997c-b1098fddc9a2",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "c08d8ebc-2c59-458b-a7e2-146b21b2f7fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78609c7c-523d-41b9-9466-e1cb0003c6f8",
        "cursor": {
          "ref": "95216b15-861c-4ad6-ba60-98e1eee871a0",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "bed6eef0-5a07-43cc-b867-ad66ede1b3f4"
        },
        "item": {
          "id": "78609c7c-523d-41b9-9466-e1cb0003c6f8",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "741a4e24-7123-4097-bb5b-da8e0c6e5f16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "414a1ce0-e75b-482b-bfc3-5bec7cc98427",
        "cursor": {
          "ref": "659aad02-4b2d-402b-8721-920e0b80482f",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "d262ca53-b94b-4340-87cf-5ad1d3da21c8"
        },
        "item": {
          "id": "414a1ce0-e75b-482b-bfc3-5bec7cc98427",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "5188e80e-d7e8-4030-9b86-5442b9f5c2dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46077f87-5625-44aa-a516-cefcf65baf1e",
        "cursor": {
          "ref": "24c20c76-ef69-49e6-ac4f-c7a1fb9f67e5",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "3b6700a5-d968-4446-8d7a-2b5cb1593592"
        },
        "item": {
          "id": "46077f87-5625-44aa-a516-cefcf65baf1e",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "d772c848-c57e-4415-88fa-5acdb12cb9e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "981f5c8a-5138-4b81-a314-3199de2a5b45",
        "cursor": {
          "ref": "5374598a-6b8c-466d-9b6f-9c14642cd41f",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "ea946379-7c4c-47b2-9858-bc52137acb59"
        },
        "item": {
          "id": "981f5c8a-5138-4b81-a314-3199de2a5b45",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "0c3afcd2-acb1-4402-82de-e76cb1192e14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b6fa97a-dfd9-4ed4-8b64-c6a1555466e0",
        "cursor": {
          "ref": "5dd8405e-9412-470a-bccc-145eac51fe51",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "d5835140-e6d9-4f00-bb44-717172b938ac"
        },
        "item": {
          "id": "9b6fa97a-dfd9-4ed4-8b64-c6a1555466e0",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "a1e3580b-d1be-4b0b-b36b-2711e97350d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b56e814d-2aa5-449b-b19d-f6e72312f899",
        "cursor": {
          "ref": "c8f99830-695e-4fa5-a017-d692dc91e2bc",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "7a8ca1c6-1795-4fb4-b366-253858a5caa8"
        },
        "item": {
          "id": "b56e814d-2aa5-449b-b19d-f6e72312f899",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "712f2b93-1369-4f72-ba95-8ea2cb473a23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaea6f88-8727-4ea5-afc7-8952f201a247",
        "cursor": {
          "ref": "9501599b-45ba-4819-a59d-cbfc0a4156be",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "bedc5444-5e45-4c35-b7b5-3e1d938bf1d6"
        },
        "item": {
          "id": "eaea6f88-8727-4ea5-afc7-8952f201a247",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e8d17ef7-6292-4698-819a-560338e137e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51ba0c32-b32c-4676-9e3f-a73471d8259c",
        "cursor": {
          "ref": "39e7ea2f-d0ed-44d7-83ac-6eae988355fe",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "53b2eaf0-8d39-46c4-912d-9cb104ae7f45"
        },
        "item": {
          "id": "51ba0c32-b32c-4676-9e3f-a73471d8259c",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "15bc7e58-44e6-46dd-bbbf-12bb8402015f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "353c6c20-dd85-4cf2-8f5c-fee4f0fe9707",
        "cursor": {
          "ref": "0958b4a0-ab05-4755-ab2b-9cdfcbebb46e",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "25af1e97-60d8-47f3-b4d3-dd22b8f96b93"
        },
        "item": {
          "id": "353c6c20-dd85-4cf2-8f5c-fee4f0fe9707",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "65951e2c-ed0e-417a-a29f-45a583fd2796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a4c210b-efc9-46d4-b999-d21368599247",
        "cursor": {
          "ref": "fb9e6270-0100-4f18-822f-45f1f46dc169",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "0709e7f2-821d-4d3b-b153-6970ac4024e4"
        },
        "item": {
          "id": "2a4c210b-efc9-46d4-b999-d21368599247",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "b33af28c-e301-47b9-8777-9f21cb50e7c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21451107-7c15-4a48-b79b-6588ef45addf",
        "cursor": {
          "ref": "4d8b3fdf-da5f-4d37-9c7f-cc29082f8caa",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "e6cbb107-c6a5-4699-acdf-9e536ba868fa"
        },
        "item": {
          "id": "21451107-7c15-4a48-b79b-6588ef45addf",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "9a45bd4c-d7ee-4c9d-a0d8-3794a8a5d6d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e7bcf35-2de7-4d13-989d-098e376c6a86",
        "cursor": {
          "ref": "e77bc792-375f-491c-be88-fdde8dd6b5f4",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "7951e9e2-0a0d-4f62-a5a7-2173b4862ed1"
        },
        "item": {
          "id": "8e7bcf35-2de7-4d13-989d-098e376c6a86",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "e188c92b-4b08-4286-961d-ae2e5f20ca30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac295b20-b08f-43db-96b0-75db28e0a092",
        "cursor": {
          "ref": "6af65b86-e64f-4570-aba6-7073c3359179",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "0d071c67-49eb-43b7-ac83-b2565304dcd4"
        },
        "item": {
          "id": "ac295b20-b08f-43db-96b0-75db28e0a092",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "45d8605d-2347-40ae-a180-29c9ae6ba978",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "435d81a5-cc4d-4cf7-bb26-7c42f4bb440c",
        "cursor": {
          "ref": "6367a59e-3284-45e8-9a9c-22df635aff66",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "e9d3272d-f03d-4487-bd2e-2c019bb31120"
        },
        "item": {
          "id": "435d81a5-cc4d-4cf7-bb26-7c42f4bb440c",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "b800d318-bdcd-406a-b5e6-d8d934ef72d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ab8ae46-3a53-413a-8472-f4769f2d3fdb",
        "cursor": {
          "ref": "0be34ad3-9fab-47eb-a4b3-99568aaf9d76",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "90c19215-4514-45ad-9968-9632a5df9dfd"
        },
        "item": {
          "id": "2ab8ae46-3a53-413a-8472-f4769f2d3fdb",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "d098f720-8029-45ae-8a5e-9316a0dd7b18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a40e7e2f-3cd7-4b55-972a-565900009b99",
        "cursor": {
          "ref": "f07fbae3-48c5-43e4-8679-c7042ce418cc",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "e4297a96-6dcb-46cb-9271-94998c93cff5"
        },
        "item": {
          "id": "a40e7e2f-3cd7-4b55-972a-565900009b99",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "4badebb8-eb01-4fc0-8ac3-fd055ec654e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cfaa2a1-8b5d-4693-9bd0-7857b419497d",
        "cursor": {
          "ref": "3f1da2b2-1fd5-4aa1-b20b-ed109b5305e6",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "115880ba-5aa1-455a-a400-88100d428c79"
        },
        "item": {
          "id": "4cfaa2a1-8b5d-4693-9bd0-7857b419497d",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "ae31dd02-6fd7-4c56-8104-e83f94f052ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f81f7d70-9e08-4964-8b9f-8b57d9b2cba6",
        "cursor": {
          "ref": "7cd002cc-5910-4cdd-b15e-5fbdcf371878",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "61aadda6-ce85-4c7d-93c5-8e0d52455aa0"
        },
        "item": {
          "id": "f81f7d70-9e08-4964-8b9f-8b57d9b2cba6",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "1ef93dd9-d17c-4b79-a7e1-94015bf8161a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16a03981-7597-4893-8080-246e6874f572",
        "cursor": {
          "ref": "35d646b9-5d22-4745-ab1b-bf242d5b77c2",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "20a17313-39f6-4159-ac3f-d3e5d590c01d"
        },
        "item": {
          "id": "16a03981-7597-4893-8080-246e6874f572",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "d3c775d7-0d2f-4b75-9b3c-e7d10efa0d90",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "e3e363a0-9d1d-44df-9a9c-e1d6b4949cff",
        "cursor": {
          "ref": "3d0115b2-2bb6-43ec-abb6-87589092383e",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "107a44cb-48f8-4991-ba87-b8d899920d48"
        },
        "item": {
          "id": "e3e363a0-9d1d-44df-9a9c-e1d6b4949cff",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "c88645ce-eeb0-41ef-9d6d-da400155a278",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "114ac058-c946-4b90-af1f-2e5d30bc5e09",
        "cursor": {
          "ref": "fcba2c37-4ad2-4001-bfa3-151d0cc8bea6",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "46b9c090-9656-4f00-a550-2e43934cf48a"
        },
        "item": {
          "id": "114ac058-c946-4b90-af1f-2e5d30bc5e09",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "8a74523d-5bf0-42c0-a502-0d448b549666",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "45396632-2178-48e5-91c2-d1499da8f9a9",
        "cursor": {
          "ref": "e38181a7-37dc-42d5-8869-7dc5e69e0bd2",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "64608c4c-f91b-433c-93e2-fa6c35dc1a6f"
        },
        "item": {
          "id": "45396632-2178-48e5-91c2-d1499da8f9a9",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "9dad6a90-dff8-460c-9539-0455c3be9d2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "439c90a4-b89a-4206-976a-40f71bb36dd1",
        "cursor": {
          "ref": "4c450f92-b9cc-4187-8388-fedcf77b594d",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "ccfdc398-1c8f-4dc8-b972-ae36ae100c12"
        },
        "item": {
          "id": "439c90a4-b89a-4206-976a-40f71bb36dd1",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "30943d51-3dfa-4cd8-ac8e-4f9ef1d1998b",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "66c55f2a-4927-41bf-9dfa-6e8a77b0c055",
        "cursor": {
          "ref": "03bb7eff-c0a6-4363-bc44-aab9086c5058",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "52bea0d4-6173-4016-9937-e66f39fc90e2"
        },
        "item": {
          "id": "66c55f2a-4927-41bf-9dfa-6e8a77b0c055",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "af3a89d6-3e41-4d5d-b646-725dad355fae",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "f3d85961-73e3-408a-8899-c58501bc3ac7",
        "cursor": {
          "ref": "ad8eb67a-97f6-4cce-9b55-47113e21376b",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "a4ec2ab0-da79-4990-ac4f-3a5d3a32e194"
        },
        "item": {
          "id": "f3d85961-73e3-408a-8899-c58501bc3ac7",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "88fa1b7b-8c5c-4e75-8690-131d2d24a139",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "a256a408-2fae-4a94-bea7-f3069160083c",
        "cursor": {
          "ref": "c1fecd0e-df5a-4055-903f-814ca9ae6347",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "f6fd6050-8e49-4559-aa21-48a658ff83b9"
        },
        "item": {
          "id": "a256a408-2fae-4a94-bea7-f3069160083c",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d1efc165-2163-4144-aae1-8de39316c64d",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "7bd4d9c0-54bc-422e-ace2-e9f08c826dd2",
        "cursor": {
          "ref": "1b3ae064-eaf4-4247-820a-6b5a3d6ee6b3",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "eccd59e9-9da5-4f48-a9a4-eab9123ba7cc"
        },
        "item": {
          "id": "7bd4d9c0-54bc-422e-ace2-e9f08c826dd2",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "68cae83f-77f5-4222-a501-8681fe412488",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "1a03cb8a-3f2b-4d45-afa5-c5be7fe0eb50",
        "cursor": {
          "ref": "b0fc34f3-c183-4e0f-b5ab-9de2dd8dd438",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "d4a7e667-68e2-4bc4-a2d5-b590b0de2f03"
        },
        "item": {
          "id": "1a03cb8a-3f2b-4d45-afa5-c5be7fe0eb50",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "59d45372-686e-4911-ab24-81f87b9b3690",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "beaa37c3-d6d3-4e15-953e-5560a717c6d6",
        "cursor": {
          "ref": "714376e4-76bd-4785-85e8-69253b6dda34",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "502462bb-a9c3-4362-861c-22907a40e9c6"
        },
        "item": {
          "id": "beaa37c3-d6d3-4e15-953e-5560a717c6d6",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "ec4cb50a-1677-4f99-aca7-a22dbd25d102",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21da8f87-d95b-4bf3-80f8-5123fa89b724",
        "cursor": {
          "ref": "c59702df-8a31-496e-ac3b-718f78aea71d",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "80748a12-5172-4aec-8216-93b43678097a"
        },
        "item": {
          "id": "21da8f87-d95b-4bf3-80f8-5123fa89b724",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "276180e8-4e5c-49fe-9dd6-7868746f0fbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38ff3162-662b-4fe7-8733-6abf8e92d71b",
        "cursor": {
          "ref": "a50771b1-8969-466c-ad7f-169de9af4dbf",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "2c0d4bae-72a1-4433-a754-3b23a5213612"
        },
        "item": {
          "id": "38ff3162-662b-4fe7-8733-6abf8e92d71b",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "936c323c-5db7-4ba6-b4d0-2b6c80619968",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f919222-c394-4d2b-aeb4-b65f6d2df630",
        "cursor": {
          "ref": "a4870160-5cda-40b1-8e65-91a5eae922a1",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "d92fd700-2d53-4ca4-b351-db9958344de9"
        },
        "item": {
          "id": "0f919222-c394-4d2b-aeb4-b65f6d2df630",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "385d1f4f-264c-4758-8987-1dc23303fc79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39c090b1-19fc-41fe-ac0c-ec5f1f3fc55e",
        "cursor": {
          "ref": "79ce86d9-41d2-4356-b584-a12621339f8b",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "138d5098-3e59-4ca2-8639-e93c88dd532b"
        },
        "item": {
          "id": "39c090b1-19fc-41fe-ac0c-ec5f1f3fc55e",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "f0c770ac-8b6b-4d20-94b3-76dc26b82897",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "757d56ee-0bce-4435-b2f8-b23a516e8f6c",
        "cursor": {
          "ref": "01d57878-7e6d-4b6d-9226-0ea65091db80",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "92a8957d-71fb-42e6-8c2d-1a408c41e663"
        },
        "item": {
          "id": "757d56ee-0bce-4435-b2f8-b23a516e8f6c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "83eb3c7a-d464-4233-b8d6-a9674669e6ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c10a2c5f-91df-4bb8-9e5b-057434d01476",
        "cursor": {
          "ref": "79e308e9-3a1e-412b-b762-9bcb409ff0a8",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "5483a8f8-0f7d-4787-826f-a687dd43b7e2"
        },
        "item": {
          "id": "c10a2c5f-91df-4bb8-9e5b-057434d01476",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "f1b6fbb7-05b8-4bbc-9e40-7937627793fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cd8a0c2-cc59-4556-9383-5409e0d21855",
        "cursor": {
          "ref": "1a2d1c33-d769-400f-ab9f-75616ba63319",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "205ca8de-c63f-4174-9adb-cd4be7ea5710"
        },
        "item": {
          "id": "0cd8a0c2-cc59-4556-9383-5409e0d21855",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "2375ea5f-10d5-4446-9372-c4e7e016c040",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ec6fa18-7a1e-409a-b74b-69b984a21f8f",
        "cursor": {
          "ref": "27bcbde0-8fdf-4380-8b24-485a9749cc30",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "476626fd-19b9-40b7-a93c-c3f04c0615fd"
        },
        "item": {
          "id": "9ec6fa18-7a1e-409a-b74b-69b984a21f8f",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "d9aa4048-ce65-4ae8-8ac6-f53457aaf315",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33685373-5377-4118-9dc3-ec9273d4e81a",
        "cursor": {
          "ref": "ac3036fc-fe2e-4f00-943f-9d296fcd4965",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "acb5eda8-c30b-4b73-863a-f7119a0e6e8b"
        },
        "item": {
          "id": "33685373-5377-4118-9dc3-ec9273d4e81a",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "c209c1ac-e153-4a64-962c-d9394793742c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2a4ab74-f80b-4221-af25-dd364451d91f",
        "cursor": {
          "ref": "6a6c7f9f-54aa-48d5-81bb-49b97ad97ab6",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "a2dccae0-7376-419a-8af8-d3c3a45b40a7"
        },
        "item": {
          "id": "d2a4ab74-f80b-4221-af25-dd364451d91f",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "8f19472f-6ce1-4a59-a67b-3c1a2845b1dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95588cd0-18b8-487c-beaf-286af24bd73c",
        "cursor": {
          "ref": "8274d35d-b3c7-4cd7-ba35-14c01f8744ed",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "3ae23e85-8b13-4db1-971f-1839d95a3825"
        },
        "item": {
          "id": "95588cd0-18b8-487c-beaf-286af24bd73c",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "756b7649-4d7f-488e-a0ce-86f451a6d228",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7a574e7-d55a-442a-91d9-8f2d34c6641e",
        "cursor": {
          "ref": "68f701a8-51b7-4d8a-91eb-17f68894c059",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "2c0c58d2-e9fd-4156-85e5-4d0fcff64f57"
        },
        "item": {
          "id": "f7a574e7-d55a-442a-91d9-8f2d34c6641e",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "af53d1e3-a09e-4fc6-b521-6524dc0615d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9593dce0-9675-47c8-bce2-d8b57593aca4",
        "cursor": {
          "ref": "6914e5d2-58a8-4ebb-8bf0-23b9b8fed9c1",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "b3995ba4-600e-491e-8527-8226cd917aa6"
        },
        "item": {
          "id": "9593dce0-9675-47c8-bce2-d8b57593aca4",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "5dedbe3d-8b9b-4914-8982-21e20b54a7e2",
          "status": "OK",
          "code": 200,
          "responseTime": 198,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "ede0f31c-58b9-4467-a3c5-e530f19bc816",
        "cursor": {
          "ref": "20549548-cb16-4bbb-a880-0b863f5adf2c",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "c94e8d8e-b2e5-4524-acfd-c1e85b47b32f"
        },
        "item": {
          "id": "ede0f31c-58b9-4467-a3c5-e530f19bc816",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "66648d89-7b5a-4d60-8c95-e88dc9a693e2",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "bfaca111-913f-4d79-89bc-a51f100f142d",
        "cursor": {
          "ref": "00566b51-2669-4e3b-aa52-9a13409f5ef8",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "8fd279c6-487c-4d2f-b5a7-7ce07e4d7fd8"
        },
        "item": {
          "id": "bfaca111-913f-4d79-89bc-a51f100f142d",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "c5795c1f-50e6-4f26-a1d8-38f7e54d8d74",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "10685cd0-f3f8-4e26-a8ba-ef54b966bc2e",
        "cursor": {
          "ref": "bd408c29-dba4-4346-b139-81e626ab9aac",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "9c0b1c81-1557-456e-877f-f0ce28267027"
        },
        "item": {
          "id": "10685cd0-f3f8-4e26-a8ba-ef54b966bc2e",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "2d7398c8-6d7f-4ac8-9f15-f70f74db4a8f",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "154e8c5d-9f97-48fb-a333-14e6960cd2b6",
        "cursor": {
          "ref": "a1ce79df-ab2c-4cdf-8635-bf69926bf754",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "38499709-5242-4990-9a07-3d47e0972fec"
        },
        "item": {
          "id": "154e8c5d-9f97-48fb-a333-14e6960cd2b6",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "02c66127-c771-41da-b3f0-f085c49c4e7b",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "2d798078-c30a-4785-86bd-74e35abab7ca",
        "cursor": {
          "ref": "50798404-56f5-4e0e-8547-794ba65919b6",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "715e344d-2208-4edc-a618-740a3f69c512"
        },
        "item": {
          "id": "2d798078-c30a-4785-86bd-74e35abab7ca",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "6b92141a-089f-459f-9e55-3510ccf64439",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48616d3d-2ab5-494a-8109-84b0167812f9",
        "cursor": {
          "ref": "3bab680b-24a7-4e4b-a34d-22d3fcf11d53",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "9148c57e-df54-4dfe-b9e1-f49ec16e4cbf"
        },
        "item": {
          "id": "48616d3d-2ab5-494a-8109-84b0167812f9",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "605ace8b-e003-4515-9988-2955ee3c953c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4a452e3-230b-4e8b-a364-ea9294f7587f",
        "cursor": {
          "ref": "8943f164-a72c-41ec-8e01-5fa0e7746037",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "bed87351-1fbc-4ac4-b4a9-095b0706aa12"
        },
        "item": {
          "id": "e4a452e3-230b-4e8b-a364-ea9294f7587f",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "7a422ad8-15fa-4b22-99a8-0c183322ad26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8763eb2b-1677-4510-b1b8-e4b53ae89590",
        "cursor": {
          "ref": "0883c0ab-e22f-434b-a1dd-14cbad1de220",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "3bd1a274-8893-46fe-8660-693a9b37fda5"
        },
        "item": {
          "id": "8763eb2b-1677-4510-b1b8-e4b53ae89590",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "89d91c7f-d923-493c-883a-eb4ce827a5d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f78d595b-549c-4a24-8fb8-b33dc8c1a649",
        "cursor": {
          "ref": "54562304-2931-4427-8c04-b04a82eca765",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "56ef5976-35d2-4a05-8381-801d560ddf0c"
        },
        "item": {
          "id": "f78d595b-549c-4a24-8fb8-b33dc8c1a649",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "0dc2e7a5-f433-46b9-ab08-6f21ee5deb36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9914b172-0382-4438-9c7f-53d7e975ef55",
        "cursor": {
          "ref": "e5113f1d-1853-461e-a654-e21d4e450776",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "c1c119cb-5308-4e1b-852d-567a2b61d241"
        },
        "item": {
          "id": "9914b172-0382-4438-9c7f-53d7e975ef55",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "afab4b51-c7b5-4746-b97d-5ba96a4aca0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d745ad17-5bfa-467b-87d5-738799aa08a8",
        "cursor": {
          "ref": "fc058ab1-85cb-4edf-b62e-954cd170a833",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "f3f0d604-c120-45ff-a4f9-f36b35718517"
        },
        "item": {
          "id": "d745ad17-5bfa-467b-87d5-738799aa08a8",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "156814d4-8a9e-4c84-a419-a96467307819",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cbad961-0caf-4d78-a535-0fd863137171",
        "cursor": {
          "ref": "ae4fa630-f728-4926-989b-807dc2180e6f",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "ef89275e-5184-44d6-8236-1520447e21b9"
        },
        "item": {
          "id": "5cbad961-0caf-4d78-a535-0fd863137171",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "0c61eec2-f1b4-4573-bbdf-139a1c39be92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "131f6a78-b357-4c1a-a631-49c30d28b516",
        "cursor": {
          "ref": "178dbf34-d3d8-4664-9e25-c4063d41c20b",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "800817f1-0d97-4d77-be76-f353d6a74124"
        },
        "item": {
          "id": "131f6a78-b357-4c1a-a631-49c30d28b516",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "1c45103a-a4bb-46ec-8a6e-1d869accf7f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a78cd455-5506-47b0-941d-2e8a8b3a5d69",
        "cursor": {
          "ref": "47c8265c-1b4b-499d-b9e6-6fdd940414aa",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "c3e0e273-8322-44a9-be59-e087bcc451fc"
        },
        "item": {
          "id": "a78cd455-5506-47b0-941d-2e8a8b3a5d69",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "f80ad817-bb82-4629-b749-0c495eb2a14a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba5223a6-f797-4d5f-8f49-64efdf7543f2",
        "cursor": {
          "ref": "1c197b29-9d46-4dfb-8919-2f780f3fa34f",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "440dd0b6-b933-4108-aed4-f58628e018db"
        },
        "item": {
          "id": "ba5223a6-f797-4d5f-8f49-64efdf7543f2",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "72db9a29-fcf1-442a-a898-7641d3e2db3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1d11716-19eb-47b1-8300-7abbcd36fd8a",
        "cursor": {
          "ref": "11fc6d61-a536-4050-8972-ea467ba9b7fb",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "6819522a-0655-4d95-9896-c05e059e9220"
        },
        "item": {
          "id": "d1d11716-19eb-47b1-8300-7abbcd36fd8a",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "4ef9abaa-45a2-4804-83c5-7e74b4f3e2d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "612a3e07-5b35-4f8f-8680-6d4947b679e7",
        "cursor": {
          "ref": "85233744-5fa7-41e5-983e-cc2fb5942087",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "77af3304-ac4b-4ef4-ae96-c5d60a13419f"
        },
        "item": {
          "id": "612a3e07-5b35-4f8f-8680-6d4947b679e7",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "8451df62-766d-48b9-9e91-2691826340a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dd70896-2115-4221-87b8-3a1e7a413e96",
        "cursor": {
          "ref": "60283bd5-511e-4d82-a6e4-9a131571953e",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "109c9022-01e6-4c4f-843d-77622bd288ec"
        },
        "item": {
          "id": "0dd70896-2115-4221-87b8-3a1e7a413e96",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "7a45224a-1936-4eac-9c36-4a13f5ba5ede",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84e3fea0-cfb1-40d3-b0e2-782ec2941c87",
        "cursor": {
          "ref": "e7bd2538-f87c-45a1-8118-663e6a809e7e",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "c4e0557e-6a0f-4df4-8bad-76871d61bdbe"
        },
        "item": {
          "id": "84e3fea0-cfb1-40d3-b0e2-782ec2941c87",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "fa17f72d-e0ed-41a3-b40b-dedac667e15c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "370939db-7846-4a4d-af94-112bc4371809",
        "cursor": {
          "ref": "5f492fbe-d854-4c52-8dbc-29804b3b5cc0",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "11c78cd8-9f7f-43db-b86b-1a7926860478"
        },
        "item": {
          "id": "370939db-7846-4a4d-af94-112bc4371809",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "67c22d8d-586b-42eb-9232-cb8ccced6762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9190abb3-ec9d-430d-9729-c86d8af008ba",
        "cursor": {
          "ref": "d33c0230-e598-4fa4-8ceb-8cdad8a8c78e",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "444bd890-058c-4ecf-98ff-c1b459c97d78"
        },
        "item": {
          "id": "9190abb3-ec9d-430d-9729-c86d8af008ba",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "ab00f699-b372-4e33-929c-5492fd4b1709",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d6e664c-b4ed-4464-93d9-d9bf9eb132c7",
        "cursor": {
          "ref": "f51ec1dd-8b5d-4fd3-8a3e-c5efc4e6443e",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "6d62eab8-2b70-494f-8d01-7f7083022b8f"
        },
        "item": {
          "id": "5d6e664c-b4ed-4464-93d9-d9bf9eb132c7",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "d56dff1c-1f8c-464e-8263-a43640dfcd43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae18ee49-b073-47b5-b01c-ef2cd78bc832",
        "cursor": {
          "ref": "e6ef2073-b444-41ed-a5c9-0026d34692d3",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "7061922a-fbc4-4094-9e15-13056cbc22fa"
        },
        "item": {
          "id": "ae18ee49-b073-47b5-b01c-ef2cd78bc832",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "9e9be501-5346-4cd9-abff-e0ad0988ffec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06c83324-d045-4d07-83b5-53cd1c5bc098",
        "cursor": {
          "ref": "0f476195-3dea-42b6-9f07-d3161909494e",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "303aa80f-79d1-4dbf-9e58-43ae7b2c685a"
        },
        "item": {
          "id": "06c83324-d045-4d07-83b5-53cd1c5bc098",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "fddca4a5-3f10-4948-b4ba-f7dd511908d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5727c2e2-0625-42e3-8d39-68b1975fcf40",
        "cursor": {
          "ref": "6443c70f-c46d-41b0-ba00-0192224aadc9",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "604eb765-65f9-4a98-b71e-d0b7c073fb38"
        },
        "item": {
          "id": "5727c2e2-0625-42e3-8d39-68b1975fcf40",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "a2b84961-90c6-43f2-82ad-47846d50ac9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33b0efcb-7683-44eb-a073-fcd73771f647",
        "cursor": {
          "ref": "c2b57f45-034a-4829-8bff-edfb6ad1665e",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "283744b9-eff7-471b-a452-9a77e6d87ca9"
        },
        "item": {
          "id": "33b0efcb-7683-44eb-a073-fcd73771f647",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "42738836-4a2a-4275-960f-7839f04f5760",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "822fcbb8-cb6d-4584-b776-c6fdaba7727e",
        "cursor": {
          "ref": "dec2eac5-e256-4a6f-a6d6-751f47d4e408",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "d4ff4b89-6a73-4165-b440-7684717e36de"
        },
        "item": {
          "id": "822fcbb8-cb6d-4584-b776-c6fdaba7727e",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "d894f429-6ae0-44ad-bb9b-f8627b6ac8d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cf87753-c0ea-4e4e-bc52-ba7447695b13",
        "cursor": {
          "ref": "755fcda3-42e4-45e0-8d10-82fa42bc1364",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "52fad32a-541c-4ce4-b41f-a80add80564a"
        },
        "item": {
          "id": "4cf87753-c0ea-4e4e-bc52-ba7447695b13",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "72485d56-99e5-4464-9cbe-4a91a25d172d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0908ae85-2e18-4140-8966-4ab1985697c1",
        "cursor": {
          "ref": "7481d425-7e97-4551-9553-cea7a9f7bf4b",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "7fa7f506-5582-4062-aea8-03df189b18dc"
        },
        "item": {
          "id": "0908ae85-2e18-4140-8966-4ab1985697c1",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "5c3d0e32-494c-419c-a805-5acd3930fd4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fd572d7-70ec-45c1-82f4-07b91bc6c560",
        "cursor": {
          "ref": "980ebaf6-013b-4a2d-89e6-bfee1ecd58c1",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "f2cea0dc-d4ca-4781-bd54-13827b6b1497"
        },
        "item": {
          "id": "1fd572d7-70ec-45c1-82f4-07b91bc6c560",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "f00f1c82-3a9d-4fea-84d4-608610d0cd60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3485b2d-e855-4cae-b249-b7e9b2ea7623",
        "cursor": {
          "ref": "2aad26ef-a583-4e53-be15-9476316a84f7",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "f14bf9e1-c878-4e95-bedc-98213746d934"
        },
        "item": {
          "id": "c3485b2d-e855-4cae-b249-b7e9b2ea7623",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "52a018de-b0b8-461a-875c-3b28919374a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51560187-ea5a-4a53-a2df-19fd94765ded",
        "cursor": {
          "ref": "88879d4f-7cae-4800-9339-38cc24c0d406",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "1b4e7f1b-693a-4e26-a9cc-821db353fb8d"
        },
        "item": {
          "id": "51560187-ea5a-4a53-a2df-19fd94765ded",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "613f9c43-4e98-4c7f-a9e9-c0edbe712698",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e698f8a-9817-4594-a904-6c70c8fc92db",
        "cursor": {
          "ref": "0e609c03-6480-4cb6-9e69-405a3eb52a99",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "de06cd7a-ece2-498d-b738-62ad438a07be"
        },
        "item": {
          "id": "0e698f8a-9817-4594-a904-6c70c8fc92db",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "a2d28908-a365-4d7a-88c4-5f4ac53c78d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8f3448c-ca52-403e-9967-f6192dff7e0f",
        "cursor": {
          "ref": "4c1bf6f5-c6f6-495b-95cc-a828b5dc37a8",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "2477d54a-32b8-4a59-8e08-7a135c1a14b8"
        },
        "item": {
          "id": "a8f3448c-ca52-403e-9967-f6192dff7e0f",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "4be06a2e-688d-43fa-a360-45cade72baae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b057e57-dd4f-47b8-b3c9-5da81094a96c",
        "cursor": {
          "ref": "445a073a-d9d2-4df2-8397-0d74c9ca4dc7",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "823ec660-7252-4da4-922c-5dbf9f33bc3e"
        },
        "item": {
          "id": "0b057e57-dd4f-47b8-b3c9-5da81094a96c",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "ddcaef72-84fb-45ce-8748-602a2dcfb4cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8200220b-d436-48ee-ab71-656022f49a78",
        "cursor": {
          "ref": "afda8bfd-596b-4dc2-b99f-7bb50cb68d95",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "b6a5a053-73ab-4d53-b808-d2dfba4acf3f"
        },
        "item": {
          "id": "8200220b-d436-48ee-ab71-656022f49a78",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "04eae65a-f250-4b8a-a129-ed75133bb43d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "220ef794-d38a-4a83-b603-14dd7ccabd21",
        "cursor": {
          "ref": "b30eb181-6eee-417d-90f6-957bdddf2291",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "d488339d-51d3-4830-9c6c-6365466074ed"
        },
        "item": {
          "id": "220ef794-d38a-4a83-b603-14dd7ccabd21",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "53858643-8e9f-4a88-b2f7-6632169ac404",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e018383e-39b3-4d29-a217-9736e7915997",
        "cursor": {
          "ref": "a980034f-75be-498a-b66c-78a12a9fcfe9",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "40f2d9ed-aa21-4d6c-a922-f5b5761bbe6b"
        },
        "item": {
          "id": "e018383e-39b3-4d29-a217-9736e7915997",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "b5a54bc4-0a73-455a-bff5-7f03f8ebf4fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5717bf10-6ee3-4488-8ce3-b8f562a7284d",
        "cursor": {
          "ref": "5d2dd692-4a9e-426a-88e0-35bcee9610b1",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "cd6a21ce-09e9-4c71-89bc-75fd9d905a38"
        },
        "item": {
          "id": "5717bf10-6ee3-4488-8ce3-b8f562a7284d",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "66ff6533-7576-489e-a655-ab87eee8d016",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e5932c2-8f09-43cb-ab62-5e320420ac98",
        "cursor": {
          "ref": "0921aa6d-93e0-440e-adcc-e542494b46ea",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "bb534c9b-0034-4918-8ff4-8840e3ea0ed6"
        },
        "item": {
          "id": "2e5932c2-8f09-43cb-ab62-5e320420ac98",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "ebd0b130-45d6-49b9-add9-e66e5c94c98f",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "3a347ebc-ac5a-4798-9243-11735d0e3b16",
        "cursor": {
          "ref": "c6b3bc08-59ca-46d0-b338-26b7b956e652",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "516c137f-6461-4476-ac6a-05d833a90396"
        },
        "item": {
          "id": "3a347ebc-ac5a-4798-9243-11735d0e3b16",
          "name": "credentials_verify"
        },
        "response": {
          "id": "d3dfae67-44b0-4798-90f8-39e12fc4046e",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "25ffd8c5-6c9b-461f-9c7f-f83420e930d6",
        "cursor": {
          "ref": "b01793d9-47d1-44c7-8e24-0646ded253a8",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "c467aed5-f106-4ce6-8177-ce6da7b23cc9"
        },
        "item": {
          "id": "25ffd8c5-6c9b-461f-9c7f-f83420e930d6",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "ed57f0fa-2671-4998-955e-5f79f50e4b4a",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4362dfe-6b54-4ce2-a23b-3d5f4e06025e",
        "cursor": {
          "ref": "dfc54033-e3e6-46ce-8e91-ba5282945dfd",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "5ba242d2-5d03-4bc3-a9c8-9eb0a0d3b00e"
        },
        "item": {
          "id": "d4362dfe-6b54-4ce2-a23b-3d5f4e06025e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "823d0b3f-cb70-4e02-8f70-9a4007051d1b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4362dfe-6b54-4ce2-a23b-3d5f4e06025e",
        "cursor": {
          "ref": "dfc54033-e3e6-46ce-8e91-ba5282945dfd",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "5ba242d2-5d03-4bc3-a9c8-9eb0a0d3b00e"
        },
        "item": {
          "id": "d4362dfe-6b54-4ce2-a23b-3d5f4e06025e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "823d0b3f-cb70-4e02-8f70-9a4007051d1b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40912224-855f-49cd-b114-5b231b1a1b51",
        "cursor": {
          "ref": "dfb6994a-7a29-45c6-a670-d703dca2ddcc",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "ca52c3b9-0e77-412a-b1bd-175ae188df87"
        },
        "item": {
          "id": "40912224-855f-49cd-b114-5b231b1a1b51",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "582ab925-1b01-403a-a1a5-13f736520873",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c47944c2-fd81-4c12-aa4d-4f84fe3c8f0a",
        "cursor": {
          "ref": "25c8af55-9501-4a20-9639-50a1b369c684",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "9d2668ef-5f10-4676-9f3b-355134f9bbd9"
        },
        "item": {
          "id": "c47944c2-fd81-4c12-aa4d-4f84fe3c8f0a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "7b0ca922-f9cb-4c83-83d9-cc9a4d85b7cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}