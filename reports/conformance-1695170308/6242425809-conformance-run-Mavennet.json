{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "959aa0b4-dd85-4dd8-a2a4-66fac43ea58b",
        "name": "Clear Cache",
        "item": [
          {
            "id": "9f5cc737-941c-4c05-b72a-96f8e439ee91",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3a512826-a39a-4814-9f2f-1b9eb76a247d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ce4382ba-4120-4a61-83b9-26093586f16b"
                }
              }
            ]
          },
          {
            "id": "328bcfa5-671e-4ff6-b5a4-7b6f7a6478ce",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9cc3820b-53aa-48dd-ba53-7618447d5d34",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "27cf70d1-776a-4d07-beb3-bb518ae13411"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "fc847597-5089-4ea3-8287-60e38256a45b",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "ad1a0ccb-db6f-446c-a98c-e9a497f0a01c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6646b467-6cf5-487b-ac4f-aa97080815e2",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4a21619d-44a9-4d00-b1fa-cdf04c037ec1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b9d84e01-8c56-4c2b-bdbe-1bf78bccd17a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "99814285-575a-4394-9eca-eecadca346e8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e80c493f-91c4-4daf-b21f-0e41bf1d84c4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1b52f919-af3a-435e-8a1b-95499b0d61a4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0fe0a1ef-167e-4df0-945d-e9b538e3a37d"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cf4bfb8a-a0d3-46e6-997a-9b187e387b19",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "3a761d09-3a07-4426-adf0-f426c58d9005"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b4e0cf24-7cff-4cd2-809d-e9a1f94f144c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f58117df-3aef-408c-bf3d-56eacebf3909"
            }
          }
        ]
      },
      {
        "id": "0cbd391b-1262-4f86-b51b-563acd29169f",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "1d685c57-a119-450e-a14a-aacf9e95a28f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ff7479c2-961b-4cff-8d97-b76cbf230ba0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "42dc50be-b410-444e-978a-595856cbd631",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a42466a-5d2c-44d4-a626-29d7afdc033d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6fef7ec7-10a3-4d85-8d3f-2c33b3b9f1fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3ea47c3-027b-4cee-a059-d63fc55a373b",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f39b692d-6bee-495d-b68d-eb2d18281164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e79f2418-3081-405a-98fb-d04126b5d77b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cb9f923-94ae-46dd-a155-7771290f61cd",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aa0ff30-27c6-483a-b8bf-5876655a25d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "82fbfdad-340d-4029-9e39-b523af5fc96f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2a36b989-f588-4c25-85ef-00235c6c9cb7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c9c760ce-8edf-4ed9-a318-19b5cdd04a4b",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b68e5412-338e-4f14-b7ae-1f5cd2427447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "19c77032-9053-4e26-9780-a3d8cdabb44d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33e53850-9464-458f-98ae-616e28d4782b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c087eb3-a699-4181-8597-195db441d434"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0ccae155-32e0-4577-a436-f478d7e1821a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e1b78827-79f7-4573-874c-c04824f711ab",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "15300362-a09e-439a-a909-6ca86bc06171",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "ef9f2bdf-6cae-4b9f-b900-2c910ed33db6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ea68f0c8-7fda-44f3-8ac4-467e055ffa05",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "839ad92d-dee0-47dd-8c27-a2646ec1fd66"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0cfad67c-fa3a-449d-b908-5ab7b0c65eff",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4afc7d90-25ab-4f20-a0b9-c7f4ffa678de"
            }
          }
        ]
      },
      {
        "id": "f9cf3b8b-0e5c-4955-ab4c-467bcc192527",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "df2e55a3-8a98-41e4-82c3-06c2a4da70a6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cb0cb2b3-e01b-4ed5-bf84-a51d2fddd423",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "96184ccb-6053-4678-8482-49cb0aa77b68",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "070ca8a3-6ea6-49da-b324-86d2d7223f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05e7d0b7-7f6a-4fc0-b842-2802804b552e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f612406e-33a8-4b87-a4fe-b320caa54b15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7f0688d1-8cd2-49d1-9113-d47095f93812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03c7a10c-4f8d-4153-b825-afc6d62b8a59",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ad3e366-f7c5-44b2-abec-5cf143eb8aee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef10711d-71d9-4b3a-a253-01dadba78733"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acb207e1-bbc5-48ca-8843-e39f7b097e2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "72b4ee11-1350-4281-ae05-05a36a8fc83b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea52a623-10cb-4917-881b-e883521e143a",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "972cf9c8-4ea3-441b-9c31-0aa67502d778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c49e06a3-b336-4b78-9fa5-f4f70b0efc58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21e343d7-0714-40dd-b698-38b0fa817056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b5a12ac7-2ede-4c69-a41d-4a34660e4ce5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50d7230c-3bd7-40fa-96ef-17d1073a6a5c",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72cd22a8-8783-49d4-be51-99aebe598abd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86015d56-3622-498a-ade8-6ccf52751b69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17f129de-f534-48e3-a369-4fb1600939c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e2c2eab9-e921-4ee8-b8f2-b0fd124dfe1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb0cd093-dfe3-46a5-b601-6150a4e5bf58",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "350913a1-38d8-4617-8858-2538115ab04e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daabdc4b-0303-4b02-9c64-3cf4170a1de2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d3576b9-748c-46ce-944e-990b1a457e31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d051d23b-3b88-4e34-bca3-7f278151b23d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fb892ca-a359-480b-9b50-b9a17737cb01",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e20c4e5-563f-42c7-b2e5-c48eb6028a8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b7a51e0-e0eb-4045-8594-3bd8fcfea6a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb888ff9-ac11-40fe-a690-5481a36849ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "185f9fc7-4e9f-48ee-9422-28999a00adfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd7008aa-8779-4d45-9552-3547ed8634b6",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e05e9c8f-1b9d-4a42-a476-eec5c34ccc1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "996fde66-953f-4c87-986f-43d2e774ddd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f054ad5-6861-4114-9f71-3700905a19cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ae011a7-9c42-4b55-a787-a68e185ddfef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b44bdfd6-1081-40ce-ba73-cabd162fe420",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35a056bb-a185-408f-b425-e02019882deb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc46c5d6-7125-419d-89f4-922ae83e4666"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfbccd4a-36a7-4f64-9202-b6c3426f9462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e75d0ac0-128a-44a2-973b-ed2cb158202c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5e0c2dd-bec8-4236-b4e6-9e4cd0d19e17",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "864e97d7-aabe-4446-a955-a4b895bce2aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5e3d13d-782b-4f0e-84a7-721a378671d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b4dab84-2ddf-4432-b97d-0a14a9282939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f1a25efe-36df-4cf0-a323-f5639a7a1cf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "063a7bc3-8b5c-4dc3-a34e-6bd57b0800d7",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a71d544-a77a-4e54-be7b-06299fbd7cc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe5ef271-ab13-4993-bbd2-dba038b1693a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1643d137-ed5b-4224-9848-f83fa2ae5981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b16fade1-14b9-46fb-a6c9-2174a3815e28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cec23adb-bd3a-40b9-8079-57cdba0f71f1",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de3fd3c3-c970-492b-8206-30b8c2468c36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc1abb01-10f5-4543-98bc-f97bd94d40c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddb6c929-14ab-461a-ba91-9aa78b2588ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "665df844-ba17-469a-bcf2-0ad5fe786bac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b79cdc37-1815-4d8a-8a60-edf2d94c325d",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0062f881-734e-4671-9202-5722ad895b7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62dc7957-4be5-422c-8993-c2a4994a3efc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9932bb8a-f1d8-443b-b183-978ad6817651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3b18f250-0551-4228-9d31-7d0a4933cd32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1456297f-5cf2-43b0-ac7d-d6b8f63c8205",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f348b6bf-a3a1-4605-a06e-9b76581f7ced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e5a8034-21de-429f-b322-824ba882d222"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9e044d1-31f0-4633-b159-9135420210ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a187df31-0dcc-4f3f-9bc3-225facd83076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29116295-6012-4d20-bed0-74f2b9413c96",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1efbb13-298f-4729-bdaa-12b3be904648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26b6e52e-44a6-49d5-aa61-a29a14b869f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "033bfc09-3f53-491f-94e4-bc7a7c0df30c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fdd0c8ce-c608-43ca-afd2-cdb7af09bb8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fed61e1-cfb2-4630-a263-ed183c2ab73a",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98e6822e-f047-41a5-84c0-0809b5c325f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "522dc639-7019-41c6-b792-dccd4b70bd17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9717df6-94c6-4991-930c-78bf67491ab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "135f6cfc-e98b-45e3-92a4-eb332934992d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "765ca3b2-5d29-47cb-a601-36383efcd49e",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e62f31b-b0d0-4136-8a77-364607132c33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27d90a36-b9b9-41c9-b5d4-f85e95557853"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "422a76e0-03d8-44c1-a31c-41d9b3aa8a35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ec0d4aab-e92c-4127-b1f9-0c54a655f818"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24494eef-8957-4b4d-88f1-845410813279",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97445ce9-c212-45f3-a57f-03429180248f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8b1d0c9-eff2-4ff8-b4b0-3c9533c8601f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adee43bb-22cc-4101-969e-c2b87f70474e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1a0b0243-0d2f-4eb6-93eb-b05b3d6ba8e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e287b02-3bbf-49de-a9c3-ce78ea8abcf5",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e17f5cbc-7c2f-462e-8699-34bb747bb26e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20bfa866-81b4-4bdb-8055-fb46346f71e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c44babb-5dde-40d3-8a8a-f6e42ec8f5ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "6524c2b6-95fb-4d68-a7b1-1ad241a060d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6128d9a7-78d5-40c8-ace8-3ebec1817abd",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce32dae5-439a-467d-8e8b-be5c53934dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f1e9ed7-f374-48b2-8a45-9f2c102d127a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76f0f6d6-9719-4160-a7f6-aef94a4f59ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "366986da-88bd-4eb0-b5b1-25259e8f0230"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d385d5ed-4549-407b-bab1-168d89cd3c2d",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf7658c-247a-4169-b1c9-dfb3ebbbbcab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6991bf8f-9794-4598-a6b1-4d28d2e696a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75c553ad-0106-4f27-ab15-afbdad9ef895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "be00e217-06f6-4252-9523-57695ffc9ecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96a097c8-684d-4fe9-90b9-bf31b2ffe8ca",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00ad6e60-ade5-42cb-bfbd-2ba7c46ca96a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d012c52-c8ec-428f-8518-cf1038b569fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c0b9691-591e-4114-906b-9c61b608767f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "69dfa19d-8308-4d09-8263-a81ffe53a280"
                        }
                      }
                    ]
                  },
                  {
                    "id": "955ade5a-1204-419e-97fc-c8c0527aff14",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa0c23e1-27e4-4e11-8795-8a10507c6229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e35f955-34fc-4f4f-bcdd-4ec2c7811ec7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a895526e-5dfb-4173-b8ba-e8695b5a0266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f98ee39a-0f17-4b9a-9efe-bc80e84baaf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fcdc37e-25c7-4889-b7a6-bd75e54238c6",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfc54948-26b4-493c-b8c6-0a6495bcb866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae0c6816-4814-430e-adcd-8f095b32937a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cd2472e-3ddd-4694-bf33-b238a4f45155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "718fd924-2a95-4b0d-8e52-e121e712d7f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f78c839-13b6-4743-969c-270deb94b95b",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9d6b924-728d-41bd-a3aa-153e82bb76f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0a0e849-6027-4b62-9eed-8c0373323fbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b3d2df0-d78e-4b78-a743-69929e41ac46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "af9733ea-1ab5-498d-b0f8-13ef052d0391"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b86f06cf-79f6-4d09-8506-cdcc9d47bb32",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de0bd631-f941-4c29-a91b-8164654d8007",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "367402ff-f3da-4566-b341-ccfe5a68386f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07aa3d46-80c8-4f8e-92cf-80475455b4e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5a838b9-892e-40c6-8bc7-224bcf586015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cace8f97-9c92-4bd5-9b23-4518ed3d8eaf",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "197cd09d-bed2-4e83-a1be-b3ee0a00ff0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1199cba2-1c69-4d6f-ac5f-e85a647d3a42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b00f4057-e529-4912-9cfd-f994abd80090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbb59a4c-2c54-416f-97b9-155798d32584"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64faaa63-1f99-4ba1-a533-6412dd27a2cc",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62bff29c-df5c-4e00-b30e-bac692be6cc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9104483-cb1d-4ced-a52e-f787b985b83c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dcb2b41-615b-4d62-add8-7769a019d60b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5539c1c-80a8-47cf-bf6f-dc7a7f28a19c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88345ef2-07f7-46b1-8606-af21db50c09c",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c14c1dad-19a1-4121-8aff-b160143b1de8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49794cd4-8ffa-4869-ae79-eacb339733c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64915a70-2ec4-46ee-a6e4-13e2c06f4b14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "941e214f-2a1e-4899-bd82-d732c80fabcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26f842a6-e3b2-4dc7-8d6e-31bfd45eb1c8",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a8ecaad-f22e-4e0b-941e-e6fd6ac7585a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0670cdc0-e39b-499a-8270-23a7e69648af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04752086-750b-4db4-8c5d-f836ef06e63b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebfae4a0-fc3c-4827-a1b9-3e2b3c9b7ac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16758dc5-5354-44e7-9420-bca047ced4d8",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d72f6a23-87de-42c4-a7ea-d53a3f2f1081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "447f46c7-8f97-4a10-8ea4-3b213b179dea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11a923bf-d6ca-483c-8061-3fc798c38d6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f5680aa-82ca-49ec-9a95-2909e6e9b265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d329b37-596f-4486-baa9-0a2e00730e4d",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec7eb038-e85e-4a02-8808-651abf8f1a04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "033c62fa-61b6-4cbc-b51a-8cfc8ddca9a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "401ad422-0162-4d99-a835-01291a59fffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9235f9fe-110d-48b2-b360-812af2bc9209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bbda56e-4c86-40ff-8d0a-e540b99b55e3",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6151385-4ffe-44d5-8f1a-510e474cb6ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b2cea78-281b-4a78-ae50-009113f26b47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5809aab-23ec-46ee-b74c-3abd2db3c755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e81a1b8f-f9f1-467a-ba0b-e50cc31a8d96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4f4449f-3404-4e62-b3d8-ff7212c176ac",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91920c0e-cc56-46e2-8cf9-b70aeaf2f324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "473bcf7f-aef0-419a-bfc6-60a88a9475a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b84d6870-20cb-4844-a246-0dd68448b7e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c44d85d-648c-474c-b031-f657a17ef089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cecd986-913c-450d-b199-720c77c372d6",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0914ec0b-071a-49fa-a0aa-a5e6c33dfa68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "478069f8-213d-4da3-b600-d7fcbce7d0de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "404b343a-9e5d-4a1f-b455-735b24bd07bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6fe1012-ce1a-4416-90d4-707fbccc7313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f318982b-de61-49cc-8e2e-480ccfbcd2fd",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9ae1693-b62c-45f1-bb62-37851dcbe832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54ec8ba2-5757-49df-a700-a73f3cc9b827"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1b91283-6b1c-4a10-bec4-c994c69acc9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "2d772fd9-0477-4341-b69e-aa21f5b82dea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d2b383c-d873-4d24-94c4-7da2c59f7f41",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b91c8387-8378-4187-b5e7-2df5b31b1fdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "49d6bb34-5e1b-4abb-b8b6-f5ad77456a01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b9c9640-fc56-4d13-a2d2-13aaa3732009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "902a9053-e002-4c87-b094-f35c25317232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca5ff719-c444-44ba-bfa8-4eedaabf8821",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26b7cd2b-488d-469d-951c-7f6336fb8066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcb800dd-9a1a-4bf8-9bed-bbfa3ce922d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1cf2536-66e0-4148-8929-470bf709e0a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e124cae1-8a1f-4b65-9312-946b5295eaf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6092d09b-1c1b-4699-8dbb-d34203c2f044",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "918b5d15-b137-4fb4-ac94-b4c3066d7af9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e224cb6f-e44a-40ff-ac68-565edb3bcabd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0767f89-a374-4c24-886e-3a141f7162cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae153334-dc1c-4092-8020-20d9f1d3688a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53149384-bd70-4f3f-8352-b510475b14f6",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76b09eca-860a-4318-8a70-65a4898400f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24195ae8-cd93-4707-a3d4-d76c4eccc302"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7776d273-3ed4-41df-bc8d-f53527b8b978",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6fa1686-3063-4818-8a60-1a7af57d1e57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b87b9f8-8fbc-4d0f-9ed8-d175f90623fe",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b17f314d-da03-425f-98ac-44adb4579213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4de30e17-87db-45f7-9536-f9fd933f5bb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5abb78d-a716-4e15-9ef9-32693db3c792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "740fbd20-83ea-4c1f-bd29-705200bc3710"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b2f2257-e7c5-4c09-aa58-55abd5fc9b30",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e609f643-43a6-46b7-859e-09eeadf2872b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7b3a5fa-6da2-4d34-8651-622717a3b80e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "564a2f03-bec6-4132-b7e3-82aaa552aa7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e458b39-7abc-422f-b99a-b81b5b253e56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "896aeebe-b5ef-4032-8498-344d9af6e4c2",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7df4e30-857f-4661-b7f5-d807e3be5e0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7f8a085-1f42-4044-ba49-57cd87bb45f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d402676-3d8d-493c-93ca-aaef24716170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "623cd93d-f3e7-4fec-b750-5f458489b89a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d08c4bd-0729-45ab-9dfa-784cdda1a1ba",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51f6f2a8-ae8a-49db-ad0c-4644acf534d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb4a828d-a223-47fd-a2c5-400257f0a621"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c23be13-a9c1-42e5-91f4-b34210196838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9f290662-8f4d-4d27-aa39-e45acb51f676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b09d6fcf-3125-4c07-9b61-24488ad55a55",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c18d41b-2b02-4d33-a856-7216a0a8c411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5cfce61-3db4-4a74-bb45-9307d8498ed0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be4e122b-2baa-450f-bb9e-3ec389295fa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "9369500e-ffcf-4dd0-b591-6dc851979f65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9d55dc9-0c7e-4c91-9df8-0218a8828cb6",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28924121-cb28-4a34-ba20-414f4d91fd27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca4bc584-6f3a-48d7-8ea4-65e78e6a8cd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c5ef44e-fbfb-4d5e-b90b-211bd06359c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9266163e-fbe5-4adc-9d2f-fb54772a1ce0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6dc5d3c-7459-4000-96d7-363afb0ac757",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68ab8dd9-b8cb-464c-987d-b713eff401f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30feedf8-c895-4283-a241-2f1d1de9e799"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff0b7084-0a80-4c74-a447-05637ac3f91d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "416e1415-a183-456d-a9b4-69f0746bf00f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff87b45a-e14f-49d2-b3f6-7dbd44f6abad",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23131b8c-9350-40c4-b4e2-d104c97c1ae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "852539ef-9889-47b4-adfd-41f33aa7b2ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b8fdc7e-6e7a-4d30-b1b6-0d3f71150dc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ae7fc88-0ff9-4d75-99f5-10124694886d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9a12519-65d2-42d3-8fe3-5d090c7805ac",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9902f885-2ec6-46e2-932d-b521dfad06eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3efc521f-c27c-412c-a2cd-bcd30ace6c29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf42428e-d642-4fc8-8b32-d33004960ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "50c99f6d-c3e5-4e2d-bdbb-abfe84af3009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc3b4c51-e8d9-4a35-bdc6-412bfb559115",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "965d5c2c-e3b8-4a79-be3a-32ecd3dedfab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1aa09ff5-6606-457f-8fda-cdabd9683671"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2fc6324-710c-44e1-a361-dd510f961e05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e33e2f47-abd2-4d44-bbd5-fdca9af8bead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2cac559-148c-4cb1-9b2a-5c265ff965c5",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70b623f1-38a3-4f83-8b9a-d2f724b91226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aed2d21-65b7-40f5-8f1d-51e1bf51aa1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79172806-2b01-448b-bb3c-5a8328d51014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "89b7acab-7770-45ec-a313-5e60dafa4ab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27adac24-e666-458c-884b-0f417c4fa438",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a434b25-95dd-421c-9592-2b2da59ead4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2011ab61-3640-4354-aa7b-c26fdd148c62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6f20369-a3aa-468b-adbd-5409acd1dfe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "c12879cb-29c3-4500-820e-f996546e8b4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04b3a2e4-fc69-4360-a9fe-8a02e861ce52",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "691dd713-05c8-4601-96be-ca9ca2cbe808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b037ab35-d50a-48f4-81c2-9708479dbd53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db10dfc0-2f6c-4fc2-bfce-af97c8a163ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4fbdfe4a-c34c-4bc5-bdcf-d41fbf5c9846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41cc5650-29f8-4f2a-8f0c-59934314cd57",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5c7fa4b-8c08-40d1-a097-f8f416b28a6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3673788e-1358-4716-ad88-d29896fed0ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4a52bd8-23c1-454d-acd6-830085a81422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa4879af-8db8-4572-a70b-1cbe501027e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "833283ca-2adc-4f75-b06d-3298260ec2c0",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5195b525-e49d-450e-943f-9919271aab73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c862ffef-df63-483b-b3ba-983189babeb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cafce266-28db-4a6e-a96d-088f3bb9c1bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f94deb4-98c8-4e49-b3b3-b887b4376de1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b39e1c09-cfe1-46db-937b-209b76a6006a",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40ae8d59-ff9d-4ea2-9d23-a62626fcbce1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e731e3e-58ea-42de-a3d6-a6f71ce83db7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50744449-f159-4c03-9389-518cf6846eaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "615a50b2-b6cb-4770-87ef-f9f3978fd8b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51485477-5e6b-4308-ac0d-07ad2e546084",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bf9164e-8ecb-4cd3-bad9-7a2e09fec5ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d75b4050-adc1-4d4b-9bb5-b3e28ee79bc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1d97378-f0fa-4991-ae8a-5bf60c028fa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "c1730031-934c-414c-8ac0-de5536b17e0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75cd3f4b-ff65-4a30-aef6-d9a6b43d8ac5",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a0669df-6879-4395-bdb1-b3fd3c08a832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "034b44fe-c122-4beb-b6cc-a56b17205987"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d835cc05-61b7-4687-8628-0f08a8c64b71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e09c90a8-5aff-471a-9155-73ae2e3e0d4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9af32cd-9dea-4b96-b011-ebafbbae297d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e1f0ec8-d49f-4860-bdb4-02d789ce6d1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c33264aa-27c9-4c27-963a-7340f0a8a5f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5294f04-210f-4bcc-9d66-6f0fd60ca559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "72a1cee9-2615-4d61-8ce7-5c29e4dd85d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d1dfeae-be76-4227-9bf7-2c3290ce4101",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d371d060-70a7-4445-880a-0911da4db855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb2af40e-043f-4366-a9f0-1160a5b284f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd635070-47bd-4f06-9820-35402275e7c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8093f8bd-12ca-4033-b056-0636317707dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8390e30c-89f4-4c9c-8955-3fb2ce57ff09",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c309cce3-c96d-4b8d-ae2b-3f5eba1fb4be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "557813e2-49f7-4d03-8615-be836e5e70a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8785e07-bed9-46b5-ad74-3d37dddc2f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0df48019-decf-4fd8-9d40-b12ccc394e40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b70d37e5-92ea-4d6f-bd44-476948b54e0d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c532664-f234-497b-af1a-a1ab58fa7db0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ccfe028-6353-4826-b333-51c3991ddc42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef505117-cb67-47ac-9871-b4bed33e32ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c6871c62-942f-45c3-91b7-047e866d38f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42c3fa1c-a103-464b-892b-2ff47b70363d",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e841e577-4d90-4c9d-99b6-1ae768e5d69f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4491428-41a9-446d-846d-2c876aecb5d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9afc8ea-6466-427c-b47b-104c57a58839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "74550b00-fc18-4fba-b0fb-ebf730283085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a37cf5c7-287e-4156-91fd-2352db325fca",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99a7dedc-7581-46df-bb21-0c191d76a953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9510242-d90d-47ee-ac20-a6e6be483068"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65c17aec-0db9-4e89-be1b-bee494e790f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "54e2a425-01aa-4cf9-a351-e7e3f41822bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a845a70-8244-4c86-ae53-2c472e9eec64",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e01ed1ae-d51f-439b-bb89-670f206b29a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b253c58e-3034-4099-a8ec-900640d56d27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d994220f-ffc4-4dc0-b3f0-1c8f35c22468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4baeed77-37c7-4c80-8362-8e4a45a6b887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3bf691d-a6a0-4bda-a97a-0f059816c342",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93fff1e9-aa13-4a3b-b17b-7597b2292fae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa22eb53-5505-443d-8013-8ad476856b54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e40e4e98-7b11-42df-ba4d-c22a43818b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "92e97359-82ba-453f-a24f-09fcc8e1f6f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b62e90c6-2941-4166-beac-5a85450bdfb5",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e70c62-248b-423a-b8ab-48d324044175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5eebf91-d45f-48c9-85de-e21b06ac81e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f75556b-23de-4e85-87dc-5de13023b20e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf3dadba-2f6e-4c60-8ad4-0cbc6ff9f0c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53ff0c03-36f1-4946-8593-867d8fecff08",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4d68e24-20c5-4859-89a0-6cbc254afaad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cfa484e-ccb4-4115-b761-cb55f810ebb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3cb808c-0d8e-4dbc-bca2-65340335c9c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f8b58db4-9da2-409e-a706-8989694d2179"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9efe0364-6e14-42cf-b2f3-7a9aeeca7ed2",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ed3e951-4f2f-40d1-9506-1c5b45be4654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "847aa788-fb0d-4dff-b4db-333941b9fa92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e777970e-8a4e-47ac-a764-2d56a308138e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1e6ec42-a046-4287-8bee-ed5fb075ae37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6da859dd-e3ad-4ce4-9b18-ed6ad48d268f",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef1244e6-c8ca-4102-bbe5-a5ed36c1477d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af7f14b0-51e1-4925-9deb-49ce6031e403"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b5144e2-a013-4036-8f0b-bb8135530e65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2fe86951-1a5b-4df7-8dc6-e6f40889cb84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8a91e95-6dea-4329-9258-f413d74fe1cd",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01a974bf-8757-4abe-a8ba-0c1e908c649d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a477f222-a2d4-46fa-a423-592fbf64cb4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e87eebdb-c64a-4072-9c38-222fd982b033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3eb8657-279a-41c2-b12d-24ea7d880852"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56f0a645-6540-44e4-a590-865e86d061f7",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c2fbc86-deaf-4564-b892-44ded2ed2319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2a70166-0b10-4c96-a24c-006c2e8742aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b74a984e-624e-4425-ae0a-008c53d485f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d8498f9-7021-40ba-8b25-97405b34a2fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abb73df0-e88d-49f8-a936-95e133862f37",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9f3b4f8-6166-4b35-aa52-f67ddb22ab3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6113e1c6-a1ea-4838-8c78-ac7d4e25ce68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb18f59c-e6cd-487b-b585-33651c5540aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "323a4a05-9c53-4e8c-aecd-f63b443251ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9066482b-c3cb-4950-82d8-6ec2f8ce285e",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3920c5b3-0f81-4ae6-b68c-7f091c7ffb6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28b4b4c3-f09f-44ff-a006-2115025430f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d213267-006b-4576-b4da-04fce04c2ac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6099a08-e7ed-4de5-9be0-8a6436750a74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19541b4c-5675-4ca0-9449-151139296481",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e287c4f8-bebb-44b5-bf15-36c496cbd4f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab2ac85c-7923-4ac0-ac9f-bb49825446aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e5d5f38-52dd-44e2-918c-527c2ecd85b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "843c2e98-dc66-41f0-ba57-1b2f5bbfbf2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "089e564b-6db0-4d16-a94c-a086aa3500d0",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f461863f-8a96-43e0-a509-2d42fec9e6b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d756363a-ca60-41f5-8d49-fb0611f1e6fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e32c8e9-b807-4223-81af-c154ec945450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "52956f92-a187-42ee-9daa-48ac2416db4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69e81890-92cd-4eaa-b203-3307371b8d50",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a92b23f-c5b3-401b-8a31-e167c0ce7db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b9e46b2-35d9-4be2-85c0-af00b8476006"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cda5d8b-cb4b-4078-85b4-d969c7d56984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d36f0c03-bb9a-4259-b605-4a70a0e1eec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31be63c7-9d31-4369-9179-eb022dbec006",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d3cdb45-4a1d-44cc-b457-dd15e7e2a85f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "385c51ef-a839-4e3a-89e7-ef6bd8502055"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ea5b8b0-8d22-4026-aad9-bb89b4d6f31e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "55958747-70b7-46a1-b455-242831917bc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e1793ff-e678-457c-a805-a38af3471390",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "891a6cce-7bdd-46d9-9460-c943648c60dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b47886ff-813c-4fcc-9f08-0349006639eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46c018f2-56ba-4847-aa51-0c0222f6a8dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d01e1d1-dd7b-4006-a29e-7d4730cd94ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7cbf615-6ba5-43a5-997f-6f555fc710a3",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff38408f-e173-4f6e-b098-4d62e3495e36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e92da48-a3d1-4df1-a6c4-14b8deb00345"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31f8dc39-8d72-4237-8adb-957aae32198e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "71ba5b67-82e5-479d-9172-96a456fac721"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52f11736-1cad-4453-a4ff-af02578bf2fb",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94e0884c-5eed-4c69-8a0b-417c6ac99532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ab18db8-bfb9-4bee-9ffb-6fe2b4e7421d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28798992-aaeb-4874-aa3c-b5f73c6e3b82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f47b8f12-d352-4e07-983d-f3861df60125"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44be11de-d1aa-4fef-8983-4e269b4b83d9",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5503526d-ad42-4be3-8966-6af0f21ce139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e341e5e-4983-4bef-af07-a4c3a676f26e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e28fcde-e916-4221-aa06-8f2d6f09c777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea3d475f-bd84-4ff4-aa3a-8fc339a06ca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "582c3f84-b23e-428f-8de4-2190cafee7b1",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af84d2a3-b872-41a9-8817-11ef21037fd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ca86be0-24b9-43e3-bc9b-460f43a289aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95bea468-caf0-4dbb-8003-d7b6552be358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "07db4b8a-9abb-4b80-bed2-e9e98a7235df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a29f4219-db7c-42b6-a6cf-c4621adeb4de",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6ca873d-11f8-4c72-95b4-803bfd7171d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41c3e646-401c-451e-ba6d-6c01e0737796"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83a8c3fb-ebb8-4c8e-98b5-53c4cd484f27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "919bfc37-24e7-4f2b-b9b0-12741608bacd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4bfc4a9-760f-4952-adb8-83595daae14c",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffaecb6b-0b60-486b-9985-604c5911ec18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f93ab7e2-454b-47ee-9e7d-9d2582cf5606"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "207f7f04-cc81-446c-8883-d414210aa8fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "212f2d13-edcc-4512-87a4-8dad8018589a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a6e0fa8-235e-4ca3-b0f5-69331a43e7f9",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8ce57cf-a333-4216-8710-d52277ceeb55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87c10f45-b8d7-41e6-8462-220ca38c8f75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16d7cebc-5771-41ae-865e-4fb7f0dbd400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "466c491d-fa70-4698-a10e-34a6de367fb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a72efdc2-7465-4119-9900-21c368e00470",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe25eff2-4500-4c58-b983-a937302849b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fe7b47f-4bab-4c8d-8a4e-be0492364943"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9508aec-1672-429d-9399-69792ab61615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad6d4345-293d-402b-ab9b-b52d7c176668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4260cccb-9edd-4fca-b088-7aa40efe55c2",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a53fc35-d7be-48a0-9138-b7b09987ceab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38a909e4-9020-4412-b355-cff18b2d1e5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e216cd3-9392-47fe-a745-fc36abe942f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd0f590c-dc8d-4480-bc22-a55621911009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99f66156-a696-4647-9623-a7449e8cbc32",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15796615-b454-4627-aab4-b8fe7b1414d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df918048-7507-4fc9-b1ff-9e955a9cfb23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4a46e89-0852-4849-97c0-04120c49857e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5739abc5-dbab-4f5e-9f00-48ed6c033c81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8aa08de-0031-4244-a3f3-772414e955dc",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aea4e6a3-be7f-4ef1-b7b4-036690b08784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bae7cd33-c9cd-4cc5-ba4f-5cc119ac0076"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54a964d0-33e6-4912-b34f-226a4e159b9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b795a527-2848-4618-9baf-8fe8345872e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c39977e4-7eb0-4dfe-9015-30cb5083a8c5",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cec8be3-6722-47b9-a85a-4ae015a191bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2216ac2d-a7e4-425a-b18f-1d404c5e0e03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e36f1f4-adc2-45ae-a162-faac45b4d347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "11fe18e7-a13b-411e-8c3b-8b5e99277c72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56b80798-e53e-4d3d-a1f7-12381a937f8a",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5be741f1-20a7-4ef4-950d-4d0f50f3916f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da2d8426-de0d-49a2-b087-e927676af87c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69bb3eca-53ca-43aa-9d50-ee8a4c6a7c26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5b733ba-354e-4bce-9828-70ed30c366e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b05eff3-e1e1-4a72-8119-9ebb81c56638",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b3106b5-865c-4d14-b7e5-b69b6f8b5557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "5cf1eb85-2394-4b98-9cf4-194f1ccb9231"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "093a9952-88ac-40eb-8ee4-f11025b5d8ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab380ead-666d-4ca8-82f1-12c6db297270"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bae51708-932a-4020-a7f7-e6335824c312",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0e206010-5047-4b90-b8d5-86ea47c8757f",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d983f460-810e-4177-8257-3069f9a5e857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "14e90f1a-d765-4253-985e-3d4467c4521c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73ec35c4-3ec2-447c-afd0-5df479c1c104",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "21d35fca-671b-44a0-b6eb-f8ff9b5244a8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "67ecb032-e604-4a9f-aef8-6060245cbde2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b582daf7-3afd-4a2b-a0e7-f81da2355290"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b099f38e-7e26-432a-887a-94222ebb4e1b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e2f511ff-011e-43fd-a903-3b563698b289"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9345c4a5-b411-42a6-b202-76dee8ad22d7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bf04f8dd-b3f9-41e1-bd41-3c23b9af35b4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d72968e4-b487-4418-b3d1-ad5eac108189",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "484986c3-1f0e-43f2-b595-abfd4ca2d139"
                }
              }
            ]
          },
          {
            "id": "ba67b22d-eb36-419c-adc4-6f0be8d169c1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9477bc5d-efaa-4eea-9ebc-b20b3daa69f6",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "00cbc8ed-8969-4a4e-80a8-52af24866805",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c2d47d64-f8f6-4b34-999c-37b7cb47116f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "706db206-b41d-4921-be63-892ed54c62ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cfabe57d-8e13-4d72-9179-28f91c1b40f7"
                    }
                  }
                ]
              },
              {
                "id": "ee8f642f-3976-4573-9827-d9de85ddaa3f",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa276d5e-6d62-43d9-ba24-6ef97848753f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b67ea300-cb33-4a81-92b4-cbe9329e61a2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "82a8a5c3-9ec6-4304-9d4a-b2b706127033",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b08ffe83-7e9c-4fcd-b1b7-9522603ab39b"
                    }
                  }
                ]
              },
              {
                "id": "7ee4f708-b8ac-407a-a445-0c663fc95b37",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "034966ca-9bfd-4898-9b35-2a8085018cc8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "70f99aca-b105-48dd-9a23-ec7b933b582f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "07812d3e-7b39-4013-a865-d515942e1f2d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "59ff06f6-f55a-43f0-8074-7886ed983205"
                    }
                  }
                ]
              },
              {
                "id": "83e5ae20-f1bf-4be5-be3d-95d50e990717",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "457a51e8-6b0b-4320-87bf-3a3499c800bb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a1439f2f-5135-4e3b-a02a-c606e4256a40"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d7983c85-e26b-466a-b435-dfcbb14ce8c1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "a76e6861-b9bf-499c-9261-a3aefa3a7ba4"
                    }
                  }
                ]
              },
              {
                "id": "340de574-040d-43a6-a83e-39c0416787ca",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "956cfc12-3930-440a-9a34-cb699ad2b836",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c8d58b60-b9f6-42c7-93a3-74fd7b5b3d30"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "059df9a4-f818-4c35-af38-43e698bde4dc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "39025268-ab34-4443-9f6a-b4c3e668255f"
                    }
                  }
                ]
              },
              {
                "id": "4636046c-051f-49bb-a96d-9204c73c515c",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5538de14-fcf8-41e0-8971-4bfec2873915",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "de50e4c4-75f1-4970-8ddf-4da535817a89"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cdaaa38d-9eb8-4e02-8caf-21626c11b21f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6cdfddad-8198-40a9-b0c7-01f673534661"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6ad1acc9-476f-4ac3-8bfd-e5873055f476",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e9b1e35f-d493-402a-bfcd-4354739bb8b9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9c6c8bb9-281d-4333-94a5-15677bdd710f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "02cc98d5-d9c8-43fa-b292-dc74bd442c00"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8d5b934a-bdaa-4fe9-9dac-d38677b94163",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "ecff8fb6-381c-475f-bc00-1768110e0a68"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b6ecbb1d-8bc3-451d-8826-c7d35b1b961f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "338831af-46da-4a27-aa68-30be4700d619"
            }
          }
        ]
      },
      {
        "id": "12175c4d-de0a-4786-8f0e-bda0a1bc441b",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "eb826ab6-244f-4421-acdc-d306774af92f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f4a2f3af-b497-4064-8396-9bf9a8b719e4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "77d0918d-dcdd-4ba9-a81c-74a7e874c582",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f420d41-dec3-4e3b-8b17-c4599a301852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90075e36-1dc0-47f6-a8fd-b87e24625472"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "239ccbb3-6576-4195-8335-1e9ee132c02d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e2d08de-b194-4fe6-92b1-e17c87962463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c647ea46-59a2-4bb4-8a35-609caaf0e65a",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03f8037a-b91a-4805-a35f-942671da513a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5158f2aa-e87f-4a56-bf70-6943f86f9bc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52a52bde-8db8-46ff-a73f-720817817a1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1941470-d2e5-4ebe-b33b-4f9e241aee06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06f74ed4-5f74-4d50-9bec-b5f9cdf29e93",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d8af7d9-0582-45d5-a47f-92bb287b49b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0f4b10a-9d73-4bb6-a007-8026e3f37fd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46a8e84f-53bd-4ef6-820b-447407178393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cba73e04-b782-4567-aa29-b9ca8f0b6240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e468530-bbc1-44b9-8dd3-7ecad68d058b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e6270ae-9452-4e7b-8b42-ba06d4759b9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07abfdae-c70e-4c61-ac77-15a6943d3cb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "666a926a-0fef-4bc9-85db-f6e03dcb1d7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8db2ade4-cc8b-4737-8514-cbf0207e390e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91ae5ed2-32bb-49d3-a1de-882636c36f70",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "304b5890-8e4d-4b54-802e-c2dec17c1410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f15fb88c-6623-4ea5-a963-cfabfe2411c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bffcac7f-c5b1-4c26-963f-0d6f3ffd3673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e16e217b-8410-47a6-baeb-f58bf8dbec4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c19a7ce-1652-475b-b0ce-379d80b3ca89",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a62c9160-a812-432c-9ab5-f5946c3a07b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "306aabc8-c8a3-4e89-864e-adab27ea3d68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2154bab-7807-4923-bc9e-fa4a07657268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7563a5b0-4160-4bbb-8cd1-05db3319af1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e52ff9bf-a10b-4685-a500-05c08afec204",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9730962-9be2-4477-9d52-b2be7f33289c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53aa7ecd-dfca-4351-9007-44ddd669da7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d309b01-4a7f-47ac-8b32-f834a05588f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d23cdc8-8eb0-4573-a03c-80bd707f7d68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2452e07e-ac5a-4904-b887-969b49d1ac5e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7f25f8a-8cb3-40db-8d17-8aad7de470b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52ab685d-e1a1-4469-8d0d-e9034c914c6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59f2a57a-f735-4eb4-be79-59accbaf95ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed0fb52a-f4d7-4d57-87ea-d324506ef50c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86cc07c2-0af6-462f-a649-b80ed11c30ea",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b39a4c3f-2c05-42cd-bcf1-8086bf79f802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e71a3b49-7a35-4dc5-98f8-468ec153ea61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5e5e5f4-f1b8-4c0b-a7fe-0f0bad539f44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b56ba4f-cf18-4cd5-9d42-ab4f0234ccb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "360a021e-fd0d-4543-85e3-899381b3a4ef",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a096782-d385-4ebf-9506-230b28e8414b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec06e117-cce6-4fbe-82de-e7288c24341c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28b3656c-0035-4d75-a609-abc15beaacd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e29ada8-2ba2-43b9-8d5b-fda752350d3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5757d05a-470d-46cb-ade7-2cc34b169e93",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "359bc60a-0813-40a1-beb7-548520d886bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aea7b00c-d52e-45a8-9024-5756052c0159"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f11e2259-ab02-4c77-99c7-7d37b65ba764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "3cfa4f9e-7675-4034-8c0a-6270fb832930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8f7b378-ee56-45a5-be71-55472f62e33d",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8603ec09-ee1e-4912-9813-3128c3d0e311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "547864c7-c694-48c3-afae-0b9e049070cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42df5d69-0fdf-4f70-8c6f-a0bef0893342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "66fc5d92-788d-421c-b0cf-02ef3f20af1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2613a49b-f6c6-47b6-b90c-133488b23911",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "556e6b7f-8040-4e7b-a7e8-0f4d9dcf5fbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c05abb8c-659b-48b4-b8df-5441f12072c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f99e8a77-99d8-49af-a13f-b07353c3c8c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5893528d-4e77-48fe-a7cd-34680fbd8039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "037f92b5-a3e0-445b-ae13-b611e33b1a82",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ce8ae8e-c951-4e4b-865e-e7469a541e02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b48329c-c7eb-46e0-936b-bb8c75b77c3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c13108f5-21d0-469f-96d6-5e67dad443cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac903c26-6924-433e-80b7-257de09f6952"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63d75586-33dc-4be4-8e17-a9cce854b2bd",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71c18221-1d09-4383-878e-5e5af0dd9af5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90c61993-45c0-4695-941a-de94a690e91e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e809c26e-e297-4ac6-b4ca-b5933e2f732a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "08135dcd-30ac-4e99-93a0-6418a54dfc80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de3c557d-8f97-40d2-93c8-5d2904c5f4a4",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "089bc34d-658c-408a-850f-8ebf156863ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45f7f1e2-fbec-4268-941e-1a493b617772"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7a68da0-29b4-475f-aa6c-1c0b1a28a753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "627f4e1a-7f29-416f-9662-586863d567e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2717f015-8527-4725-9a0f-6d63343fb390",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "142c1952-634b-4308-903d-aef0dda1c17d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c60dec0c-2e63-46f2-a573-0d1d7369c447"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dedc0f5-f4a8-46ea-9071-638a19c2737a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f05cfdc-d2ee-499c-afcd-907630ba31be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f611af06-49ea-44e9-9f90-4f1445460f35",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69e955ee-fcd8-46b9-b27e-26dc6cf65b92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0555e7ed-081a-4e37-8154-444e2869a8c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eacadcd-6349-4c1e-abdf-4d42587ee6cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "78ae7a08-ad6c-4d06-b29e-c6bf2a64d931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "691bbae0-8ace-4025-bad7-6317e2524f96",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc5f1d5b-1044-4575-a620-2d6699d78f96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd4d125f-ead8-4836-9ccf-54dca9482388"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e135e1e-94a0-463f-aa20-ff5124c34101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "06f70620-414c-473a-a023-bc59ca537583"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b526dea5-1dc4-4102-99b4-0297ec4da06d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0bfb320-b2c2-464a-955b-162d1b5a6965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f83a0f15-a801-4925-bee2-6d303664c8db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "578041c7-e45a-434c-b775-99c2c7d27c11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "68e9e87a-9c94-422c-9df8-49eda2760f3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8cc3f48-3baa-455c-82cc-cb05a9fdc1c7",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7042dcd1-1add-4458-8766-de47ccee771b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88517f60-962e-455d-bc59-1fe43f70390a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd267417-8534-45d6-add3-3f7e66834a7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9c4c9dd-34c8-4bdf-beff-abbcac5fad76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15d3d29a-57e8-44e4-b0bf-3af9e4994bc6",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24c69788-e3c4-4f11-81e5-b1f8b90c5d54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f256d67d-be73-4545-9b1d-fc580859ee47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17ff8976-1cc6-41a7-8df3-2c86d2fde786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "90bda6ec-92f4-459c-a3e1-3804c5d07dd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc60926c-d210-45f8-a99e-f65b6e3616d7",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c65daa6-dac5-455e-93a3-88e2bdc482ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "751f480a-20ab-4c08-97ec-998e0e34a7e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f310e14-7b3f-4704-93c4-b1e8ebec667e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3b1f947-fd8c-41a2-8daf-94f18b7a3b69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccdc29da-989c-432a-9813-0a77f207eddf",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cab00dd-f43f-4405-9c56-dff6b6c361e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "028954ca-ec64-4dd9-91d3-00cd3bb28ce7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10014396-fb6b-45e1-ac2a-ef52c070f114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "155ed95d-e5c4-4917-9308-540ef8ae06fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8026e8b-bb66-434c-bd5e-822e92623857",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12381181-0c7b-4a57-849e-b34d82c98b59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65b9be7d-0622-46e9-aebe-e9ef6bdaa837"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a0412a2-a259-4c2f-9961-f00fe9a1c2cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "faec8c4f-a86c-4a4c-904c-b94e2499bae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd3cef02-fc92-4d9c-bd8e-fdcf7a92a489",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90477597-3659-4d81-9ffb-e89e3295e17d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b34a866f-518f-4e16-9368-9d8f2efd91fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d2dfdd6-ee25-41bf-912b-72c4d5c4a435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "90d3a5ad-6dea-4266-806d-556363718c06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68947922-5d17-49dd-b7a1-c7f4aa81da94",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9296ff10-b346-48dd-a834-d824ca3f26f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddfc575d-3d11-4549-9f6a-639e114ed467"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7a11532-df54-4097-aebd-f9246011172d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5906b47-c3f3-492d-88d4-0bc8761f18fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f42485c-7650-4a9a-a9e1-5c08bea0f31e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2faa840-be70-4ae2-b703-71ba1c75f158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "125487da-a205-44b6-8f30-174589104499"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f442b54e-7d2f-4812-922f-2f78c7a1c0a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40739232-eb24-4682-9774-b258c43cccc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb7e182c-20e7-4acd-9e38-ebc45d628e1f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f1666e3-9300-4bce-a668-35e20ed63444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ead8db62-67b8-418f-aab0-f92139f82b7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "132043b4-241a-4ef6-b378-362e0e238cc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffc449ad-6937-482a-81fa-6d2b2ec01c8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef557655-5652-4b9a-9062-a0687cd62e5b",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c94307f0-0f22-462e-b631-d479592a922e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79e14add-c5c3-455c-afd5-6678b1271c6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a9b04e4-0401-4153-8224-36583db37471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3df10015-d789-4423-8ea7-389d8f797026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee59ca0-e5fd-46da-acf4-70820f1b94a1",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58839694-a7e0-4fad-a9fa-0fc5d8807d5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33c8bfed-965c-4a51-a2a7-cb9b55f230be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f87aafc4-8fc9-4a4e-be5e-8b44f03e0ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "530b58f2-a6c3-4c4c-9458-0eb672e97938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3f6e9b3-2241-4a8e-a27d-711b35840dd3",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a558f4c-38c8-4235-873c-c02dcf4fda42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43599193-1959-496b-93f1-ce92e82f517c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a48d267-aa71-4645-9a19-ec48058bf995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca070237-2695-420f-8190-333823945aea"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "22106c01-dd78-465a-b435-fd5ca726e674",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "44adb15a-0aa8-4051-a874-131b7e942089",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50cfd7d0-0f14-4c06-92d1-16dac1a6c0c2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "bc1311a1-d5b1-4f14-878a-f785430b0f97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a23829ea-d32e-4255-8481-71986ab126ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "75854b6c-64e9-40f8-a1d1-cb9ae9a3f588"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aaf6e731-0867-4475-96cd-5e1445eae565",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5ee89e13-3bf9-4678-bd6c-eb95f7a55b5f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fbe31a26-884c-4dc1-86bd-8dcb57103374",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd0c5919-30d0-4291-a99c-3be9cc175dca"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "164cbf98-38fa-47d6-8a55-f5ab2ca6f4c4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4147df1d-2a6f-4bf8-90b4-d654eaa2f3aa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "62732e29-73a8-4638-9ddd-5f3708a08a70",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ef7f114b-2152-40f4-9343-ee5bc0d53ea6"
            }
          }
        ]
      },
      {
        "id": "aa0e6443-9589-473b-a992-c13a9a45e85d",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "3cdbf18b-8b0f-4b1f-87f3-db45456948c4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "68a70e19-cf0e-4ff2-bfb1-f07753aabf5c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9636b052-69a9-4ff8-9e79-8f2c1856e98e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77e469ec-d844-45c9-a4ef-2dc843efd3d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c41621b-2953-4884-92f6-5531f6b4dead"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adc5b856-ce11-4f8e-8a28-d435ec875446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d567204-87cc-4d87-b6f8-a40380fc325b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd44c9ca-2532-42d3-a63f-d4d6df9da8c7",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c51a0c52-f976-43da-8c31-85d2c6860542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f4764d2-a7e8-4d2f-9a78-9b16a69641cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbd93b6d-5bc9-4dc5-acf0-03455c391226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b863c3a5-73c9-4692-9d3c-2696672b12e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ea63efd-281a-4444-8334-638b7e5923e8",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0a82d31-2baf-46ae-bcc8-421aba0a832c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a18557c7-b895-480b-870c-9992b782df46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f71bb086-244a-4952-99c6-50c8b08c0865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "496f6ba4-695a-420e-b4a4-7a2938689297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f79074b4-6c57-4bd1-93d8-51d00613a6ac",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0afbca9c-67f7-4dff-938c-533aa1d6c93e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d17c93bf-ac63-494c-a08a-45d5237f5dd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "854f6aba-9c8d-4114-9a40-f0ed1f15650d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "58a7366b-9b9f-4dc0-bf4f-8fe5b1cb36c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "852dce3d-a556-47bd-9b5c-e24acb7dc10a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfe59ec0-3931-424a-9ce3-c3584c44899a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6b73287-8f8d-4a1d-8231-a1239457bc5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79f8be0d-af9a-426f-8bba-eb1f58f1af46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e3b5793-eaa8-4d51-859d-cdcca024c094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10de6ccd-8c1a-40c1-8d18-8a63cbaaed3a",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61529416-bd93-4253-94bd-fb853823b357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "552503c3-7512-4c72-a85e-5348ddbd3519"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8deb2be4-9c97-48cc-a3a9-e6f1fdcd04f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "97b2cd36-8464-4822-aa8d-e3cca3d5a5c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8b8e172-e1af-4609-be91-923acea6844d",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15676d17-aed0-49dd-88c6-86496f3acc0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00c1cc25-a5c9-40df-bcb4-faf21cd1de6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f882d8b-a3d0-4e55-b67b-ad50a84f5884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "0cdb1d0e-ef6b-42ea-813b-1aa9ef97ba8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cad48a5-4a7e-4965-ab4d-922d40058356",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fd1fafc-846a-4655-bebc-a4fa8138f68f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89bf2409-8d4f-4326-a851-0fae76d74958"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c80d21d-a0c6-45f8-990c-33f7e93bf5e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c536dea8-b18d-4288-b904-9048c4888442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "077f8da5-efe2-47d4-88d8-8ab90fddd8cb",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9f84d33-1e55-40c6-b513-fd5473e77ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a579d9dd-5b3d-42a9-be6f-a03246a40358"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a16f409c-7a92-47f6-b3d2-c8f4c50bf4ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5f35347-6705-4b75-bb15-5d0d20ec0481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d74df80f-1b17-4f2c-a46f-3f557610ab61",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeb51e5b-70c3-4c0d-b68b-531159872aff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea92fda1-ace8-40f2-b308-f56454a73c76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de001470-cdd0-45b7-a3d5-f0d0bff4f722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "837c78f2-0beb-4231-9f56-baaee1677c01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80317d9e-7e5f-40c2-8821-8d697e8ff061",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b11e9615-2ec7-4d9e-878e-ed5b74cc9609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c7a53d6-af18-40bc-a792-f79094237acd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a8a512f-e34b-4f15-85eb-e45fbe3f4252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "2f7c2bdc-356a-4d66-a620-6423f7e88679"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e5e0911-8261-4684-8449-28cfbd39eae3",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc7e8110-5fc7-405d-8fcf-769fed4e098c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "676b8c66-cb20-41b3-8ce9-3e01a152ab1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba569a01-b8c6-4058-b601-83343942df1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "761a4e38-98e7-4646-abb3-2002090fd516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "795ea22b-b76b-4dfc-96ed-d38f311fb151",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "272db02a-3eb8-4e1a-b37c-79f7d2182020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e9b1390-74c9-411f-be0f-2c95627e14bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9571cb3d-3845-40bf-a3fa-51e95f74d32f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc30aecd-57ca-481e-be1d-af579cb2fe86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "238cf174-79e8-44e3-836e-0d50a6d7a773",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1fb40f8-087d-4a63-9b54-388f1e076723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32671c66-60ba-4c5c-b002-305009798b25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0122dbb3-df39-48bb-ae49-703a71ccc0c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "15acd438-4818-4755-aa87-80fb75d06208"
                        }
                      }
                    ]
                  },
                  {
                    "id": "254fa2a9-ee00-4843-a64e-3980c1b28741",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "684f2b8f-9e41-4258-b846-260d6606eb97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11d92e3b-0e5e-46db-a8d8-d883bd2fdecd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2073c91-fb51-48c3-9a9c-7799e445ade2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "68c49852-a928-42d0-89d7-ea3ef334b315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4128bae3-25aa-45f3-a095-662a1284ea01",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2209035a-5453-4558-a7e0-db4b41b95936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4e5424e-1d7e-4c22-b82d-736c5eb5b965"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c72073a9-f3d5-46e8-ab95-ce1c4dabf0b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "06849097-66f1-47ee-aa8f-23bdf080458e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f0c839d-8f31-4333-a707-d92a180b2e5b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72b21604-77a2-4775-a6c5-0a36560e67ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0816f21c-7d2e-4eef-86a0-8158484f736b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a181f6d4-5a05-42f4-92e8-f04c805df476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed5c78da-5926-40d9-8071-54d04ad49edb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aff047a2-fa06-4473-a94c-02171879a992",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cbf1561-f318-4f5b-9052-7c317a74d67f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "967703db-478f-4177-85f7-f570839ae3f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0b139d8-f134-4e9e-a780-3b1698314c9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "608e8ec2-bbc6-4bb1-89c6-9b08f6ba5d3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "486fae2e-2f36-4af3-ab0f-371527f888a8",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10a10687-1637-4c97-9cf0-92b7c9351d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7dcc60d-0d66-4646-ac64-299d3bf08c55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11a57420-11a8-4e39-a1e1-562491c00882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2f65bee-1e6e-4450-a62a-e300c0f93174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51a2d13c-94db-4ad8-9c5f-33ee255da249",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4db78d6f-f4b7-465c-843f-322220ca636f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b76dce1c-fb18-47ce-9fa2-d55b563c60fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "676edcf3-bc2c-48a6-8db8-45b72af84a35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6a83456-ceb1-4c6b-8c9c-1f5655eb20b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeb57b9c-493c-4019-8881-4e3087f33872",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c0cb9f2-9bbe-440d-8350-30b1550cb0de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc1ce751-3c3b-42ea-8102-5de81ae39f52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d4e1e3f-c33c-4d0e-9f26-00fdc048d104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "42783ab1-bbfd-412e-9718-78b0a672f294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "903d8c33-4c23-40ce-8fb4-c14fe7db0763",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a959dab9-3fdd-441a-90cb-280b61a7d628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82709205-bc08-4cef-9d76-6d8f02c53060"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3fff141-1655-4936-ae63-79f9287960e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bd0963b-4003-460d-8a9b-61b570880f81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d98d850-2089-494f-b134-f57e281323fe",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9face00-80a8-40c2-a4b0-27dd0c582673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab585f33-0b64-4249-9955-f0fd21b53c8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d81708b-ae89-4fed-827b-2336f73fd416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "91583c4b-30a5-4af3-bd29-4195c2788d5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0053789-2a04-4a65-9561-f965c2c2e081",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ae41e42-c17c-40bb-b2fa-2fad17d5d440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef272c92-c18d-4d64-a02d-56e98231cbe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6aa3dcc-7802-4882-9df4-5d2e51542cb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d93bc99e-aafd-4c4c-a32a-98a336457870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31a4f2e4-0c4c-4d90-a636-9d996250011a",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ea2fbd0-41ab-4dde-bf1d-c21893923f7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a061c52d-420c-420c-b61c-edbe2c18e912"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4437f0d3-7327-40a4-97cf-ce66fb4f7b9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7def68e8-cf34-4ed1-8ab2-779b9bca7ecd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63e51a0d-43ab-4b24-9c77-3f8410740e1a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f8dc610-d47c-46d2-aeda-4651e858c1a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35fe16b8-ebca-4e39-8b15-07cea17f71dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb848484-7812-4faf-bdb4-e8f0e67bc434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7553e680-ebee-47b3-81b3-c489f85fc513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3526ec42-a235-44c4-9617-20a3b3783afc",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e704c2fb-cdfb-41e3-a6a4-c0575dcbe6c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4656dc82-004b-4a67-b6ef-64b1d7c57d36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e2ca92f-4b41-4b11-afb7-02c3eb43ab9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a55c814-4bfa-470e-b9e2-f6c1d4b06d13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91098f17-bc41-45e5-b1ad-da3a129b0f51",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b366f745-2a81-49f4-b721-fb80b3699e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7c4a2eb-a84f-4e43-b3fd-92eb7f37f27a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "134bc2b7-0d36-4d9c-9804-4006fa16fe12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "434db3cd-b10f-47d0-87ff-e687f9524168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7214716-766a-421e-aaf9-d310c4fc9393",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87f75e36-34ea-4450-bf43-712f3c9a7c7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6254ccc-46a8-46e7-98fc-6b2d9dc6c2ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74ea4a68-94ac-48df-ba09-e35db27f0955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dadb584f-6f4a-45d2-8524-7052640922df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4751abf9-63bb-470f-b308-74acc90072c3",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e08d4e71-4e47-4865-b149-e05bdf2d30ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "790d41ef-e9c3-40a2-b10e-32a3c99349be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73f616d7-7fb2-4692-a277-53c4ce04845c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4c8aa7f-b2de-4397-807b-1fa802779979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b2358ac-4aac-4bde-b0df-0d6963782cf6",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2ff55ea-9b06-4072-8f2e-ada5d5535a2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c08ee7b2-be8f-4344-a581-5fafd69bbd09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5707e91b-f563-4e61-ba82-049b41693272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9be5d919-8fce-485d-be42-7d49a0a0d066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35e4d74a-7dcf-4fe7-b46c-57f7aefe87ef",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e2acf37-5823-4b96-bed2-67a58c18a6d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e482efdf-1790-4084-92bd-7117c68aa028"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cdf2f1d-7a80-4281-b75b-6e4807145753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4a27a3e-8930-4890-bc3f-e85605bbcd36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df45dded-148f-45da-812b-e7fe2bd918c2",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd0e1fb2-ce5b-4d05-9b23-13b576ad21e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3ae518f-130d-4808-be89-7c9539dd884a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ce59c9c-45ad-4507-96cc-33c5b63dca84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b097a4f-a4af-4c4e-8e5c-abb8c43cb0ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc6491d8-e01d-4072-a3e8-2685627c2848",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07654b55-0e0d-409a-89d0-f548291d2240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4618c55-bf86-475c-bb8d-ad91a25b582e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15dfbbd9-f200-43f7-bd97-95474694294f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "145eb470-8f30-488b-8b23-4711f62bd4ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a77e7cf5-3db8-4d10-843d-b716b34e6740",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e805aec-067c-4d49-88a3-c18523abeda1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78b27fe0-5953-492d-91ec-359adea75f8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09c8e0b3-e8d1-4a06-a883-1a7467f4f5e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40cbf12c-4076-43b1-8562-80cff2b34d51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d3c6c86-7ab7-4d7d-bf8a-9a5fdc7d024e",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6749f99b-df10-4b4e-86d8-44228b1619f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "261ce8a9-1136-466b-b4ae-4e622adc79f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fa3a8a6-3d56-4602-9525-d9c1090e8bb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cd1b6d9-f68e-4239-89f5-453d13789368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d475abd-6ef7-4f45-9736-e7161b23aad1",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeba5543-a956-4cdb-bf2b-1d085921401d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0048a57d-05c5-4c66-8480-d3d31e4d846d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26cb313e-3d47-416b-bc60-9504cd783ebc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cafc268f-f894-4b1e-b4ed-bdf753ac13d2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1cf8f203-cf71-4358-8f65-5bdedeff19a4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3dd2068a-a4d3-4094-a962-6f024ca75333",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af34f10e-bd42-42f4-9c31-cb58f3aeaac3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "f8926cea-e4e5-426a-b794-18e81697e194"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3052812-cb8c-4557-a6a4-bcf4e2c78f48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bbcb0d55-265c-4a2f-9979-311829f6f3a9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ab43218e-6293-4d0c-819e-595790ca4642",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "928f06f1-f401-42b6-8f82-034ba60d1999"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "314fc2aa-dc68-40d0-b4fc-fc3ba15c16b4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "25ad5b4b-7445-4c10-9f99-3454191a2445"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "37a77c1c-470b-4802-ac58-80fbd79d1605",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ade4339a-daa4-4788-b307-176973941524"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aad78be3-2ef2-4012-8aba-afd38d5b139c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "18e8a66a-6db4-43d0-93f4-8b09ecae75ca"
            }
          }
        ]
      },
      {
        "id": "99bceb86-6911-41b3-9997-b1605b835044",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "d58d486c-eead-46c2-a1d8-3a738e96ef5c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8c33be4a-2e84-465c-bad0-e25d0426942b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "84e06d75-1ce5-44dd-b3fd-beb02be6caa1",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46b7d4dd-33ec-474c-ae37-6e451bd98a71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "777a9228-1a2e-454f-9755-57a1e310b90b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbac3e4c-5526-4ae8-813d-7543673be5ca",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c17ed868-904a-48ed-9d91-a72dafea9e8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34bc50b8-dc81-48e8-b25c-20e54d911bd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "166a6366-fe3a-419a-a031-8e926a29c36d",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec50cd06-743b-4603-ba46-b2cfcdec724b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce0b1394-3e4d-4579-8494-f223ae34a4ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5ed347e-04af-41c6-9262-1ccf0ee2ec2c",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca4b9eb6-7a3c-4b60-b10f-c7258fb0d498",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81cff47c-751b-4ec6-8e10-4c5e7afa24fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9143f9f-c514-481e-8d2b-3e63f0416551",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42c5d68a-a5f3-42ef-bc9f-efc4127776c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35f7eec5-8295-4aab-bd7c-84714b5c012b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c66360ca-f94d-47db-9e90-9a8f9cc26aac",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff5c2c37-bc08-4750-a369-0f0fa9614dae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2be4b720-72a9-405b-bc7f-9b766736ad16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcf002c4-185d-4eaa-80d2-497edcc5a916",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c24a33b6-83d8-4ade-8f3f-17b1b8b8fb06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90c8d6d7-0bef-40f6-98dd-47d1f79cdaf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29c04fc7-5f1a-478d-9909-8dd395303d8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dbe867b-9a5f-4715-845a-5427f686a0e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "652ddaef-6e36-4348-9713-466396b12fec",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "655a01eb-6796-41a4-b080-403e581cfe38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76382aec-88a4-430a-adc3-e77802e92416"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f108737-14dc-4334-9fce-d4679359307f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a6aea71-8c9e-4d15-a2d0-e1ccd24937d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb73bd20-9acc-4ec6-9690-ed1f3d52b7ec",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbe47b04-fac2-437c-8f15-f8c77351e02e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ef3c9fd-ca71-40ad-95da-13af434de10a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d24ae3a-84cf-4661-9901-c1b500a9e895",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c608b7ed-f25f-4824-b422-3806cf6a314e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2331490-ac87-4e93-af0b-308ef925b705",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5599703-196f-408c-a6cd-591d67e20be0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19418b27-cef3-4c7d-b71a-40182cb7c7d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "112ca4b6-b870-4498-a237-2400ec45a110",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "684ff62b-25c8-450c-a146-ba2cb709892d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "034497f0-dead-4640-b8f3-e26092f00b81",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58c04617-5923-4d07-9cd1-cf2977248d7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "845ca7fc-5d25-4df5-93ac-71d909b274d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "773c1bed-600c-4610-966c-96669ccde912",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d4f4f8a-d1eb-4034-bbcd-91a4e27bebb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be522f48-ff55-4f62-bec4-db1eb3f0c3c9",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b8b4226-813c-4d5a-9acf-ad7f324a2d37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4ee627b-ff02-4bee-8c7e-2d527d1ceaab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dec54e01-9eb9-4727-a7e2-f871d1fef0ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c668167-10b0-4015-a7eb-7baf6227da68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea507bcc-475f-4b84-830c-65ce8b3d8991",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c1566e0-a337-452d-9304-b392d3c7dc55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9374f05-1b5f-400c-bdaf-dbc3582e8395"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1fdc0e0-3b47-4b82-bcfa-91deec7ada98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cdbb60f-a9c7-4a26-a699-a9d9c98e5670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad69950f-b8eb-4afd-9e35-9c508fd4d85f",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3076848-89f7-4e9a-90be-0f7a980bd21a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b85ad0a1-954a-4469-843a-3f7c7cfcc7b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef75c878-8cb9-4982-866e-29b05290847d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da281a48-03aa-45f7-8cb3-278a86f85b8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6da50c93-b31e-4194-9e19-ec160699cd17",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11acfefe-8220-4074-a760-ff1ece8bf3b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a49caed-b203-4fcc-b810-68eba2ca47d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f1d4064-5118-4e43-b62b-973ec193a507",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81190840-ba99-4e00-9913-1b30595b0b6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "966abf66-90c5-4c64-8466-b6b7134ca92e",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cafc9cb-5b40-4465-b334-e29c35dde25f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17a73c13-e695-4584-a955-2173e21fb44c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80c2c184-ca18-44cb-9b93-cc368a2b979d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09b282f4-2197-43ae-947d-e9d428aa2bc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4c2f031-6b20-47db-ad2b-a83f82bd9a62",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58f76ccc-ba07-4627-9fe3-7da76b2d6d35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09903bae-9508-4c6d-a72d-b45c62222c3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f007bd7e-95a6-49ab-9086-b83b04d3c7c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee524e95-d1af-4958-a246-72859c966312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23dfe36b-a5a7-4c0d-b5e8-a6a300f55cce",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31bc5986-71f8-45e2-a8e2-f468c9ed3248",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29e253c8-cafe-44ed-83ef-aff0871aff77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd33aed3-6871-4d3e-9109-f4e2137dc9d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3630060e-0ffb-4ec2-8a6e-718acec855ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52216987-d53a-4637-a9a6-9dd092e652dd",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d09bbe64-c2ae-46b4-92ea-43d17210c090",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "162c7be3-342e-4cc9-bd10-0fbeebd2ae04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6651dd7-f5f5-44e9-b7e7-0b04e4949438",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a0e363c-2219-4340-9b81-7fcf1ea4ba73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d231b992-1e80-47f0-b122-5950982a7a20",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26559591-0933-4db7-9d16-d983b73a064c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fece723b-c11b-4232-a6e5-024f5355a8cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d386c06-b875-4d4f-89dd-3f62da22910b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bff00bdc-7269-441f-9c99-f8d763a286c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "894d037d-5a48-4b70-a093-e3b811ff547f",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1cef3a7-21ce-44ba-9247-3b5c96177996",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a938eeca-fce8-4079-b54d-23be31f983a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00bfc05b-4fd8-4455-869a-7735f6026153",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a64df33-60c8-48c7-8b2e-403025e8c590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f3d62a-c0d7-4bba-a636-7fa73873a87c",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee1a5df0-1c7a-448c-9e4c-109cc9c504a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afec0f9c-3b0d-4b49-b28e-3c75ec2a3e9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "384daa52-256b-404f-888b-7fb463ae5aab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23833a0c-a692-4e43-8493-a634e2d97345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "814c23f1-0dc4-4aba-9656-f6d5a3950b42",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69e34dc5-e9bf-4715-b898-93b297c9ea46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de578548-791a-4862-836b-02d0c5febe7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e5657c1-e27d-4a1f-9e43-69804a834d6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "109b179c-989e-43d7-bdca-347fbfbdef36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4e4c242-da8b-41b7-8171-72605f9e3e1d",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3e1c237-307b-419c-b6b8-35f949ca3bb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a50ad985-f12f-444e-8375-970f78504a11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c219724-d044-4b15-aacb-5a72f0de1e87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "902fc369-c6ab-4fff-9a61-9645abae0ba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec1c0f50-e7ab-44e6-9d64-77600beae973",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76d20e33-43b7-4963-a36b-6fe07ce98a69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76512af5-691c-45f8-a2e7-b50c90013250"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "588ea8e5-f955-4c5c-958d-ca0f701bab4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "951faea3-7a90-4b83-8a0f-beab3c6d46e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80ea88e8-6c89-4b7d-ae98-b44f0cebccf0",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "549efe97-f49a-49b0-979f-6f25f224c94d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fbbdf7e-9f85-41f4-957d-23d187416541"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9adf9be4-773a-447a-b337-21e38dbb6776",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ad28164-e743-414c-97d0-b78ed0b4c626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e7078d1-0c91-4e1a-8c34-1895b436b1c8",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2a00a41-26c7-4c0d-a91e-22ca53a20591",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92546df3-872a-43c4-bf2e-1b92b01f3b48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52a4d513-2807-4e87-8032-66264ca82699",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31f61aad-16f7-4884-a635-1f5bf927374e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d8322b4-cf97-4fc3-aa2f-f3c0bf308b7d",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15da63e3-457d-4c61-bb94-c30582ae523c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4721bcd-e91f-4813-b652-1b6616411f91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83d52b54-b678-4fc4-9652-a7196814cf10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbc8187c-cba4-4a71-b60a-a619fa2e02e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d00cfe07-2875-4c2f-a6ea-1c39e1cdc7ad",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93aecb0c-3399-40fd-be29-7b7725060696",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d781e230-19dc-4807-8087-6a0f0431b2bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "045747bc-3024-4c81-a6f7-51be8c645f5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ca64b79-85fe-4389-b328-522b59f68853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8cb756b-cf2b-4847-8820-18b8b363b6f2",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f062d5f-9769-4417-bf66-aebba6c7fce7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22380242-4518-4b3a-8d73-827b07331509"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2560a375-f9f0-45c8-b747-26d949c94485",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f0af0fb-911b-49c7-9a73-d5234e34fed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4a6eb6a-e215-4ea2-bf90-2cc2904f6dba",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e5ee83b-75b4-4852-91bf-0d52a69335c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad935df2-cbad-40a4-bdb0-be105cfc0f0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "970ec0a4-5a86-41fc-910f-c64d6db27926",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d326c5c6-1b80-4acb-9b57-24ef5dfa187b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7810e177-571e-497b-8c63-ae0056033f41",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98760f5a-0cab-40a8-9e84-a21906678f66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72c82dff-2a78-4584-b5e4-c730c9aac18d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48e80256-dcfa-477c-9865-c60dd1b2f431",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c3533ad-0782-41f9-99e3-dba95165adb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc9d5e65-f1fe-44a7-bb3a-db2968401235",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59790f8f-41f3-4784-ac14-fbd0dd82f69c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08e74e2b-320f-48b9-b0b9-a06a646a7f46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46cba6fd-62e6-491d-86cf-583afd544ce7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7b2d9c3-c86d-42a9-8406-a051d55d94d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "913a8941-587c-4f40-ab7a-24ac916d1293",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5ebfff2-fb6e-4ecd-be25-d94f3687e1d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecdc80f1-912f-4583-be72-16fb2ad681f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3280ff2-1068-461b-9335-8ec50f725c16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8e5fb1d-90f1-4be7-a852-67dd0f38584f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4236162-4fc3-415a-b140-f50aaa2afcae",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3a2b988-b061-44b2-96fd-f8da20e5e2b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f274917c-eef7-4df6-a00d-db677f9c06c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce365a44-c139-488d-955a-eb80542952d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "678016c9-5f90-480c-884f-b51b38ec11a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "689431f8-cce5-41bc-aecf-825728ffdce4",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "875076da-29c5-4821-b60f-6e1bd9900561",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d12c8803-97d1-4235-b262-e8e6d8039a14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6394bb1-f89c-42e5-b663-a0f76fd53ae1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a60d3d5-78e9-4ca2-84cf-f13c1af85ac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f10d4de-6ffe-458e-a52f-9cc79f93ea82",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4047d41d-e7b7-4646-9652-ff629fe4fd81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45c1576e-fa61-4c1c-95c7-24bb00e5a5aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96498e63-38f6-4a12-bc24-f02df89c8171",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb19c3d2-0e6d-48e0-82a3-d50e071bf7da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0256750-affd-434e-be93-ae026be30169",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "683a88c9-bbe1-4fc6-abca-98ea5aea2877",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc8d787f-d617-4c64-85ec-6fe79ccb153b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d68b2271-7006-47af-9739-2d9e170aad0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3126f07b-7b04-46bd-9d40-c6a41590bc42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e96762aa-cfea-4f08-876c-ab5adb097d23",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51deb42c-1b59-4f74-beb4-31a9481397a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0a77847-7ed5-46ae-8a17-ce00f1fa6b8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a22e3dfe-4607-4b7c-a968-668d48811d18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6df08644-5105-4e7b-be5e-0ad130488f42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a557cab-c70b-47ae-a229-d015f2626b20",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47a38c60-9f88-49c8-ab3c-af7025661a9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14e759cd-0e1c-401a-923a-01579f429746"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d95124d-8971-47f7-bb33-eabf484aa683",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d7fa8ec-ac17-468b-b5a9-d8a981ef2292"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa185dc2-76d0-4aa3-8fc1-d7b367e9b31d",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce08a84b-8655-4e2e-a2b3-560718a6d52d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e981b47-2dce-4b68-8413-cf4df9dcfc82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "814e0d45-4f77-4c77-96a8-74afc36c0254",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "503955ed-b82b-414d-9fb5-aece06ddb46e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d7ee24c-86bb-4a75-9110-910a3e6bf747",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ecb313b-0ade-4bae-82a8-0c5d9fc93672",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3320fa1-4969-49a8-b5f6-9ea8e86223fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08740770-8daa-4a90-9926-dd8003064485",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc0e93fa-b966-41d1-8a24-c2cb598d8b31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b426d02d-dba9-4115-88e5-9cef959a6984",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f303e64-4c5b-485b-861c-eaafb15aff69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6267172a-4375-4ad7-a58f-fe934beaedbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a73730bf-73b0-43f3-915d-7b021d7b42a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4028c18-5c9c-42b6-a6af-1ae4cff05b9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f841106b-ea5b-4722-ae76-71548f31c72b",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e6db8c4-5c9a-4177-ab95-08786ef7e4a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a047c8b-06f6-4445-954e-de4cd320689e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6fab479-ab9e-49ce-af19-515f4fe8aefb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6772ca0f-b6e6-460b-8d77-855e896e90c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9c53cbc-e1c9-414e-82cf-172139684c1c",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70855fd3-dc84-4e69-8cec-9d3cb34b3efc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7196f15-3f9c-4d34-95ca-36de94576332"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44c51dde-6903-4d1f-8f86-d044b92f1617",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8d881b1-70fa-4baf-90c3-5e9939637ab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a84cc408-b252-4b7e-aaaf-afe10a0f8ab2",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75e02820-0305-4d16-87e4-ae6b366931e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ace3d59-f093-4f2c-ae95-3c3f0a652e91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a075255-94dd-4c5e-8d3e-24dbc3953b90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f181ec39-9e87-4e86-a37a-9cbe0ffc9395"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e6d7de9-ee38-4326-a9d5-9f738f58d416",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "badb2b82-62b5-4380-9b8e-727c6be005b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33ebbb4c-7afd-4c98-b128-2df5e7d55b1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e78a152-f2fe-4a89-8d7a-45b86c9d6343",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "332877ed-51e5-424b-8136-d249a5d55513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c066ace6-52e7-4025-b976-0cb3a95180a2",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4659ad6e-1800-413c-af7e-ee996fa3a23b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c43d26c-0325-43cb-bbca-158307dea5fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50903d76-fdd9-4306-b1ea-f6c1300beecc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eff1250e-bf55-4e7b-b806-fd6c2ed85157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c016c7f-1abc-4639-a748-cd3232ff6187",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3227421a-c6ec-4f9d-9610-62419499320c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1085ae3c-b436-4b49-ab65-172b9ef45f77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64f2a74f-797b-4ffe-b9ba-e756342aa75b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2273d4da-453c-47a6-9e2c-d53b80e33f64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35c755ec-54d8-4233-af54-cff2e7a5ee3c",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2679ee7-1be3-4456-b8a5-382f5615e339",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59447b00-f542-4d7a-aafa-0d3642aa538e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c046b3fe-624b-4bea-b11a-20c1e263a92a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12ce7415-d750-4dba-9f3b-296e287daf76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe610020-1da8-4cd5-a7f1-388e8910f517",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d40ce656-3d9d-4e81-87fa-e68fe2bd90ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5951a6f0-c14c-4de1-a973-a87c4611fa76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e59f520-9f2f-460b-ad42-cfd0788ec15d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac8c0968-9051-4f30-a3d7-8b5909874654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3779961-765e-42e4-b225-d6a4cccd4a80",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "708c8472-9c17-4c1d-ab00-25ed66207fb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26006913-d34b-454e-9e67-218783d6926a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef23a1c5-b4f6-4eed-9a38-a16a0ba8b671",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea552923-3481-4363-b3ec-45e84b735a94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61a2db60-3461-48cc-8487-e8e8c8fd58f3",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb2a9d61-003c-4914-815e-15384001f451",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8c476b8-e204-4ab5-8c55-0da5b0077bc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a603e7e-92b7-4f4d-b418-ed7f34ddd743",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdbd65db-269f-4366-acde-4721c39c9ce7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "196d02ee-e45b-4059-aa3e-ec50334b8152",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14527e89-e14c-41f7-bdd3-1b462edda63d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd4de5eb-301e-408e-805a-218ec012a753"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0a2284d-9859-4c9a-97c0-c27fcf65f7ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9562dd06-b3c4-4d46-97ea-5ec23b589e87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c2cf633-dea0-4ccb-b2dd-6466d04bec11",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ca186ee-a547-4d63-8e72-552ecd7561cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f6559a6-cf3c-4ce0-b3c6-6912f718b42b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09b5e612-ea0e-46d6-aed3-bd365716bfb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3342c47a-04aa-433f-95a1-e6de49b0910c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29da5ea9-bd67-4b49-b2a2-e85ce521ff41",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f1e4889-1afd-44e0-96cf-792899e94fbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "816b233d-5b6a-48a0-b11b-95dea46e2c23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7476d7b9-306b-48f1-a4a5-03056daf3758",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc4d285e-0292-40f7-bd4e-fb8f63eb0962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fede598-4afd-47ca-bf84-3d0d4c665483",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cef4ab45-79bd-4b66-a485-e6a4c5974c68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44d42507-1a5e-49c3-8b07-70294dfc6e16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b1ebf16-cbf4-4ad5-9853-b53871c03b40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eeea7f12-b5fe-43df-b495-c87381af469a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7f56ab7-6d92-42a0-8259-88c35206e660",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d22f3fa-80c8-4f4f-bcd7-c4a775c39501",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "496ae5b8-7dec-4756-ab1c-ff56d1f77de6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9a15ff3-7e55-461d-b63b-08e32b7fafd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0e1376e-7f35-4f75-9ceb-25fbf3544888"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57ca5b48-1cfa-4a9f-acde-7bb8069dbb33",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6171eb5f-2220-4c6f-b775-0496249fffd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6e8e51b-6781-45eb-95b9-b8defad24093"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aeed1b8-b298-462a-a722-4e1daf093800",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee38445f-f42f-456b-8ece-240965a0689e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9efd6ed-0b94-4263-9772-2d6505faa18c",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b213d02-65e5-40d1-b44e-3441d093ce36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c290d0a6-c7c0-476a-8470-de905db0334a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44df068d-7d99-4082-a1a7-ebdc1810c571",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1e8a8f6-6a91-4548-8fe6-4862daae79cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7ef894c-5cc5-48aa-bfc3-de15ebee0ede",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ba3036e-823f-4346-9697-a107da3d6320",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6c15865-9b0c-408b-814c-f930077c80b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "436793c0-1d47-4a1a-ab03-b310ce3427b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ca07653-5cb0-474e-ae9c-ab9bbbbdc8ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1017f014-8c9a-4752-9249-6a1972ba0629",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fac13b1-9f1a-403c-8a4f-9f2f55fa519f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faed79d7-1692-40b9-881c-4f8d15234b8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eac1e7b-7ddf-419b-a272-c0488ec99140",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f05fb28-6400-4acc-9de5-2b371b721d60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "151c99e0-9b4f-421d-aeca-ce1acf8e8f02",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7072207a-78ca-44dc-b886-30fb8de0af59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f17b49f4-4952-4718-8094-be5dce19cea9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f39f90d-c0a6-4864-ba17-0d17813b8542",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4064ad89-beb4-474d-896d-d92974f10007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df3c9428-755c-4401-b895-03a2fb07fee2",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f662d578-7885-4486-b5e2-9c286f1cf9cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df540e18-390f-4e4b-b032-56e605b75d9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19c148dc-8553-4433-bc95-0c53fd07ebb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4b872c8-b843-419f-986f-c9ee70ae3d4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d20532b1-3cf5-47e4-a5c1-07b1b3204848",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5b8da54-f462-4145-aeeb-0d84b2142593",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02e26e5a-5b9a-4e3d-abcc-7efe9893834c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a450e47c-3330-4867-8791-3b5e6450bb71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f9818d5-05e5-4b3b-b5d2-cc36bfc86ce5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71bcd57a-e17e-405e-abc6-ea6b23d76463",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e48e83c0-1a31-4524-beb8-aa8f2267fbe9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "806702ba-5baa-4575-bb31-0044c2900d20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f14edd40-8dff-49af-9ced-500983353ce0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38b26eef-0929-4316-b471-5c827f369960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69da772f-9458-45cd-8e4c-acc1bbef0193",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a5e628c-fd64-4f63-a8f2-1ed7b28f2dbb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d015bf82-9824-4ccc-9ceb-580a9ad26e28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f244b57d-7b2d-4c54-983b-e8d8cedf3536",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f0c8ee6-47f1-4722-8c6a-ac07446c8125"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c35684ef-b310-4321-aea2-9a371fe067e3",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86b14d65-f19b-44c9-8fe2-b6be05485f16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f191251-b763-4998-9379-293fe634e3aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f9cfa5d-6fca-4e4f-80b9-4b2a7c2adfbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd6109da-b15d-4e04-b9c8-b16a0fd8d285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c3e8393-1bc4-47e0-887a-2ae2e0e55fea",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f439bb9-1411-45fc-9026-3e35b58f3006",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23445063-e4f2-4870-a6e9-29e3cc47ffe5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f6cc758-159e-454f-9168-e5a8f27c8f86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "059bbe94-735a-4171-a71e-329f7c9cd071"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cd84c57-cefd-4b61-8292-aa982647a001",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "304e5908-0a69-474d-8146-f30104796f91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c815e97-e0eb-4d46-9786-574caa8a4864"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "478c58a6-a681-4d21-aee4-64c2668c528b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06348fd6-31d9-496f-8143-f6184c8be764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "992796d3-407d-4143-9852-e49d6a03c88f",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e01a622-75c5-4b09-be7a-9b06f96ca714",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "086fe732-f302-45eb-89bc-da9af3f2adda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ddcc91b-264a-4e20-907e-d973fe300550",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3072e8b1-910e-419e-9b9a-53cc8661f207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b10a0925-dc06-442a-bdfd-7fb666812232",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33d4fd29-b834-40cb-bcda-b9d99edd973e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7912f9f1-df02-4c9b-a8bf-464dc45a03a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81ab5f35-5580-4009-85f1-b89275f0ac9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8d8f66b-559d-47c8-8b2a-34b067d45881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c30957df-e0dc-45d0-9ed8-925d0afbcb87",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "363bb8d7-e380-4955-9da3-e8a0e398c996",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59d8b627-d1eb-4706-a6b0-e3d9101333a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5cec4b4-04f8-4784-825e-500a0ee90573",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69170a8b-aed3-4508-922e-fa0d266dbcfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd93d203-f19f-46bb-a19f-cadff67c160b",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50a34f34-d89c-4179-9995-098dd8f6c659",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "800d6f7f-be2b-4e84-9f64-2a562aea80f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7911084-1174-43e3-af10-74ee8177e482",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fd4f273-fe54-4341-8249-39552e4431e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f27d76a9-827a-4ed5-ba8e-d0c72ef8660c",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53cda739-a21a-4205-8b83-55f892ce7185",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea17b410-0914-4ecc-b7fa-ee7cbac1e79e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55aa9313-bdb1-4af7-8455-61fca794c7ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0802cba-415c-439e-af11-11e97f9c8970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1f887fa-db00-4eab-8c76-14c6a8bce1cd",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b647f149-ff99-4c94-888d-0468f1cd8dd4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dce4db9b-4600-4cbf-b8db-67616cba3e4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "738e4147-1f6a-4f6e-b0e3-12bd04474466",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "912a9400-9eeb-4021-ab5b-de56c6d1a20c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a30a480-19ec-434b-beac-5089b52ca64f",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4eb308e-8202-4bed-97ac-ab4fe3f1a92a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f527b92-22a3-4b0d-9c69-b1cd91dc17ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8d2c3d3-1cb6-411a-b3b7-a3a6bb44dbdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41c01b05-32a7-40ea-b636-2398e2233d0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86eb5f1d-4aaa-475b-bed2-fbcc7e023978",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ba096c6-ef6d-4d37-8193-968c7a3a01c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50102574-3ff5-43c3-b204-d3e7e8315595"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd069975-7115-4d9f-9d31-4721f78acde4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4712cf50-9536-4bae-9bfb-b6e5146438e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b97dfe2-bc27-4fe1-ae09-45878997d604",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63ea926e-cf3d-4ae6-8c98-ca2abf091f35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0da8d11-1658-43b6-9a0f-235c2c637a55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c892707-be24-442c-b5c3-2048ad26153d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "413f78da-342a-4f9e-8a68-f749d6a4aa60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ecf1a57-eaf2-4a5c-a4d6-36261f03e48f",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b41d915-5485-4619-9199-0806f2a3886a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7b6f3a9-94a6-428d-9b2c-828295aca0bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b861274f-bce2-4504-9db9-e0607c7bc5e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68752533-2b43-4d58-8dc0-22ae6f42f776"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbc0aa83-bfce-4b22-8f73-d154d5f968ea",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bd84c58-fa8b-465b-b7e2-4bddf432a9c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f695549-2bed-4c3a-843d-24cb3986f74f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c91651d5-b612-4f28-b685-2154c6b23ce6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e81e5b4-9f84-4e2e-9f09-41332e3138ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc1ba5fd-4b06-4582-bc4e-424b4667fa16",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22fe4ddb-6492-4ab2-8b0d-1d19b727b76d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fcd6751-c930-401d-96d2-26133d7209e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e061fb2-717d-4669-9f4a-cfa377e3ca8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ec94247-463c-4580-847f-91cda1e01696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01be81fa-1e5c-40ce-b154-08e6dd33b4b8",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a283ebba-098a-4f24-9c40-41bb27090d37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9d58b33-1966-407d-b118-434225409406"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e1e56e6-8b3f-46e6-bf80-461bda4686a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22da047f-5e22-437a-9352-8c5cb5964f20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7b94bd6-399a-44ab-a069-c31ab41213af",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6e5ccfb-5ced-48cb-997d-556801332413",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c6bead7-a8c9-4d7a-ac12-5794d75f25bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24d54640-a780-46fe-ac31-c015daebda50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b894fab-08bb-465a-ade0-dc08a09c9e5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76971307-527f-4cbe-a489-92d6b8022cc3",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3215c9f3-8851-46c3-b452-387d7c1659a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfd7cd4f-4e6b-4314-ada8-16039762da71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b083c3f-4509-4155-aa2a-267a5ad897d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5940bef6-a342-4882-bbef-1d9d38c9977e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b22243cf-c2eb-401b-902f-e6d32d9f1c2f",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37f9d959-5dfb-4801-8e88-799dba4789d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99ad1ff2-d01e-49da-9a66-1397809053c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bac3c29-1d07-406b-bb69-893dbbca3b7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc217142-f487-448a-aca9-e0ed61d9c727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "663af888-37e1-4296-ae8c-8fd8ce651345",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98a2eee0-8afd-4e42-bccf-5ffa5e870564",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6012366a-6ad1-4900-9d3e-3f2daeee424b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b491fcf-a410-4ee5-b86c-f7001fe92cb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33292976-48c3-4d5c-bb0f-b78e86bd8c21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbddc59c-3916-40cb-b7a9-4752ccae5ac9",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "045341e4-7eec-4425-b50c-fb1932a332cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b790482-a58c-4b01-8018-8131d4933575"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc82aa57-f580-45a2-9b89-348116e5cc86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3ec056d-4988-465b-9456-8d33b90949ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3464159-18a6-44b8-96e1-1c19489ca257",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "839cfcdd-fcce-4299-973b-91c5dd9ac5fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a26f5a9-78a8-470d-b971-d7a83fa6548a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e2e17b5-46a1-40ee-a107-b61b0af28ad8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e21ec60c-c5ac-47d3-adf2-46e3ab58daab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "032b3179-cfc7-4c0e-9ce0-cbd9c5a23d9a",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3cf8c67-b630-4314-9dab-7146753ae1c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a59c9c9-b881-4d8c-8a5c-a955a5e27a56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d0944ba-bde9-4076-b40f-7365b125c93e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fec047cd-2470-4069-863d-95759193dbbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61ed719d-393e-4076-b590-77c936101a93",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b2ebbd-662a-43c5-ade4-8a1184bbc9ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2555c3a2-db18-4935-bd84-5ec656d265c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a61d744a-78df-45b6-a54e-d0ef497bff69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "584cb13d-01cb-42f4-bfa6-26ff394b92f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e1a9713-41d6-4d90-83e6-239a4373b0a3",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "235cf867-3daf-49d3-8f65-f55162b9874b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fb34825-dd89-4c41-86be-31872e6c2194"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4c48038-10bc-4f29-9590-305afa0d88c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef3a0ce6-3b0a-41f1-8aab-4593750e88ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d17e577-175a-4240-8e35-571eb52e7309",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29f39131-0876-4eed-9035-cf2478d830b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "361bea05-f992-4aec-a88f-8cdb4e4edb10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92d4d5f3-f1ef-4681-ba7e-9d2e2e3f645e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73d2fec8-b666-4e39-8d78-4001df0d4869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b516a221-bc66-4085-b73d-d30c8129bf06",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47d78bcd-447c-4171-a3a4-fa3d1cade45c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c609f2f1-bd4f-4de5-a238-afdb3f01850d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba37248a-a431-4692-9aab-e3a5e9a18c06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "309af1b5-72d0-4b71-aad3-43b0f585e7d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dbb38af-4415-470f-b3a0-25be8d3d7186",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4411fee2-3547-4723-a243-8e532322aef2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e51eaa18-f892-48c0-a317-d0ec37377f83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1698a74d-5574-4aab-9842-1fc7ed917478",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bef6e16-72a5-43c7-8786-d3270857fc76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21f2dd16-8931-49ee-9158-e52d4ae3006e",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca359dbe-20b3-4f0a-b363-1e811faff40a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b3fee6d-fecc-40bd-8aa5-1197de055556"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4528a1d8-27df-4fcf-b1f1-70c844bf3df1",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a800a37-383b-4094-9113-2f775adfb5c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fd0ae90-a5aa-4611-82e6-c5c8c4879413",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "def19579-ebe3-4634-a847-277609a4ded1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cdafbd76-bf7d-40e0-8c56-d4ac4966e622"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "631cc41d-e05a-40b7-962b-19ad488bd364",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6df697c-2661-475a-afea-76cf9b684a16"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a5a0258a-30a1-42b7-8804-edece55914b0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e6cb23d-f861-4c02-b62e-0f61aeffee2b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "821689a0-556a-4949-a3cd-51de41d27421",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bd2366d4-c476-4e17-a05d-770347d2ee64"
                    }
                  }
                ]
              },
              {
                "id": "ee6e7f53-6469-48ae-812c-caa7963f8916",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "73e9ac77-4717-4a12-8728-b7cf7980b5a2",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d03eb630-3d6a-4ae9-9a98-bf1ae56fa799",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "1d44750e-ad5f-4e54-8dbb-02a697819832"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37c9512c-6d31-4eb0-a73f-2aaa21b35fdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d9b9a9db-dbc8-4a18-9ac5-4a2d288f84ca"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "30e9d8f5-f6bf-499c-bdc1-64fa7df0c23a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f46825c9-0384-4cd2-9166-7223176ed6a9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb08212d-a763-4aba-ae94-e930ed291af9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "02f60301-471f-45ce-b384-ef1c7461deec"
                    }
                  }
                ]
              },
              {
                "id": "fd551132-a366-4a04-b8f7-07cbce53745c",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "f97e551f-9e7c-4c84-be8b-50873788d67e",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cfd4284-aab9-4deb-8bec-a812b7c4e491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "b07f8f9c-2179-4e70-893f-2def14ebdc4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9240d2ab-d6b9-4aec-bb34-f3c17b66e68f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "496e90f7-d409-460f-b284-83911e0d8b93"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7f63b09e-58a0-4a33-9fc6-fed54451ab1c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "328d80c1-34b8-46a7-9740-0fe1deadcfbe",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e3456c73-9cea-4fa5-89e1-e16d715c8c92",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e44b9470-0f89-45f5-a074-6df8e41e34b0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "53287f7e-1bf8-41f2-a5da-9bae8bcc0bab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6e5badff-040a-4406-9e5b-b521a29a50b5"
                    }
                  }
                ]
              },
              {
                "id": "0af96ee5-370f-4411-8d7a-901b62fc2394",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8360421b-cf0a-4e85-9527-82534b394111",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3621877b-f8fe-4509-98f0-49b7ae0e4c6a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d6d82820-21fc-43f0-8971-43b74729c244",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "75281499-ba29-4d26-85cb-101c2d9bdbad"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7d649c2d-a8d6-4e63-8937-821c29cbc9aa",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "05cd9bb3-2c8b-4dc1-8874-8b29b06d987a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "21835d28-94de-4c8d-85ea-9c7419636cdd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b1b5950c-28a3-4836-9000-7c1ec93c56b1"
            }
          }
        ]
      },
      {
        "id": "4fe8515b-b849-4d20-ae86-15a6f0dee651",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "6f353033-ab02-4c23-8ba2-fc333bf40f75",
            "name": "Negative Testing",
            "item": [
              {
                "id": "12e8711d-a8ea-4308-8840-fdac5a38bb63",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5ce9c902-a075-47a0-9b0c-07da166ed19a",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f07c19b7-c5b1-4751-9b18-16bfb27713c7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "921508a3-894e-4c14-8228-365d94be5616"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e74bf538-e4f1-41cc-bb4a-f8181123859d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2f4eda0d-dde3-4799-b01e-7083016704f7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ee7b53af-ad3f-49dc-8d9b-d25106f69ba7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e2daf0a4-f77c-4dd9-a2e4-7129857d7104"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9cc895f2-0f6e-4506-9a49-6ad71a2c13e8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bf42de30-9ec7-4a87-8331-bcfc1c50a204"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a753c03c-e0f8-41ba-b676-4b3511421835",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "7b737b24-715f-40bb-a53f-ed3322b5d30d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a5431a54-73cb-4112-a3ad-1c06666692f6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ff57a0f7-f994-4e9f-b9be-9be303e221fb"
            }
          }
        ]
      },
      {
        "id": "f649510c-c27d-4446-a9fa-df775359503c",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "d88901a7-5dd0-44c0-b628-5fdb3d61726c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "08368034-ff8d-4a16-ad7d-73d33edf5362",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f9185f89-05f1-4101-b169-da6bcc13350a",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1dd9ab6-2b58-4be8-a383-63dd296f8c51",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7e970ca1-a54d-450f-a254-dc567b5e719c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a459460-672c-4bd2-8b36-268a6fb67b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "93b520c7-8f12-4b10-b2dc-21436be2293d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1dc4bdbd-7ce4-4d3c-9bb0-595e402b8ace",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "89474bcf-49cf-447c-851a-8609f7eecabc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4462442d-457b-4aee-a21f-9d23911d41a6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "73206e25-205c-4d64-a30b-b5ec61de7b1c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "072507d1-dd48-4e4c-9a8b-35a17a406ae8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0924a8cc-0144-413b-856c-3fec01bf22dc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "66ca7322-5a6c-4e9d-814d-ccd58db733dc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d4e23c43-303e-4185-bf7d-26303aa6ba6f"
            }
          }
        ]
      },
      {
        "id": "21f94ac9-eadb-43c8-9034-3d2fe857ad6c",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "6a1a84e8-ca1f-47fa-b74a-fde72f981ad2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "621bcab5-2340-47bf-aef3-43a86ffa939e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "140e80a8-ca68-4ece-9fe0-d10e0c7e9304",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b692547-7e1a-4cac-830d-71745d7e75cb",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "67b92343-080b-4316-ab32-733ad72d12fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "394c249a-6f65-4c94-abf4-9ae5f9262e3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cc681516-0552-4b5e-90bd-42bf45a9d943"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "63af3bbf-096a-4ee3-934f-bfde46afb58e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7be06d08-2a07-4346-b436-9dde367342a0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "795e0bdd-83ea-419c-a7b4-18f1bb620894",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fe32e27a-b970-43d2-9aab-8257e5feb138"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "333af3e7-4c4a-4218-845b-75e74abf9269",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f05c1c4e-53f3-43a6-80a1-22eb942f7663"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "785f9dc8-86b6-4041-a0c3-b34a69e89e43",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "97bf683f-e27f-4d07-b423-738dda9e014e"
            }
          }
        ]
      },
      {
        "id": "80b3ed08-9aac-4f1f-bec5-42124fbb4e6f",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "df0f3fb1-d674-4341-8375-d3c7139f817e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "282d5947-5562-4a52-be35-41770934f4e3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "163586af-991c-4373-8640-d6003e7d987e",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f89e73a6-afe7-48e4-922d-40172c669af9",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a007f4da-8e13-4390-a63d-6f2d612365e0",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 51
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 180.04225352112678,
      "responseMin": 8,
      "responseMax": 1890,
      "responseSd": 316.1867845462273,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1695169999786,
      "completed": 1695170065515
    },
    "executions": [
      {
        "id": "9f5cc737-941c-4c05-b72a-96f8e439ee91",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "97165827-b976-4467-891e-5e33a6ed95e8",
          "httpRequestId": "8427b576-64ec-45a0-a32d-a74512b08d63"
        },
        "item": {
          "id": "9f5cc737-941c-4c05-b72a-96f8e439ee91",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "57d794bb-99dd-49f8-a8e1-76b5821bbca6",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 0
        }
      },
      {
        "id": "328bcfa5-671e-4ff6-b5a4-7b6f7a6478ce",
        "cursor": {
          "ref": "8b05eea8-e2ee-419f-9447-caa3b65ecafe",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "915a064d-fcd1-4ec9-a64f-c44dab88ecf3"
        },
        "item": {
          "id": "328bcfa5-671e-4ff6-b5a4-7b6f7a6478ce",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "de51ca47-ae8f-4073-bdd8-3d304cb57c0f",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "6646b467-6cf5-487b-ac4f-aa97080815e2",
        "cursor": {
          "ref": "31310774-9608-4607-853a-bfb71323cfb9",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b312c00e-c36f-49d2-a6c2-960be5530b4c"
        },
        "item": {
          "id": "6646b467-6cf5-487b-ac4f-aa97080815e2",
          "name": "did_json"
        },
        "response": {
          "id": "b61305bf-6b7e-4bde-bc86-71a685796016",
          "status": "OK",
          "code": 200,
          "responseTime": 287,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42dc50be-b410-444e-978a-595856cbd631",
        "cursor": {
          "ref": "cf676f39-5113-47b7-915f-5d121e871bb4",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ad801bd2-ec57-4b0a-adff-f257c37e03dd"
        },
        "item": {
          "id": "42dc50be-b410-444e-978a-595856cbd631",
          "name": "did:invalid"
        },
        "response": {
          "id": "99357466-081c-4f76-8af1-4e157858b9b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42dc50be-b410-444e-978a-595856cbd631",
        "cursor": {
          "ref": "cf676f39-5113-47b7-915f-5d121e871bb4",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ad801bd2-ec57-4b0a-adff-f257c37e03dd"
        },
        "item": {
          "id": "42dc50be-b410-444e-978a-595856cbd631",
          "name": "did:invalid"
        },
        "response": {
          "id": "99357466-081c-4f76-8af1-4e157858b9b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3ea47c3-027b-4cee-a059-d63fc55a373b",
        "cursor": {
          "ref": "65eb1b6b-0b04-434d-9ada-a16659f701f2",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "647b5856-7725-4392-9ba8-e133ad410d00"
        },
        "item": {
          "id": "a3ea47c3-027b-4cee-a059-d63fc55a373b",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "60776882-4ec3-45f0-baf9-c3f6c4d24ab5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 146,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cb9f923-94ae-46dd-a155-7771290f61cd",
        "cursor": {
          "ref": "73737457-8545-4822-82d7-392aeae7f32b",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "90ae911e-ddcb-48eb-9c6d-a685e163db84"
        },
        "item": {
          "id": "5cb9f923-94ae-46dd-a155-7771290f61cd",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "019f7d82-6375-4664-8acb-283128e34486",
          "status": "Not Found",
          "code": 404,
          "responseTime": 99,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9c760ce-8edf-4ed9-a318-19b5cdd04a4b",
        "cursor": {
          "ref": "d0b0c983-de24-4d6c-958f-899508808e97",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c8d07a75-e1ae-49c2-848d-7b0b0dc57a14"
        },
        "item": {
          "id": "c9c760ce-8edf-4ed9-a318-19b5cdd04a4b",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "ad1eb312-d4cd-482f-ad45-63391a4d453e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1b78827-79f7-4573-874c-c04824f711ab",
        "cursor": {
          "ref": "b7f4abbe-5960-4144-aa0e-b8fe019747d5",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e3796a35-ab23-40d6-aae9-08c0029635fa"
        },
        "item": {
          "id": "e1b78827-79f7-4573-874c-c04824f711ab",
          "name": "identifiers"
        },
        "response": {
          "id": "9b611806-26d7-4802-89e8-9a3aa8c2085e",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96184ccb-6053-4678-8482-49cb0aa77b68",
        "cursor": {
          "ref": "b80018fe-5889-4f06-9c90-82e714457179",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6fad828d-22d1-43bb-8063-5f563ca0e0e5"
        },
        "item": {
          "id": "96184ccb-6053-4678-8482-49cb0aa77b68",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "38b28a52-6ab4-4df5-98c3-87596f0ac534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03c7a10c-4f8d-4153-b825-afc6d62b8a59",
        "cursor": {
          "ref": "2e9c7bbd-d8e0-40d7-9257-2b2097fa144b",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "7b996cc4-b1db-4448-ab86-d0519661c417"
        },
        "item": {
          "id": "03c7a10c-4f8d-4153-b825-afc6d62b8a59",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "375bf63c-e529-4656-bd11-0ba0c8973ae4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea52a623-10cb-4917-881b-e883521e143a",
        "cursor": {
          "ref": "2253d4be-8a49-478c-aa90-775e20ffb351",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ff674f5c-de0e-4ef1-83c1-21c7e7cde162"
        },
        "item": {
          "id": "ea52a623-10cb-4917-881b-e883521e143a",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "f4b58e6b-f241-46ec-ae45-8c7208d75fc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50d7230c-3bd7-40fa-96ef-17d1073a6a5c",
        "cursor": {
          "ref": "da9b3497-6067-4421-9dab-d9446ef37672",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "6e576b3b-69d9-45cf-85cd-565234c09812"
        },
        "item": {
          "id": "50d7230c-3bd7-40fa-96ef-17d1073a6a5c",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "f8bdd5b6-2d3b-4831-a890-a76ae0ba80aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb0cd093-dfe3-46a5-b601-6150a4e5bf58",
        "cursor": {
          "ref": "b15e3010-1f90-4daf-9f7c-597432b81c07",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "3db62041-0904-4fe7-adb6-e70c8ada31df"
        },
        "item": {
          "id": "cb0cd093-dfe3-46a5-b601-6150a4e5bf58",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "c445b450-919b-4e54-aa9e-6374a6409a23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fb892ca-a359-480b-9b50-b9a17737cb01",
        "cursor": {
          "ref": "4c50cd59-5f19-412c-9156-49a5c9ca40e4",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "416dea75-cd7a-4a87-8357-7084f5de65ef"
        },
        "item": {
          "id": "5fb892ca-a359-480b-9b50-b9a17737cb01",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "326eef4f-815c-44d9-91d8-e23836c53b99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd7008aa-8779-4d45-9552-3547ed8634b6",
        "cursor": {
          "ref": "6017e262-0c0b-45fe-9bf7-1936c0659501",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "58a1486b-1985-4059-9c50-3d3bb95e28ae"
        },
        "item": {
          "id": "fd7008aa-8779-4d45-9552-3547ed8634b6",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "d37799b2-398b-4167-a3dd-e88c6144b6a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b44bdfd6-1081-40ce-ba73-cabd162fe420",
        "cursor": {
          "ref": "654686bc-41fd-4832-8ed2-0c3af65105e2",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "37d9e1ac-2d45-439b-83b0-1dad95493e3c"
        },
        "item": {
          "id": "b44bdfd6-1081-40ce-ba73-cabd162fe420",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "1a649927-7e36-4a8b-ba48-4ad724b9d0e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5e0c2dd-bec8-4236-b4e6-9e4cd0d19e17",
        "cursor": {
          "ref": "f25fd9b8-761f-4965-b4cc-84e0d7b90ecd",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "3d8a6bf2-55df-439d-bb84-fe9d4e0a55d8"
        },
        "item": {
          "id": "f5e0c2dd-bec8-4236-b4e6-9e4cd0d19e17",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "4b71efa4-068e-4b2a-88ea-2f19da803eca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "063a7bc3-8b5c-4dc3-a34e-6bd57b0800d7",
        "cursor": {
          "ref": "7b895145-a519-4ba3-adf3-8e4da3bf01d0",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "816d58f8-7f84-4021-bb46-31d5784c32a9"
        },
        "item": {
          "id": "063a7bc3-8b5c-4dc3-a34e-6bd57b0800d7",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "296a9948-e465-4ede-b16e-b7771c2de8e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cec23adb-bd3a-40b9-8079-57cdba0f71f1",
        "cursor": {
          "ref": "50673484-c926-4906-a166-7dbcdf94853b",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "d5052abe-04ec-4d9e-b0f7-e02dfd236113"
        },
        "item": {
          "id": "cec23adb-bd3a-40b9-8079-57cdba0f71f1",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "484b671e-12ab-4a22-b77c-037b72526524",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b79cdc37-1815-4d8a-8a60-edf2d94c325d",
        "cursor": {
          "ref": "f31df82f-0ec7-4bf7-ac40-c966ef6cbd39",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "8772ecb1-82d7-48b8-bc32-b351bfac4ac2"
        },
        "item": {
          "id": "b79cdc37-1815-4d8a-8a60-edf2d94c325d",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "71958fcc-dabc-4101-9e8e-4500d02f1065",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1456297f-5cf2-43b0-ac7d-d6b8f63c8205",
        "cursor": {
          "ref": "5c043205-2730-48ca-8362-be2d51667caa",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "5fc4c2db-4d39-4433-bb41-a9d6fcb67876"
        },
        "item": {
          "id": "1456297f-5cf2-43b0-ac7d-d6b8f63c8205",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "eb2f6f26-5c12-4b4f-b826-4b8240d89137",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29116295-6012-4d20-bed0-74f2b9413c96",
        "cursor": {
          "ref": "ab47480e-68f7-468f-990c-d7a724536f93",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ff78352c-ad91-4131-aea0-92f00a6cce2f"
        },
        "item": {
          "id": "29116295-6012-4d20-bed0-74f2b9413c96",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "5d641ff2-d9ea-4b64-82e7-8a9f596e86cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fed61e1-cfb2-4630-a263-ed183c2ab73a",
        "cursor": {
          "ref": "c94af3e7-e581-4922-9741-0de38f6aedfd",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "8a5a3a99-72ef-46fc-8b27-b1c70c48588b"
        },
        "item": {
          "id": "6fed61e1-cfb2-4630-a263-ed183c2ab73a",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "65cd8f08-75b6-4aa6-b9c0-75a82170ce71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "765ca3b2-5d29-47cb-a601-36383efcd49e",
        "cursor": {
          "ref": "28123dc2-23ae-487b-88d4-0529e8fd4fe5",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "2d655b86-b1b0-4b93-bcbd-ad06212bed76"
        },
        "item": {
          "id": "765ca3b2-5d29-47cb-a601-36383efcd49e",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "3d89cfd0-b27b-4a43-9278-1e744c23bfdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24494eef-8957-4b4d-88f1-845410813279",
        "cursor": {
          "ref": "10518603-b911-4d2a-9c47-f17112164985",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "2366843a-ae71-49ee-b533-eeba6912d7af"
        },
        "item": {
          "id": "24494eef-8957-4b4d-88f1-845410813279",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "e98d4004-e444-416b-93ab-bebf57b5d028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e287b02-3bbf-49de-a9c3-ce78ea8abcf5",
        "cursor": {
          "ref": "0cba45b3-844d-4b83-adc1-ef0247ba7ede",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e2e0f611-36ca-4810-b9fd-87ea5f426f0f"
        },
        "item": {
          "id": "3e287b02-3bbf-49de-a9c3-ce78ea8abcf5",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "5a122635-2b3e-46c3-a701-7aaa83f78139",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6128d9a7-78d5-40c8-ace8-3ebec1817abd",
        "cursor": {
          "ref": "b1ebf703-1cd0-49f1-81fa-38838289817d",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "dd3f83d8-d1cd-4df0-b5e9-7074cb578117"
        },
        "item": {
          "id": "6128d9a7-78d5-40c8-ace8-3ebec1817abd",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "beed2a20-be02-4abe-a743-a491de150b64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d385d5ed-4549-407b-bab1-168d89cd3c2d",
        "cursor": {
          "ref": "f9a1c2bb-c6ad-4b45-9026-858695a15741",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c3daa75a-283b-4110-a658-16385765dd87"
        },
        "item": {
          "id": "d385d5ed-4549-407b-bab1-168d89cd3c2d",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "af1d2417-514a-4cbc-a64a-e6e60df69a0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96a097c8-684d-4fe9-90b9-bf31b2ffe8ca",
        "cursor": {
          "ref": "767f7c70-20f6-4e7d-9c1c-369b2383a1a9",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "6540dc1d-bd74-4e4d-b1e4-a60146b24c9f"
        },
        "item": {
          "id": "96a097c8-684d-4fe9-90b9-bf31b2ffe8ca",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "4a98c34a-1929-41d6-be45-9dc84f1e2134",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "955ade5a-1204-419e-97fc-c8c0527aff14",
        "cursor": {
          "ref": "e1f06883-9c74-4532-80f2-45c522d00e18",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "aa8e984a-8fa1-457e-af5c-a03cf4793c34"
        },
        "item": {
          "id": "955ade5a-1204-419e-97fc-c8c0527aff14",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "23a20b48-8c62-44cf-908b-fe94ec48adf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fcdc37e-25c7-4889-b7a6-bd75e54238c6",
        "cursor": {
          "ref": "e2ffc686-3884-4c52-a5fd-76881da1008e",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "80b819e9-ce3a-4bd4-ba69-c99e3144d16d"
        },
        "item": {
          "id": "9fcdc37e-25c7-4889-b7a6-bd75e54238c6",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "9afe06f9-1f3a-4b48-be3e-a57b7d9a3fa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f78c839-13b6-4743-969c-270deb94b95b",
        "cursor": {
          "ref": "9dba2e7f-d057-449b-8dc2-b5e5ac92f751",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "c073e0d3-8443-4554-af8c-d88bad065b95"
        },
        "item": {
          "id": "4f78c839-13b6-4743-969c-270deb94b95b",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "67add0fd-7051-4672-83b6-4ce4f5515303",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b86f06cf-79f6-4d09-8506-cdcc9d47bb32",
        "cursor": {
          "ref": "e276a4d5-b7d3-4c77-8945-361dbd14157e",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "5083df76-2e6f-4d9c-8e91-fc26700632cb"
        },
        "item": {
          "id": "b86f06cf-79f6-4d09-8506-cdcc9d47bb32",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "d2e66355-a85b-4dc7-97ce-d6b25b07d844",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cace8f97-9c92-4bd5-9b23-4518ed3d8eaf",
        "cursor": {
          "ref": "76192021-b2c7-46fa-a8da-cafb04fd2236",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "145ef324-1c17-4e3c-8352-2d00c9c0eae9"
        },
        "item": {
          "id": "cace8f97-9c92-4bd5-9b23-4518ed3d8eaf",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "42ecf824-0730-4a67-a14b-da7118a88c1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64faaa63-1f99-4ba1-a533-6412dd27a2cc",
        "cursor": {
          "ref": "f2097f6f-28f1-44e3-9357-0cefb039f409",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "44ae89b5-a8b3-436a-8b19-a8764ed2c641"
        },
        "item": {
          "id": "64faaa63-1f99-4ba1-a533-6412dd27a2cc",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "ed966d5c-9076-4218-ac58-ebdb132ad072",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88345ef2-07f7-46b1-8606-af21db50c09c",
        "cursor": {
          "ref": "3b7e7e1b-0acc-4ba0-a9ef-7acfc24c06a1",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "46ce44be-8042-4aa0-bb13-c085148a0d9e"
        },
        "item": {
          "id": "88345ef2-07f7-46b1-8606-af21db50c09c",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "59727e5e-ae23-4308-90cb-4e0afa8f3736",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26f842a6-e3b2-4dc7-8d6e-31bfd45eb1c8",
        "cursor": {
          "ref": "3a6673a9-6616-4e38-9a76-8aeb9dba4677",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "b9d2b570-a262-4c40-82b5-c49c826334b3"
        },
        "item": {
          "id": "26f842a6-e3b2-4dc7-8d6e-31bfd45eb1c8",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "06226cf6-4d34-4ea7-8345-d95e8f33503b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16758dc5-5354-44e7-9420-bca047ced4d8",
        "cursor": {
          "ref": "a7d53a7b-9ce9-4ad4-ab22-075f6e1ac7c1",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "31337eff-2bb6-4f16-b0ad-7434c93cd3a2"
        },
        "item": {
          "id": "16758dc5-5354-44e7-9420-bca047ced4d8",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "a9612d48-1f2b-403b-a935-489520c73f35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d329b37-596f-4486-baa9-0a2e00730e4d",
        "cursor": {
          "ref": "55f7f51d-67f1-4218-86d1-23917f36d5bf",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "b3530cf5-3d22-4726-806f-4c30cab2bbfb"
        },
        "item": {
          "id": "9d329b37-596f-4486-baa9-0a2e00730e4d",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "37af3bda-0962-4465-bca9-e80e514cb70e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 99,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "1bbda56e-4c86-40ff-8d0a-e540b99b55e3",
        "cursor": {
          "ref": "bb9df232-e9c0-46cd-91d9-8b62c9d36484",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "365dc23b-16af-4097-93a7-d543f9df3558"
        },
        "item": {
          "id": "1bbda56e-4c86-40ff-8d0a-e540b99b55e3",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "a6c51566-0257-4030-8e33-b7b04c82a737",
          "status": "Created",
          "code": 201,
          "responseTime": 1890,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "e4f4449f-3404-4e62-b3d8-ff7212c176ac",
        "cursor": {
          "ref": "4a213198-749c-4090-bea3-7e760b3d51a4",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "cfbdcf47-48ea-4205-8444-baaad5d80236"
        },
        "item": {
          "id": "e4f4449f-3404-4e62-b3d8-ff7212c176ac",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "bcefb5d8-3dd9-4a4b-a9c3-2fe448c8d002",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 95,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "6cecd986-913c-450d-b199-720c77c372d6",
        "cursor": {
          "ref": "a13c4d99-1ea7-4889-ae96-717a150340e3",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "16a83f38-a7ef-49f1-8528-663a4c6440b0"
        },
        "item": {
          "id": "6cecd986-913c-450d-b199-720c77c372d6",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "7f8bef23-270c-4d4d-ad54-67ecbe68fac2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f318982b-de61-49cc-8e2e-480ccfbcd2fd",
        "cursor": {
          "ref": "64823338-84ab-45d7-823b-9635ad21039c",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f0deb14c-24da-430c-9744-da07528f74a9"
        },
        "item": {
          "id": "f318982b-de61-49cc-8e2e-480ccfbcd2fd",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "f32f7279-4a52-45f3-8154-8030798b4481",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 94,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "0d2b383c-d873-4d24-94c4-7da2c59f7f41",
        "cursor": {
          "ref": "e64ad504-5493-4f6e-95c4-af05085f2007",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ae56f628-9e95-4481-b5fb-a581af6706bd"
        },
        "item": {
          "id": "0d2b383c-d873-4d24-94c4-7da2c59f7f41",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "fe0f1c15-38d5-43b0-9dce-5f5943ad02f1",
          "status": "Created",
          "code": 201,
          "responseTime": 1436,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "ca5ff719-c444-44ba-bfa8-4eedaabf8821",
        "cursor": {
          "ref": "d4e401d7-f210-448b-8229-6390a0f30774",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "6cfde43e-13b3-4629-9279-564511c5a13f"
        },
        "item": {
          "id": "ca5ff719-c444-44ba-bfa8-4eedaabf8821",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "da222a70-4243-405b-a594-ac504daefea2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 99,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "6092d09b-1c1b-4699-8dbb-d34203c2f044",
        "cursor": {
          "ref": "ccad3dda-78e3-431f-9add-80e5dc71c1d2",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "d634fb06-cbe8-4a2b-800e-f571be742a07"
        },
        "item": {
          "id": "6092d09b-1c1b-4699-8dbb-d34203c2f044",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "fe6e652d-1adb-4c84-aebd-0c8dbbf47aa4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1224,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "53149384-bd70-4f3f-8352-b510475b14f6",
        "cursor": {
          "ref": "f52f5287-ec09-4edc-95c0-6c20fe100bf7",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "e498c8bd-1d42-434f-a8a6-d06ac0e00dda"
        },
        "item": {
          "id": "53149384-bd70-4f3f-8352-b510475b14f6",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "6d1579c0-821a-4e42-8ac2-7ecd0ba65f41",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 98,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "0b87b9f8-8fbc-4d0f-9ed8-d175f90623fe",
        "cursor": {
          "ref": "c034611f-35ad-4d3d-9861-71614010a969",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "0bcc192c-41b8-463f-b88f-af20e42bd881"
        },
        "item": {
          "id": "0b87b9f8-8fbc-4d0f-9ed8-d175f90623fe",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "c92a3144-9880-4faf-90bc-cf9095a0030c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 99,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "1b2f2257-e7c5-4c09-aa58-55abd5fc9b30",
        "cursor": {
          "ref": "86ce879a-0bf2-4d0d-bf4b-f0fd4dfeced2",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "33182e8f-f934-4c8a-afdb-719f71be2809"
        },
        "item": {
          "id": "1b2f2257-e7c5-4c09-aa58-55abd5fc9b30",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "1e75644b-06d2-4675-8639-d018b80fc511",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 96,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "896aeebe-b5ef-4032-8498-344d9af6e4c2",
        "cursor": {
          "ref": "a2bd0445-d5db-4159-a3c0-99d70036fd6a",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "7fe891fc-22c1-4c85-aaaa-05c767881d67"
        },
        "item": {
          "id": "896aeebe-b5ef-4032-8498-344d9af6e4c2",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "1365e23e-a370-467e-8489-5cb4e5ba4709",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 106,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "2d08c4bd-0729-45ab-9dfa-784cdda1a1ba",
        "cursor": {
          "ref": "065100f7-39c4-485d-904d-d73d51091e8d",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "045360e4-2a4d-4d40-a700-cf4bea97081c"
        },
        "item": {
          "id": "2d08c4bd-0729-45ab-9dfa-784cdda1a1ba",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "932a8349-93a8-42ef-83b8-d11173f56651",
          "status": "Created",
          "code": 201,
          "responseTime": 1451,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "b09d6fcf-3125-4c07-9b61-24488ad55a55",
        "cursor": {
          "ref": "84fb4438-b7b1-4169-9a08-c0e3f968877b",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "70fa0623-6b0c-4518-99d1-a8958eede51e"
        },
        "item": {
          "id": "b09d6fcf-3125-4c07-9b61-24488ad55a55",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "7db29246-dd70-4a2f-8f35-1adab89e633f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9d55dc9-0c7e-4c91-9df8-0218a8828cb6",
        "cursor": {
          "ref": "35068372-2b61-4a19-8211-aec1b258bf0d",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "04cd9b29-5b50-43d5-8633-2e0fadd3a5ca"
        },
        "item": {
          "id": "c9d55dc9-0c7e-4c91-9df8-0218a8828cb6",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "08ea58c6-0931-48ca-9cd2-a3b901bde73e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6dc5d3c-7459-4000-96d7-363afb0ac757",
        "cursor": {
          "ref": "1da03ad5-2ad5-4e9c-9865-e0dce8a172e9",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "4d830f07-95e7-46a1-968a-47bda1cf5b46"
        },
        "item": {
          "id": "b6dc5d3c-7459-4000-96d7-363afb0ac757",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "969df4e6-83b3-44cb-87a2-7b10bad0d53b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff87b45a-e14f-49d2-b3f6-7dbd44f6abad",
        "cursor": {
          "ref": "f7db1152-93c0-4d63-8ed3-5d8b97ec03bc",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "32e2f0ea-ad66-4720-837d-9d4f73b16e82"
        },
        "item": {
          "id": "ff87b45a-e14f-49d2-b3f6-7dbd44f6abad",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "0c920293-5d70-430d-9e50-6cfe3f66201b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9a12519-65d2-42d3-8fe3-5d090c7805ac",
        "cursor": {
          "ref": "dce71b9c-4cd6-4d67-af20-d3c033984d1e",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f2b9cb36-6e75-4a97-890b-547b394ab168"
        },
        "item": {
          "id": "b9a12519-65d2-42d3-8fe3-5d090c7805ac",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "ae471d53-a596-408b-a09d-8fdc4ecea82a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc3b4c51-e8d9-4a35-bdc6-412bfb559115",
        "cursor": {
          "ref": "79ec8d17-6cab-4207-ba71-ffc2b310672c",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "58e1547c-e325-401f-b953-62f30b2fbd51"
        },
        "item": {
          "id": "fc3b4c51-e8d9-4a35-bdc6-412bfb559115",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "6eca5d7f-f691-4977-86af-77f2b5884f04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2cac559-148c-4cb1-9b2a-5c265ff965c5",
        "cursor": {
          "ref": "d039a406-55cc-4f8c-bff4-5423a532a648",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ac5c0252-e033-4bb2-a505-820e580b0cb6"
        },
        "item": {
          "id": "c2cac559-148c-4cb1-9b2a-5c265ff965c5",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "c0a8fe18-6b5b-4be7-ad33-f6cdd652be45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27adac24-e666-458c-884b-0f417c4fa438",
        "cursor": {
          "ref": "1284c8ee-7358-4155-9d3b-61dcf453fe94",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "7b5a8b83-9a90-4ce1-b25f-9d662344c2bc"
        },
        "item": {
          "id": "27adac24-e666-458c-884b-0f417c4fa438",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "62512e9c-98eb-4e4a-ba35-4a91c649ce58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04b3a2e4-fc69-4360-a9fe-8a02e861ce52",
        "cursor": {
          "ref": "6c37573c-9d84-4852-a94e-1e0ef827cb81",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "40efbe02-406b-4bb7-8647-8eb7e8ef952e"
        },
        "item": {
          "id": "04b3a2e4-fc69-4360-a9fe-8a02e861ce52",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "99f7318b-ba9e-445d-a718-288e53f7ae5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41cc5650-29f8-4f2a-8f0c-59934314cd57",
        "cursor": {
          "ref": "2263aa48-d819-4c61-8c11-b2b4ba9dc51f",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "87df813b-7efe-44f2-8ca9-51c352b71e89"
        },
        "item": {
          "id": "41cc5650-29f8-4f2a-8f0c-59934314cd57",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "6c75fb7e-9c83-40e9-9596-bc52109246aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "833283ca-2adc-4f75-b06d-3298260ec2c0",
        "cursor": {
          "ref": "c74c7ee0-0530-467d-b5ea-defe7638e944",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "65d91bec-e4a4-45ef-8ea9-11ee1f48c3f1"
        },
        "item": {
          "id": "833283ca-2adc-4f75-b06d-3298260ec2c0",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "d966584c-f6a2-4465-a1bd-ddb3c5a60ad7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b39e1c09-cfe1-46db-937b-209b76a6006a",
        "cursor": {
          "ref": "2e0ebc58-90c9-454a-9b74-ed3fa3d3490b",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "0ad11ba5-df69-434f-8762-6f6d76149c17"
        },
        "item": {
          "id": "b39e1c09-cfe1-46db-937b-209b76a6006a",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "da46f6e4-0ff8-451f-af01-b7943a3c68df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51485477-5e6b-4308-ac0d-07ad2e546084",
        "cursor": {
          "ref": "08d50b94-d3f3-4846-b581-3556fbb15340",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "61952d2d-c42e-447a-8cfc-45e52f9ba1f0"
        },
        "item": {
          "id": "51485477-5e6b-4308-ac0d-07ad2e546084",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "f6c34f3e-3c5b-46c8-aa32-a7d0b12088c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75cd3f4b-ff65-4a30-aef6-d9a6b43d8ac5",
        "cursor": {
          "ref": "436b3276-bf5f-4dc5-a1c0-31fc90d20b90",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "88881388-d013-4d27-b64b-336910f31377"
        },
        "item": {
          "id": "75cd3f4b-ff65-4a30-aef6-d9a6b43d8ac5",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "85ec0dc9-cc26-435a-bd52-79685b9e805c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1180,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "d9af32cd-9dea-4b96-b011-ebafbbae297d",
        "cursor": {
          "ref": "9f46869d-fa41-4eed-bd20-f3241a6c0aef",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "6a988360-b215-467b-ab1c-ab3eb38a22a7"
        },
        "item": {
          "id": "d9af32cd-9dea-4b96-b011-ebafbbae297d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "36c811ed-a4cc-47b4-b422-ccfa24232435",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1186,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "0d1dfeae-be76-4227-9bf7-2c3290ce4101",
        "cursor": {
          "ref": "4b148c0b-500a-4a82-8e2a-17876b5634c2",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "d6c8f38a-221f-4bd2-9e8d-5eb1f01254a4"
        },
        "item": {
          "id": "0d1dfeae-be76-4227-9bf7-2c3290ce4101",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "b39289b5-013f-4d2f-accf-19310c633632",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 95,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "8390e30c-89f4-4c9c-8955-3fb2ce57ff09",
        "cursor": {
          "ref": "3ae445b0-11e8-4b53-bb98-049789252d0b",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "b1c534f6-64a8-4dbe-afa7-d1df435e3332"
        },
        "item": {
          "id": "8390e30c-89f4-4c9c-8955-3fb2ce57ff09",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "b9e6f468-fc6a-482a-a101-17696f50dfdd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1203,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "b70d37e5-92ea-4d6f-bd44-476948b54e0d",
        "cursor": {
          "ref": "0666c789-292a-455e-9254-75a9b6d2407a",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "7170eb1d-fb36-47ec-8bf8-a90e50d2274c"
        },
        "item": {
          "id": "b70d37e5-92ea-4d6f-bd44-476948b54e0d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "f8c04cda-6957-470d-8db8-3342b245a0dc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 95,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "42c3fa1c-a103-464b-892b-2ff47b70363d",
        "cursor": {
          "ref": "09889511-7aef-44e3-bf7f-0825dc79f7a9",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "65a58a90-c9a3-4367-9c6c-a6024d060f3f"
        },
        "item": {
          "id": "42c3fa1c-a103-464b-892b-2ff47b70363d",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "2e9afbb9-d162-4679-90ec-29b8459119de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a37cf5c7-287e-4156-91fd-2352db325fca",
        "cursor": {
          "ref": "95c6bcd1-5d05-4715-9a79-4842ad542eb4",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "0057ae03-189c-4e70-95e4-d9413852d9d8"
        },
        "item": {
          "id": "a37cf5c7-287e-4156-91fd-2352db325fca",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "e0e2e3b1-10c3-464b-90de-83fd8e5ad1ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a845a70-8244-4c86-ae53-2c472e9eec64",
        "cursor": {
          "ref": "6d03de1a-770a-41a1-a08e-2042d333456b",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "66b4a5c5-82fa-4531-82da-5e2d1e61b016"
        },
        "item": {
          "id": "1a845a70-8244-4c86-ae53-2c472e9eec64",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "1d953a3b-d1b0-4300-ab5e-2d0fbbcc39d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3bf691d-a6a0-4bda-a97a-0f059816c342",
        "cursor": {
          "ref": "ae66b1f6-95d6-4eda-ab8f-2a2922816dda",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "2bee2ba6-cea6-4fe7-8943-cd9bc1bfa884"
        },
        "item": {
          "id": "a3bf691d-a6a0-4bda-a97a-0f059816c342",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "48724852-c9fd-41c4-8fa8-4dbbc3ce8cf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b62e90c6-2941-4166-beac-5a85450bdfb5",
        "cursor": {
          "ref": "31dc3f48-e998-4f34-b878-c77ae5f422b1",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "0f85407d-d740-4ceb-a703-c7d9294d1db6"
        },
        "item": {
          "id": "b62e90c6-2941-4166-beac-5a85450bdfb5",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "13b81e22-bc10-4837-aef3-08a600cf5f86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53ff0c03-36f1-4946-8593-867d8fecff08",
        "cursor": {
          "ref": "1e24eae6-baad-4875-a908-cc615b899129",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "db09a498-7f15-4c7f-98ec-4e6ff04b44c7"
        },
        "item": {
          "id": "53ff0c03-36f1-4946-8593-867d8fecff08",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "b353daf9-f8e4-4787-a2e4-b819c0346802",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9efe0364-6e14-42cf-b2f3-7a9aeeca7ed2",
        "cursor": {
          "ref": "18624f25-5fee-46b4-a084-7cc1443feab6",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "9e8c2722-120e-4c4b-ab27-3a40488d4910"
        },
        "item": {
          "id": "9efe0364-6e14-42cf-b2f3-7a9aeeca7ed2",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "68ae3caa-e297-496e-9a5f-19ffad7f4a7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6da859dd-e3ad-4ce4-9b18-ed6ad48d268f",
        "cursor": {
          "ref": "f08dfc11-9ebf-48a9-b3b4-fb3e9277be57",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "866ebf16-1b64-4b06-84a5-4bb97b109d49"
        },
        "item": {
          "id": "6da859dd-e3ad-4ce4-9b18-ed6ad48d268f",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "e4364035-92f5-41a2-aca7-2273d4b5e120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8a91e95-6dea-4329-9258-f413d74fe1cd",
        "cursor": {
          "ref": "43f50c46-035f-4b24-a1f9-e74c96291a2d",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "607f3a1f-42a6-43b3-a3cf-3e62c634ddae"
        },
        "item": {
          "id": "f8a91e95-6dea-4329-9258-f413d74fe1cd",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "896c5b16-c754-42c1-a57e-9098fe0d14e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56f0a645-6540-44e4-a590-865e86d061f7",
        "cursor": {
          "ref": "965523a6-e3ec-4cc7-b9e3-3d0a5acbf391",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "2b79b0b1-4dd1-4814-ada0-7079431d8a29"
        },
        "item": {
          "id": "56f0a645-6540-44e4-a590-865e86d061f7",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "481cafdf-c368-4eff-b60b-2b71c832f35b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abb73df0-e88d-49f8-a936-95e133862f37",
        "cursor": {
          "ref": "ecc56afd-9d9a-4540-8533-7a0a583a93e4",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "c21412cc-858b-435f-a2b4-9de5a18fa0e4"
        },
        "item": {
          "id": "abb73df0-e88d-49f8-a936-95e133862f37",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "28d50858-2806-4fd1-86ee-0de0f372a340",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9066482b-c3cb-4950-82d8-6ec2f8ce285e",
        "cursor": {
          "ref": "bcdcf262-3721-42fc-ab4c-87bc287c824d",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "ad5b11c5-c06b-403b-9dff-4ce687f7026c"
        },
        "item": {
          "id": "9066482b-c3cb-4950-82d8-6ec2f8ce285e",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "25c05504-d48e-431f-85da-17ebe920c530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19541b4c-5675-4ca0-9449-151139296481",
        "cursor": {
          "ref": "6a0c1035-3edf-46be-a717-a3a7e07f5af9",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "e4ab33ac-ebc0-42e0-93dd-285358c8c76a"
        },
        "item": {
          "id": "19541b4c-5675-4ca0-9449-151139296481",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "47358c14-8f32-4a1c-9b16-33defb98f3ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "089e564b-6db0-4d16-a94c-a086aa3500d0",
        "cursor": {
          "ref": "729d934d-f022-48ba-9012-32b063a4c3fb",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "548499c6-6ead-4fb5-90c5-2dac90c98847"
        },
        "item": {
          "id": "089e564b-6db0-4d16-a94c-a086aa3500d0",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "18768c7c-5469-49f0-8c4d-c19984f2cd56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69e81890-92cd-4eaa-b203-3307371b8d50",
        "cursor": {
          "ref": "aee79a95-3b9b-4bf1-88d1-4b0d89387f1b",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "ecff299c-6bc8-41df-8bb0-7bc05f364d56"
        },
        "item": {
          "id": "69e81890-92cd-4eaa-b203-3307371b8d50",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "874e96bf-613c-4e17-a6e7-a2121194c242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31be63c7-9d31-4369-9179-eb022dbec006",
        "cursor": {
          "ref": "192c68a7-2381-4216-8810-b617c1eeda60",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "5e067249-7708-425b-97bc-6b93ea891b7f"
        },
        "item": {
          "id": "31be63c7-9d31-4369-9179-eb022dbec006",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "0833f529-1a99-45aa-a49b-82ddb3f83c20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e1793ff-e678-457c-a805-a38af3471390",
        "cursor": {
          "ref": "8acec9a3-7492-4e00-9d71-ee2512251f34",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b9b16e5c-ef8c-4bf1-9b41-c665d55909ec"
        },
        "item": {
          "id": "4e1793ff-e678-457c-a805-a38af3471390",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "bbc2a58e-1497-48e9-885c-46ea234507c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7cbf615-6ba5-43a5-997f-6f555fc710a3",
        "cursor": {
          "ref": "7d2c91cd-50ec-4210-ae3a-d4c281e55381",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "0bc3ad12-41c8-4680-90df-b8ddd8478882"
        },
        "item": {
          "id": "c7cbf615-6ba5-43a5-997f-6f555fc710a3",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "6fbdced2-7046-4d76-93e1-8998b7ab7da2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52f11736-1cad-4453-a4ff-af02578bf2fb",
        "cursor": {
          "ref": "fc6c5ee6-3244-42b2-827d-a914bd340054",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "6653dbef-99cd-460b-ac9f-73f30cdeffc0"
        },
        "item": {
          "id": "52f11736-1cad-4453-a4ff-af02578bf2fb",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "7b6404b3-f1d5-413f-a9b5-0881a149c002",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44be11de-d1aa-4fef-8983-4e269b4b83d9",
        "cursor": {
          "ref": "80ad1af9-4ef3-4f41-8005-5a3f6629ff7e",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "9c5098dc-1a59-4534-aeaf-1a8245539898"
        },
        "item": {
          "id": "44be11de-d1aa-4fef-8983-4e269b4b83d9",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "094709f4-4f58-4530-9666-2ad6d4b3db0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "582c3f84-b23e-428f-8de4-2190cafee7b1",
        "cursor": {
          "ref": "54295c00-bd4c-4b30-88cb-bcf55cb7d521",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "831353df-f391-4f9d-962b-8d1a83b376b9"
        },
        "item": {
          "id": "582c3f84-b23e-428f-8de4-2190cafee7b1",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "cd922ac3-b56e-4b3e-af43-3ca6e84033fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a29f4219-db7c-42b6-a6cf-c4621adeb4de",
        "cursor": {
          "ref": "fe571cfa-3576-484b-bba8-c0e517becfd9",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "05d26e42-08f0-42ee-856e-6920c71f3344"
        },
        "item": {
          "id": "a29f4219-db7c-42b6-a6cf-c4621adeb4de",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "0c2f138a-d627-419d-92ae-671bcdb573e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4bfc4a9-760f-4952-adb8-83595daae14c",
        "cursor": {
          "ref": "09a43deb-33a1-4801-8f6d-f2a659019402",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "c8eeedd2-64eb-438a-9b0c-a723b102c449"
        },
        "item": {
          "id": "d4bfc4a9-760f-4952-adb8-83595daae14c",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "e0af5977-666c-4259-80ae-53b3faf6101d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a6e0fa8-235e-4ca3-b0f5-69331a43e7f9",
        "cursor": {
          "ref": "091ef395-d034-4403-b244-9c6cce1091c1",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "55cd62be-00fb-4a35-b248-7f957c7cbf85"
        },
        "item": {
          "id": "7a6e0fa8-235e-4ca3-b0f5-69331a43e7f9",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "b1eb2bf5-c276-4632-beca-1879873b4339",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a72efdc2-7465-4119-9900-21c368e00470",
        "cursor": {
          "ref": "2c82445b-288e-472b-88e1-08b271924e38",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "0721cbd0-5b67-4872-880a-dbb781060088"
        },
        "item": {
          "id": "a72efdc2-7465-4119-9900-21c368e00470",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "29dfe8b1-cffb-4104-956d-84c679f5b0fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4260cccb-9edd-4fca-b088-7aa40efe55c2",
        "cursor": {
          "ref": "00963c94-c93b-4632-9b1a-a69a466aaefb",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "04758593-386d-4cbb-b88d-e8b0d75329df"
        },
        "item": {
          "id": "4260cccb-9edd-4fca-b088-7aa40efe55c2",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "51fb8f96-83de-4852-9802-7815888e7c7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99f66156-a696-4647-9623-a7449e8cbc32",
        "cursor": {
          "ref": "a1c85ad7-89b8-41b2-8b06-1c65efdd88af",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "782fd496-b2a6-457e-bd3d-4706f8afcb2b"
        },
        "item": {
          "id": "99f66156-a696-4647-9623-a7449e8cbc32",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "61d8cbac-1245-40c9-8804-935e5134df78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8aa08de-0031-4244-a3f3-772414e955dc",
        "cursor": {
          "ref": "b6d59ba2-6616-4b45-bafc-e56b6b860701",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "196dbb9b-0716-468a-8c5c-95258edca0cc"
        },
        "item": {
          "id": "a8aa08de-0031-4244-a3f3-772414e955dc",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "e3de6e54-4a04-4f88-b19e-7f072a2989ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c39977e4-7eb0-4dfe-9015-30cb5083a8c5",
        "cursor": {
          "ref": "aba701e7-05bf-4e76-9e3e-be5937f8edf1",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "e73123eb-2bc8-4ad4-adab-900032d87f8b"
        },
        "item": {
          "id": "c39977e4-7eb0-4dfe-9015-30cb5083a8c5",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "8f0f1956-c3ba-465b-8be3-11785402d01b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56b80798-e53e-4d3d-a1f7-12381a937f8a",
        "cursor": {
          "ref": "581c8ef5-2b37-4aae-8c43-3e574c6feea1",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "b630af69-34f6-4930-b290-82597693f374"
        },
        "item": {
          "id": "56b80798-e53e-4d3d-a1f7-12381a937f8a",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "9e8595b3-fbc5-42b0-ba32-6fcb7a9136c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b05eff3-e1e1-4a72-8119-9ebb81c56638",
        "cursor": {
          "ref": "0ba0d46b-32ba-4229-88b9-ce868032d2d9",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "cbb8cb20-41b5-4db6-a329-ccee2efa51cb"
        },
        "item": {
          "id": "5b05eff3-e1e1-4a72-8119-9ebb81c56638",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "eba27d2f-3f66-46bf-ae10-6d9151b150a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e206010-5047-4b90-b8d5-86ea47c8757f",
        "cursor": {
          "ref": "8f4ad1c9-81af-49ea-995d-30dbb4e02214",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "41138e5a-5008-4e8a-85e2-1a2ffa420d3d"
        },
        "item": {
          "id": "0e206010-5047-4b90-b8d5-86ea47c8757f",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "3020113c-e1ed-4b27-9244-8e46ad62b1fc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9477bc5d-efaa-4eea-9ebc-b20b3daa69f6",
        "cursor": {
          "ref": "15ba8a75-c9c6-4a7b-9415-3747fb278b46",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "23ea8b7d-f43a-4aed-97d2-97be6a276c85"
        },
        "item": {
          "id": "9477bc5d-efaa-4eea-9ebc-b20b3daa69f6",
          "name": "credentials_issue"
        },
        "response": {
          "id": "00b65315-abbd-4dd5-9fd6-078210b02bfc",
          "status": "Created",
          "code": 201,
          "responseTime": 1583,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee8f642f-3976-4573-9827-d9de85ddaa3f",
        "cursor": {
          "ref": "a5eade59-91cc-4367-8c57-081993b39d33",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "f03ce8e1-46e6-40e8-b1fe-2cc3b6b843fd"
        },
        "item": {
          "id": "ee8f642f-3976-4573-9827-d9de85ddaa3f",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "d6e075a3-e647-45b5-a52a-2012790a380b",
          "status": "Created",
          "code": 201,
          "responseTime": 1449,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ee4f708-b8ac-407a-a445-0c663fc95b37",
        "cursor": {
          "ref": "a771ffac-bb1b-42ac-bf9e-93dfc18aaa88",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "72b78d34-4ed4-4cc9-93e0-ea88cdf3155f"
        },
        "item": {
          "id": "7ee4f708-b8ac-407a-a445-0c663fc95b37",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "38f9a5ac-fe35-4dc4-a2f7-4b9117f4e2b2",
          "status": "Created",
          "code": 201,
          "responseTime": 1456,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "83e5ae20-f1bf-4be5-be3d-95d50e990717",
        "cursor": {
          "ref": "982fe54a-4ee9-4b42-bd52-93fb7293d822",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "4820cac3-9fc2-4ad6-ace2-0b9d21a6c01d"
        },
        "item": {
          "id": "83e5ae20-f1bf-4be5-be3d-95d50e990717",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "05fd5907-5666-4148-9a7e-2fe9136221d4",
          "status": "Created",
          "code": 201,
          "responseTime": 1455,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "340de574-040d-43a6-a83e-39c0416787ca",
        "cursor": {
          "ref": "d383eb4d-cbe6-4094-a271-ad62919d76e9",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "8c32134a-4491-4cd3-a1d7-81f755f5e46c"
        },
        "item": {
          "id": "340de574-040d-43a6-a83e-39c0416787ca",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "048255b6-2d6f-44de-a0f0-6eafbf71aa7e",
          "status": "Created",
          "code": 201,
          "responseTime": 1467,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "4636046c-051f-49bb-a96d-9204c73c515c",
        "cursor": {
          "ref": "703bce5f-ae1d-4dfc-b51c-a4c4646cbdfe",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "e61aaa64-31b6-4eba-b18b-8f91b1d4b951"
        },
        "item": {
          "id": "4636046c-051f-49bb-a96d-9204c73c515c",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "b52d112b-5869-42ba-be15-85068a9743ac",
          "status": "Created",
          "code": 201,
          "responseTime": 1462,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77d0918d-dcdd-4ba9-a81c-74a7e874c582",
        "cursor": {
          "ref": "f450e3ba-9a9c-4da9-9d17-34a7c87db8d4",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "b9ab5bd4-9a2a-4462-8baa-8526015e440b"
        },
        "item": {
          "id": "77d0918d-dcdd-4ba9-a81c-74a7e874c582",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1c8c2f72-a740-442c-93d1-1d8cbd6b9341",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c647ea46-59a2-4bb4-8a35-609caaf0e65a",
        "cursor": {
          "ref": "4ea88acd-c8f6-4025-bf6c-cfa630c117f4",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "5596b276-1e57-42f5-bc1c-b31e5c06ab2e"
        },
        "item": {
          "id": "c647ea46-59a2-4bb4-8a35-609caaf0e65a",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f41d2240-c66e-47b1-834d-4ef27250f224",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06f74ed4-5f74-4d50-9bec-b5f9cdf29e93",
        "cursor": {
          "ref": "b26c053f-e608-4ed8-b8b3-012dab6d84c3",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "eeb820d8-2d62-4d7f-9b88-1db52ec342c8"
        },
        "item": {
          "id": "06f74ed4-5f74-4d50-9bec-b5f9cdf29e93",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "6135b336-57ba-436e-871e-dc5aa541202c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e468530-bbc1-44b9-8dd3-7ecad68d058b",
        "cursor": {
          "ref": "bc8196cd-bb64-4e37-8259-46aa1ca3360f",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "2ff535d0-1784-4cbd-a0c9-3e874250994c"
        },
        "item": {
          "id": "9e468530-bbc1-44b9-8dd3-7ecad68d058b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "2c81ba7a-dc3b-4c00-abf7-fc34d3bb8ac9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91ae5ed2-32bb-49d3-a1de-882636c36f70",
        "cursor": {
          "ref": "6b2d6043-7a82-48bb-838a-50565c541479",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a0fe2e76-e56b-4d61-ad62-00c596df033f"
        },
        "item": {
          "id": "91ae5ed2-32bb-49d3-a1de-882636c36f70",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "976c0793-92af-4ca0-b705-fbd1935a2255",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c19a7ce-1652-475b-b0ce-379d80b3ca89",
        "cursor": {
          "ref": "f0e08807-d02a-452c-85f5-98dfa7de430a",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "de4fbff3-ac65-409a-8583-9755ebee4cef"
        },
        "item": {
          "id": "6c19a7ce-1652-475b-b0ce-379d80b3ca89",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "76609795-4a51-47fe-9acd-4d24bc919a17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e52ff9bf-a10b-4685-a500-05c08afec204",
        "cursor": {
          "ref": "9667911e-be15-4d2f-9056-fd7a4105b954",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "e8d28edc-9128-40c8-bb9d-bb089cab8034"
        },
        "item": {
          "id": "e52ff9bf-a10b-4685-a500-05c08afec204",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "47f6c11d-6028-4aab-af43-0fb2a0fe4bcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2452e07e-ac5a-4904-b887-969b49d1ac5e",
        "cursor": {
          "ref": "faefe38c-c6ce-40aa-b4ca-af614878c456",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "5fc6aa9a-dcf0-4649-892c-36f14b063d81"
        },
        "item": {
          "id": "2452e07e-ac5a-4904-b887-969b49d1ac5e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "3d3987f8-773c-498b-8af2-0cf4a25a3880",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86cc07c2-0af6-462f-a649-b80ed11c30ea",
        "cursor": {
          "ref": "336a4773-b904-4ea9-8ebf-c47c64c2bf6d",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "6173ea5f-f566-41cc-b8e5-b6cb0666ecf6"
        },
        "item": {
          "id": "86cc07c2-0af6-462f-a649-b80ed11c30ea",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "a6b8b6a2-6758-4071-8b23-4e841a2cc45b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "360a021e-fd0d-4543-85e3-899381b3a4ef",
        "cursor": {
          "ref": "c681d1ad-7970-4f64-ad68-56ab833c6e28",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "0dc5b406-5853-472e-8a48-3fa3e90373bb"
        },
        "item": {
          "id": "360a021e-fd0d-4543-85e3-899381b3a4ef",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b9ee79eb-2c0d-4c16-9f1e-0a6c565cc332",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5757d05a-470d-46cb-ade7-2cc34b169e93",
        "cursor": {
          "ref": "15c06d34-3a15-4662-99b7-9b7b2c6cf712",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "ccdcc6f6-6706-4579-b43e-75be81663133"
        },
        "item": {
          "id": "5757d05a-470d-46cb-ade7-2cc34b169e93",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "d48dcbaf-f9a0-4e31-bbbe-f39e1ed282d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8f7b378-ee56-45a5-be71-55472f62e33d",
        "cursor": {
          "ref": "91d510e9-f4a9-4edd-b137-ec0fdc249717",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "22340019-586b-4091-94aa-c2d1285167cc"
        },
        "item": {
          "id": "a8f7b378-ee56-45a5-be71-55472f62e33d",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "8a9282c5-5e46-48d7-87f5-a58850e1f983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2613a49b-f6c6-47b6-b90c-133488b23911",
        "cursor": {
          "ref": "76185148-a28b-4004-be34-74fdab6e01c7",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "d74ce1ec-0d11-43ac-a856-d88f81b10cd8"
        },
        "item": {
          "id": "2613a49b-f6c6-47b6-b90c-133488b23911",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "febb13fd-468f-4a21-9efc-314288528ff1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "037f92b5-a3e0-445b-ae13-b611e33b1a82",
        "cursor": {
          "ref": "52b1b1e3-b417-46cf-b55f-864f864c0552",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "a413c441-62f5-4ede-a646-b76a79ecd1f6"
        },
        "item": {
          "id": "037f92b5-a3e0-445b-ae13-b611e33b1a82",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ea471955-f211-4703-b463-da4b51743616",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63d75586-33dc-4be4-8e17-a9cce854b2bd",
        "cursor": {
          "ref": "ff37bcab-4f93-4247-a27b-10c7a6d574ff",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "4ef6e99a-9ebc-473c-aadf-31c357b789b2"
        },
        "item": {
          "id": "63d75586-33dc-4be4-8e17-a9cce854b2bd",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "d66ee87e-d96f-47f9-9dc1-8cb0fee3c380",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de3c557d-8f97-40d2-93c8-5d2904c5f4a4",
        "cursor": {
          "ref": "86f591e7-b5ce-4bb2-a45a-ce2aaff0bdc3",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "3f4502be-a178-4a88-a5bd-d88a66b6ab0c"
        },
        "item": {
          "id": "de3c557d-8f97-40d2-93c8-5d2904c5f4a4",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "91bf24ba-2b1a-41ab-97e5-7f49070a65f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2717f015-8527-4725-9a0f-6d63343fb390",
        "cursor": {
          "ref": "e15057cf-f713-42a0-9825-32f11b079de5",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "7fed3ff3-1418-4c30-a045-23f188c3fb74"
        },
        "item": {
          "id": "2717f015-8527-4725-9a0f-6d63343fb390",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "a8f3a248-a0fd-4f5b-9705-c445e2505a89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f611af06-49ea-44e9-9f90-4f1445460f35",
        "cursor": {
          "ref": "19216e40-1120-428b-b8c6-f5c4e63ab42b",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "2a1d7c0f-16be-4bde-80af-165c90b2b2ff"
        },
        "item": {
          "id": "f611af06-49ea-44e9-9f90-4f1445460f35",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "341938d1-4ac9-4eeb-80eb-81a4a0e4be76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "691bbae0-8ace-4025-bad7-6317e2524f96",
        "cursor": {
          "ref": "2ffd57ba-7de5-4047-8dea-4cca1ae70bc2",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "1ef9f1c8-b35e-4f97-92d1-821e5a2cad86"
        },
        "item": {
          "id": "691bbae0-8ace-4025-bad7-6317e2524f96",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "89986701-c368-4017-8221-fe7fe2b29645",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b526dea5-1dc4-4102-99b4-0297ec4da06d",
        "cursor": {
          "ref": "665face1-ca53-48e8-9c57-2d303b3e285f",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "5bca9a9e-b47c-4705-83ad-77d02d390d60"
        },
        "item": {
          "id": "b526dea5-1dc4-4102-99b4-0297ec4da06d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1869b2a6-201f-45db-8450-63d2670b5661",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8cc3f48-3baa-455c-82cc-cb05a9fdc1c7",
        "cursor": {
          "ref": "03fe9b74-1153-458b-b89f-41b310a7c401",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "cbf753a2-3b62-42e6-b53d-3dde62998e93"
        },
        "item": {
          "id": "b8cc3f48-3baa-455c-82cc-cb05a9fdc1c7",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "8f3e6f8d-c26d-4ac4-8af6-56266698bb41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15d3d29a-57e8-44e4-b0bf-3af9e4994bc6",
        "cursor": {
          "ref": "8aa3b8e7-7b7e-4af5-9930-6c47bdd041b3",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "47b17c65-7028-48e2-a813-06c7ee90529f"
        },
        "item": {
          "id": "15d3d29a-57e8-44e4-b0bf-3af9e4994bc6",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "536f5481-85b3-4eeb-9717-33f89ec52a17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc60926c-d210-45f8-a99e-f65b6e3616d7",
        "cursor": {
          "ref": "ea376024-63cf-457a-9ce3-7772b139c00c",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "b1366862-9393-4daa-8d3e-002d17969ca1"
        },
        "item": {
          "id": "bc60926c-d210-45f8-a99e-f65b6e3616d7",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "86afa854-ed6e-41ad-a39e-80880122bfaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccdc29da-989c-432a-9813-0a77f207eddf",
        "cursor": {
          "ref": "fd153758-ce94-45ff-a43a-0d938e870257",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "4939e79d-8e5c-4118-9fc3-6148a891df90"
        },
        "item": {
          "id": "ccdc29da-989c-432a-9813-0a77f207eddf",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "4f568c1b-688a-48bb-a9aa-c85bfee9b402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8026e8b-bb66-434c-bd5e-822e92623857",
        "cursor": {
          "ref": "85984c72-c423-4dfd-8bf9-4f82be6be02c",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "56e4e39c-11d2-42e9-baf6-fb6912ac642f"
        },
        "item": {
          "id": "b8026e8b-bb66-434c-bd5e-822e92623857",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d697aa66-8bc2-4e05-8a85-112b99cb5f26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd3cef02-fc92-4d9c-bd8e-fdcf7a92a489",
        "cursor": {
          "ref": "26c25996-1877-4026-87b4-0367bba33573",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "7c46042c-6493-4df7-a901-192db94dced1"
        },
        "item": {
          "id": "fd3cef02-fc92-4d9c-bd8e-fdcf7a92a489",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "9cdc5ca9-9f9e-4324-a4d6-2cc49972b9fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68947922-5d17-49dd-b7a1-c7f4aa81da94",
        "cursor": {
          "ref": "be77b3d8-801e-4101-9a9a-28024775845d",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "6b7784c0-bc5e-4740-b9dc-aa3c1a9b6cb5"
        },
        "item": {
          "id": "68947922-5d17-49dd-b7a1-c7f4aa81da94",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c527f74d-4b6c-4abc-815a-5bfdec546329",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f42485c-7650-4a9a-a9e1-5c08bea0f31e",
        "cursor": {
          "ref": "4d560d59-dc9b-4700-b3f3-bea39af0f9d1",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "4401efdd-14fa-4764-991e-3d7b8e5a77a4"
        },
        "item": {
          "id": "5f42485c-7650-4a9a-a9e1-5c08bea0f31e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "bd8a1e28-998d-4cff-aa3e-689ee0d32646",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb7e182c-20e7-4acd-9e38-ebc45d628e1f",
        "cursor": {
          "ref": "486c507a-0bad-463f-826e-daf7ca6900a7",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "785dcc55-8a36-41c4-9844-9aa31b292500"
        },
        "item": {
          "id": "fb7e182c-20e7-4acd-9e38-ebc45d628e1f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "0b5d4d54-5011-4c3a-b93d-8b75473c19ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef557655-5652-4b9a-9062-a0687cd62e5b",
        "cursor": {
          "ref": "e8803ce5-ca1c-4301-a013-e142cde07571",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "fd0bf39c-e244-432b-954b-8642c8e64005"
        },
        "item": {
          "id": "ef557655-5652-4b9a-9062-a0687cd62e5b",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "7c23e840-db43-4dab-bfbc-42b6b0fbefdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee59ca0-e5fd-46da-acf4-70820f1b94a1",
        "cursor": {
          "ref": "f728cecf-3de2-4390-a845-2b66718dce1f",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "ffb5132d-485a-4f7f-8c3c-e1f10ef6b421"
        },
        "item": {
          "id": "fee59ca0-e5fd-46da-acf4-70820f1b94a1",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "f845095e-ea67-456a-8bd4-4bbc9b4f74cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3f6e9b3-2241-4a8e-a27d-711b35840dd3",
        "cursor": {
          "ref": "1b9474da-f40c-49e7-9a6b-f4fcc09610cd",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "a1612da7-1a35-4f1c-a917-954db4cf80cc"
        },
        "item": {
          "id": "d3f6e9b3-2241-4a8e-a27d-711b35840dd3",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "23ae3c7a-5ae8-486f-9a6e-e7b01646df02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44adb15a-0aa8-4051-a874-131b7e942089",
        "cursor": {
          "ref": "0576d756-948a-40d1-aadb-2d16c561b44e",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "ab85dd31-915d-42a6-af25-e9169d2195d0"
        },
        "item": {
          "id": "44adb15a-0aa8-4051-a874-131b7e942089",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3a43ab10-a643-4bbe-b829-d2049d2028e7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9636b052-69a9-4ff8-9e79-8f2c1856e98e",
        "cursor": {
          "ref": "78931b1d-54b8-4ddf-bbdf-a6acf7665bd9",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "ce694839-1d72-472d-b447-4828ca2764ba"
        },
        "item": {
          "id": "9636b052-69a9-4ff8-9e79-8f2c1856e98e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "aa6fa188-0b05-4d45-96a8-11ecb2787e6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd44c9ca-2532-42d3-a63f-d4d6df9da8c7",
        "cursor": {
          "ref": "bff819d7-1b7f-417b-ace5-0f023b4bd7ee",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "f962c1ba-fc8d-40f5-aebf-99a99adaa4ed"
        },
        "item": {
          "id": "fd44c9ca-2532-42d3-a63f-d4d6df9da8c7",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e05f2089-fc5c-4a95-98b9-4517351d4290",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ea63efd-281a-4444-8334-638b7e5923e8",
        "cursor": {
          "ref": "eb73e8d2-171d-4b9a-80dd-b4d50f2ede8a",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "bab54dbb-fbcb-402c-b91f-e728ec79776a"
        },
        "item": {
          "id": "6ea63efd-281a-4444-8334-638b7e5923e8",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "4ff0dd54-0b17-44fc-98be-259d702c574e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f79074b4-6c57-4bd1-93d8-51d00613a6ac",
        "cursor": {
          "ref": "42564485-b44a-4100-91f3-d64b65e1b0ee",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "aace457c-5671-4e53-9b1e-b01145f18b1e"
        },
        "item": {
          "id": "f79074b4-6c57-4bd1-93d8-51d00613a6ac",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e35f41be-4922-4b38-8a8c-869dcf091436",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "852dce3d-a556-47bd-9b5c-e24acb7dc10a",
        "cursor": {
          "ref": "a77faad3-0c65-4f68-babd-7edac602168a",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "003ec4a5-735c-41f4-90bb-6404f01ccf47"
        },
        "item": {
          "id": "852dce3d-a556-47bd-9b5c-e24acb7dc10a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "67305f66-db2a-4a30-bf8a-81bcfd0fde18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10de6ccd-8c1a-40c1-8d18-8a63cbaaed3a",
        "cursor": {
          "ref": "8acc13fd-530e-43a3-93b0-21263677e1d3",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "120a6da8-3cf5-4ee2-a4b6-14276d662f8b"
        },
        "item": {
          "id": "10de6ccd-8c1a-40c1-8d18-8a63cbaaed3a",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "0a2fc386-9765-430e-993f-a429f15f4689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8b8e172-e1af-4609-be91-923acea6844d",
        "cursor": {
          "ref": "95613a39-43c1-462f-9553-82bfef12d696",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "703909fe-78ee-4a22-b6c8-dcbf3d760ec4"
        },
        "item": {
          "id": "a8b8e172-e1af-4609-be91-923acea6844d",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "27529f34-a4ac-403a-9ee1-50fb7dc88e90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cad48a5-4a7e-4965-ab4d-922d40058356",
        "cursor": {
          "ref": "7bc0644e-17bc-4cf9-8c78-c11fe00604d5",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "ee95f790-5fd8-4744-96ce-b392480df3d9"
        },
        "item": {
          "id": "0cad48a5-4a7e-4965-ab4d-922d40058356",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9b66ed6a-82e5-4e2c-a898-310487db054c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "077f8da5-efe2-47d4-88d8-8ab90fddd8cb",
        "cursor": {
          "ref": "15dc0b1a-27d8-41e4-9a09-ff433e5441b3",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "3a535e9e-333b-4352-a550-3abd53db4e9e"
        },
        "item": {
          "id": "077f8da5-efe2-47d4-88d8-8ab90fddd8cb",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "0e01ccb8-beb2-4a5e-aa8f-7f54d3407e51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d74df80f-1b17-4f2c-a46f-3f557610ab61",
        "cursor": {
          "ref": "7df8935e-a029-4714-bba5-40452eaada43",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "75c0dbe2-03a0-4e55-a08d-14b8eafda440"
        },
        "item": {
          "id": "d74df80f-1b17-4f2c-a46f-3f557610ab61",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b496c114-96ae-4b8a-932e-08a93dfc113d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80317d9e-7e5f-40c2-8821-8d697e8ff061",
        "cursor": {
          "ref": "ba4218e8-77d1-4b9c-8d7a-1c3bbe854f15",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "b93674f9-de39-4fde-8518-7c9ce0e2628a"
        },
        "item": {
          "id": "80317d9e-7e5f-40c2-8821-8d697e8ff061",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1844accc-8f3f-44d5-915d-0c3846fa000e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e5e0911-8261-4684-8449-28cfbd39eae3",
        "cursor": {
          "ref": "1ed525ad-6673-4e5d-8eb2-5cd1863d8c88",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "b8b024f4-8191-4e96-a9e1-581121245cc3"
        },
        "item": {
          "id": "0e5e0911-8261-4684-8449-28cfbd39eae3",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b5425459-9d91-4b75-b847-9fe1f4586341",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "795ea22b-b76b-4dfc-96ed-d38f311fb151",
        "cursor": {
          "ref": "537d5474-8ce3-40af-bdb5-8f9c4b113071",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "0828a8d3-4739-4288-be3d-5f5cde84488e"
        },
        "item": {
          "id": "795ea22b-b76b-4dfc-96ed-d38f311fb151",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "6ece63c6-bb42-41e1-b4b2-a701d6ccf748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "238cf174-79e8-44e3-836e-0d50a6d7a773",
        "cursor": {
          "ref": "8500633f-734f-477b-9b6e-928e695e64cf",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "096dbfd5-91dc-4222-b628-016c9b5cf026"
        },
        "item": {
          "id": "238cf174-79e8-44e3-836e-0d50a6d7a773",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "dcc202aa-5c99-41d0-8b57-380f6ce0f838",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "254fa2a9-ee00-4843-a64e-3980c1b28741",
        "cursor": {
          "ref": "34dd960c-5ce3-4f6e-965f-09bf9106ad52",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "bda2ac1d-bdd8-4410-9ccd-7a0b16ef9749"
        },
        "item": {
          "id": "254fa2a9-ee00-4843-a64e-3980c1b28741",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "09913c17-11f9-4e80-b887-f917465a5acb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4128bae3-25aa-45f3-a095-662a1284ea01",
        "cursor": {
          "ref": "ce04c171-9ec6-43f0-9c2e-8d64e0febbc8",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "cb5eeca7-6e4e-445d-a341-7098240e95eb"
        },
        "item": {
          "id": "4128bae3-25aa-45f3-a095-662a1284ea01",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "3dbeda71-6057-40a0-b738-71ca7ebadfec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f0c839d-8f31-4333-a707-d92a180b2e5b",
        "cursor": {
          "ref": "fefe9085-ad09-4f2e-b5a6-044cb84d6393",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "f6047db4-79e1-4648-b6b6-ceaf78692826"
        },
        "item": {
          "id": "2f0c839d-8f31-4333-a707-d92a180b2e5b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "547b8b39-d4fc-44d8-a77c-c73e99a77092",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aff047a2-fa06-4473-a94c-02171879a992",
        "cursor": {
          "ref": "88866dba-9dc7-4c92-9d88-dc404961751a",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "722aa215-76e8-4a63-9a9d-2494d5684f91"
        },
        "item": {
          "id": "aff047a2-fa06-4473-a94c-02171879a992",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "82048a6e-e253-4cc3-9ebe-85052f73a9f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "486fae2e-2f36-4af3-ab0f-371527f888a8",
        "cursor": {
          "ref": "4f7b8cf4-ece2-4450-8f07-0cd52932411f",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "6131f44f-9ab9-4c00-907f-27055dc8db21"
        },
        "item": {
          "id": "486fae2e-2f36-4af3-ab0f-371527f888a8",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "97a79175-1f31-4b53-ae2c-5c54259f6330",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51a2d13c-94db-4ad8-9c5f-33ee255da249",
        "cursor": {
          "ref": "7587a22b-829a-43b7-8143-7f0388972a3f",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "2d1cd0ce-525a-46f9-96c6-14d1d7f8d5f0"
        },
        "item": {
          "id": "51a2d13c-94db-4ad8-9c5f-33ee255da249",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e9849d4f-54ac-4a5a-ad17-8d267d89f851",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeb57b9c-493c-4019-8881-4e3087f33872",
        "cursor": {
          "ref": "c56f0cda-8278-4818-93b3-1238ce7ee7ac",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "7ddc3e32-82d8-4886-9e88-4cd693e2e2a8"
        },
        "item": {
          "id": "aeb57b9c-493c-4019-8881-4e3087f33872",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "253fe0c0-cb57-4eca-b56e-79b6770b4e68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "903d8c33-4c23-40ce-8fb4-c14fe7db0763",
        "cursor": {
          "ref": "36173612-2b51-47ee-a1ed-9ec160c690be",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "3e84e20b-197b-4b26-8a38-440e49c03348"
        },
        "item": {
          "id": "903d8c33-4c23-40ce-8fb4-c14fe7db0763",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ac348d34-4ab9-4de7-8197-a66559ef807e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d98d850-2089-494f-b134-f57e281323fe",
        "cursor": {
          "ref": "953a5a2b-0b14-4fb4-8e7c-4ee9f11d684d",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "faf6285e-6d26-4bf8-b20a-38932a649048"
        },
        "item": {
          "id": "3d98d850-2089-494f-b134-f57e281323fe",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "67af9d14-2048-43ec-ad58-a28d63369b4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0053789-2a04-4a65-9561-f965c2c2e081",
        "cursor": {
          "ref": "5d344063-fef7-41db-9a21-d35b90c8230b",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "748292b8-2e0c-484c-9a19-69feaf429d73"
        },
        "item": {
          "id": "f0053789-2a04-4a65-9561-f965c2c2e081",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ba3ffbcc-e01e-4d80-9f3b-b98e8ef6205e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31a4f2e4-0c4c-4d90-a636-9d996250011a",
        "cursor": {
          "ref": "0a1d6b3c-3a87-4f6f-8d40-d3f7ff694646",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "24c957a2-fcc0-464d-967b-491a62d7e194"
        },
        "item": {
          "id": "31a4f2e4-0c4c-4d90-a636-9d996250011a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "075237d4-b183-40e9-9200-a812e3441a04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63e51a0d-43ab-4b24-9c77-3f8410740e1a",
        "cursor": {
          "ref": "0c092131-bc29-479a-8773-5893703b00ad",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "de00ec20-4c55-494b-846d-1b25e9f4f8a7"
        },
        "item": {
          "id": "63e51a0d-43ab-4b24-9c77-3f8410740e1a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "181d6d5f-8159-4c4a-886f-a9e28696a094",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3526ec42-a235-44c4-9617-20a3b3783afc",
        "cursor": {
          "ref": "7732f146-d897-4a83-b703-86021f18e8be",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "d10d2fe0-f6b7-4a91-b024-6e32131e29ee"
        },
        "item": {
          "id": "3526ec42-a235-44c4-9617-20a3b3783afc",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "0196f4f1-d0c2-4fec-a5a7-a497148cb0a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91098f17-bc41-45e5-b1ad-da3a129b0f51",
        "cursor": {
          "ref": "098c72f5-f58a-4397-9b74-eea660f34156",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "7c4beb38-b4ae-435f-8c92-5fd4182e3dd2"
        },
        "item": {
          "id": "91098f17-bc41-45e5-b1ad-da3a129b0f51",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "02dc4bbc-bd50-4aea-bcb2-07ba2f37eed2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7214716-766a-421e-aaf9-d310c4fc9393",
        "cursor": {
          "ref": "ccff5582-afb3-4cee-aaba-60ea677cea07",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "712e0d5e-c98d-4947-9fb2-b154ef42cfdc"
        },
        "item": {
          "id": "c7214716-766a-421e-aaf9-d310c4fc9393",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f5a1d980-dee1-456e-9ebe-3c646ef54087",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4751abf9-63bb-470f-b308-74acc90072c3",
        "cursor": {
          "ref": "fc060a29-1861-4497-9951-e2c3620ff3d1",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "1c0f123d-f0c9-47a9-bc0e-3aa1ec68eb31"
        },
        "item": {
          "id": "4751abf9-63bb-470f-b308-74acc90072c3",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "2b3285e5-b4f1-4a40-a802-494a6ddf5c60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b2358ac-4aac-4bde-b0df-0d6963782cf6",
        "cursor": {
          "ref": "0baee1d2-966e-4479-961b-8de4f7df1725",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "3a6cb7b4-476e-41c7-ad3a-81f843fcdb05"
        },
        "item": {
          "id": "5b2358ac-4aac-4bde-b0df-0d6963782cf6",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "c400e220-0d54-408c-b550-48d2345357a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35e4d74a-7dcf-4fe7-b46c-57f7aefe87ef",
        "cursor": {
          "ref": "445dbabd-88de-4369-97b4-3228017c72e2",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "11e2f103-a831-487a-8523-1156c1e02dd3"
        },
        "item": {
          "id": "35e4d74a-7dcf-4fe7-b46c-57f7aefe87ef",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "deeaf9fa-64cf-4684-9df1-72f4e4a52cb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df45dded-148f-45da-812b-e7fe2bd918c2",
        "cursor": {
          "ref": "456009b3-5bbe-43c2-b6aa-1b08d2bc63c5",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "500efc71-ea79-4c3b-b7c5-bd99db6ce8e8"
        },
        "item": {
          "id": "df45dded-148f-45da-812b-e7fe2bd918c2",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "0b74e571-6297-453e-b47b-b673bc345534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc6491d8-e01d-4072-a3e8-2685627c2848",
        "cursor": {
          "ref": "e9d439eb-b85b-446b-b088-a6c22282df23",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "72af2a2a-3fdd-4d0b-aca8-e06f3eb9612d"
        },
        "item": {
          "id": "cc6491d8-e01d-4072-a3e8-2685627c2848",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "5b5c701f-25e9-42c4-a71b-2ae90884e0ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a77e7cf5-3db8-4d10-843d-b716b34e6740",
        "cursor": {
          "ref": "e46a6592-e3d5-45bd-bed8-09631a486f57",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "bee28b97-2e8d-4c8a-b1f0-301762f0ca5a"
        },
        "item": {
          "id": "a77e7cf5-3db8-4d10-843d-b716b34e6740",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "af5a7a83-5a5a-4c15-8815-b73318c390d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d3c6c86-7ab7-4d7d-bf8a-9a5fdc7d024e",
        "cursor": {
          "ref": "ec4e142a-e010-4dc6-a4ad-b3a6474ce071",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "d1ed0041-d353-47fd-89c7-5acae51f0193"
        },
        "item": {
          "id": "7d3c6c86-7ab7-4d7d-bf8a-9a5fdc7d024e",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "44e49057-aed3-4fce-8d32-0f8b162f8fe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d475abd-6ef7-4f45-9736-e7161b23aad1",
        "cursor": {
          "ref": "7616a81d-7e0c-4220-9390-d2f13da65b89",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "8145dcf0-f39d-44aa-a407-ad6bda8c76ae"
        },
        "item": {
          "id": "8d475abd-6ef7-4f45-9736-e7161b23aad1",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "68359feb-9946-45a6-a37f-8273a1d9bbb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dd2068a-a4d3-4094-a962-6f024ca75333",
        "cursor": {
          "ref": "8b0f6862-e8f7-4823-9bbb-4f728f9087f4",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "1347dde2-5a5d-429a-9bab-a0cf5c8f8cd7"
        },
        "item": {
          "id": "3dd2068a-a4d3-4094-a962-6f024ca75333",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "2ef86f71-6247-42db-bead-5e4981d18b89",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84e06d75-1ce5-44dd-b3fd-beb02be6caa1",
        "cursor": {
          "ref": "c3fecdfc-70b2-4399-bdb8-fa6a769937e4",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "cec4e107-7a31-470e-bdca-bcf717c1203a"
        },
        "item": {
          "id": "84e06d75-1ce5-44dd-b3fd-beb02be6caa1",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "20847ba2-fcbd-47ad-a929-f753bb741654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbac3e4c-5526-4ae8-813d-7543673be5ca",
        "cursor": {
          "ref": "c5f8a1ba-4db7-49c8-9aa2-6e8c2ef71f94",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "ed6085ec-f211-4595-bc94-44d60d72bea7"
        },
        "item": {
          "id": "bbac3e4c-5526-4ae8-813d-7543673be5ca",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "0e35ff0b-872c-46c4-b6bb-0feaceb358dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "166a6366-fe3a-419a-a031-8e926a29c36d",
        "cursor": {
          "ref": "f7ff1083-583b-48d2-86e1-2d1623c92237",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "57b26996-f515-4dcb-ae1f-236d10af97d3"
        },
        "item": {
          "id": "166a6366-fe3a-419a-a031-8e926a29c36d",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "00a7897b-d650-49b6-ae7b-f54b765d0930",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5ed347e-04af-41c6-9262-1ccf0ee2ec2c",
        "cursor": {
          "ref": "39a2fdda-1636-4732-9c4b-7db5ba1b95e5",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "d7e5a7ef-0d97-439c-96c9-bf1ee1cea625"
        },
        "item": {
          "id": "d5ed347e-04af-41c6-9262-1ccf0ee2ec2c",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "e6323e9e-2654-4e2c-ae63-f14a877e0520",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9143f9f-c514-481e-8d2b-3e63f0416551",
        "cursor": {
          "ref": "2a86ac3f-a2ba-4650-9f3d-56e3cacbf2be",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "ab712d1a-9446-455a-885a-ebffa65340fa"
        },
        "item": {
          "id": "d9143f9f-c514-481e-8d2b-3e63f0416551",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "619b602c-cf89-453e-a3ce-d0bf449eee83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c66360ca-f94d-47db-9e90-9a8f9cc26aac",
        "cursor": {
          "ref": "44339774-05c2-47c4-a1c8-782ef9c5112e",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "48656335-9609-4121-821b-43a48dee125c"
        },
        "item": {
          "id": "c66360ca-f94d-47db-9e90-9a8f9cc26aac",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "6a38b555-4364-4a9a-be78-7c3064c72a34",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 94,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "dcf002c4-185d-4eaa-80d2-497edcc5a916",
        "cursor": {
          "ref": "e0038166-5841-49fa-ac58-787d960c8a19",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "1b264b19-0890-4e7d-863b-4ce0bab2928c"
        },
        "item": {
          "id": "dcf002c4-185d-4eaa-80d2-497edcc5a916",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "ac92abaf-bdc2-461a-8997-8c5df0f3c4b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "652ddaef-6e36-4348-9713-466396b12fec",
        "cursor": {
          "ref": "fb23fa53-2dee-4fe9-aa51-8070c4bb6463",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d10a3939-6a7d-43fd-ab1c-89cdfdd1b0df"
        },
        "item": {
          "id": "652ddaef-6e36-4348-9713-466396b12fec",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "1ddfe49f-24ae-4da5-8d5b-05a6ab43a28e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb73bd20-9acc-4ec6-9690-ed1f3d52b7ec",
        "cursor": {
          "ref": "db2427fe-c60e-440e-ada8-f0781e965c59",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "f462d9f2-bd70-411e-9fe3-6157871b1b04"
        },
        "item": {
          "id": "eb73bd20-9acc-4ec6-9690-ed1f3d52b7ec",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "5b5a6944-04e5-42c9-a785-65c8dbaa186d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2331490-ac87-4e93-af0b-308ef925b705",
        "cursor": {
          "ref": "6a77fcf8-0217-43e2-a38c-b978941f9150",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "ba109186-c8b3-4476-b2f5-b594041206e0"
        },
        "item": {
          "id": "c2331490-ac87-4e93-af0b-308ef925b705",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "b605d1d3-1534-433e-8c1b-1b58edcd2cf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "034497f0-dead-4640-b8f3-e26092f00b81",
        "cursor": {
          "ref": "8ed7b347-676b-427a-978d-8a823f8ba7f9",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "2167a24a-8fd0-404d-ab32-8d9e75e6e4b9"
        },
        "item": {
          "id": "034497f0-dead-4640-b8f3-e26092f00b81",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "b6a0ceed-9764-4858-a9cb-5b22d59afca8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be522f48-ff55-4f62-bec4-db1eb3f0c3c9",
        "cursor": {
          "ref": "e80c90fd-351b-4004-a2e1-00fbee7d503e",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "bb1ece43-bbae-403b-b9a3-63ba63226f8a"
        },
        "item": {
          "id": "be522f48-ff55-4f62-bec4-db1eb3f0c3c9",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "737559bb-969e-4ad5-9caa-983e0273d48d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea507bcc-475f-4b84-830c-65ce8b3d8991",
        "cursor": {
          "ref": "9c0267db-f51f-450c-8b01-fd660a127cc2",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "cef7db7b-cc8e-4702-a08c-36deea4b2555"
        },
        "item": {
          "id": "ea507bcc-475f-4b84-830c-65ce8b3d8991",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "b730931e-cd38-4e85-84f2-d208a5b05f85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad69950f-b8eb-4afd-9e35-9c508fd4d85f",
        "cursor": {
          "ref": "794da9f4-c8e9-47c3-8eba-0dd2ab7438ca",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "647ea805-d469-4540-94ac-01e60ecec8d3"
        },
        "item": {
          "id": "ad69950f-b8eb-4afd-9e35-9c508fd4d85f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "fe723b98-992e-4225-bb58-df07899b2e45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6da50c93-b31e-4194-9e19-ec160699cd17",
        "cursor": {
          "ref": "f582ac09-88ef-4031-81f3-db0202bf0768",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "42821bbd-e699-4c8a-996b-01c40b420732"
        },
        "item": {
          "id": "6da50c93-b31e-4194-9e19-ec160699cd17",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "c091e068-ae73-4f6b-a822-3d3f7bd9c49c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "966abf66-90c5-4c64-8466-b6b7134ca92e",
        "cursor": {
          "ref": "78019380-f1e1-4566-8fcf-14347fb55900",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "24044599-96a0-421f-91c3-0d72529b93d0"
        },
        "item": {
          "id": "966abf66-90c5-4c64-8466-b6b7134ca92e",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "7633ca10-bf46-4a7c-8f14-d0746412becd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4c2f031-6b20-47db-ad2b-a83f82bd9a62",
        "cursor": {
          "ref": "23943bbb-c5cf-4301-a0bc-4a0f00773622",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "a2ebac83-fef5-45d0-b7ce-d0437cfde7a0"
        },
        "item": {
          "id": "c4c2f031-6b20-47db-ad2b-a83f82bd9a62",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "626c43f8-d029-4ee3-a61c-9362c5f5ece9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23dfe36b-a5a7-4c0d-b5e8-a6a300f55cce",
        "cursor": {
          "ref": "6cc5e44f-52c2-4f56-9321-753ab2974b9d",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "bcec5abb-753e-4634-84d6-b351506092e6"
        },
        "item": {
          "id": "23dfe36b-a5a7-4c0d-b5e8-a6a300f55cce",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "acaa7a58-28bd-47a8-86c2-d46f12945730",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52216987-d53a-4637-a9a6-9dd092e652dd",
        "cursor": {
          "ref": "3d42a171-9d3a-470f-998f-c263054763ac",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "de27b9bd-0d4c-49c0-b4a4-51ec3635a7a4"
        },
        "item": {
          "id": "52216987-d53a-4637-a9a6-9dd092e652dd",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "78cbe24d-d09a-4e99-a191-5d293ee19985",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d231b992-1e80-47f0-b122-5950982a7a20",
        "cursor": {
          "ref": "0b44f61e-b3e4-4e84-a9f9-124a23109bca",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "4799c808-e6c4-493e-ba76-48611b1fe7d8"
        },
        "item": {
          "id": "d231b992-1e80-47f0-b122-5950982a7a20",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "ab27ed18-97f9-4b34-9917-8f97598caddc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "894d037d-5a48-4b70-a093-e3b811ff547f",
        "cursor": {
          "ref": "df3d4ae9-12a0-4e50-8e94-b967f86bb361",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "c1db93d7-be2f-415c-862f-57db1d3f1914"
        },
        "item": {
          "id": "894d037d-5a48-4b70-a093-e3b811ff547f",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "5dc755fa-266e-4f3a-b2ab-cb039e47c039",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4f3d62a-c0d7-4bba-a636-7fa73873a87c",
        "cursor": {
          "ref": "8b4c75d4-93b0-4fea-a791-0ea5e75e0139",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "2515939e-31dc-4b51-ad9d-8ad1fdace743"
        },
        "item": {
          "id": "c4f3d62a-c0d7-4bba-a636-7fa73873a87c",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "3c3dcc1c-af35-4af9-9255-e92b248113f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "814c23f1-0dc4-4aba-9656-f6d5a3950b42",
        "cursor": {
          "ref": "56557217-4d16-4aa1-8fa9-1cea1dbe34bc",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "cd6511ce-d207-4d61-aee1-6c1c8b9766e7"
        },
        "item": {
          "id": "814c23f1-0dc4-4aba-9656-f6d5a3950b42",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "e67e394d-b9c7-467f-ae98-1823f8b32032",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4e4c242-da8b-41b7-8171-72605f9e3e1d",
        "cursor": {
          "ref": "d2d2ae09-594a-4ec4-8476-e7d6a2496645",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "c8f0ed44-232e-46e6-b058-74aaebbd9a7e"
        },
        "item": {
          "id": "b4e4c242-da8b-41b7-8171-72605f9e3e1d",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "bae8da31-084d-4ae1-ba42-345b282703ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec1c0f50-e7ab-44e6-9d64-77600beae973",
        "cursor": {
          "ref": "f4ec9b95-47f1-4ec9-97a9-e6dd7ebb3018",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "9789cc7f-3f77-4816-9e77-a5b3f9551044"
        },
        "item": {
          "id": "ec1c0f50-e7ab-44e6-9d64-77600beae973",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "cb771eb7-5940-4f07-bd10-d979798abb8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80ea88e8-6c89-4b7d-ae98-b44f0cebccf0",
        "cursor": {
          "ref": "2216150f-e03e-4318-94fa-4985b0b123f5",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "f9963a85-1d18-4da9-9321-6cf50dcb9e09"
        },
        "item": {
          "id": "80ea88e8-6c89-4b7d-ae98-b44f0cebccf0",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "4037091c-9647-43ff-bbf6-86eeca72b7f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e7078d1-0c91-4e1a-8c34-1895b436b1c8",
        "cursor": {
          "ref": "b7a9bd93-e3e0-480c-a58c-3b6edf60b219",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "6afe0fee-f480-40df-86ef-6f2c61a316ab"
        },
        "item": {
          "id": "3e7078d1-0c91-4e1a-8c34-1895b436b1c8",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "3e5ff274-6c30-42b1-a460-fd38dc548b5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d8322b4-cf97-4fc3-aa2f-f3c0bf308b7d",
        "cursor": {
          "ref": "a34af127-5334-4cb5-ad6f-d6cbcc7fd295",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "834e936d-c8d4-465d-b1e5-8a517fc37175"
        },
        "item": {
          "id": "4d8322b4-cf97-4fc3-aa2f-f3c0bf308b7d",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "9c4023f8-5994-40cd-a509-071ad741a79a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d00cfe07-2875-4c2f-a6ea-1c39e1cdc7ad",
        "cursor": {
          "ref": "6e4e43c4-360c-4ce6-9e31-fbe931a32f4b",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "d438e069-7260-4368-bd8a-39e951901000"
        },
        "item": {
          "id": "d00cfe07-2875-4c2f-a6ea-1c39e1cdc7ad",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "8f5a5d79-a8fa-4c9d-8b13-ef76f5874895",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8cb756b-cf2b-4847-8820-18b8b363b6f2",
        "cursor": {
          "ref": "abc7804e-e8b3-479a-9a39-f3f47724de36",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "0cf7972a-d80a-4ee5-bc3b-2f05b0f850ca"
        },
        "item": {
          "id": "d8cb756b-cf2b-4847-8820-18b8b363b6f2",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "5f33c595-f723-423d-8609-e22314c4e7af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4a6eb6a-e215-4ea2-bf90-2cc2904f6dba",
        "cursor": {
          "ref": "6ef0dd49-8351-441b-b5ea-c9157d20e6ae",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "0622c5c9-3dd6-464b-88e0-49ecb4e0d752"
        },
        "item": {
          "id": "a4a6eb6a-e215-4ea2-bf90-2cc2904f6dba",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "1089a066-453b-4625-8fca-c88acfdb848c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7810e177-571e-497b-8c63-ae0056033f41",
        "cursor": {
          "ref": "5997f711-cd1b-45d9-a0eb-b302de7693e7",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "67b80497-e3d7-41af-b7fa-82637355ee1a"
        },
        "item": {
          "id": "7810e177-571e-497b-8c63-ae0056033f41",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "35865bcb-5cd0-417d-9aee-887d4554f4b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc9d5e65-f1fe-44a7-bb3a-db2968401235",
        "cursor": {
          "ref": "07590cbb-eab9-44a8-952a-f6ad9144e18f",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "9394e5ad-558c-4d6f-a5a0-6024fded6f2a"
        },
        "item": {
          "id": "cc9d5e65-f1fe-44a7-bb3a-db2968401235",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "ef64b052-1085-4e4b-a8fb-83fcb381493a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "913a8941-587c-4f40-ab7a-24ac916d1293",
        "cursor": {
          "ref": "86fcbf9e-fd2b-48ce-b907-cb244005880a",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "2f056a51-d5fa-453e-b8c2-0d336d33bf30"
        },
        "item": {
          "id": "913a8941-587c-4f40-ab7a-24ac916d1293",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "0e2aa72c-b290-42ef-b935-9b0d2d805491",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4236162-4fc3-415a-b140-f50aaa2afcae",
        "cursor": {
          "ref": "67b8b529-8dc2-4e77-b707-31d7ed424763",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "efcc1064-13f7-4bab-969e-4836cb7a673e"
        },
        "item": {
          "id": "d4236162-4fc3-415a-b140-f50aaa2afcae",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "9e001d20-9d7e-4d34-99d7-248a63b3a34e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "689431f8-cce5-41bc-aecf-825728ffdce4",
        "cursor": {
          "ref": "e2b2450c-721b-473f-ace3-a5e3761fc3ac",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "0617415e-7b2c-4ae6-aa8b-f4a8d66578d1"
        },
        "item": {
          "id": "689431f8-cce5-41bc-aecf-825728ffdce4",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "bcbd6b31-cd2d-46d4-9af0-4e3e6e890bc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "7f10d4de-6ffe-458e-a52f-9cc79f93ea82",
        "cursor": {
          "ref": "ef1fbc09-da65-4634-a0a1-a75ce848d793",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "3841935c-467c-430d-9174-546ce6753523"
        },
        "item": {
          "id": "7f10d4de-6ffe-458e-a52f-9cc79f93ea82",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "a5ee675f-779c-47bc-ac6d-20058b21134b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "f0256750-affd-434e-be93-ae026be30169",
        "cursor": {
          "ref": "8c743fee-32e6-4414-8101-de3d0cfe23d8",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "0ac3cbee-ca9a-4f80-908f-853f4eaddda0"
        },
        "item": {
          "id": "f0256750-affd-434e-be93-ae026be30169",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "dc9fe961-84f3-475f-acbf-f87b07c6fbd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "e96762aa-cfea-4f08-876c-ab5adb097d23",
        "cursor": {
          "ref": "3d32d929-c137-48c4-bd11-1b0d86685af7",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "243ef356-edc0-412e-b4a0-f29cad6ec087"
        },
        "item": {
          "id": "e96762aa-cfea-4f08-876c-ab5adb097d23",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "dd535f0b-2412-466b-a964-e9707b06b078",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a557cab-c70b-47ae-a229-d015f2626b20",
        "cursor": {
          "ref": "e314e767-0ef3-4170-995f-1463fee94858",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "a0dc6a41-f3c5-4748-a78f-b96cdad3e189"
        },
        "item": {
          "id": "0a557cab-c70b-47ae-a229-d015f2626b20",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "bcad238a-ffea-4a65-b452-faab5b320ddd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "fa185dc2-76d0-4aa3-8fc1-d7b367e9b31d",
        "cursor": {
          "ref": "47301c84-071c-43ea-a60d-90664f0a53ab",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "a20c9e72-ef18-4b6d-aaf0-8008af662af3"
        },
        "item": {
          "id": "fa185dc2-76d0-4aa3-8fc1-d7b367e9b31d",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "a1dc0949-efc5-466d-962c-a8fb481b8fe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1159,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "4d7ee24c-86bb-4a75-9110-910a3e6bf747",
        "cursor": {
          "ref": "5fbb1e73-b482-44f6-b0ac-90f64ba76404",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "cc034dba-0cf7-4b9f-ab15-6d499379e495"
        },
        "item": {
          "id": "4d7ee24c-86bb-4a75-9110-910a3e6bf747",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "b193b672-e2a6-4213-b066-9ef001352b01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "b426d02d-dba9-4115-88e5-9cef959a6984",
        "cursor": {
          "ref": "50305140-d3ec-4b03-8c8a-2c6fa3ee9535",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "08e1172a-047c-4564-9f16-ffe1c765b460"
        },
        "item": {
          "id": "b426d02d-dba9-4115-88e5-9cef959a6984",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "11be94a9-8235-4e05-880f-22eae02139dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "f841106b-ea5b-4722-ae76-71548f31c72b",
        "cursor": {
          "ref": "979efb08-9c2c-4937-b6c2-b72a1655353e",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "53a3a076-4abb-414b-a539-399a29c4a37a"
        },
        "item": {
          "id": "f841106b-ea5b-4722-ae76-71548f31c72b",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "87ffde31-8fbe-4a71-af56-6663618e93b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "f9c53cbc-e1c9-414e-82cf-172139684c1c",
        "cursor": {
          "ref": "9c1f42b3-4ca0-4ef7-9074-410470fdefa1",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "da89f52a-bb58-4ad8-9bf9-8ca80d2228b3"
        },
        "item": {
          "id": "f9c53cbc-e1c9-414e-82cf-172139684c1c",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "7c9f65f7-8afe-4264-95ad-21760ca49c0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "a84cc408-b252-4b7e-aaaf-afe10a0f8ab2",
        "cursor": {
          "ref": "f37e1437-c8e6-4707-8d11-fdf8fd8f297e",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "b176dc6d-ab0b-488b-8ced-46b1c734de85"
        },
        "item": {
          "id": "a84cc408-b252-4b7e-aaaf-afe10a0f8ab2",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "8c910368-bee1-41f2-ac1c-b09085316685",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e6d7de9-ee38-4326-a9d5-9f738f58d416",
        "cursor": {
          "ref": "211f287b-7999-416a-879d-65809fab5d05",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "eae20f74-1d90-48ce-b620-a612fd9ee3b2"
        },
        "item": {
          "id": "3e6d7de9-ee38-4326-a9d5-9f738f58d416",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "e6288713-3644-4583-8af6-a723aec491d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c066ace6-52e7-4025-b976-0cb3a95180a2",
        "cursor": {
          "ref": "8e5fbe65-da19-49c8-b15e-fe2e5ea9304d",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "d021487a-d0b9-45bf-8a51-d08edecbde02"
        },
        "item": {
          "id": "c066ace6-52e7-4025-b976-0cb3a95180a2",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "6f7d88e4-759a-45df-a6ab-ad388d9b76c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c016c7f-1abc-4639-a748-cd3232ff6187",
        "cursor": {
          "ref": "39c1d8a2-7ba5-49ab-ba6d-a25cdfe8ce0e",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "77206ce1-79ce-4a78-aaff-5b344e35f499"
        },
        "item": {
          "id": "1c016c7f-1abc-4639-a748-cd3232ff6187",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "4bff830d-a52a-40dc-bb21-be22dca423bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35c755ec-54d8-4233-af54-cff2e7a5ee3c",
        "cursor": {
          "ref": "649736f9-27ba-4ca4-99f0-693d1179ff6c",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "08b75b76-e3a0-4a74-841e-d22d88650e73"
        },
        "item": {
          "id": "35c755ec-54d8-4233-af54-cff2e7a5ee3c",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "18418ee7-cdf8-4d8e-a851-c77ad0e5afee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe610020-1da8-4cd5-a7f1-388e8910f517",
        "cursor": {
          "ref": "d9775313-75f5-4ea2-87c2-16e8592df7ad",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "4dcac66e-932a-4ed9-8af7-45ff2e03b60e"
        },
        "item": {
          "id": "fe610020-1da8-4cd5-a7f1-388e8910f517",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "643b4ae5-fe35-4cf3-aff7-cdec9882f7e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3779961-765e-42e4-b225-d6a4cccd4a80",
        "cursor": {
          "ref": "1057f75d-c38d-452e-aa26-53b4ea579d59",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "fa919796-cfee-4159-82aa-787a85e7de39"
        },
        "item": {
          "id": "e3779961-765e-42e4-b225-d6a4cccd4a80",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "b296df9d-df35-44ab-baa8-4f242a214c29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61a2db60-3461-48cc-8487-e8e8c8fd58f3",
        "cursor": {
          "ref": "a2549158-1d1c-4d7f-b8b9-2dc7f68db930",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "db1f8f56-7e68-4eec-82e9-6f88da921fee"
        },
        "item": {
          "id": "61a2db60-3461-48cc-8487-e8e8c8fd58f3",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "f97e1556-5e8e-4100-b009-bbabb81ff54d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "196d02ee-e45b-4059-aa3e-ec50334b8152",
        "cursor": {
          "ref": "6a9a7d74-c612-49cc-a261-3bd41f853f76",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "885964b6-9cda-4e49-a554-a5025e095185"
        },
        "item": {
          "id": "196d02ee-e45b-4059-aa3e-ec50334b8152",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "c9c8765f-1975-4cd3-9fb5-0de6f5342870",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c2cf633-dea0-4ccb-b2dd-6466d04bec11",
        "cursor": {
          "ref": "6c6bc3f5-0108-415e-b18d-bd92cc7d703b",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "35801e22-4898-4ec8-9254-300ca6d8182f"
        },
        "item": {
          "id": "9c2cf633-dea0-4ccb-b2dd-6466d04bec11",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "6b379eb4-e074-48f9-b780-4688e51f6557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29da5ea9-bd67-4b49-b2a2-e85ce521ff41",
        "cursor": {
          "ref": "80f09306-65de-463a-832b-7cf67b950e89",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "e96448e9-bad9-49a6-88fb-0a2bb4a76915"
        },
        "item": {
          "id": "29da5ea9-bd67-4b49-b2a2-e85ce521ff41",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "2c7da45c-b950-4156-8c38-0abce0ec485d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fede598-4afd-47ca-bf84-3d0d4c665483",
        "cursor": {
          "ref": "57563654-b45e-4f96-9ac7-f82d2df4ad49",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "01b6f8b4-92c7-4065-a478-d85efb50165a"
        },
        "item": {
          "id": "9fede598-4afd-47ca-bf84-3d0d4c665483",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "33b4eb79-2eef-464a-8ac6-ffa76eb11902",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7f56ab7-6d92-42a0-8259-88c35206e660",
        "cursor": {
          "ref": "dfb0ddb6-e2d4-4f84-b136-9a967680ee6c",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "f2d7fda3-f4af-4037-98dc-e52a24ad8b84"
        },
        "item": {
          "id": "f7f56ab7-6d92-42a0-8259-88c35206e660",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "f4bd0fb5-c79d-4196-8a0d-9a0270979e1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57ca5b48-1cfa-4a9f-acde-7bb8069dbb33",
        "cursor": {
          "ref": "f14a2913-8ce7-4cf3-9266-5baa006e012f",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "3b0e50bc-d127-4f2b-8616-b5ef59d80621"
        },
        "item": {
          "id": "57ca5b48-1cfa-4a9f-acde-7bb8069dbb33",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "907e0053-4b51-4aba-88a7-612cf18e8a46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1170,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "a9efd6ed-0b94-4263-9772-2d6505faa18c",
        "cursor": {
          "ref": "59051928-13c9-4eec-a350-bc3a96bc0824",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "53bdb0b8-2c6f-49bf-8bfc-18ed65b6cd3a"
        },
        "item": {
          "id": "a9efd6ed-0b94-4263-9772-2d6505faa18c",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "db8a7b80-6b89-4f3c-8a52-b61083cb60de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1203,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "f7ef894c-5cc5-48aa-bfc3-de15ebee0ede",
        "cursor": {
          "ref": "033b9a39-352f-40f8-a22f-3e1946a64284",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "ae3d2aec-eec9-49e1-a11d-24b3dc0b9cfb"
        },
        "item": {
          "id": "f7ef894c-5cc5-48aa-bfc3-de15ebee0ede",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "68fdd0d4-a3a5-468a-8c23-6c0b8d992ed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "1017f014-8c9a-4752-9249-6a1972ba0629",
        "cursor": {
          "ref": "2ca1cc72-3597-4994-92a5-057db9302eab",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "4f6494a9-6344-4788-88db-a901db904b44"
        },
        "item": {
          "id": "1017f014-8c9a-4752-9249-6a1972ba0629",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "c4135672-1865-4864-a2fc-08b3bba8fc37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1202,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "151c99e0-9b4f-421d-aeca-ce1acf8e8f02",
        "cursor": {
          "ref": "3711feca-b1f3-43c9-8278-49251df94652",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "7f5fd681-9e4e-4d99-8587-d3862dc9c127"
        },
        "item": {
          "id": "151c99e0-9b4f-421d-aeca-ce1acf8e8f02",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "9ce0c5a6-67b6-4acb-a46d-7e71a954a26f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "df3c9428-755c-4401-b895-03a2fb07fee2",
        "cursor": {
          "ref": "8806164e-f935-43f6-92de-ba659f140f2d",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "2bb87d3e-b131-40bb-be27-9404365da944"
        },
        "item": {
          "id": "df3c9428-755c-4401-b895-03a2fb07fee2",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "f38f11b4-100c-4fbb-ab46-14c93d637059",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d20532b1-3cf5-47e4-a5c1-07b1b3204848",
        "cursor": {
          "ref": "90176160-2147-4ecd-a799-9a76e92f7535",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "20c1a576-dcf2-4c59-8c73-84b60cd15576"
        },
        "item": {
          "id": "d20532b1-3cf5-47e4-a5c1-07b1b3204848",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "19912250-452c-46f2-a678-46d5a18dcd1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71bcd57a-e17e-405e-abc6-ea6b23d76463",
        "cursor": {
          "ref": "4de2275a-eb6d-4921-b54d-d485a1a91b31",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "084ddd4a-93e3-46ce-8c51-d1d07c40ed8c"
        },
        "item": {
          "id": "71bcd57a-e17e-405e-abc6-ea6b23d76463",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "6f798a21-cb52-49b4-80eb-d8eb15fa8cd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69da772f-9458-45cd-8e4c-acc1bbef0193",
        "cursor": {
          "ref": "531f1ead-432e-4443-9482-61e8fbf751e3",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "5275d29d-faf5-4835-929b-707254f895ee"
        },
        "item": {
          "id": "69da772f-9458-45cd-8e4c-acc1bbef0193",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "8c5be070-0930-47fd-be9e-86826a47b3b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c35684ef-b310-4321-aea2-9a371fe067e3",
        "cursor": {
          "ref": "793f508c-6970-47ab-a1c7-d53cf9365d67",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "d401e32f-b4a6-49a3-9012-570932d589de"
        },
        "item": {
          "id": "c35684ef-b310-4321-aea2-9a371fe067e3",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "e9dff216-44b9-4fd4-90ab-14ee8e54328f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c3e8393-1bc4-47e0-887a-2ae2e0e55fea",
        "cursor": {
          "ref": "ef343f17-5947-41f5-bc4a-911b7b3f2522",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "d128c794-0cd1-41e9-890e-4666dddb11ea"
        },
        "item": {
          "id": "3c3e8393-1bc4-47e0-887a-2ae2e0e55fea",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "f5531c14-8461-42d2-9964-9c03597b595a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cd84c57-cefd-4b61-8292-aa982647a001",
        "cursor": {
          "ref": "fd53f99f-a26d-43a8-95c2-c59e53f9304c",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "0c93e244-87a4-4156-b5f3-2f5b2efb3ab4"
        },
        "item": {
          "id": "7cd84c57-cefd-4b61-8292-aa982647a001",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "5be37c8c-4396-4ba2-aa7c-070b2938ac74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "992796d3-407d-4143-9852-e49d6a03c88f",
        "cursor": {
          "ref": "e54d9c58-a85c-4723-b807-a7453c5b5999",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "ae7f7daf-b0f7-4760-8523-3344006a91a2"
        },
        "item": {
          "id": "992796d3-407d-4143-9852-e49d6a03c88f",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "7041470e-83ad-43f5-a4b0-404fcd59b707",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b10a0925-dc06-442a-bdfd-7fb666812232",
        "cursor": {
          "ref": "0f656c0c-14fd-4291-b743-c44073a2e7a9",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "5c14ca39-075a-4a07-8472-11dba8d215c7"
        },
        "item": {
          "id": "b10a0925-dc06-442a-bdfd-7fb666812232",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "00f24b9b-29fb-4e41-adff-9ee7d38e5e81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c30957df-e0dc-45d0-9ed8-925d0afbcb87",
        "cursor": {
          "ref": "0eb2477b-e68a-4cc4-9e71-bcdee83b4d6d",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "559a5ae8-cd5f-40d9-81a8-3b0f3d55f91a"
        },
        "item": {
          "id": "c30957df-e0dc-45d0-9ed8-925d0afbcb87",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "43e2d04b-21e9-44d5-a4bd-55aa21f077cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd93d203-f19f-46bb-a19f-cadff67c160b",
        "cursor": {
          "ref": "37dc24b7-5438-4e5e-aa85-774aedc46890",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "f6f55e11-c881-40e1-9a2b-ba45c83c537b"
        },
        "item": {
          "id": "cd93d203-f19f-46bb-a19f-cadff67c160b",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "7e8baa2e-7e5c-4493-801b-39788233550e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f27d76a9-827a-4ed5-ba8e-d0c72ef8660c",
        "cursor": {
          "ref": "07225466-3fa6-4f58-9c78-82107917162f",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "cbfa4e66-cffc-4e5e-b160-1cbb100b6bd0"
        },
        "item": {
          "id": "f27d76a9-827a-4ed5-ba8e-d0c72ef8660c",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "30511fe3-9055-4707-af44-47cc41df91d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1f887fa-db00-4eab-8c76-14c6a8bce1cd",
        "cursor": {
          "ref": "5fd8c85f-3407-4897-8b12-95f2ce3f72e2",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "323bacb7-ef7a-48de-8163-c33a69c9e61b"
        },
        "item": {
          "id": "a1f887fa-db00-4eab-8c76-14c6a8bce1cd",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "b364260f-5555-431c-bd36-4079ceace1bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a30a480-19ec-434b-beac-5089b52ca64f",
        "cursor": {
          "ref": "9bd1622b-00c6-41af-b569-797eb8a05e31",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "46bf2fa1-f233-4038-99c7-56b7bb2027cd"
        },
        "item": {
          "id": "1a30a480-19ec-434b-beac-5089b52ca64f",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "9edca270-0f1f-4d6a-a7d8-d9580cc07a56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86eb5f1d-4aaa-475b-bed2-fbcc7e023978",
        "cursor": {
          "ref": "a5204f62-c47a-4119-8a37-5df3acdf9a33",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "88d253c3-5360-4851-8943-9e25aa620f2b"
        },
        "item": {
          "id": "86eb5f1d-4aaa-475b-bed2-fbcc7e023978",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "252adac2-d136-45a6-aa12-3334fa7bac52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b97dfe2-bc27-4fe1-ae09-45878997d604",
        "cursor": {
          "ref": "88fb937a-037a-4a2e-9fb7-0a20b25a7c67",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "20915b27-1c81-4897-b7f6-76e43681264f"
        },
        "item": {
          "id": "3b97dfe2-bc27-4fe1-ae09-45878997d604",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "fd9cf9d0-8ef0-4da0-bd12-7d4fa68303ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ecf1a57-eaf2-4a5c-a4d6-36261f03e48f",
        "cursor": {
          "ref": "c969f888-59a0-4a9f-ad49-4c9891e04bf3",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "7b83f987-dc95-4f27-9ee3-2fe126ff7f02"
        },
        "item": {
          "id": "7ecf1a57-eaf2-4a5c-a4d6-36261f03e48f",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "8f32ec09-d1fa-4d13-a0a0-cb609a45aff0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbc0aa83-bfce-4b22-8f73-d154d5f968ea",
        "cursor": {
          "ref": "03dde33d-5ed4-416b-b34c-75615f07c006",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "5aee9383-4287-4a88-ad37-79d3035961ce"
        },
        "item": {
          "id": "bbc0aa83-bfce-4b22-8f73-d154d5f968ea",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "644f1485-188b-4a21-8ef0-d38c9777fbfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc1ba5fd-4b06-4582-bc4e-424b4667fa16",
        "cursor": {
          "ref": "2b597d93-d965-4a79-ac3a-fd63bfe68863",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "c5c1d3f5-fd55-43ba-8b21-593a04bd5ea1"
        },
        "item": {
          "id": "bc1ba5fd-4b06-4582-bc4e-424b4667fa16",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "666c066b-afa9-4617-8c40-887aa86526af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01be81fa-1e5c-40ce-b154-08e6dd33b4b8",
        "cursor": {
          "ref": "1eee6b9f-adb6-4266-b40f-4e7e476808b8",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "49db95a8-2af8-4141-a77b-923e361fc702"
        },
        "item": {
          "id": "01be81fa-1e5c-40ce-b154-08e6dd33b4b8",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "06145a57-aeb8-4b67-a795-d0deb07cf6f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7b94bd6-399a-44ab-a069-c31ab41213af",
        "cursor": {
          "ref": "04819fa8-7af6-4295-b352-18a843a70e95",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "bd7a6678-b006-40c7-8eec-9780238ffacf"
        },
        "item": {
          "id": "f7b94bd6-399a-44ab-a069-c31ab41213af",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "8477390c-51f5-4dc2-ae48-5afd6bf05935",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76971307-527f-4cbe-a489-92d6b8022cc3",
        "cursor": {
          "ref": "a409e697-49f1-4cc0-a79f-9e61562cbcc9",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "dcb3143e-5b7a-4741-ab06-75ef52f18a41"
        },
        "item": {
          "id": "76971307-527f-4cbe-a489-92d6b8022cc3",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "32d649d4-a75f-4b08-b6cc-5075198e3ead",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b22243cf-c2eb-401b-902f-e6d32d9f1c2f",
        "cursor": {
          "ref": "137dabf3-b65a-434e-9e2a-7f694f4a2e4e",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "bab33b92-8b0c-427b-9da1-fae08e3ed0c6"
        },
        "item": {
          "id": "b22243cf-c2eb-401b-902f-e6d32d9f1c2f",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "9606b3bf-770a-4d05-8695-89b092f252cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "663af888-37e1-4296-ae8c-8fd8ce651345",
        "cursor": {
          "ref": "ea3f18f5-6331-49a4-b341-a3a1382f0e81",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "b15feef5-af83-4684-96f7-3317e018a8ab"
        },
        "item": {
          "id": "663af888-37e1-4296-ae8c-8fd8ce651345",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "dfae3d5b-4ec6-4811-89f8-924ede0f2b39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbddc59c-3916-40cb-b7a9-4752ccae5ac9",
        "cursor": {
          "ref": "c3162551-5075-4051-9c12-d63822d899db",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "8af49270-3983-4809-96df-f8b7c878003e"
        },
        "item": {
          "id": "cbddc59c-3916-40cb-b7a9-4752ccae5ac9",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "c88c6ea4-281d-4498-83a3-54a9681c6ca4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3464159-18a6-44b8-96e1-1c19489ca257",
        "cursor": {
          "ref": "01dc5a69-393e-4e8d-942d-eee6977bc51b",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "ff513285-9fc2-4ee5-b7c2-d2e5f3777b14"
        },
        "item": {
          "id": "f3464159-18a6-44b8-96e1-1c19489ca257",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "d519056e-ec9f-44ea-a27a-e8e2a7f861a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "032b3179-cfc7-4c0e-9ce0-cbd9c5a23d9a",
        "cursor": {
          "ref": "b03c1895-4184-4194-9424-73b004bd155e",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "66d8c6f3-e218-481a-987a-d34e30099ecd"
        },
        "item": {
          "id": "032b3179-cfc7-4c0e-9ce0-cbd9c5a23d9a",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "68928af6-58c0-486e-a9c9-89168f1618cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61ed719d-393e-4076-b590-77c936101a93",
        "cursor": {
          "ref": "c7fa12d1-51b3-4705-a35f-878983d14dd6",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "32825b40-3489-4600-9cff-bbec9b9f53e9"
        },
        "item": {
          "id": "61ed719d-393e-4076-b590-77c936101a93",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "54aa7596-8c54-48fe-8f28-6727d87f2ae9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e1a9713-41d6-4d90-83e6-239a4373b0a3",
        "cursor": {
          "ref": "f3ecb603-6c6d-4bf5-9418-50dc59e90a2a",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "ae00c050-bc46-4a64-85c6-91a6c41f444c"
        },
        "item": {
          "id": "4e1a9713-41d6-4d90-83e6-239a4373b0a3",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "82eabd29-944d-4520-bb1e-81b0f3d01bbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d17e577-175a-4240-8e35-571eb52e7309",
        "cursor": {
          "ref": "8c23aa6d-cf3b-462e-a07e-cb7c8a8e2f05",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "4b7e7085-c928-4b4f-abf1-d58df14ff635"
        },
        "item": {
          "id": "7d17e577-175a-4240-8e35-571eb52e7309",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "8fd71e1e-ec3e-4a9e-9d88-444073780dc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b516a221-bc66-4085-b73d-d30c8129bf06",
        "cursor": {
          "ref": "b95aafa3-0389-4891-9423-a58a607ed1c6",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "483b965b-3fc2-447b-a223-a9cc41544e18"
        },
        "item": {
          "id": "b516a221-bc66-4085-b73d-d30c8129bf06",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "0d8d23c9-c6ec-4785-8e2e-6f5f9f3523be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dbb38af-4415-470f-b3a0-25be8d3d7186",
        "cursor": {
          "ref": "226b71f5-64bd-44e3-86fe-2fc0f79bf839",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "747ad249-6410-427c-8877-ce7239c7a1e2"
        },
        "item": {
          "id": "8dbb38af-4415-470f-b3a0-25be8d3d7186",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "b704bfce-953e-4e38-92cc-bd7a2cee3417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21f2dd16-8931-49ee-9158-e52d4ae3006e",
        "cursor": {
          "ref": "a26d2a3f-a4fc-4e1a-a5a1-aff79f10a243",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "687ab3dc-a416-42bf-bf4d-78441b3105ba"
        },
        "item": {
          "id": "21f2dd16-8931-49ee-9158-e52d4ae3006e",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "268d5fbe-dc59-4051-b4fa-943f56e16c21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fd0ae90-a5aa-4611-82e6-c5c8c4879413",
        "cursor": {
          "ref": "4477a0a3-76a4-4aa8-bd30-86306e72c67c",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "3c05738d-720a-4ebc-b83e-2337f62519cb"
        },
        "item": {
          "id": "3fd0ae90-a5aa-4611-82e6-c5c8c4879413",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "cee9031d-f292-46c3-8a43-2948f822e2a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73e9ac77-4717-4a12-8728-b7cf7980b5a2",
        "cursor": {
          "ref": "65bc4f90-2718-4c79-bd06-ce8b428a47fd",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "5a0f64f5-14f8-4be4-a897-4612fa4406f2"
        },
        "item": {
          "id": "73e9ac77-4717-4a12-8728-b7cf7980b5a2",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "0b47e183-2af0-49dc-a738-922d2d26e615",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f97e551f-9e7c-4c84-be8b-50873788d67e",
        "cursor": {
          "ref": "d2d54238-048c-4440-b39d-45773d7ec309",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "ca234e30-bc36-49aa-8209-fc5279dc45ab"
        },
        "item": {
          "id": "f97e551f-9e7c-4c84-be8b-50873788d67e",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "95d7f656-ff9c-4bf5-9753-a07334d6481e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "328d80c1-34b8-46a7-9740-0fe1deadcfbe",
        "cursor": {
          "ref": "8693afc5-203d-45d6-84dc-32a0ee7b09b2",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "b23908cf-9650-4546-b373-4e570a3d23fb"
        },
        "item": {
          "id": "328d80c1-34b8-46a7-9740-0fe1deadcfbe",
          "name": "credentials_verify"
        },
        "response": {
          "id": "30308926-f754-4b44-90af-78d8a955897f",
          "status": "OK",
          "code": 200,
          "responseTime": 1187,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "0af96ee5-370f-4411-8d7a-901b62fc2394",
        "cursor": {
          "ref": "cf5d6fe4-e8cd-46a4-9dea-4ceb7f38a361",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "8b03f85c-61aa-4a4f-ab9b-4088e1942bc5"
        },
        "item": {
          "id": "0af96ee5-370f-4411-8d7a-901b62fc2394",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "723a8ef1-3663-4b47-99be-9bf96109dd6d",
          "status": "OK",
          "code": 200,
          "responseTime": 1195,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ce9c902-a075-47a0-9b0c-07da166ed19a",
        "cursor": {
          "ref": "108400c7-9514-4978-beaf-dcac6632c5e5",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "40279a30-4d08-41a2-abab-ec5eb2a7eaa5"
        },
        "item": {
          "id": "5ce9c902-a075-47a0-9b0c-07da166ed19a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "41ae3f57-a22d-4b95-9b00-cc3b2a2ecefd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ce9c902-a075-47a0-9b0c-07da166ed19a",
        "cursor": {
          "ref": "108400c7-9514-4978-beaf-dcac6632c5e5",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "40279a30-4d08-41a2-abab-ec5eb2a7eaa5"
        },
        "item": {
          "id": "5ce9c902-a075-47a0-9b0c-07da166ed19a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "41ae3f57-a22d-4b95-9b00-cc3b2a2ecefd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9185f89-05f1-4101-b169-da6bcc13350a",
        "cursor": {
          "ref": "1032f2ba-5c11-48ba-a4d3-30f327318e92",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "d36852da-06df-45f9-b398-0609cad12d06"
        },
        "item": {
          "id": "f9185f89-05f1-4101-b169-da6bcc13350a",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "39eae506-e2eb-4e55-9158-16fbed89e2e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "140e80a8-ca68-4ece-9fe0-d10e0c7e9304",
        "cursor": {
          "ref": "989eae9d-6cba-457a-8fdd-a0f85cb04142",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "ff02a8c1-45c6-424f-95bd-29803e60ec6e"
        },
        "item": {
          "id": "140e80a8-ca68-4ece-9fe0-d10e0c7e9304",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "dbc6c894-f4c5-4e13-ab63-37de4a24583e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}