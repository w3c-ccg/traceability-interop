{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "fb67af9d-70f3-4e85-9436-52be4e847e00",
        "name": "Clear Cache",
        "item": [
          {
            "id": "eba84c05-72cb-482c-a040-13f385075e8d",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a68ed56f-e030-49ab-adbc-268a9aa436f9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f2b04d19-cbf5-40b6-b8a8-7eab2d6907c9"
                }
              }
            ]
          },
          {
            "id": "48d008d2-d80a-4c2a-9d4b-f96c184f4d37",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9c72015d-2970-4498-b4a8-a86dca29deca",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "9e49f877-338d-41ab-a328-7e52d33e0b51"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "ddf55061-6f0b-4275-8897-d58d5de7219c",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "2841f371-fa82-4b12-9ea4-e9aa8ef1feee",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6e021d81-baf4-4b45-ba77-874a25cc032f",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a4d0efb6-772f-48db-b8f8-533430102b52",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cdb52a60-c521-4e72-965b-e0bd8ee2c1fe"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "41865c91-ed7f-470f-a1ed-0f53faf2ccb5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b15b5ee9-8665-4c4e-9635-68fc3e1c7636"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ab6f3eaa-67d2-476c-b493-e89911cc2f87",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5c386af3-0720-4d2e-bb15-786366b5dc4a"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4ba00cc0-2ffd-449c-beef-c1e498236825",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "40c12c57-c945-4e2b-8086-5e37ed8976a0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "82db4def-b02c-4723-8281-5c80369418d3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "91979ecd-d9a4-430c-bc1a-b7f10ea5a888"
            }
          }
        ]
      },
      {
        "id": "fd921072-7a54-4847-bee4-6e797d3c98a8",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "b4424cc0-0ff6-462d-bf3a-98de83ef9df4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c25065ba-aad5-49d7-b708-1d23319f8224",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ef13dd8b-a44b-4919-a716-80cf8d67843e",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d31706d7-5a94-4040-924e-2ac08d182612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ac3fe52f-fd04-4e27-a189-40570e2d48a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcf1324e-3308-47de-8808-71e7fbaa5bb2",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfde2487-1562-4611-a819-38179ed9c5c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c5059e15-9c6a-4900-af05-4105e8b70dfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e817b09-3870-456f-addf-84b002603583",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0815012-28bb-4295-be9f-a5c2d5a01c36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "17af364a-92db-4f18-81ef-52c3a566405b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f317acd9-3566-43ea-8b6b-a4cbbbfdf462",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5b1512a5-5834-48c5-b2e3-9439dc1d20d6",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8652fb31-0749-4880-ba6d-4cf5714cc94b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "97278fef-c135-4f6d-b20a-2fc9dec439c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ade96b5c-66a9-48d0-a7d4-e7db3a6eb39b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6caac461-c7de-4d70-8cf9-1f09ae478c8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1aab426-8936-44dd-811f-ef06356bb28f",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7661aee-261b-4ccd-b262-cb5641515813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "35073222-dc7d-4d3f-9aa4-d63872ed2c72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76476d32-c405-4cd7-8f54-bdd8aaea6033",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "aa02142d-295b-45e1-8d6e-798715792f1a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "39fe54a9-5d25-40ac-91b3-6d8a599a8f48",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8908d7a1-bfe9-480a-9985-df97adc46d26",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "76720b9f-1d75-4a93-9df3-4943c6f892b2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "ef7d5429-d3da-44f9-a2e7-3fbebcee6d8b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4dc261e7-90d2-4bfc-9944-f3686412e28e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "f2c95e06-218e-488b-b479-660833160ba0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a80eaf50-cea8-4e04-895c-0ea3d682f5ad",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8ebb70e9-c17a-4021-9f0b-b911484c4080"
            }
          }
        ]
      },
      {
        "id": "dff7c518-9d84-44a5-87f8-b44af77ead31",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "c080d38f-fac2-412c-9f67-1c378cf3ca11",
            "name": "Negative Testing",
            "item": [
              {
                "id": "066956ed-abd7-4cab-968a-c1da7c49f8c0",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "ab698d61-dbf3-4913-ac41-25e203636a36",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0f2ff3a-ba02-4e11-af36-cae75282ef7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80197319-850b-4869-af66-0e31aaeb2819"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c3853dc-32dc-4b98-a70d-14191432ba2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "61bfe88a-a1b4-43ce-9646-d53a60563f55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bad3ff4-462b-436b-9ebe-379a4726c565",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8a55d01-2bd0-43e9-b651-cd08a3705eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e5cb4d0-d6ad-4e24-b468-77be13f69617"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb3927dc-f9a4-4ccc-b299-bab397980053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "016a46c0-07a6-4e27-9533-13a9e27f3ccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deb3b4ac-5d35-4e6e-8a22-dc0d2147683b",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f37f531a-0c94-416a-a5df-2c6d477d7663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79894e47-52b7-4780-b3f1-17f95cbaf609"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dacc6510-5ab5-4e47-98a3-4b3cb6039a09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d2f2306-ecb8-4ffa-a1a4-5e225526e3be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "971706cd-ffae-42b9-8728-21b42865023a",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3205f12-4016-4e1d-b329-74369a998991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f91be8d1-bf76-4a2a-ae1f-d1e9f14bf52a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf0a0042-618d-4947-95f3-163faa3079eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cd21ce90-3063-4f79-9bcb-849ff25b6307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36993939-224f-4f45-afd8-2bdd4ad6a59f",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce3f69af-96a0-4e2e-bbaa-5661cf210c15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adcef892-87f1-480b-a633-dbd74beacee1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99c09bb6-4aaa-4e36-b6d1-8a22cdfa01d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6cc66ccb-e578-4b2c-967f-e436aaa3560f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8cd3366-0f8b-401e-a64a-62d16ef085fc",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f30e153b-3d7f-437a-8e32-d8dac13b681e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1e4b22f-1479-486c-b82f-1b37cb690f5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dbea584-4a6b-4b1a-ad28-921c35bedf6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f21415b-3479-4b72-a7af-84d2d27a3a03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8238a713-e170-45f9-842d-3fbf34523831",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cb4cde4-9171-4842-aa38-b1a052176421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99237ff7-db61-49c3-bf11-d00281bb0991"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c0e2dcc-7d6f-45cd-817a-3400b65e9bf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9f736ea2-f39b-4248-8ea9-5c8808ab674e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f60af56-909c-4063-ac72-45200f710451",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7208e46b-e2fe-43bd-80dc-7c7dd8cd0e9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b1ecf12-6be7-4d04-bb32-3ae68923d4ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daf17e3d-371e-4725-a401-e55c96e3df6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f6b7137d-40bf-4e97-bb7a-d0d2f30b43d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aba16b9-d3a5-4750-aacf-e62b0dab8c16",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de7003a6-47ff-46b8-b113-84cbf278b811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd6fa863-9e60-4be0-8978-41c8f591167c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff75113d-0db6-492d-b410-6bd0ee5f21d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3c984235-ae93-4649-8cd4-e0fcdd340ba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8a3fbe8-8880-4099-835e-53085f7c9bc7",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34a7bf36-4526-48df-9d36-d96bcaf8862b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3cfe384-b642-4dc2-87ef-20dbe1b25d91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bc65884-701f-46a3-9e8f-bd07d354d8a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7ba68860-b7a8-4c35-8786-b8694d33526c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac6ebe51-f047-4ba2-a317-401f9ee48ff2",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "013760a4-0be0-4aca-8411-c2c46590d5c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60a604aa-d620-4aab-b4b1-df2d5363683d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0710ca78-51f4-487d-b674-090dd81f38c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "df561ad6-d218-4002-a89b-a93be2943806"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d05ccbdf-1539-4aa2-accb-b96341f59eae",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34ac4e80-8a65-4299-81c1-4726648eb5a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b8d1474-cd8f-4721-a535-0d79156658ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67d870e5-db48-4579-8558-f55b15e79a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2fff0a7b-8f33-439c-8094-4daf08b590bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29c2a327-41bd-40d7-8e5e-403403624199",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c064e5ba-95ac-4bf5-b551-428abcc055a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c3b1b60-98b3-4963-9c54-7ca72465a1e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2d4f0c3-9208-4334-96c2-0b1c69c2ca8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "56255457-534e-4ff2-959e-6d338c03dade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35f9f0cf-2f4a-4c9b-86d5-44a17ba6fa60",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66df01ae-78d2-4712-910d-ec330fd1525d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "646daf69-8467-42bc-b064-74a06f8e0fdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a351680c-2410-4d5d-a9b0-1704247840d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "60f48d80-1beb-42ce-9d6c-a6f1b38f8bf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ea0a940-b502-472e-855e-2bedf25f7b6b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "601d8912-5354-4542-8919-e74522c4781c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3defd07d-91b1-4a25-b331-70a698b7297d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "838ff4c4-c2d2-4f0f-83b7-1c8eea3344aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "65d75f43-117b-4329-93f2-b93590d1632c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "435a59b3-9f64-4eee-b94b-222b9b02f36e",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0331e816-e221-4f80-8186-f98eefbc5d18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dd8024e-2ee8-4bd9-943e-3c2bbc6caeee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "755ed5ef-e235-4f14-8525-486127d4d7fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "92de538b-f3ce-4adf-b41b-1a4acb4d08f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd88d60a-965d-44e0-b947-84fd4b1b4f79",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c493fcb-b0b9-4f78-aa5e-f8da9eb7c3f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a0cd8a5-0307-4dbf-a095-0f7d323e3466"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54239360-a174-4a15-8570-ef9c730e0bfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b08d7e11-84ac-4243-a1e6-3c3ff5b0154a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70d91164-6d72-4832-aca1-fbd73fbabf19",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5f01307-5d5c-49dc-b793-ec961e6c1134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "263631f0-cd5e-4b06-ba2a-5b5a7e2e9135"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcc54742-177e-40c4-9cbd-041cbe247e95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e3fc6b8-a7f8-40bb-85a9-5d2e8e921a1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76e46362-be2f-4edc-82a5-079f68ada447",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "739ca5a5-3ba6-4d3d-bc4b-5c5605b1f568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b78c7d0c-1829-4d29-853a-d6213ab28f4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24dc604b-b757-4a89-946e-15d2470a1943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b6e7f59-a40d-4e02-aa64-3dacd252ffbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80dc9206-15ed-46cc-bc64-f8114dbfea52",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d552bda7-26d4-4a35-b206-f8e8aa1901d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9dd52a8-2940-4df2-bce7-7f4e07794bb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8db9cebd-86c1-4a79-845b-89fd9f07bd7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc5be592-0c8a-4ca6-b1b3-d29b9532a9e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b512b20a-148a-4b83-a68e-34a26b723d30",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb8f52e6-f448-48b9-99e2-4c902412869c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "059fdc37-c644-4c51-8321-04c078658665"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "978ca903-68c9-4f1b-9bb3-fa28ad6699d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4b53c1a-aee0-4f3c-93ee-e54d23007c48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e06b9d12-bbfe-4f5b-a426-dee7bd4c89cd",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6921d12-020e-4fd5-8f48-bc7e1a8f2719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa220ced-6a38-4652-b8a2-626b72b4a820"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc382e40-87f1-4cf7-9528-c2ffbe5cc1f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d64f2e4-21b8-4b64-b722-c4120fabe3ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fac0441c-a564-4e0f-992b-6206edd700fb",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "009374bb-1532-44c1-a600-82b0375f9417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c21c4bc-4f94-4268-886c-24264cfb19de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c0e1d10-51f2-47df-9026-71321d34066f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8d0427f8-16ed-4477-ab92-fc209937210a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a02991b-da07-4c12-a868-3867b56845f0",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c702afb7-f093-4d6a-a3b5-d32c31d23028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d94da446-1ae2-4f88-a11a-47c0ac922efb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "147d683b-117d-4948-a158-ea5713fc3297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "63ed2863-8e50-4c6b-b738-131bdaf43c61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96cb0348-aeb8-45dd-aa6c-29282b9e601c",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72c6adac-b9cf-45be-b5db-5e6df10be991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e95ce29b-eab4-4aa1-8acb-6b66ff2b394d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3171c474-b502-4290-9fcd-45322e91c72c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "468c6b9d-38d8-4931-876a-a68a6fc15259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14141cba-c1d1-46e9-b2ba-fd611668bf89",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5048d892-faf4-47fa-be6e-fa544ea52746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13dbdcfb-c608-430d-b6a0-331ebaba8480"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a559b36f-342e-4785-90d2-082af75fd16c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "90f042a3-2cdc-481c-aece-90004fb14b89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7134587d-1b3b-48dc-a9da-fd1ae8778cbf",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0bc0d8c-a648-49c1-880c-545cebd3686f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "417cde5e-fc2e-4774-a8c8-ec16695ab463"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ff626f8-fb59-4ab3-8cb8-615e6f01efc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d1f252e-a8fb-4c5e-beba-942a84771f64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0726f0b4-f49b-4736-9977-cd0deeccf617",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3176bca9-9f4b-4cc6-86ab-f5a3ce610bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2d963f7-097a-434a-8b85-7577d35c0ce1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31871add-06b1-470f-a904-2db452da1547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "524bbf23-02fb-4069-baec-a8f5b3d7fece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0281d91f-2dc2-428c-8e18-06420563a553",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a937250-d8d0-4cae-8a2a-0d3482c3a07b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "338fb509-ff88-419d-b8f2-9d3199e4237c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eaa738e-a645-49d9-9b51-6fe002b5c5e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2b0b98b-12c4-4ce2-959b-466aff3595d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4d4e61c-7687-4fa6-a5e5-47c8cf800e26",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c96145dc-5f31-4b0e-a0e6-f0459baae8cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d70347bd-57e4-43d5-8286-7dac18625c29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f1f2ee8-0950-4a51-aa81-5c1724d86575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "3663a90e-f987-41b1-9b3f-956b4be25259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a35b777-4216-4c25-834a-06102c15e4b4",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a887bffb-114f-4a77-8b17-6c9026d51f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fe9cdac-0764-46ac-b05c-0a35eeed17dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6108291d-55c6-4d59-acc0-0c924a2e0c5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "930a39e5-e3b1-4095-9891-571d1fab48b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9794d7e0-3717-4ab8-98d4-436a9306be60",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30214562-90a7-4fc5-82bf-b881b82561a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d8378aa-5c0e-4145-97a9-c42b26da0acc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eef55088-bc8e-4107-908b-93ca34c4ccd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c7cb69e-fbd3-48f9-a6b0-b2c675b12849"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62e97980-c171-464b-a454-a3aa9aa181e9",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27d77b3e-2322-427f-a5a8-5a918f5173be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fcd5234-73f5-42ab-8776-4f6f3dd901be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "886e4cfb-63e4-4656-aa75-7681415b78c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5857851-3b2f-44fb-bd48-f7fd3a9846fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0672c53-2589-4d5d-a287-e24ecb9e9669",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dab2a895-de06-4ccc-ab90-42684890f4fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4bed222-c5b5-4a8e-b64e-22868b97d9e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "147bdb30-9915-4c57-9a38-f6622f06c658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "481ba7ad-a999-4151-abba-02975c524172"
                        }
                      }
                    ]
                  },
                  {
                    "id": "606d57bb-3096-48dd-9db3-584c66f46666",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d91bff70-4279-4514-8cc3-b0ff910bad49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dd180da-2923-4f42-94d4-3e9f2310b32c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92be8c46-7608-4f97-a9aa-13f01806c69e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "618d2ea2-8812-4f6a-93e3-db06528530ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fcfdd66-9f13-4dbf-8577-829269b6b4ac",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93c3f938-d87a-4dde-91a4-fccea175f19b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cb1f4ddf-3d63-4c70-a254-2ab0848b6533"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "588ab9fd-4480-4246-8f51-67f8c6b9cd76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c6325fc9-e5dd-45b3-b43b-dfd1b598303e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bc7e1c4-10af-4705-8a38-63ceb8349caa",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6473d250-77c5-4775-a9b9-82f2f06c5d39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c22c3d2e-acd5-4127-8072-34ae8e166152"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29161fa0-233b-433e-a728-19de55cbe072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e236d506-b7d2-47fc-a7a9-3e411d604ade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d06d5290-7d7b-4016-9941-dc7fa35c98b2",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b9b4969-23af-44de-b92f-4132d4373414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bda978bd-475b-4b2d-8c6d-32455e364580"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "516013a7-e73e-4a12-a928-e54e8b027047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8292101d-8353-4bc8-86d4-f340ba544796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5cfc678-8896-4e49-b55f-fa1e14b72552",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4394a1d-0b9c-4ff4-a601-0b1a1ae6ee79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b07bd3f1-8fa2-4f13-9d2b-b176263284b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11648961-0c71-486a-8308-2d9d6e4758ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf5a40c0-b60a-4f32-86e8-295a5f9e3065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6270c0d-ebb0-47a4-95b0-857bff7ed307",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0478d52e-7b4e-4aa6-91fb-7d3379287878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf08def2-389d-47fa-a7a6-2733d1253f55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f935fd6-22ed-4b94-afd2-537e2ef652c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c40abc5-539d-41a3-b9cb-8c990226284c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba81b50d-abe2-47f0-9d3d-58f743d4bee0",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0237e6e-eccb-4018-a761-b733ff6695f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea55b64c-864f-44bc-87e1-141904d791b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34904fd0-0914-4dc1-be7c-aaea4f1a053f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "104a6ef2-a85e-4e16-8006-9a5b1e1bb8c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a940e529-242e-4ea4-9c80-0ee6f5af7067",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3a15acc-f292-4f89-8357-986e70dfc74e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fb7ec23-c36b-433d-bedf-7d8c237a05e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebe22f4a-7c79-4611-8202-8e28e77a8441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "34047155-b569-42de-b7c2-e3f99d55bd2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "449419fd-5cdb-4939-bdeb-0b6435e6a85d",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2feb89be-d82b-4087-b707-d3a0db960044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e23fee0-a6c4-4ba3-aefc-47bbe957590f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0334aafa-a85c-4aaa-8321-a33c50f4d667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d55c18e-3459-45b5-8b2f-82da02d59ce8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28308071-c197-40ae-9c0b-a74ce37c9f3b",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "529363dd-44b6-4baf-95d0-d39834884b7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "081c1032-5ddf-4197-805b-fee3aa1d5a1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f06baa8f-892c-44c6-8254-04445f4f1066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "1bc7661f-dea5-4ab4-974a-097a324bc260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bbb1a2a-6274-47c9-a3ea-8a37c20ab080",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "414f3e1a-87c2-41ca-9c21-f3b42c1ee810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce44256a-c75a-4067-a53b-e3555c74e5a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "890f91de-437d-45e7-8c18-e162117cfb26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "83964316-eb29-44d8-903c-5d0c6857d654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8a5d222-4283-44d1-98b3-6a9b573f8836",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36ce3c21-b978-4463-a363-acc8333393b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da00eab2-6afd-468f-a8a7-6198a76daf20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aac88f0c-6222-41a3-83af-4be41857b256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5171478-016d-49c4-9b30-451731e0a59e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77b1f3e6-1aa7-41b5-bcbd-855e0f49a70e",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68c464c6-09eb-46bc-a6dc-71c74f9fb30e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5d7e14d-b1aa-454e-8950-fa889ae8ff15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37c122fe-d4c1-40f7-8cbd-464b5a180e5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5bf8cac9-84dc-433b-a103-be62e59650ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa8bb80f-8901-4c5b-a63e-ce84eca9fad9",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c048653f-6991-41d3-b362-55fc15cd8f75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0563e70b-c4d1-416a-b731-4f33021fd2dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b9dcab3-581a-4e08-9f6c-390abba16d8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4b3f27d-137d-4d75-af80-ce21d2438c0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb56d17f-f04f-465a-9434-84b251d61446",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3d79935-6ed3-474e-b151-1c640fc97238",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1df23652-8ae1-43ad-a2ea-eccdd2578c91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99b12563-356c-4c5e-b599-aa89ef97c610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "63a2f1d6-f03b-4da3-9d7d-d4143a310c73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc28c2b1-1da1-45b6-b8f4-11a5659312da",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a820222-ad9a-4d8c-9267-9372eda63357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03f41cb4-0745-47c6-a3ca-bac1ba2495d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f7bcbac-a89d-4cb7-a6bc-5bba5d757a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "66671b9c-cc31-4086-897b-3654810c5cfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac4b677a-9777-4c35-b378-a17d65c8f435",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fe3fb1a-6675-463c-826c-1b7383557e53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5a92d29-3465-43b3-a74c-3fd8af3ab718"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b19390a-3fff-4fce-9581-6a8f89127633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "cae6a491-441a-4028-9ee4-181149175414"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2255f3f-7535-4756-840b-2c298bb4d1d1",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51bf0f80-f569-4fbe-90b9-48ebff236b54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "891f5e46-e94d-46b4-a233-f9b8e8d2b488"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f846507a-21ca-4f89-b564-0ac4f8caa8bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bc2f970-f500-4a51-b87d-7976937d7df1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a7c80d7-ca99-47af-83f5-a1583384fee3",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e462c023-dd09-4dc9-a09e-07451c75b937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a177785-f952-4231-8970-92ab3d5b2a9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98f80059-1a3c-4d57-94ee-11db6be8ad78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9a834f7-3d38-49d0-b50f-a12f114a0607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "268ae3a2-7a24-4f6b-a859-ac9715f78fae",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5856f0d8-f644-4bcf-9017-8a3af6e88f11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93329db5-0f06-4ad0-9974-335b5f650d09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13df12f3-30a6-416f-80c4-c4a61dc333c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb25c862-7bc8-4e1b-b794-b7bda5e7c482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18b12e6c-9a1a-4011-a750-075513e3e24f",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "252aff4e-5e66-4347-815c-8106b2f47bd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "034fa760-c72e-4ea8-90a9-02b26f077470"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d86f047-1590-4c89-9e62-b88eab1b1584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ef1481a-2abf-4c6b-b05f-69d8beb5e3ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cea3c16-51f9-472a-9bb9-cd00fcce99f5",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cc5abac-cfad-4530-9062-c466e5b1b94a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a4a94cc-c977-4feb-a1fe-90105b29795a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "495f5482-d641-42ca-9a17-3d8d3b73c9c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "b3d3aa57-8255-4cb2-a504-65108ac0e7eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e2dd9a6-8457-4158-932c-76a19ef1df0f",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4876c633-1f1c-4b4f-b17e-338d336b801c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8016f53f-a4fb-452b-a519-5655b59554e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ea0e2d7-c9fe-4b57-8744-b082f975e3fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "583022f0-d590-45c0-88dc-6823f30c09cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6523f85a-20d5-43e2-9a84-afb8364faf17",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da6def96-6449-4c58-b6ca-0d491037d16f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9065c35-a523-41d2-9ce0-656a05ba50b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14c6337c-28c4-4492-9344-32e43b26fd71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e5a764f9-8d45-4bc5-8810-852f3f77d2c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd3dddeb-3bde-47fa-88a3-dabb7f0f03c4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f40ed6d-d303-4c84-8c94-6839e6a31907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dd3b994-dbcf-4d0c-82a5-19b17d8178a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78f47c2e-7d2e-458d-aa21-08ed2fbde881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "48bc6cf4-224c-4ac4-97f7-88ab786067f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11d7fb71-427d-4f4f-aae0-253dfaa31015",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "650cda6a-1292-4dbd-8c3c-ac37bab90a36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c53be356-eb83-4710-b58f-e1bc6c80eb23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f744fb9-414a-4b0c-a559-0c5f00efe8e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bab67a15-a717-41f6-ab6e-5f69d03bfb9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b4643d1-e729-4373-bada-30156c63ef1c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98d190ed-9ec6-4743-8986-f090ac4bdecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ffca9ce-61d2-4114-a019-1d16f53d3cf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9c8c2fe-3f11-4568-9b24-eb2bd08be1ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "09f4e067-71cb-4fdb-991c-ebe0a43ed9b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea466778-3dae-4050-b8bd-b0535f8bccbb",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2eeb5d9-4767-4167-b85d-a9912cddea7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c18643da-2174-4ef3-9c1d-a5370cd79756"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5deea4fe-7271-4012-a2a0-b347b9e7be95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "7025ddb4-677b-4fda-a581-36cebfed3f67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba3d0a11-7c19-48d4-9194-fc4d7c397719",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "225d1c8d-02b7-4690-82ac-37260091e597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbfc799e-b5de-4572-95e5-d823c5732216"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25f70c5d-5791-4741-91ce-56d77e691890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6204a44-ba7d-4073-a68e-73e750ae1bd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1d353ec-eb2a-409e-a600-9040d560fe8f",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9920a008-e5cf-4fa0-986d-b3bf824263ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f629c6e-688c-46bb-bc0f-b82fda54b729"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f00eb369-dad7-4500-8fc2-3825e99268f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb10fdd6-87a5-41c2-b238-2101cee048c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06c45789-f053-42af-826c-8ac3d213b785",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d59ee65-4dce-4b72-823e-f4f41d5727ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0fba526-5a58-4782-9a2f-ae10e3056d81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efe09254-e8e9-4756-9550-22fb8d9f3962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1da23167-86fa-4869-b7ea-0e5b0077982b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8405955c-fccc-4ca6-b457-2f832ebea6f8",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9028b799-e4b5-4dcc-8cae-3e15ffd92857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d06668d7-28cc-4503-8199-b7ea6bff710f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c1ed1d7-8775-4020-904c-8f05bc05f3e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd31ef1c-a33a-4916-a90c-b675bd8dcc98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc4fce4b-c2ed-43a0-a785-f7a9f32cf03b",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f946fd6-152c-40d1-b838-2540172a89b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83f4f2fe-2a69-4396-b3ba-a2a4c9105a8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5b5a9d1-a51e-46a4-a5d5-5484ce2d7b51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "635adcbb-d070-4184-bb32-709915ba379d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "233e45ef-d29a-4a25-9018-84536f00a224",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f59769f-1a6d-4fa8-bbb4-fc3296ffe539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04c35547-836b-4ea2-bb91-a7216cf389b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c6c399d-ddc6-46d8-8a6d-b4165cfe4cb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff9399b9-0845-4f98-b989-7dfc150dcb79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2e35211-2dce-431e-bf16-e0288ebd39a9",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7273f6a9-1c3d-4a84-bade-af0f2f86033c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23b3e24c-f173-44c0-8c38-03a0e5f68b03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc0fd42d-5519-4e47-8fe0-c9964015bc8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "888d892e-1a81-4f33-a649-c931b1efa807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb919937-f8ff-4a50-9147-46f40eeab18f",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23513dfc-f54a-4061-842c-1f1d43de8e85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d8004b4-2e30-4d19-b0bd-0d8a289c4e53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9204bd6b-7c5e-45cf-bf73-e8d4d4c54569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8cbfce4-74a0-4458-a813-f9a471f53cb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2233f98b-7b19-43bd-a764-55b3133686f3",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4df90356-a125-4b17-8c2a-2e785c395e1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99b93759-3ed0-4fa2-be96-036e7f9b0801"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fcbb1aa-f9fe-4a19-8b0c-3604e1564078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "83325d74-820b-4bcd-935a-7c8484431ed4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ae1c002-7153-4dfa-9577-1d59585eb081",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b664a102-2f51-475a-b5ea-471cce85064f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ea2a0d6-9cd4-4ad9-a034-049597a6c581"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cddb6f2e-2cae-4c67-b228-15c3ac07d185",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "95b1e589-7869-4092-9e9d-f46f1b869641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "447bdad1-1cdc-4554-8be6-b8213b27f4ee",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33703485-45f8-4362-b177-5f362b8aff32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a59bd3ee-f2d7-4205-a279-8d24089e8d5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "314acda3-0969-454f-8aee-15e0129aef1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a4c4df3-b89a-417f-8447-74f5a2d99916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3de4553d-a5e2-42c8-b2b3-5b48897a0836",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65ed2bf1-259f-44b7-bb9a-e66f0ab0940e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a9bc374-7b0c-43df-8eaa-349a40b9f7a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "850e1116-10cb-4ee0-8ad3-a89aa32f03e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e5700178-c340-4edd-b9e8-6cb7c4d48e38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd038172-4fcb-434d-b8e3-624bb22d9146",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1d367e9-d64b-4f09-8d06-ad187f21cd23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c39ee86c-9bf9-4f19-b5fc-d8ed4609c269"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "883d6c99-9d7b-4b51-bb90-bfaf8c090d8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "70ac7e2b-b474-4ba4-b642-11b8fa8f4f1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b7d070c-11b1-4c26-bf21-f0119c31a1e4",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "321973c8-1f5f-47e4-be59-1af9e41c6dbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d669716f-23e9-48b6-be80-41a31b0f76f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79773581-b5b3-4be6-9071-d84f6f1c3888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a16c9dac-5c03-4e62-b569-593dbfe88c51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6a0570a-8451-4379-9fa7-efccd6541128",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "445b93b2-9343-499b-943e-a032995e4773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9df1caa9-34fa-4f20-8531-12b207bb7a00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6c2654b-0809-420a-afd6-c0dd9599e2cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "76a8aa1a-9eb4-448b-830a-e7b74ee13031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e41f8f3-8776-4aa6-a22c-ae8a13e57f4a",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f94bc19f-b2a8-4825-9a2f-c6e903648deb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab370eed-278e-49a3-85e1-ca6052190f94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef1c4d70-0248-484f-96e0-89f95d6f2535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d88a5c4b-1d01-4ab5-a656-1e41ac440be4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cb385a8-b203-4d22-993c-eeed7968f3fb",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d0c01d2-9eff-44e0-8f93-6bf08e494763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b415dd1-5e2d-4ac1-9932-d493c467af07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3939965-f0f9-4966-8e06-d8f09b16e7f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ade9788a-4dc2-456f-847d-f06369722be5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "429abe11-a1dd-404b-be13-dfaa7de3e134",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8f819eb-d01a-4507-abeb-3c8514f6b67d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33af85ee-083b-4883-b275-65ee94cefd74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dd81a73-6360-46cf-9397-1574eaf39555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "966ffde1-6ada-4ab7-845f-473a9d5fada2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebc8edc5-eba2-487e-9b2a-fb55a8c089ff",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "541c55dc-a5c7-4f06-b660-a04006526186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fb2a635-2b81-41dc-9ed3-fb631b174ba9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab6ceccc-72ef-47a5-8f39-8ab8d38fb3bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "efd61458-2343-4db5-964e-99b4f642da48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34c4b58d-6096-4d1a-95cc-65478ef741ed",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9693b93c-3279-4591-835f-849d0595a716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "395739f3-a743-40d3-b189-6303f9e1a374"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df5a0128-ad13-42bc-bb2c-e912adaa0a62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8d954f8-4ed2-40cd-9090-bb50e8e29d7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd7dbf2d-52a8-4107-90ae-0af7031ab4c8",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "986a3a54-c1ea-4226-a124-f762eeb5bed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "996596eb-3cc1-4090-b350-0b555277761e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79623e81-1dfc-4d99-959f-ca42cff7a7f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9e0b8b0-4fee-4429-b308-4e96d6d81ffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6e88962-c2d1-4187-9bbd-bf152caedb39",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df6ccf56-0e65-4fa5-8ae5-9115ca0284dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dcdf773-452d-44ea-8ef8-2bf75bd9f4b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec3c7dac-bc31-418d-b700-ad476e671485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fae02a56-87f8-42bf-b2db-3fa3c74def96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55a6a6a1-9b06-4e9c-a2b4-7ddf17c399d7",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68df97a8-698b-415a-80c1-84e66817e0ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6408012-384e-4add-a7cc-6608db659254"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8884729-5e2c-4b3e-a447-3aee8a55ecda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "82aa5728-aa62-4147-9f15-1c6e2e8d8842"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9040695c-df7d-404c-b59e-c3bf5c4c6648",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38814160-6594-4550-9f5d-a2703900bbfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d867af4c-60d1-4c1c-a905-9730c39744cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "747fa561-513f-40d6-996b-d33cdd5f9c87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e7175dd-e4ea-4c2b-b1e3-f8cecadeae7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2892cfcc-3d19-40dc-87f5-b97ace456d7d",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3934554-882f-4618-a905-7234f21038dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2675424-8cb6-492b-b996-2c88494d3f6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae8b3725-6c95-4d88-a2d8-49c118a6ced9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "533eb28b-f1cf-4281-8d7d-6ad20e323429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2efe4471-705a-48d9-a63b-3a50df4c93f0",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a027d11b-92dd-4bbf-9acd-9dbf4a139cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6416aaff-5695-4e38-99c5-a2f975ceb713"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c46c5be2-f630-46f4-bfbc-5a4b87f79836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9811208d-7af0-4100-b73a-4d63009ebbc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe8a7eb8-db44-4bfa-bdb6-349aaf7a9cff",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd12ea7-8cb7-4fd8-b4e2-0058f7f0775c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1e2899e-3b5b-4bb9-a7fc-cff8b1a9c98b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "270b2f9f-648c-433f-a753-52f67a1efe9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7eb6b694-a49b-4868-b6c3-70e2d744139d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f289175-51c2-4ab4-8cee-03e2fee0ea5b",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dba528d-a639-4199-adfa-51f043ade97f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "372a03e4-9cf9-4d53-9003-ca83f3093cd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83f33e5c-d941-465b-be7a-55b7197338e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4fd8dbf4-9a65-4cba-91bb-6d2290a99a76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d51205ad-cb71-4c35-90cf-f14c3fb54d2b",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a53025a-1139-4077-885a-752a0dbf4b93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df552253-1f33-439d-88b1-fa87d7099263"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "973873e7-73ae-4a40-8634-2146fe9b0f50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4688e137-3054-4f06-9d1b-411787a208de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e776d736-85d8-4879-a2f3-b452a413a5f5",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d11049c-33f3-4f27-a0c5-d5cdff19442e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "72694988-0e5e-4e19-a385-7d7565641059"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d21290c2-6d2b-4d84-af54-bee38dcb2f40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b90c98d0-2960-4ba1-a87c-f137fe81cc6f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c6372c4c-11c1-4126-9e7b-24a1ef680889",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "18491687-d974-45b0-bed2-c59fbf321254",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "913d8a9d-97c0-42e5-9a3c-cdd2ba511913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dd59d3cd-016a-4e59-969a-ea606704a6fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d59061e4-c2d9-40fa-a505-5e5890984ac4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "ef06857e-5ba1-4e53-951a-6831c161a8a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d6e09e3-77e7-4cd3-9247-dff8a3a9202d",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07e85250-1ce3-49f2-b1ec-04934b49b8b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fc4ed474-7254-49a7-98df-36863a60d7ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94df7dd3-9650-4def-b3e2-ddbc12e0e6c8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "a04386b0-d5ca-4af6-b32d-8ef1fd0ceb83"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "36e48238-06e8-4eab-b76e-7a5c5a630164",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0aad40b6-42e3-4b77-8b14-fea8c9abeee7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c75a81ed-d187-4cf2-8b77-8d15140c7289",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "15895cdf-e02e-497c-a51a-f16fbb779cd9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1961c3be-68af-4507-aa1e-1385086e36d8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b3cb9d17-dc5e-405d-9740-7c67aeab5a59"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "11445b4c-96cc-4141-974b-552c1d86ab3d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c58ff3a1-9242-4e40-bc01-3d9528d592cd"
                }
              }
            ]
          },
          {
            "id": "fbcafb9f-0f85-4d88-a53f-224d7b2df593",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6afa685e-7f23-46b2-ab70-ab073b7ee423",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a6443bde-4e60-4a94-8ee6-8af0bd327c51",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "311c2fd9-6681-409f-bced-d39687f3c73e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d6219c35-20b2-46ff-a418-f2cc8e9eab65",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0c621288-61d8-4b50-a086-34a6a991a4f6"
                    }
                  }
                ]
              },
              {
                "id": "cbf515e2-2db5-4540-863d-6069fccc6c62",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "de4c38f1-0b6c-4855-98a8-2506fddcb4a9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "52016e50-dcb7-480b-8961-6a8c4307b025"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5e36324c-9a79-4147-9ab1-ed8cbb34f807",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cec062c2-9160-40fa-a328-3387e48745ae"
                    }
                  }
                ]
              },
              {
                "id": "f971a385-a150-46ca-a0cd-a4948a0c6f8e",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e980ddfe-ab2a-46d1-9e6e-77b40fb8c797",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7fdb32e2-3c5a-41c5-a861-cfc290d50dd6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e51863c1-1339-439a-90ac-0ca5ca5d25a9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "614bcf1b-edea-404f-87fa-3d6ecffb4023"
                    }
                  }
                ]
              },
              {
                "id": "917079fa-ef84-47e5-902d-1fb1fbc0ae26",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ce620fa9-aa79-4663-8ba1-16495186319c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3b57baa3-7d7d-4198-8114-bd0e5581a5bc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "053db5d2-d851-4047-97a5-a25914a4445b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "2a2e7745-4851-4d93-b8f7-b2d5eb367efc"
                    }
                  }
                ]
              },
              {
                "id": "2533ebd5-1166-43eb-a0ce-c41391990b08",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e3c7eca1-76c6-47c6-ae5f-a3fa16a02f01",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1026ee6b-2d20-4b82-a2a8-bf02eb91455d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dee198e0-b5c3-4ae3-a0e3-bfd46ed6c6f9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cc7077c5-c60f-4ffc-bd1d-3142425db076"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "adbf1514-915d-406c-a3ef-23f39ef1c7aa",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2fcf0f99-9e71-4c44-a2f7-12f58859a3eb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "590df61d-927b-4c27-a7df-04278b6a7d1c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c4a28325-b4b0-48f6-84ce-c174f91337ef"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e8045db9-1867-4a3d-9b78-f1f9cd368144",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "9d143388-aab3-431d-b391-c430b3f4df0d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "84f2509d-ac90-4e4a-923c-b5db00935a44",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cd65260e-a2ba-4278-8d2b-80814fb7fcf0"
            }
          }
        ]
      },
      {
        "id": "624786df-508b-4734-b495-48eedc642d84",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "a50527a3-8671-4417-a56a-a742e5c38dcf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "39ec7429-fed5-48f2-9748-16cd5851a83c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0f05b767-45b7-4865-ae1e-63fe47efaf2e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0cdcf2a-acf3-4831-8b0c-cca1c0edaca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb60b277-6ad6-46b7-8ba3-207269174ccc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49313566-5277-47ee-a361-c347a9bb6d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "8bbc3acc-72ca-45ce-bb3a-db643c587b72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eab1f023-7a83-4823-b1af-13b4b6970049",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b46ac7d-c56a-4eea-932f-fcc4a8d2f344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84f75e82-fd8c-48dd-a2f1-2dedb7f2c0f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b182ef16-9f89-4224-b76f-792fb31e2547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d135118d-c235-4473-9956-ff9c1bd4629f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe0a9365-c6fb-4b13-bf99-7c04fdcca1f8",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "064dd5e3-afce-4233-8044-7aeaf90593ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1821953-f691-4c82-8ff9-d96b8c35bc1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08e6d8e7-67fc-4982-90ee-ce1048f7b356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5f4f2d0-def7-4658-b561-f71f1f59c6b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "163f9eba-ebfa-4958-b4f1-f9a032ac84b3",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ff616ec-bb5a-4039-84df-0ad9adc2cbcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "796131b9-106d-480e-965c-ce37ae17185f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94e00595-e5cf-407d-a8cf-64f2600aa3fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2782a81-486c-4e0e-8b09-af33903f9450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "311e7993-bc93-4dc7-b857-854370dbb5a5",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57296e1c-37ba-46cd-ac71-08ac4c964cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8da0e65-d115-4eee-9bb5-11e324cf4fce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d823e2e-7d85-47f3-87a0-08c7d15fa312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1be011f-2a88-4475-a929-d8a864fdf734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90c68d10-46b4-4934-96f2-a3503a090ddf",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ff38683-3af5-4de9-9a29-5a4adbfaadef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a821f3c-131f-471d-948a-c176aabec337"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70ee3fd3-1061-4da9-ac56-ec4dd41e55ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "033c82f4-a7b8-47d1-be36-c1521e86e2f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1042bac2-8ffe-4fc9-a744-42b52e23c454",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ea1ed11-fbd0-4751-98ae-c3896662738d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00928152-815b-4b2d-be53-b0675092978e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57f7165c-f60c-4f91-8dfd-4f6a6934c29a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b151dda-aa21-41eb-8694-15eb8de3e18b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d89df835-dd7e-47e8-8d9e-dbd4c55411b7",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "337eab86-1824-4ae9-9ff8-5b58f819d16c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d51bf6bd-7cb4-44b3-a4e4-34e5d9512d92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b09e97d-b5bd-4595-9ea0-2fd32a41a190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4db1891-b2b8-4fbe-9d95-4541843c412d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ec83e8f-526b-4ad6-8432-23aba50668d7",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0fe860f-9e65-4ff8-9cec-62946c41e442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fdbbc72-796c-49be-96b2-d0008f357bfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2db3a2c6-0116-4258-a61b-c1508001889d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6db8fa5e-97ff-4ffb-a0fd-cfe10804ebb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c90130ba-d7b8-4bc8-ae49-b9e1beb52a3e",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cdd6ab5-e1f8-4ab1-b28b-b6e7f5f9a5a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7713e0a3-f376-4ca0-89ad-628265e5e463"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c03690f-ff5d-44cd-bdff-94d2f990ab95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a249699-a6bc-4e51-8035-b85174595101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1acc31fe-0cce-4c60-9980-7f842a0504eb",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c47a29cc-4723-40af-ae65-c014c5d1b649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10c04091-a3de-47c4-bffb-4c840f5bf7eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b8d921a-5596-49ea-b17f-79cf7f23d5c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "fda66d78-d3bb-47a9-85c3-6ce4f99d1196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faa30494-a5c2-4f4c-941b-ee258b2a92a2",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5f7ce9f-42cf-4f1a-a204-d440eb7c2355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c79b1733-854c-415c-828f-08a9e29e45a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46cabc19-2d41-484a-aff6-d1807e5da338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6d8719cd-92ee-4537-a068-f42542fcb084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd3f607d-36ac-47aa-a0ce-f5b851cb6123",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd0e0cba-8072-45c9-9c11-5431c48770e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09cc5776-2a50-4f72-b8c2-0965eac06736"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "008055b7-b600-46df-8e39-3fe35f3b6db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6c52a71-c510-4c47-9aaa-6cae771708bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a296c80e-995f-4972-8907-dc5410e537ac",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97f12577-69e4-4457-98ab-9e65545696b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d70d723-1e9e-4f01-baa3-aef33f36c49c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a055b925-cfaf-49a0-99d2-70075a735048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "ddb42b2f-755b-4ce3-bc7e-ac6fc596bea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4959a6e7-8270-4347-95c9-d399bd553833",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3238719-d02b-4915-932d-e34e8ad7f6e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0557cd66-6ed8-480b-94d1-6a79b396328b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f305743-697a-4934-9d94-cdf5fc280758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6b51eec-7baa-4e0e-abb0-238edb01e423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24b0424e-59b8-4cc5-b75a-926a34e71dea",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8ce2a8a-0fb5-4282-83c5-aaf8f37ec8c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "588d1f8e-1f6c-4cbc-85d1-bad47a8abd86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b97552b8-b4a6-41ed-9b56-3854242c7802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "59ae2792-c8ad-4c84-ae4d-7f1ab634e802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9e04b6b-c315-421b-9c04-bff1d5462c6f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5f6a247-42b6-4cb6-acd5-3e8fb804bdd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7782be0d-3aad-4231-98dd-a85718114fbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "352b8e57-f45a-4ff5-b048-0d5b5bb57506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "904763bb-e4f5-4d43-a717-fb2826c17bd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72a128e8-3f24-4892-b241-2f1a5d96b4a4",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cee2dd0-fff5-4efc-800a-34fb31b58766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04a959a2-2306-4e1e-b04d-c1f6661da8be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2641d9ef-b391-44c8-beef-9dc9d7ac3053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c7c1d3d-0684-4c64-805d-f0f769c41ec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa9d046-eed4-49f2-b821-4d7c4ddb9520",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f64cc94e-6de1-4652-8696-c7a935ad9881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "464ee24d-abfe-4be6-9f9c-7ed54a6ddabc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c00f3530-e272-4987-a928-1990241aacff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac51332a-1313-420a-8216-8e1b8dc93379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2b2987e-d419-41b8-aa15-2c1e2355ba32",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "256fd6ff-0942-4c72-9e46-de9313cab80b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d12f9a1-e751-4a2a-a434-498206cc63b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c466d9d-fe8e-4a46-8660-adff107bf578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b1a8176-7f90-4ce0-8028-7d80f23aaad0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4d533f2-d51e-41d8-9639-94ed283e6c86",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db2a07f9-426e-4f9f-b90c-fa0e4ce8dcbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "276acbf7-c21b-4bd0-a3ee-06bc77d99be8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1de99880-817f-42b4-9f47-4439ea69c2a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "834177a5-2e78-4624-95ad-4a9c13cc1808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f3fb344-398c-40d4-8239-33c61b4d2132",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c4ff32e-b7a2-4fff-99f3-926c653d7005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a11ed28e-e8a6-4f32-9bfc-a8cb3bcc292c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa4bd7b7-3306-43c5-b8eb-430f0cd5f03f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "abda621c-fd6e-4a37-889a-e83651bebbf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "946c1304-a1a7-45ab-94a8-557a96a0aafa",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc50633b-62fe-4236-8be3-30b7a9e2e465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a1462d6-d28b-4ab3-b43b-0fdbe5a9ad2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a1d60c7-193f-4d7d-aaf8-a4d18de75f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "def01446-1475-4919-8e61-d990f84db342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "212bc681-8b0a-4d15-a1eb-5c02b3c9a384",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7593888c-ca61-45a1-967a-9724934cdba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6da97103-b2db-4a93-8779-4b524858702d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e062ab32-ad2b-457f-822b-bdf1e09ca288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "18bb1e11-aa88-4ac7-b3f9-e37c328bfbed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0a42541-b44e-4fd5-9e2c-d1821394b598",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04889730-0613-4626-aa92-04770b98d152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a67a508-79d3-4fb0-bc74-285958d3607f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87e6145f-4c62-4981-80ca-f63345964a8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "390cd218-708a-48e3-ab96-fdff66f41904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61d6bb47-4ba0-4fcb-af7b-633212dd21b1",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc31f6de-75bb-48d9-a2b7-52b181205c66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab3946b1-f16c-46e2-9c59-daab73921b53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7236ab7f-f06a-4448-931d-e8054edbc4b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea446e8b-d4b1-4af7-af3b-94636cabcb80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e3e52b7-6f3a-4efa-a178-55fbed692a32",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa91d885-24c4-4aad-a2ee-afe705f3d1e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5907577-865f-4874-8515-b6ae5a0ecae8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fd194d0-5636-48b5-8a93-5330993bb854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "846c32b5-b9a0-4ec2-b29d-af5a122f6388"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e653e606-d5f2-4501-b206-316fbc26190f",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c01667f-59b0-48e3-8427-ba2ab84935d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "311c44fd-1d8d-4d0b-b71e-fad202b4c6e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cbb280c-d5ef-4340-a023-49eadcd38da8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36c94c83-2566-4996-9303-db85dd1bb703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31482767-92e0-4d5e-a0d4-536971c167da",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "261f2a7d-8eb8-4ffd-9c91-eddceed96370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "886e8d54-60fa-4487-a494-6806d486cdc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf56535e-6fdf-4337-8257-64a9c772e82d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e68862e7-9b27-4229-b673-4f5935d082d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4edeef9b-d609-4988-b09b-504b00398493",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0261176d-edb3-49e3-9d54-5c46c652a495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb147ac9-2a35-442f-ac42-38b011d4320e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28945032-03e4-4521-8b1b-394d52d15f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7693c6b-36a6-4491-b50b-22340ca7e859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "205d4cda-4591-4bcd-a8f2-77cc91fe457c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4745adb-600c-43bc-b4a3-68dd80b97e72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a62b7207-8212-4449-b096-cef2a0f19909"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8542c3a4-ff36-4039-a555-e2e639abae61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ddfd36a4-4a36-410d-a67e-a97f8acc9c59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f02830f3-e9e4-4014-acd8-b7999b37ecf4",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fa2ff72-aa51-4cec-806b-92a0613c6a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0389d103-b38f-441c-8a85-dd67ef0b1de4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19b5e7a8-c822-4241-8990-f67da22d6ca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d419583-4418-42ce-a976-6ff20e5a6cd8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cf5cb0d7-b921-4110-80f5-e2d9d20b2fa6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c1f7200a-ed94-48b8-981e-7e5dc2d3dc4b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc765dc6-87da-4fb9-9af7-7dc43ac188d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8014457c-7f6a-4679-928c-460282c48ccd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "527d1f4f-6176-4b2f-ab4e-6e437a7cd840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "235ca036-363c-4a67-a28f-2bf1447da6ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27d75e48-6ec0-46a4-881e-68176379d323",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3b5f04f-d665-4c36-9e3f-00b968d0d76d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "4be03534-4f89-4890-9198-730d9d5f0613"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d65a2cdb-0652-4ff0-9692-190e71168283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8d321816-0891-44df-8c8a-320c9132daa7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aa5cc238-d561-4379-819d-4f48c4b4891e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b3abb40d-9aa9-44ee-88e5-8890dad75ad9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "da777e7d-9e9f-4331-8aea-65de6d77767e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b63d71a8-7ded-4f3a-abd7-45241fd03b1a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "16b39cd1-ca40-4b3a-9eda-f147ff549a02",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "679e1d20-4b50-40af-bd50-1ba37c1fb6e8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ee548d19-1099-4413-8df9-da49ac62ce11",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ab07a20b-858c-450a-872d-fc1d1da159b2"
            }
          }
        ]
      },
      {
        "id": "d3a58da8-4e4d-4134-90f0-bb3516c79186",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "2a0412ec-d7e7-4b96-8bbe-64b2c1370cd3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b816aa4b-4ca7-427d-b5c3-4c5ca47049d5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cd514a1e-9d6f-40c4-810f-29fa09800249",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd25f2a9-9fd7-4123-a351-84cc03f1800f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe5386ea-6a23-41e3-b93a-772f19c5e54a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bc5eab3-a039-488a-a126-a504675d9f36",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df76f494-6b6a-43d5-9556-9f23b1970446",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "844a1e35-b728-403c-addc-24c84d65fd5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16eeeaef-eaa2-4216-b6c7-06939e69424e",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa2d2be8-9aed-4d86-be01-249ff4aecbf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0b18b43-c770-47bb-a14f-0d0f40ab32ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e574e11c-10d8-4b90-b146-3cd2209753fc",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "538b623d-368e-4c48-8113-72042237bab0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4180e6e1-2796-47b4-9f7d-63d12b6714a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f8888ba-c0a4-441b-885c-c83700611616",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91d2f719-dc3d-4f2c-a790-12edfdc453d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6944efa-9dcc-4d56-a1a3-4a19f899699a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cfc9a67-936f-4a02-9b2d-8cab9b461230",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "980ccf71-438f-45df-8b0f-6a7ddf528ae6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54ead66d-3dd4-4780-bc10-3dd3fb1a13fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98f05fcb-a029-40f0-aa77-2c79b07e499d",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7724514-cb77-48bb-9a10-5816642071c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c54cdcd-0c27-4f03-aa43-014053658919"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53a145ef-429a-4a39-946d-28d6b8620892",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30c59396-2f56-4fd0-9631-a5c3c15f2bfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0538932a-415b-4d75-b10d-96f12f01921f",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f94c90fc-cca1-4a9a-b424-211e956e6fb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e5afe96-8b5b-4260-9411-ee9d18161ed0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a5ef6b4-696b-4177-99be-f4f7192a07bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7289ab61-0ff9-4804-b55c-3f97115d3342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f1b9155-2c77-49cc-afe3-c140e4284be9",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f280de44-6b40-45db-aff1-0368739e1a3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9566b10-9bb6-4e35-944f-c2fa9ca061cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7578d6f1-5e1a-462f-8c49-5ad00db6fc55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87caab80-a621-4f0c-8ccb-23d8645443b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aa75361-d864-4cf7-a960-44a05c9e1d9b",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3698157-6708-494e-bab1-c84354182da4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85c0c82a-99dc-44bd-98ee-36268b776be8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b57ca2-1015-4280-a769-da5954fe1f23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d401534a-33b0-4d99-91e9-837b4424417b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31f2c708-5f12-4077-80ed-73c6368c54c8",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfbfdc0a-2ca1-4848-9616-e79398f13fb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f49034d-f4b5-46e3-9e10-05f0b9a835d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "651fd104-9ab4-4127-9e87-390078d63216",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b34a686-a44d-4e54-af27-b21692ec9b56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffadfed4-c0df-4ba2-a227-753e575e8226",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a959b00-7f67-4171-beed-9ffc5fb61728",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c37c559-e81a-499b-b5d3-6e9366b676fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6627681a-f46d-4e5d-ba4c-cdacf5adb769",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2a02c85-f7f2-4e12-826c-a21db9034b44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a13c9dbc-5383-47ae-a0d7-b0199a1690e8",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a41863b5-a2a7-4750-959a-1ba8d5883450",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d749e1b-d719-44be-83f8-e2f3e86c9eb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4434011a-87b5-4985-8a08-b3d123ac92e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c78acd35-437a-457b-aa20-96857e850a29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fba5b55-f7bd-44a0-978a-1650a81126c5",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d34dc800-fb6a-4006-ae92-954f4bbcd1c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51368aad-5233-42b6-ad1c-aae280865cd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47c633cc-4386-4973-825a-fe720a5a332c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab7901f7-d7e8-474a-87e0-0b4113d2d048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2081bad-74b0-4e42-8bb8-5454bee6e85e",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00dcb1f5-7677-4e22-a1b2-a6e3278dc9db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5024c4f-ce4a-47c8-902f-19eb4c064284"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69544c2f-01aa-4933-b291-68c73b57ca59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ed5b9f5-734f-4c16-b39e-3a486eefa4e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "156629ed-c527-4150-8cdf-1b2bd1cfbcb4",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f58feaa-5840-4a02-83eb-7303335fd370",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76e723fa-0c21-43de-b849-1d4203c25cfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f175a13b-38dc-462a-b3e2-297712785d15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bc277bb-e6ae-47a8-b0d1-d07f66bdf4a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ea9ac7b-a052-45b0-bfee-b4d3d7a3b9f6",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16cc9039-9324-4c67-8230-dd5bb734d2e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df1a5783-0cec-4013-af7e-b2a316b07a22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "587819da-eb40-4e12-aabc-f8cf444b6b7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab8ec849-6989-4937-94f2-99a8f89894d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f4aa78c-02e9-48d1-bf5b-b8986cd28b43",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46523949-e5c0-458f-bc53-333930688118",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "454e1dd9-d13b-4b70-8046-70b283460f0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad501d2e-36e7-4e38-8a73-92c52ae5edd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc673d6d-ee71-469b-9904-79b1aefea637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c574daf-bed1-4a17-9d20-6a9b3ec97ac0",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2431eb8-d2f8-45c4-890f-e7392c6c65cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c5eec6a-bac1-4b67-baae-9e9eadfe2579"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bcfd0a0-2918-41c3-8ea6-9998cbcfb150",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "decdfff5-2b12-4a94-b868-1c26fb9dd993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54a56f29-60e5-41c7-a026-56104eb4bf9d",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a771106c-37d6-4663-8bca-7413224f5a17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4400802a-5444-44e6-bc26-28e2b84c12fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "623ecebc-8202-47e8-9808-885b7ce45233",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d14ee90f-297d-4acd-a19b-f41f0a2b6f1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d7d9293-f733-4ea9-865d-5f9adf114ad6",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8a422df-db37-4391-b0fa-a9b8bf629862",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2457b26c-0393-43a0-80b7-d158387f1cba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc2a2a28-1da2-4aba-a76d-b18a3fda158f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e6aa7f0-438e-48a3-977c-eebd25616622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07460cd8-0776-408f-8ea8-cf12b11024f1",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c72e28c4-11b1-44e2-a119-836b162d5135",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1be29710-f6e3-455a-bd45-c8156f631fda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae809ae4-7f81-4766-9d98-772d98260397",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97ad16e9-34f0-47dc-a91d-033792ae84df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41aade19-9ce5-4525-a62e-226d857df057",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef5f2713-c8dd-49c5-86cc-7093fd4fd68a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91aeb31f-0b13-486e-b6d6-bbf71cabcb97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64b42f6d-c779-4c52-bf0f-5099dd30ff71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e3b7c8d-7bcb-4197-9270-02c8de5cf0cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75eea339-6961-4091-9850-69b38d944540",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c46b0a6-c270-4a89-a300-8a9115f35f4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cc35c02-e43c-42da-b9fe-4eba1f60c8ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6880c6c7-89f4-4794-ad69-8baf70e575b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe81bfd8-4d44-412e-98c3-e4578627fbb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da782bc7-02ba-494c-a31d-cf4efdfc0206",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a4f7f32-c543-4559-bcbd-a4edfd56525b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e894fd7-92a6-4993-aa0f-f7b251b18b01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc30d33c-5f34-4e50-94a8-fc9f3da6a8e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3cfaef9-1f5a-426e-930d-eba02a45ac59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a329f75-28c1-44f0-9fe2-761976edc5e4",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18293378-93b5-4c99-ae5c-30a537737451",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "266a6447-bf08-4014-b1e6-3161a6f5ab9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ac744af-0f8b-494f-b149-041336b6e176",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d41d5cdd-008e-450c-ae62-d0cfa8df93d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2c120c9-5964-43b4-986f-2933f1720d37",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e5e553c-d7ce-4cf2-9e67-2da5dc69c8f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0baa4379-7183-49d3-be3b-9181dd4d9308"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96885660-9b1d-4a92-ad76-991907d01200",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5ea40e4-4d49-4e6a-b2d0-e9b73e214f92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e56214c9-bcc4-4193-b9ff-66db7c058921",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b8de2fb-25df-44a3-9d2b-31aa036934a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3039bc1d-490f-4452-8761-96a6d98464f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dd2e4ce-0294-4fbb-9fd1-c90765f464b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5b63bea-28a0-4c5b-b38f-90944b5e4248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f9bd932-2891-485b-a6d1-7acd6287eb2d",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3247bc5-2ac4-4730-b5cc-5aaac5247ea3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7111dab0-872f-4a3a-ace4-d7b662effc97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35ec132f-b1ae-4351-b082-95af5829516a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb15f90d-7565-460a-b4f9-96900c84461e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79d49596-d1b9-44f4-9bf6-1c3d16bd0fe1",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4870b45-34b1-4381-b23a-bbec4411c29a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9941fb8-a0e7-423c-95a3-cd2353859c8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f186c73-60cb-444d-bd23-3e2fb4d86ead",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cffb0017-33a2-4a89-81a1-5e8c716470ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcc4671f-93f8-4b9f-8891-15533666e105",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60804eaa-091f-437a-ae42-4440b514af9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5323fde-d9e0-4e07-9e6f-fb5ed80e7c8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e947c1c-f1f4-4890-be48-b1ce2df9147b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71c604e3-46fe-49e6-958b-6621709654a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c79f1a2a-5ca4-4dda-bcde-b3cce4986d45",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b048461-9a24-4a2f-b256-ac9da55d6efd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4578434e-e731-42f7-815d-0f12f6a5c9c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4934efa8-fe3e-4cbe-8c67-5ab15980fd99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98bbac50-994e-4a89-b986-51d72bca05b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04ccaa2c-1886-4ab7-8c90-32fbd668299e",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c3e4576-5f23-40e4-a1d8-db47fb8df7b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ac294cb-20c5-4800-a4a3-d2c1f0708bc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b05550b-3b2c-405c-a37b-da18f536306a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1a4958c-0a0f-44e7-95fa-ea5def26a539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e417f91e-34da-48a8-9c57-bb56bdd37248",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7766b1e-740c-441a-8f85-7dd9a2a4d64c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27ebc505-5181-44e4-aee6-912d0bed826b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7cd2e79-ed78-42e6-923c-09604bcbf1f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b0e651c-c01b-4018-ac7b-5e86df6627fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31759aa6-e97e-430e-8c64-f64f2fc8d5ad",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25353d75-5c84-4cc7-8eb6-3e6a1632d8f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b500e539-bd7d-4f27-a934-f93751e4ca3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51c7df57-7a44-41ca-8845-8eab5fa7124c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "578b82a7-a6af-4fcb-b111-e787b0cd1a55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "085b7f9e-f958-45ce-a6be-0a8201c8c2d0",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ac7ca28-0ac2-4318-a75a-c40af5f306bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deec86a2-bc66-4587-aea1-26e8a802c93c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe55296a-cad5-402d-8b2d-8e79ffce1c52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4749955-2698-4fdc-971a-908006f25d95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53da78c2-9da1-4edb-87f9-7fcb8452aba3",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae12b2c5-780f-4b26-a3fe-4d962e155222",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "650bce2a-2cf9-4881-bb87-b707d3cd7b22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d8dd417-caf5-46ec-ac6a-6c50b23c2576",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a534eaf-46b6-426c-8c5d-bd1393dad7e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98734477-ce0b-41ca-82e6-cac00f121529",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3961c347-71f6-4556-bcaf-543d81225672",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57318dbe-9c50-4653-9ab4-e921df8f6509"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a98afb6-c683-4a97-82ce-4dd914ae234f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6151f3f-ab8f-4611-bb3d-a0f0449adf0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70671c34-f9d3-4bf5-9d5b-271d11f51266",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21693711-f2f3-4f8c-9d18-92664a913784",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecd72f20-9f77-4edd-9647-dbbbd577d296"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0b7ad42-bf53-449e-bc7c-1a54e2030cde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96570138-7bba-45fd-b680-90141cdb949c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89da823d-ea34-49f3-937c-9fea2186e6b7",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21ed48ba-a6e7-455f-9887-3a09de222154",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b2d4082-9653-4065-8d24-61352f792714"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0d82928-8e42-4546-89dd-830f88073d1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92aad612-27c5-418c-af52-cae020d5fea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d7991b4-4b84-4f9c-a966-ca1f9c075850",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a66731c1-2ebb-43e8-90a9-0a3fe0b26e0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cf77100-a299-492b-be25-2649fa60ecfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20fc5335-4746-4a5e-ba36-1e630bb2e5cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0431b5d-e6ec-4158-b217-48aa0483ea3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fb39d9a-c129-4bf4-b4bd-7118879c9f7c",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac0c3b1a-8022-41c0-b519-208df988ff06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f8c9e79-e5d0-47c5-b490-ddf710b6f00d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "070acd59-c6ec-4fac-a0ad-79655e7af618",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "738a9489-97d2-4631-9006-dfa644c99bfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3180df0c-ab1b-4433-8409-d875603dd2b8",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4163c709-8021-43a5-8621-8e6eb2c8a357",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88176543-2e4b-4054-b461-a9dea17b04c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f737d5ee-bc88-49c8-821c-4aca8eebf1a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca83f266-1267-49b3-bdd3-156c9f644593"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a7751f4-9cfc-4f0c-b5fe-da72a2fb7c4c",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3505a185-a862-4d6b-b14f-4efac59a0897",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88ca3d2b-7990-47f4-9bcf-95b14ad38aa9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b142890-fdf5-4186-9366-92d2eec74d51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f851842-ee87-466a-944c-f31e959222ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4337f49-b9ec-44f9-b8e7-79e81bce7e8f",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1790460b-0ab6-4d62-9bdd-f94d197bc9bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b942f972-f14b-46ba-942c-622ad238c173"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd4f19a2-ba46-48cc-b5ed-ced84afae769",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2ed10d0-86ff-466c-9a4d-ea0dbcadcfda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d2a6865-340a-42d5-b1fa-aba0ef60e5f8",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2324895-9a9f-423b-9a80-f30dfc21a35b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9185abc9-611e-40c5-bbaf-7c59fb68cf37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "998116e3-68b7-4e5d-b3a6-ff0d759dc36f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3956f181-a3d1-4efe-a4a3-1abc13abeb1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eb364af-9590-415c-8119-7c7cb58710e1",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "888a5cad-e342-451f-a18c-cb0b07607538",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "057d38be-e254-4e9f-ab89-7de4bc9f5ece"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a30bc8c-44d7-438a-bcbc-4f3eded2a90e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "245ee97f-d3e0-4e52-9d2c-c05f08c54754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23e94d2b-50d0-4661-8031-f562167406e8",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e28ea3c2-9d41-48bc-a9cf-e9f5ed2d3766",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "521adb36-f09c-4fbb-8bab-eb2e0df54c13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a492f152-c0c0-4821-81c2-b69b08f66dcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ba7ba34-f493-49d8-b3f3-613cd3f7a826"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3093dac-4064-401f-8975-9ee326e3de93",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ad203f1-d823-4d15-81b1-21ceb8b4595a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7910557-5ee4-4186-a3c7-d07191d1663c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7fb521c-b3d5-4991-97ba-865ec2dd80d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfff327d-0c7e-4bc1-919b-d17491df26e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a91d0dc0-585a-425d-b0ee-b661dc7937a6",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92db0ba2-2401-4dec-b44c-b2dfee9ef1ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9477216d-1521-4641-89c8-8dbca23566d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77b0fbcb-0cae-43e5-8ce9-cac7af64eeab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b8588dc-81d7-4f82-94b9-46ea8906e1ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d47577b7-ee12-472e-a98c-baa9706984b8",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad4854b4-f4b6-4037-bf3a-4c91c6708916",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2516b47b-77c9-4f49-94d5-82bd1522e508"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e9eb7d1-2fe2-4a44-9d22-500f10760b67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d87ff52d-01be-4648-a87e-641106edd713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17910c88-bbd8-41b7-880c-c89889d0b917",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89790512-7591-4d1a-bdf6-de65f128c9d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb35ef91-8552-4dcf-87ca-d07f04b98186"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae67f5b7-b155-4af7-9911-822a825439c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7953c803-4785-4340-ae89-d2d64b4bbd77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07f20316-c4b5-44fe-8b52-afa5223767dd",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f5efdeb-0fa3-430d-9967-0f98d369b86b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b4cdd3e-a6e2-4d85-89e2-8a8f04846d5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb8dbb55-de68-4bf4-998b-0be3b67901a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f9360c5-bed6-4bf0-98e7-760e0a7c6ff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9c9ba94-0e58-4be8-a5ad-4e019a070113",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b69840f8-dd19-4369-a29f-d0d21583f516",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6fbde88-7993-4be7-b9a4-78970f66b712"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ebcec8a-e30c-484f-92e1-4457f28c522a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1190352b-abd9-4829-9fd1-91eb14da5c0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "837765e2-b6a8-493d-8d0e-d4cf082bdbdf",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c996d618-b992-43e0-9268-01d90447a0ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dfba94d-5270-441b-ad83-6f56511f67f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bdbcecf-74f3-4ad6-8df6-abe75e243f37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf7135e2-923e-417d-88c9-54e79f777dc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c298ff7-8500-47ce-9da9-0432016fe7a5",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c51a4239-5413-4976-a42c-0ca0abf3869a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "986644a5-3ff7-4a59-8316-61f7b250bfe4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "141aa9ed-7abe-40e6-8a41-950afac0df7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e11ab22-4010-4474-8105-4261ecf0f035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8818b80c-dc24-48ae-948c-bdf9353a6e3f",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9f4ea73-5401-4cb8-a65e-c1770be86648",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7856125f-6291-4f6c-a5a1-f490b42029b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4373bcee-26b4-4a4e-8161-2ba272172ff6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b36db18-d266-4ccb-a0b3-0819f6d2aaab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b321f054-3444-494c-9acd-057653bc6020",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6af6519-b642-42d4-875c-096be372dab0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33370f4a-c3f8-4300-9bc6-0ba67311de9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84901b58-8406-4055-82cc-b91f647c33b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "264d16b0-9ff2-4bbf-977b-d312d4a0c119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d78e5d59-b8f0-4eba-97bf-878605c0959d",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95d5da54-5966-4aaf-bfa3-f762b8d26a67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "428d080b-d88f-4fce-9f8d-1978e0811515"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f42de59-0331-48dd-beb7-68309b50ed30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e2a7374-6e34-471d-ba37-6543d6745d93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b29c5a5-4ef5-491d-9853-bb24a8aba0c0",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "360c357f-f09d-4e6d-b89b-5de542b6dc29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd3fc2fe-a89e-4195-8e77-8a068f0be4cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72ca1a3b-122f-4365-94ec-bd916e42b305",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11df391a-429a-4970-8bb8-2ae8570c8edb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a567ec7-79c4-42e6-bceb-52d5c5c6f8bf",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a5e98ca-dcb9-4014-8ab5-a2d3fd253328",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53f666e6-cecd-44b6-9bb4-cc1f63dd10b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "500cb958-dc04-481f-80c6-457bedc53fad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46d2e962-8856-499f-9698-a55084ac873b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd24d2ba-085d-474a-b428-fb3ecccaee06",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58f785be-98d4-45f6-b392-56268aa3ae5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "983da949-7066-4c1c-864e-90e33ce8fd1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d49f0572-8844-43dd-b481-20cc2a0a89bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3f797db-462b-4fe1-bc6b-429cdf31d75c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e652535-8a60-4f94-981f-64ec18be8e4c",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab2f36b2-3763-42b1-a6f7-c182d7245d4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1d9312c-ccc2-4f51-a199-65fd3848b7f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac823f32-3359-4bcb-9c1b-34f39e60ad31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3f88294-b23c-4ab4-90f0-b7e277618181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69371f6e-f355-40ae-8267-16b983868b57",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "902e1214-2c26-48cc-9807-d5107051d8c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25b44e94-262d-4c0b-b29c-639a41e4e408"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e72f7c92-ea2c-4da2-a4b4-cf2dcd829085",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82012156-c40d-4bd6-ae39-1e4528d07558"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b152c40d-9137-4cb0-878a-73cce291f3bd",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a5120e0-d77d-49f5-ad7b-bd4b0133bf66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31d6cb17-dd3c-40ad-a6eb-4de565134577"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f152132b-9daa-4cd4-b624-05ce25aa41ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9510f10-bbbe-4b76-9e78-90e80a3773ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b535ce56-390c-4f70-a7be-392c30adf3d9",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db13fb42-9d7e-4bbb-9777-1af78fb70c2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb986546-a6fb-49b9-aeb5-1889834da162"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a63c4090-4e0a-4456-9ce5-870dfa16c7c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b2a4119-dfa3-40db-bbb5-154b964a5748"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a212da2d-d867-4031-913c-e8de10eef22d",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "024c6537-7806-473e-a6a8-2ff7db972d2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa10f12a-10c8-47cc-9705-e9aedb408699"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fd39a69-d053-4824-bdf2-8eb9a31a928c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2aef73f3-462b-43ec-983d-5179abb49f71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4f6a948-b75c-4453-b1dc-00d269683cb1",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb832b8f-d65e-48d7-a4fc-2084cc9829f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dffbd36b-2ae1-4309-af77-19915514a016"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a15bc3aa-c0cf-4825-820e-cf4e69c73c35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05dbe49e-8dc9-469a-b577-188923b55687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae78e71a-5a74-4b1a-9753-37f8b889d400",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5253bcd6-03e1-4461-9df8-2f70c7c73c92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "473ad75d-00af-49f3-88d4-c7de655cbab3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f6a4671-401e-4386-88d9-635d3d6e1744",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f8f3f27-610d-4bdc-973c-fa5cfebcb8b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e9d2c97-fe51-47bc-9734-dcba6ee653b8",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a1aa866-e430-4d57-96de-6b193ef74be8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a62c57e6-ae66-424d-a325-cf501649eaa0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce5ae9da-c2da-44f7-83ec-08ff913fba68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab745b10-0028-4a29-abb7-434f0f03b341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e96bec6-725d-479c-b1b7-de19e5caf11c",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6644461-a3fe-4c64-b4db-99ef9203529d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd3b73d1-ceda-4595-bb04-8bbe124e17fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6589e63-b7bf-4121-b995-7582f1391f76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53d0cbc6-f20e-4aed-af36-63fbd6fc327a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff42b8f7-0aa4-40d1-aca0-2b79b5e6961d",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1911b699-ccdb-45d9-9a12-e511fbd49798",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29fadbf4-059b-4736-b76b-8ef1a441af7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "076b7502-0300-4cad-8ebf-cec7ebb2a95b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb326c9e-e457-486a-99c1-69a2b568612e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "871ebf86-5eb4-47d1-9b97-f2a36b5ec921",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab6f0af8-fcaf-4ea0-8a82-fea08cc27522",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97b99df3-a155-4a03-ae2b-bb571801a750"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c27bb89-521b-404b-a1b7-23bdcb933cf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "769a9440-ae94-40fb-b06d-0007b413cdf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd030dce-37a9-47e7-b27a-f4c459f4a033",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1090edc-a91f-4ab8-aaa8-2d063c500085",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4abc43be-e788-4cf0-92f7-716d21942aa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "860db89d-2312-4a84-b678-7aa1e58cc6e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bd59754-9df4-4f61-bfb3-c009c2df025e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5de6de5-9ee9-4df8-8f5f-a89f180d85d7",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d9b6cca-d8ea-4951-b289-91795eb0f0c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0375daeb-d782-4e78-9f7f-756d2a6d31b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dcd65b5-3a70-458b-a65e-8976a5506d49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cad492ce-ae0c-4405-ad6c-e6622dcdddf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c19df77-631b-47d8-b0f3-42817958f7a6",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b125be04-c65f-4569-8cca-5484dd1f6ae8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2be47ad5-ddb8-4585-b101-d53bea4d39f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "294c132a-d2b6-4540-8f63-c522b5d11e74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "342ce0c3-0ef0-4cc8-9c7e-45ae0afd31b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd76d6a0-2d8a-44e2-80a7-2acbb1ae744c",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aca7e35-fd9f-4f09-a6ee-74d1e23c57d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c945f6da-7120-46c5-bbe1-2b4e8f718b41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2e12a6e-55a3-4388-87bf-1de229a29991",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0a9d8b1-f9a6-4057-a809-1da23d9dbaa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df5383f9-ffdf-48d9-82fb-f67a018c413a",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45ee1b3f-0861-444c-8886-2e1c83b8c619",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e4b557d-dd07-409a-89bb-f4a4b30169d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5134c52a-55c4-4103-8cbb-5576cb3a6624",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31799782-0b4b-4cfa-bafb-0c0c724b7905"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cee8ea9-4499-4326-ba74-f61554e096bd",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d35efd24-91c0-42ab-8035-6e098f9709c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee1afeac-778c-46fa-b186-dfa0757e78a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a07736c-e434-433e-b7da-7dcb18a41f01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6662510-bb53-43ef-87b4-880e2f7d9dad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4097962f-c3be-4222-82cf-5f5ca5f42a02",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a81a8900-6cda-4a65-81e4-c90a4a91a020",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d368546d-553b-46c1-9724-d2c234160cf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f65c584-2a2f-4c33-8a53-40443b032a5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49f33a3e-12fc-472c-bf8e-047ce333f674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06e4b71b-175a-4bf1-a66e-e291d7b8f02a",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b39a30f-9467-4c51-b0ce-b86f6092843c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "026d9228-812e-4016-88e1-79a78608c40b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a74a63f-5a0f-4c54-8798-45f7307d1409",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f08ae51-1315-4bad-a9f4-36980fc7b6bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33ee9d82-005b-476e-ac50-fa2f5eca5c02",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ce5d4a7-0569-4163-bf93-5267c5b689c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b64154f-b0f4-4737-95ac-1ddac1293ee7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c964fa2-ff58-436c-87c7-9ddc2c5e9ba4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "209d9185-9b3b-49d0-82a1-7eda15d5634c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7618785-bb2c-41c3-8793-e329990d1a6f",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17067c80-03b6-4107-b8d2-667a61aac928",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d8c0b42-2e7f-48fd-a473-9246847be8d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecd70e4b-b6a0-4a27-be23-3390cd323ad3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ecdb462-1e44-4ffd-94cc-c3cac573e272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5a5cee2-03b6-4bb1-a9cb-3deea06d9cee",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ab22315-1c08-4a1c-91a6-a9cc64030025",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccad3193-78b5-42c4-b5f6-d362eb985554"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7af9771-b05d-4240-aec9-e7cf651e5a64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9df99dfe-b104-4adf-a9fb-15476553f6c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a49318df-b4ba-4da7-b8ac-4ca810ec52b7",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd4006dc-9790-4339-9261-1b1e59f2fef7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17995f55-8211-4e28-bdad-e82226bdd31c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1595ebdb-55b1-4505-9783-5bb6da1d4075",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "446de98f-67df-4878-a00a-5c6e4a938da7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4a9bcbf-8bc8-4ba5-854e-36d6f31959ea",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89970bb9-1f01-4db6-980b-4615aa9be71b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec024f3a-b9cb-44cf-b273-071350574a71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6596ceb-6981-40ba-b7fe-c28eede713db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37b4b6eb-e83e-4da5-9d70-a38aa3ce3862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe6df189-323d-4eb5-a51e-afdf43996558",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4161158-8837-4e02-98e9-92a350fbc94e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "376ff08d-8a01-4abf-92a5-fdc1ded75ea3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccbc1b55-0bf3-4238-8a0d-ef7adfce3fe2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68e735a8-71c3-48cd-8d2d-e3099d29f6c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c39fa30-0303-49a2-82c5-44c0bac0951a",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f342a67f-255c-4134-ae48-5451b986bc85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "914cbce4-fa03-4fc1-b956-a98d0047de24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fab868f7-c50c-4dad-acd9-5b01163fde0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a178737-0086-4ea9-8d22-45644f93c0da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "028567be-4e72-49be-8734-1796e85503e6",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78592cd0-5601-4879-842b-8372b17ede96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ae167c1-0c33-4cf6-8519-7f78b979e9d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c753af68-603c-4c9a-80bf-bb16dfc22e82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eae1a1ed-d132-4177-960a-9869ae4fff60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44622d5c-f0e1-4f02-a2b7-f24e078cf4e0",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3270c89d-0b0b-45d5-b822-999cd42937ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9542b193-2623-48a8-b636-dbc9da09ed4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fcdcd89-2ab3-4d72-9f84-0706e5fd868c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "211f8a33-0209-4239-aa5f-3b02adc37632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e8a42fd-cd30-41cb-903b-efbed3dc2e61",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40125917-c1aa-483f-89b3-9bff850dd36e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aefe5090-cf51-4fe7-a248-871c884bf7ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56a71afd-e65c-44d2-a8bb-cab8812e8387",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb21d234-42c2-4874-a583-56f3a8c5a4be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07e27f3a-fa7c-4753-8a25-43376621d2f4",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7306af70-2c72-48f9-90a3-d29ca4c8cb1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c70ecce-2c00-47e0-9a32-f64afad2eb6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34557517-b038-4472-8232-df62362610a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "571e7837-3bd9-4208-9f80-890cdc838ef4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e02b9f13-bae3-491a-bc0e-9825dfc6cc04",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01503c13-0d6c-4c3f-9b28-d68d7cf69321",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27676c0d-a387-4def-9c19-2eed7bfef906"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b184c9f3-c5a9-4f59-899d-fb2fa2b93b00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6d6d92f-b5f0-4ae5-8aeb-5b6e0bad84d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0c18187-8f41-4205-92c2-3dcc494ba287",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "308ed19a-4361-4756-9de9-6b01e493804a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0065a454-ec63-47f3-b975-2cb468f3a6b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42f270a2-aba4-47ab-8643-c5b8c563bf9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1468f1a-a28d-41b2-a639-5964add0f967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "835e347d-6db5-4d8e-a037-8dc44758a0a5",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "564fe628-ef8f-4feb-9567-6d19717335a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd09890a-a19f-451c-a1f7-2eb71693b29d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ccd3bbc-69ca-47aa-b328-ed2cd8d1f100",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bf1113a-8a3e-4306-bc53-ead599f4b965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43fed5da-b9d5-496c-a383-0fbb2603ee8d",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e6e7dfc-8145-477d-9d49-7888ccba39da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93288e54-d842-4e37-88be-6185591178a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa4a132a-c363-4ca2-aec8-803d11b4ca52",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcb78ab5-1112-4724-a44b-7c03f9667a50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2050d488-6470-4a99-ad72-2200a0d76b83",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45ab37ee-0c5b-4f49-afef-d8eb4a9e600b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "876bf2ca-e3ae-4fcc-9098-2808fc5101d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88bb5ed9-36f0-4e27-acd4-dadaddeb1d36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9506efac-4560-4fd0-8faa-bd2f6af52bef"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "420dae2e-57f0-40e6-b366-8c854710f902",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "12356380-c1f4-486e-8626-99079612f4c6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fe4feacf-542c-4247-b9b3-67cd43f4caf5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e65815c0-5594-4e9a-b8e8-e55341db41e8"
                    }
                  }
                ]
              },
              {
                "id": "75eefac8-7a7d-4368-b800-aea386cf1538",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0c845c91-e82a-4a5c-9446-ce889e0618d9",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e28bc01-251d-4727-9304-0f1dd2050f63",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c04d7533-1db9-4459-af4c-82225ecdf847"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81f67961-740f-46c7-8a04-536f48900953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0a2f87d9-1695-4e81-8b2b-288e3d61f1c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88e428ec-e20e-4814-a51c-c0f7d2e176fd",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baf27b39-ccda-43be-8557-098c26b2ec99",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "76ba5886-39e9-4676-867c-7cda2d3f318b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf37a749-458e-4974-91f1-8ea6274780ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "567d69b0-dbd1-4c82-98f6-8a5c1cf0ed52"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e33646db-9028-42b4-ba7b-9add18a44748",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dbe12d71-2ebe-4173-ab0e-faf8ce8e1093"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bef74107-0185-48de-bd55-38d49ae5f79b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "70509c78-2b3f-4df8-b5da-349e9a220095"
                    }
                  }
                ]
              },
              {
                "id": "42eebcc9-486f-4b12-bced-7981eaf444d4",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "27dff6fc-0b9a-47eb-90d0-f2a747f6e34e",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35a7ae8d-d428-4d3a-9cb4-90ae67008165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "8a058e75-ee03-433d-9bb9-81612f211834"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9df1e43e-abc0-4364-9480-684b7a95f0d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "721ff4d9-2496-4760-9666-a47c06eea9fd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "3cef1d17-c366-4681-b4e2-21e11a08e8b3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9362f226-cede-48bd-850b-5d0c68023133",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8d690ae4-3c16-4ff8-82db-e3716d9eb4ff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d1117aaf-f24a-453c-9c5e-c25768189a96"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d639775c-b566-4b81-8d8f-59fd90904e73",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f0a44657-7eaf-4154-a753-cb572df9cafd"
                    }
                  }
                ]
              },
              {
                "id": "cf78aa4b-1b0a-4e1a-8588-c1da8842f29a",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "05697a08-58ef-4515-b198-e1595457d694",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3a117f2c-e25a-407e-9e30-8d22fc476944"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "70f5480e-a965-464e-aa74-346e5ba754f1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5fa93532-dd76-40ec-acba-d0fd0cdefaf8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "30fdeffd-e991-47eb-9e2b-4dae5919b590",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "99ca96cd-06f1-473c-b898-e79fd875ae0c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7ff9253e-b05e-4f9a-9857-218319918545",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "23871188-bac5-43a7-a38a-c6c9c5c62c61"
            }
          }
        ]
      },
      {
        "id": "8f826edd-8374-496a-8abf-020bcea5fec4",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "c39c2d15-8d97-4e03-a6aa-acd88124add0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6e2f98c9-d7e6-417c-8692-97fa397baa7c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "46a935d7-d446-4c2c-b16b-712098c1045e",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03141db5-fc54-4106-bb00-4c7027015b9f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9edad972-f56e-4598-8207-bd6eac030202"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75fde4e2-6197-423a-879e-3c005d1251fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "79b14934-fc4f-498f-a32c-10df30417203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ce33124-04f9-41c2-8179-36e243383059",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b18ee600-e55d-4786-8301-64b06947c69e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bb61d34a-1971-43ce-9f74-15e0ed73b075"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ea86fbb-42e3-4826-ae99-f690c90b532b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "36893aa2-702e-4636-8d36-720e2640a142"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e735a750-6f40-4d10-8991-9455d6f55be8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f87ea100-ce90-4d3e-a7c9-ba621ded54c0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "095b39a0-47b8-44d9-b022-db53ce58ff57",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bc88e6b2-e9ac-430a-aa73-6b01c20af660"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e7030adb-6aba-46f5-85d7-987b8ade230e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "eb72544d-34fe-4263-97c6-9d1949cb9695"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f7333631-436b-4328-983a-ac49db2368cd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a2f4496a-6116-4d61-8547-232a2e64f810"
            }
          }
        ]
      },
      {
        "id": "c362c7f2-c1fd-4383-90a1-a807ace2a7ca",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "88bc6c5d-0b05-478c-8eb0-96da9d928d72",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0e0dd1d5-1337-43f2-acde-9e2c15222a9c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c83563aa-db9d-4625-912b-206502a96a4d",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99d8f8fb-5024-44cf-9095-d4e474d91251",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0fec3d19-22de-4904-ab12-cae27b23629e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08be627f-d3f1-4814-aa53-70aa1eb0288d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d5ad9916-04de-4001-a434-f61c4ac19cb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63166ff6-61b0-4df5-b020-ee28c606fb63",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7b6574c-4b69-4ba3-a62a-20ced7ed498a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8e11ee47-9222-4353-be6f-1886d3f3310b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1e08a66-2599-4556-87ea-9dfa6ec72e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "267a8112-aca7-46a4-8dd8-ad4c0e4f2948"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0383dacc-6232-43e7-b8af-74276fec1236",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7102968b-5c70-4c85-b8dd-9e1d1021e28a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "603fd690-c6e1-4bb4-8088-313097311955",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "18a48177-faa4-4d83-a946-461b72249670"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "000d4f84-b6d6-45af-bd45-371a7336aeee",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b31bad3f-2ab0-4625-94b7-c71fde0c3829"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "105d6b73-e6d5-48a2-b112-db4edf713b72",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a8aa5da7-1f82-4e6f-8412-68c10b7917f8"
            }
          }
        ]
      },
      {
        "id": "aafb9581-2db6-4874-a0c9-2aae9d4616a6",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "09cfbd47-53e8-460a-9a13-8353723262c7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "85f8df1c-a04e-41e1-9661-e176a1aa7c56",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "341309e4-8900-46cf-9a53-9b62648edd61",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dd9d843-1d5a-48ab-b68f-8d195d5239d4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "730057d1-5949-4ac9-b1af-1d9dba2c7b04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3277a814-ed2e-419c-bb57-095661024ccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dd2bc2f3-9374-411b-a66a-13a8e10ba6ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ed3d3bc-5a47-4adc-817b-0c3496fb3040",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85739792-a9d9-4efb-a39e-6035bfec5e0f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "92f833c4-c4d3-41a2-9fb1-c32518c131b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cc85ddf-8acb-4861-a195-f6db208e6893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "684f2a9d-201a-4bb0-bccb-a607ac90a184"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3381fc45-77fa-4eec-8ff4-43817afe7c26",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "73a7cea2-a2fe-4710-973a-6eb19ae0c090"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b667f68-8309-4061-ab87-5b26fcf50ef7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "acc999bc-07cf-4388-9076-5cf9da8dd3e4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "32db7315-260f-4296-bd0a-4a551fc43bcd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b21506a1-b242-4de1-a139-7bebbd5a1918"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9a398a77-9b0b-4b38-a5cd-4a4497b5cf83",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dec5269e-39cb-41a3-8873-8a454fca261e"
            }
          }
        ]
      },
      {
        "id": "29364103-7da0-4498-8cc1-175900be5e58",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "453ce953-b02c-44ad-b8ba-a4ead9b1a526",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0bf1056f-eceb-4b55-9f80-b11176b7f8d7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "d5b3cdf6-e26c-436a-9338-b2b3cc10298e",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d8a9c808-847b-42b7-9b45-2041314da7ea",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d79a83ad-4568-462c-9707-ef6c2e32b369",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 259,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 299.09266409266417,
      "responseMin": 7,
      "responseMax": 4802,
      "responseSd": 676.0011588029575,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1677199228648,
      "completed": 1677199321563
    },
    "executions": [
      {
        "id": "eba84c05-72cb-482c-a040-13f385075e8d",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "203fe008-39fc-4892-ab1a-608f67208ed7",
          "httpRequestId": "c7f91100-2238-4b77-860c-1002bcdb8cda"
        },
        "item": {
          "id": "eba84c05-72cb-482c-a040-13f385075e8d",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "c5536f52-418b-4a96-84dc-bf80b8dfb5f6",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 0
        }
      },
      {
        "id": "48d008d2-d80a-4c2a-9d4b-f96c184f4d37",
        "cursor": {
          "ref": "fa9592a4-1ecc-45e4-af76-9f2f1886b835",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "5ca9e6d7-7ff5-4ff7-84d7-8a82c9a52deb"
        },
        "item": {
          "id": "48d008d2-d80a-4c2a-9d4b-f96c184f4d37",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "d92dfe98-460f-48f1-ac23-fc7cf1536cf6",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "6e021d81-baf4-4b45-ba77-874a25cc032f",
        "cursor": {
          "ref": "36075af8-308a-4c44-a1be-a3393b8ba3c8",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "724f4a53-f000-4613-8642-2e8ae36e6439"
        },
        "item": {
          "id": "6e021d81-baf4-4b45-ba77-874a25cc032f",
          "name": "did_json"
        },
        "response": {
          "id": "f15632ea-b08b-4062-8777-859dc33d30b9",
          "status": "OK",
          "code": 200,
          "responseTime": 396,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef13dd8b-a44b-4919-a716-80cf8d67843e",
        "cursor": {
          "ref": "7c2fe7ec-b303-488f-b817-00c08b08e8d4",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "72b131e3-602e-4085-a377-85cae2bdc2e1"
        },
        "item": {
          "id": "ef13dd8b-a44b-4919-a716-80cf8d67843e",
          "name": "did:invalid"
        },
        "response": {
          "id": "15710b8a-a83c-48ca-a11f-7a722d288854",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1411,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "ef13dd8b-a44b-4919-a716-80cf8d67843e",
        "cursor": {
          "ref": "7c2fe7ec-b303-488f-b817-00c08b08e8d4",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "72b131e3-602e-4085-a377-85cae2bdc2e1"
        },
        "item": {
          "id": "ef13dd8b-a44b-4919-a716-80cf8d67843e",
          "name": "did:invalid"
        },
        "response": {
          "id": "15710b8a-a83c-48ca-a11f-7a722d288854",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1411,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "fcf1324e-3308-47de-8808-71e7fbaa5bb2",
        "cursor": {
          "ref": "9cc45a69-c249-4236-955c-0f608ea11797",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "27099b8b-ba39-46da-a68b-4d0f7459e6da"
        },
        "item": {
          "id": "fcf1324e-3308-47de-8808-71e7fbaa5bb2",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "6c539eef-e8b5-4f8f-a040-fe95d890ec25",
          "status": "Not Found",
          "code": 404,
          "responseTime": 139,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e817b09-3870-456f-addf-84b002603583",
        "cursor": {
          "ref": "b9d1b486-4b7b-41f3-96d9-83055d9d7281",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "46547f84-bb55-4f6c-bb08-f6272addde3a"
        },
        "item": {
          "id": "7e817b09-3870-456f-addf-84b002603583",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "79d8f551-36dd-48b2-9835-e9b31e920123",
          "status": "Not Found",
          "code": 404,
          "responseTime": 431,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b1512a5-5834-48c5-b2e3-9439dc1d20d6",
        "cursor": {
          "ref": "caed2071-902d-4d45-a3b3-8d78fb36dbcb",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "6d74f710-592c-477d-b40f-7d2a97ec2e99"
        },
        "item": {
          "id": "5b1512a5-5834-48c5-b2e3-9439dc1d20d6",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "1ac91904-e523-479c-bc89-8c6def43c143",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 120,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "a1aab426-8936-44dd-811f-ef06356bb28f",
        "cursor": {
          "ref": "5f638b26-6410-433a-a59a-ff72af24a4b8",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "963e5bea-577c-40ae-859e-f6be709617e5"
        },
        "item": {
          "id": "a1aab426-8936-44dd-811f-ef06356bb28f",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "28d5d567-59e1-49ff-aa77-f00c0f391896",
          "status": "OK",
          "code": 200,
          "responseTime": 615,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "a1aab426-8936-44dd-811f-ef06356bb28f",
        "cursor": {
          "ref": "5f638b26-6410-433a-a59a-ff72af24a4b8",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "963e5bea-577c-40ae-859e-f6be709617e5"
        },
        "item": {
          "id": "a1aab426-8936-44dd-811f-ef06356bb28f",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "28d5d567-59e1-49ff-aa77-f00c0f391896",
          "status": "OK",
          "code": 200,
          "responseTime": 615,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "8908d7a1-bfe9-480a-9985-df97adc46d26",
        "cursor": {
          "ref": "ed6e48e2-5c49-4ce7-acc8-4f31ab0328d9",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "ebe80f71-4b00-4076-aa01-f99fead208c7"
        },
        "item": {
          "id": "8908d7a1-bfe9-480a-9985-df97adc46d26",
          "name": "identifiers"
        },
        "response": {
          "id": "9f265570-274a-4a1b-999a-6e6ac23d6a12",
          "status": "OK",
          "code": 200,
          "responseTime": 548,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab698d61-dbf3-4913-ac41-25e203636a36",
        "cursor": {
          "ref": "dcf0aeb8-6819-4e1d-aca6-a4bbe0f1b9aa",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1b07d6ba-ce61-4ad9-aeeb-6508f9eb9cd0"
        },
        "item": {
          "id": "ab698d61-dbf3-4913-ac41-25e203636a36",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "910f53c7-7161-4581-9788-3e643db62ab7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 627,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab698d61-dbf3-4913-ac41-25e203636a36",
        "cursor": {
          "ref": "dcf0aeb8-6819-4e1d-aca6-a4bbe0f1b9aa",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1b07d6ba-ce61-4ad9-aeeb-6508f9eb9cd0"
        },
        "item": {
          "id": "ab698d61-dbf3-4913-ac41-25e203636a36",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "910f53c7-7161-4581-9788-3e643db62ab7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 627,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bad3ff4-462b-436b-9ebe-379a4726c565",
        "cursor": {
          "ref": "4b9a2060-efde-4b1d-87bd-056b6d3cff31",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "5f2b5f58-a953-4726-be70-00c5d1d8df57"
        },
        "item": {
          "id": "0bad3ff4-462b-436b-9ebe-379a4726c565",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "a3b715ff-f9e7-4582-a104-56af67c22896",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 484,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deb3b4ac-5d35-4e6e-8a22-dc0d2147683b",
        "cursor": {
          "ref": "545e2504-e36d-4e35-8ffd-c5c38f5e3351",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c532b02f-2a57-469b-9406-b62b2b09d469"
        },
        "item": {
          "id": "deb3b4ac-5d35-4e6e-8a22-dc0d2147683b",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "e5525308-8577-4921-9629-f0be783dd7f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 432,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "971706cd-ffae-42b9-8728-21b42865023a",
        "cursor": {
          "ref": "d5a8c669-610b-4f8e-a68e-49a68222f699",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "9dff4ee8-f89f-4261-864e-bb9d1c1f1e2a"
        },
        "item": {
          "id": "971706cd-ffae-42b9-8728-21b42865023a",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "fc6cae05-d534-40ce-ab8f-dd44c7c259ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 500,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36993939-224f-4f45-afd8-2bdd4ad6a59f",
        "cursor": {
          "ref": "43061615-5866-4485-9773-08c2b880838c",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "5995a37b-443f-4d87-9b29-f1487c1bd199"
        },
        "item": {
          "id": "36993939-224f-4f45-afd8-2bdd4ad6a59f",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "05ca2f32-a121-43e1-afdf-ac592f306175",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 690,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8cd3366-0f8b-401e-a64a-62d16ef085fc",
        "cursor": {
          "ref": "d5cc382b-ad2c-4386-b468-5167ec8aab0a",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "61f9cf69-2e54-4d1b-9265-bb4683199d0e"
        },
        "item": {
          "id": "e8cd3366-0f8b-401e-a64a-62d16ef085fc",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "8295ebb8-5223-4119-a5b6-c20f2b54e269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 353,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8238a713-e170-45f9-842d-3fbf34523831",
        "cursor": {
          "ref": "2d80d33d-44f5-417d-b9cd-851c9403fbcf",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "27f8fb95-77cb-4f2d-98d1-98f6ea30c0ce"
        },
        "item": {
          "id": "8238a713-e170-45f9-842d-3fbf34523831",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "880c1f43-e1be-4874-a35d-0c3186c3164a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 799,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f60af56-909c-4063-ac72-45200f710451",
        "cursor": {
          "ref": "b227a901-460d-43fd-b818-a8aef47cf28c",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "e21b77a1-beea-4707-b598-e978936b6a29"
        },
        "item": {
          "id": "0f60af56-909c-4063-ac72-45200f710451",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "de997c59-e528-42e3-a72b-cac9a7ee977d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 717,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aba16b9-d3a5-4750-aacf-e62b0dab8c16",
        "cursor": {
          "ref": "e4ce48ba-1984-44d4-841a-a6f0cbaa5cb7",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "dbd16706-db14-4e03-99d1-57cc4e2f6af9"
        },
        "item": {
          "id": "8aba16b9-d3a5-4750-aacf-e62b0dab8c16",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "72a668fd-0a34-42cb-867b-2f9dd69f7c18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 346,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8a3fbe8-8880-4099-835e-53085f7c9bc7",
        "cursor": {
          "ref": "94f788ed-1bfe-4efc-a224-4678d4c65d9b",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "8af33117-2b15-4ad0-906a-22b18e61672a"
        },
        "item": {
          "id": "a8a3fbe8-8880-4099-835e-53085f7c9bc7",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "1b9f43dc-2990-49f0-b38c-0ccf5a69e95a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac6ebe51-f047-4ba2-a317-401f9ee48ff2",
        "cursor": {
          "ref": "b159cda2-d0b0-4c48-9346-6b7e1af5b925",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "84ed348a-7749-4c63-8427-cec6ac74fe90"
        },
        "item": {
          "id": "ac6ebe51-f047-4ba2-a317-401f9ee48ff2",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "687fe7ea-56fa-4065-988e-962f49c734f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d05ccbdf-1539-4aa2-accb-b96341f59eae",
        "cursor": {
          "ref": "87f0c742-12a5-4bd5-84fb-3b55ac4bcc49",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "979f8a2a-91f1-4ea9-913a-52ccbc6f125c"
        },
        "item": {
          "id": "d05ccbdf-1539-4aa2-accb-b96341f59eae",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "145af889-83d6-47a3-ae08-fb895aa71476",
          "status": "Created",
          "code": 201,
          "responseTime": 811,
          "responseSize": 996
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "29c2a327-41bd-40d7-8e5e-403403624199",
        "cursor": {
          "ref": "2ddf60bf-2226-4626-8fc0-a69774927bd5",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "e9cc0be8-9f32-482b-b0b4-3d4fa2f9a4af"
        },
        "item": {
          "id": "29c2a327-41bd-40d7-8e5e-403403624199",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "69052cb0-6a70-4449-b341-087ef158bf82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35f9f0cf-2f4a-4c9b-86d5-44a17ba6fa60",
        "cursor": {
          "ref": "db45018e-75e9-407e-af83-f4805c844fa9",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "8899df76-bcb5-4b1e-b46f-2d2fe65a6559"
        },
        "item": {
          "id": "35f9f0cf-2f4a-4c9b-86d5-44a17ba6fa60",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "b2bf5578-004c-4b44-872b-e7a378a2c472",
          "status": "Created",
          "code": 201,
          "responseTime": 4802,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "8ea0a940-b502-472e-855e-2bedf25f7b6b",
        "cursor": {
          "ref": "50cc551b-0372-4c3a-8d56-362fbb9e3188",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "28cf24b1-7da4-45ba-86fe-d207ad6a0b10"
        },
        "item": {
          "id": "8ea0a940-b502-472e-855e-2bedf25f7b6b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d453bfb3-c4e9-4f53-8a38-32cc91b1643e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "435a59b3-9f64-4eee-b94b-222b9b02f36e",
        "cursor": {
          "ref": "06e1671b-cdec-4afa-b27a-8d70f11b6b6a",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "2ef4d98b-f383-43e6-8851-f229208891ea"
        },
        "item": {
          "id": "435a59b3-9f64-4eee-b94b-222b9b02f36e",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "2382cab1-90bc-4480-8b47-597f269a0c91",
          "status": "Created",
          "code": 201,
          "responseTime": 4401,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "bd88d60a-965d-44e0-b947-84fd4b1b4f79",
        "cursor": {
          "ref": "326dbc30-733a-4689-983e-0e1ee63730f5",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "194f8de2-af86-43b1-b393-6ec74327a4fb"
        },
        "item": {
          "id": "bd88d60a-965d-44e0-b947-84fd4b1b4f79",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "9435ac24-ce1d-4ce8-a09b-8a1dd4589df5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 167,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70d91164-6d72-4832-aca1-fbd73fbabf19",
        "cursor": {
          "ref": "34514647-968b-4e20-b8a6-bb105a7eb140",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "b8b6ad72-76f2-41c0-8f57-56f673ecc54c"
        },
        "item": {
          "id": "70d91164-6d72-4832-aca1-fbd73fbabf19",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "d9ee43e1-597c-4925-928a-fb6184136061",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 151,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76e46362-be2f-4edc-82a5-079f68ada447",
        "cursor": {
          "ref": "7abc20fd-bb67-4ccc-a969-8d239e016481",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a4f46f09-99a7-4fab-8041-ea7accca6ace"
        },
        "item": {
          "id": "76e46362-be2f-4edc-82a5-079f68ada447",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "d3824435-729d-49b5-ace6-53107eee4452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80dc9206-15ed-46cc-bc64-f8114dbfea52",
        "cursor": {
          "ref": "e9ad9506-f0de-45d9-bf90-333e65495d0e",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "d025a39f-1777-49f4-9d87-d8716e61b2a5"
        },
        "item": {
          "id": "80dc9206-15ed-46cc-bc64-f8114dbfea52",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "fd4e3245-083d-4ba5-aa8f-73e6489857e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b512b20a-148a-4b83-a68e-34a26b723d30",
        "cursor": {
          "ref": "a3923593-8839-45d4-9294-bf8d1da27465",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "bc33d885-0a4f-4d34-bee5-3090f441a449"
        },
        "item": {
          "id": "b512b20a-148a-4b83-a68e-34a26b723d30",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "24386396-0915-49f4-919e-75141de14069",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 241,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e06b9d12-bbfe-4f5b-a426-dee7bd4c89cd",
        "cursor": {
          "ref": "d35313c7-5f4f-4041-b3f7-3acee20ccd12",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "3fe72c19-170d-4de8-9a78-bc0a584e1aa7"
        },
        "item": {
          "id": "e06b9d12-bbfe-4f5b-a426-dee7bd4c89cd",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "7a7436b5-fa93-4ec2-9c58-85901f9a7533",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 162,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fac0441c-a564-4e0f-992b-6206edd700fb",
        "cursor": {
          "ref": "a67a73bf-a48d-4d4d-a128-3a88f66b08d5",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "81432058-7a00-4308-8fe2-72ca5c97babc"
        },
        "item": {
          "id": "fac0441c-a564-4e0f-992b-6206edd700fb",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "0261fe39-71d5-4b6a-b1f6-228045d4e064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a02991b-da07-4c12-a868-3867b56845f0",
        "cursor": {
          "ref": "cabb1934-46ab-4072-8d50-54d31b00a6e6",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "23678393-7757-42d8-9d0f-a91bb9a67947"
        },
        "item": {
          "id": "0a02991b-da07-4c12-a868-3867b56845f0",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "8ad0cd3b-4ae4-4920-9aa0-603c96b83373",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96cb0348-aeb8-45dd-aa6c-29282b9e601c",
        "cursor": {
          "ref": "2c66b0c5-0bb2-4a3d-823b-07e8b496d102",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "24e40751-ba90-4485-8a47-e90058bbb338"
        },
        "item": {
          "id": "96cb0348-aeb8-45dd-aa6c-29282b9e601c",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "6a67d539-921a-4d98-a24e-bfa72c14dc9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 202,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14141cba-c1d1-46e9-b2ba-fd611668bf89",
        "cursor": {
          "ref": "d466662a-3437-4750-9641-9343facd28de",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "810f0bed-2591-433a-ac53-b1a24d0314e6"
        },
        "item": {
          "id": "14141cba-c1d1-46e9-b2ba-fd611668bf89",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "815e1ffe-b54b-4d2b-91eb-731a14a9f5ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7134587d-1b3b-48dc-a9da-fd1ae8778cbf",
        "cursor": {
          "ref": "f1db3582-1e9d-4978-b62e-48b9e7a744ab",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "05c093af-6cbb-402a-8948-e54f5f81085c"
        },
        "item": {
          "id": "7134587d-1b3b-48dc-a9da-fd1ae8778cbf",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "a96780ba-59d2-4a2c-8ae7-f7ea88b33c93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0726f0b4-f49b-4736-9977-cd0deeccf617",
        "cursor": {
          "ref": "d3da1df3-efe2-4c21-8c86-43526b5ac276",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a7c12c15-058e-45f0-bbe9-6395b36224d8"
        },
        "item": {
          "id": "0726f0b4-f49b-4736-9977-cd0deeccf617",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "5b8e029b-d80a-4908-81c3-04b9330350f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0281d91f-2dc2-428c-8e18-06420563a553",
        "cursor": {
          "ref": "4e8a34c9-58e2-4ea4-9bad-13ee4c4917c9",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "d73386f5-9c37-4ddb-90a9-d2089a71ea21"
        },
        "item": {
          "id": "0281d91f-2dc2-428c-8e18-06420563a553",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "b22052b2-b5f5-4f7c-bd6d-ce0ef9e760fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4d4e61c-7687-4fa6-a5e5-47c8cf800e26",
        "cursor": {
          "ref": "7eec89a3-09d6-4fe0-93e6-c764f78109e4",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "ad9c9291-accc-437f-ba11-01fe454367ec"
        },
        "item": {
          "id": "a4d4e61c-7687-4fa6-a5e5-47c8cf800e26",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "15df361a-5e3c-44a9-b559-d7c8520759d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 143,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a35b777-4216-4c25-834a-06102c15e4b4",
        "cursor": {
          "ref": "dd39bc5f-4a94-4564-85ac-f08225b7affe",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "9c146720-11fd-408e-b5ba-674f58229156"
        },
        "item": {
          "id": "1a35b777-4216-4c25-834a-06102c15e4b4",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "9cf9a89e-2c66-4b67-b8cb-49384b241a5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9794d7e0-3717-4ab8-98d4-436a9306be60",
        "cursor": {
          "ref": "9b2d52bb-f046-42c3-81e6-aefd049cff8f",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "afbadca7-a3f5-4c37-9eec-bf67979530b4"
        },
        "item": {
          "id": "9794d7e0-3717-4ab8-98d4-436a9306be60",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b2944a5e-3fb5-49a4-a9c1-54feffcf1c43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62e97980-c171-464b-a454-a3aa9aa181e9",
        "cursor": {
          "ref": "1e1ddc09-9672-42c0-aaf7-b485223bab06",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "80f08ef5-1e7a-42e2-854f-880f124b2e5e"
        },
        "item": {
          "id": "62e97980-c171-464b-a454-a3aa9aa181e9",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "83706d3b-96a2-4f36-9d57-6405fceb9d36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0672c53-2589-4d5d-a287-e24ecb9e9669",
        "cursor": {
          "ref": "87b8f181-87cd-4942-8a49-c6767c1352fc",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f15b589c-546b-4e50-8e76-ce5dfd01b88e"
        },
        "item": {
          "id": "e0672c53-2589-4d5d-a287-e24ecb9e9669",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "6ca82359-2e67-41f6-a535-c47a4f8fc4f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "606d57bb-3096-48dd-9db3-584c66f46666",
        "cursor": {
          "ref": "a670e616-c785-4701-80fb-e2a7a607e4ac",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "3a06ecb6-8eef-4686-beba-221ede04e453"
        },
        "item": {
          "id": "606d57bb-3096-48dd-9db3-584c66f46666",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "8a3164be-3904-4582-925b-f9b1c60ecf9d",
          "status": "Created",
          "code": 201,
          "responseTime": 2589,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "6fcfdd66-9f13-4dbf-8577-829269b6b4ac",
        "cursor": {
          "ref": "4fc0f941-c0e3-479d-ad1f-8d1aa2556505",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "82a1d7fc-50d2-434a-a1ea-b05684304cbc"
        },
        "item": {
          "id": "6fcfdd66-9f13-4dbf-8577-829269b6b4ac",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "7c240f43-f575-4778-a3cb-2a73819dbb08",
          "status": "Created",
          "code": 201,
          "responseTime": 2687,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "0bc7e1c4-10af-4705-8a38-63ceb8349caa",
        "cursor": {
          "ref": "cc1a42f3-f3ec-45ee-bc24-c1ee4370171b",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "12191626-5602-4106-a790-91865f286098"
        },
        "item": {
          "id": "0bc7e1c4-10af-4705-8a38-63ceb8349caa",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "e8a59bc0-514d-4dc4-8227-3759a1f0fa53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 481,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d06d5290-7d7b-4016-9941-dc7fa35c98b2",
        "cursor": {
          "ref": "3d32a336-ccee-4390-beed-ccfacf97d23f",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "ec02efef-68a0-4dae-8dcb-273d7ac69f6f"
        },
        "item": {
          "id": "d06d5290-7d7b-4016-9941-dc7fa35c98b2",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "e75c391b-ed54-41a9-ba43-a47952732fb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5cfc678-8896-4e49-b55f-fa1e14b72552",
        "cursor": {
          "ref": "cae6a8c3-cc6f-47b3-99dd-e161fe8297b4",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d2a69f3f-68c3-47c2-bc84-7430395d5996"
        },
        "item": {
          "id": "a5cfc678-8896-4e49-b55f-fa1e14b72552",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "9060c189-d36d-4998-8406-c68631f8aaf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6270c0d-ebb0-47a4-95b0-857bff7ed307",
        "cursor": {
          "ref": "879c2553-b22b-427d-b5f8-09b5ded36757",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "ba3956bc-62a7-4caf-b060-d173f0ba0846"
        },
        "item": {
          "id": "f6270c0d-ebb0-47a4-95b0-857bff7ed307",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "ba575bc7-bab5-4f6b-8ca0-598e262ad296",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba81b50d-abe2-47f0-9d3d-58f743d4bee0",
        "cursor": {
          "ref": "528a838b-1813-48b7-9a5b-d19b00f52394",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "7a91a577-ec56-479e-bd7d-822ba61be7eb"
        },
        "item": {
          "id": "ba81b50d-abe2-47f0-9d3d-58f743d4bee0",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "f8d89c9c-2a19-4f96-8144-62c25b3e277e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 259,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a940e529-242e-4ea4-9c80-0ee6f5af7067",
        "cursor": {
          "ref": "dc36d89b-fb1b-4969-9b53-e2811a806932",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f4241065-9670-4fea-b280-a61c75b0204a"
        },
        "item": {
          "id": "a940e529-242e-4ea4-9c80-0ee6f5af7067",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "3c2e4736-cb29-4c6c-a3f0-1a2c8a6857d5",
          "status": "Created",
          "code": 201,
          "responseTime": 3446,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "449419fd-5cdb-4939-bdeb-0b6435e6a85d",
        "cursor": {
          "ref": "08488ce3-7ee5-412b-8771-f876858dd266",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "4fc7a4d3-f286-4ea9-9183-88bfacdd1cbc"
        },
        "item": {
          "id": "449419fd-5cdb-4939-bdeb-0b6435e6a85d",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "97b53eb2-011f-4488-ac6f-981c73ee32d1",
          "status": "Created",
          "code": 201,
          "responseTime": 2466,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "28308071-c197-40ae-9c0b-a74ce37c9f3b",
        "cursor": {
          "ref": "4523eab7-95b4-43ec-b285-93b0bb786696",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "f260972c-59c6-4c27-94ae-4cd47c219dec"
        },
        "item": {
          "id": "28308071-c197-40ae-9c0b-a74ce37c9f3b",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "4e3a0e8c-d9c8-4638-9c1b-6422d4763adc",
          "status": "Created",
          "code": 201,
          "responseTime": 2667,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "7bbb1a2a-6274-47c9-a3ea-8a37c20ab080",
        "cursor": {
          "ref": "e18f1401-92db-450a-9246-8f1ee5a1950e",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "85fe56a3-9a81-4f68-8c6a-8d082eb2250f"
        },
        "item": {
          "id": "7bbb1a2a-6274-47c9-a3ea-8a37c20ab080",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "421c7630-10d0-42ff-808a-256b1b09c0db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8a5d222-4283-44d1-98b3-6a9b573f8836",
        "cursor": {
          "ref": "6a8d94b7-fadc-4cf5-bf79-73398997f8bc",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "f6c5b641-589a-47ce-95e9-d7066ccb7a5a"
        },
        "item": {
          "id": "c8a5d222-4283-44d1-98b3-6a9b573f8836",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "72ffd42c-7ada-422f-9fad-79b45732d99a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77b1f3e6-1aa7-41b5-bcbd-855e0f49a70e",
        "cursor": {
          "ref": "44cdd959-d5c4-46d5-88f4-9ed8ec355369",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "89b14e6d-d588-4ff0-9a4d-d927f49a2285"
        },
        "item": {
          "id": "77b1f3e6-1aa7-41b5-bcbd-855e0f49a70e",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "c24cb4dc-20c4-4d01-ade5-1e47bb5c62cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa8bb80f-8901-4c5b-a63e-ce84eca9fad9",
        "cursor": {
          "ref": "7fe485a1-6be7-42a8-ab4f-409d4d2b3b45",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "cf81a85f-427b-4408-aeb3-8a558367b9cb"
        },
        "item": {
          "id": "aa8bb80f-8901-4c5b-a63e-ce84eca9fad9",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "16d70903-23e9-4e40-a6ee-1aa17e5b8841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb56d17f-f04f-465a-9434-84b251d61446",
        "cursor": {
          "ref": "b547cedc-8819-40f9-ad93-6b5cb127c76f",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ec35ee12-7568-4bc3-9643-fb70e102e98c"
        },
        "item": {
          "id": "cb56d17f-f04f-465a-9434-84b251d61446",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "a66658dc-ac8c-4740-977d-dfa8d9cd00ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc28c2b1-1da1-45b6-b8f4-11a5659312da",
        "cursor": {
          "ref": "4ebe71d2-371f-405e-a90d-1d652759bfee",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "fe69d84b-86f4-4bff-84b2-fecb13831594"
        },
        "item": {
          "id": "fc28c2b1-1da1-45b6-b8f4-11a5659312da",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "c6c660e2-14a8-4819-9a9d-4012435ced05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac4b677a-9777-4c35-b378-a17d65c8f435",
        "cursor": {
          "ref": "76c4a531-446e-4264-9177-8d3aa914612d",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "b47ce7c9-4915-4ada-b51a-b33e387ce090"
        },
        "item": {
          "id": "ac4b677a-9777-4c35-b378-a17d65c8f435",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "03e445f7-95d4-4628-a53d-aa6be3aef99c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 214,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2255f3f-7535-4756-840b-2c298bb4d1d1",
        "cursor": {
          "ref": "6689f6a4-48c1-4c78-9047-b1198a2766e5",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "ed3d24c4-b72a-4309-ae34-69af651ecbf1"
        },
        "item": {
          "id": "b2255f3f-7535-4756-840b-2c298bb4d1d1",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "7885d43f-cb9a-457d-9476-c65cb3a9f9be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a7c80d7-ca99-47af-83f5-a1583384fee3",
        "cursor": {
          "ref": "c67bcea1-19ba-4147-846c-51f9d5a811da",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "cbf1db88-235f-454b-87fa-bc38c04fdc06"
        },
        "item": {
          "id": "5a7c80d7-ca99-47af-83f5-a1583384fee3",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "5d9b82e8-c732-4514-9692-0c1f502e42e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 349,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "268ae3a2-7a24-4f6b-a859-ac9715f78fae",
        "cursor": {
          "ref": "b6443f2e-e4aa-4b17-a173-e59f1b57ab33",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "5a87a13d-c619-4449-852e-f5c1c06bcadb"
        },
        "item": {
          "id": "268ae3a2-7a24-4f6b-a859-ac9715f78fae",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "4e22ed35-3f4e-4af0-b063-1811957034c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18b12e6c-9a1a-4011-a750-075513e3e24f",
        "cursor": {
          "ref": "781c6e9e-2b5d-4dbd-9aef-1ad447c1ff0b",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "99bc4e2b-7922-4bd0-8935-d41dc74c0f85"
        },
        "item": {
          "id": "18b12e6c-9a1a-4011-a750-075513e3e24f",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "07f37482-9a7f-4c96-82fd-5faeaa0d2553",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 221,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cea3c16-51f9-472a-9bb9-cd00fcce99f5",
        "cursor": {
          "ref": "6462dbab-7d6c-410f-b39c-5f66aca7a6bb",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "5545b1dd-206f-4292-bc53-2d64b056b4b3"
        },
        "item": {
          "id": "1cea3c16-51f9-472a-9bb9-cd00fcce99f5",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "560386f8-038d-4711-9b55-7631754f06af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e2dd9a6-8457-4158-932c-76a19ef1df0f",
        "cursor": {
          "ref": "08307043-2cbc-4276-8508-24bdff157225",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "d708242c-7b4e-44ec-9e0e-bd58ed0a0a4c"
        },
        "item": {
          "id": "4e2dd9a6-8457-4158-932c-76a19ef1df0f",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "9e6687c9-8eb3-439e-80cf-1ebca3a33c56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6523f85a-20d5-43e2-9a84-afb8364faf17",
        "cursor": {
          "ref": "cd3c60e7-39fd-46da-a439-e2aac09496ea",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "a3621b8a-f364-407e-92ae-33f0a25f5694"
        },
        "item": {
          "id": "6523f85a-20d5-43e2-9a84-afb8364faf17",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "4ed953f9-1b76-4c06-bac0-ecf40da60b74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 157,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd3dddeb-3bde-47fa-88a3-dabb7f0f03c4",
        "cursor": {
          "ref": "2970fc24-8469-483c-86c5-fc256da00198",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "dbcd6ad2-99ca-4e37-9f27-64ead61a6cb4"
        },
        "item": {
          "id": "cd3dddeb-3bde-47fa-88a3-dabb7f0f03c4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "29e27aef-f942-4c3d-a082-aaec6cc9ac9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11d7fb71-427d-4f4f-aae0-253dfaa31015",
        "cursor": {
          "ref": "0a9c486a-bf96-4b97-b2e1-b2897d933677",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "3d47e4ad-fe36-4cc8-82aa-deb9cdd88b02"
        },
        "item": {
          "id": "11d7fb71-427d-4f4f-aae0-253dfaa31015",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "9a529b7c-8a75-44f9-a0f7-5feba8eba6bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b4643d1-e729-4373-bada-30156c63ef1c",
        "cursor": {
          "ref": "4dea087c-05ff-4ae4-a005-de10f511802b",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "81cc01d0-09e2-4a1c-b070-1740a076983d"
        },
        "item": {
          "id": "4b4643d1-e729-4373-bada-30156c63ef1c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "f6f439f0-7bf4-4484-9b0b-159132a8b674",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 243,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea466778-3dae-4050-b8bd-b0535f8bccbb",
        "cursor": {
          "ref": "bb23a514-07e9-4921-b597-81f009286b19",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "2b9e55b5-5c71-41ad-a48e-68107f3f6384"
        },
        "item": {
          "id": "ea466778-3dae-4050-b8bd-b0535f8bccbb",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "d6efac6c-209b-4eef-b585-e78986e134d0",
          "status": "Created",
          "code": 201,
          "responseTime": 2919,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "ba3d0a11-7c19-48d4-9194-fc4d7c397719",
        "cursor": {
          "ref": "c3b27fd9-cc50-42ee-ace6-6983834e2256",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "d701b4bd-ece7-454e-9aaa-18ab4683348d"
        },
        "item": {
          "id": "ba3d0a11-7c19-48d4-9194-fc4d7c397719",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "634f1f34-a9b0-4969-8b0f-abaa09829e8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1d353ec-eb2a-409e-a600-9040d560fe8f",
        "cursor": {
          "ref": "abb4da9d-3f06-49c1-bb16-01aa535da665",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "ea9c023e-d318-4a36-ba09-07918a1792b6"
        },
        "item": {
          "id": "d1d353ec-eb2a-409e-a600-9040d560fe8f",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "44ad5d6d-2bc7-4a0b-8566-24c39fedb24d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06c45789-f053-42af-826c-8ac3d213b785",
        "cursor": {
          "ref": "70a79579-ffc2-4cfb-89d7-93ace604e367",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "a627ef9a-0740-4f47-b5e1-94768564bdb3"
        },
        "item": {
          "id": "06c45789-f053-42af-826c-8ac3d213b785",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "5dc6192f-0ea5-44db-9497-578129b1f3ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8405955c-fccc-4ca6-b457-2f832ebea6f8",
        "cursor": {
          "ref": "4a26820c-6644-474e-a6db-9dc1832e758c",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "bd63dbff-7d60-42bb-a02e-8eb5f941b056"
        },
        "item": {
          "id": "8405955c-fccc-4ca6-b457-2f832ebea6f8",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "4ae08c1f-007e-4dd8-b6fd-b398278154f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc4fce4b-c2ed-43a0-a785-f7a9f32cf03b",
        "cursor": {
          "ref": "e01ebb00-956d-4b70-95b2-439de1f263bc",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "6caf10c5-b00d-4200-8b5b-a8cbd2ea7b64"
        },
        "item": {
          "id": "cc4fce4b-c2ed-43a0-a785-f7a9f32cf03b",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "7fcf041d-35a8-4083-9dcb-1cbc9a48d0c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "233e45ef-d29a-4a25-9018-84536f00a224",
        "cursor": {
          "ref": "57e17b62-fe5f-4fe9-a5cd-56961664e226",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "60afc739-0952-4d68-b66a-51e782058a53"
        },
        "item": {
          "id": "233e45ef-d29a-4a25-9018-84536f00a224",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "48c8341d-461d-4009-8f24-43d4e6b50337",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2e35211-2dce-431e-bf16-e0288ebd39a9",
        "cursor": {
          "ref": "b46d6958-8d09-450b-914e-2c0b34efc0a9",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "ce68e0bf-abea-4884-8d71-ec1f06786647"
        },
        "item": {
          "id": "a2e35211-2dce-431e-bf16-e0288ebd39a9",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "ad38c3f7-2033-406f-9c8c-6051785b1786",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb919937-f8ff-4a50-9147-46f40eeab18f",
        "cursor": {
          "ref": "006bd17a-0d99-4074-875f-f52f17cb69cf",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "2bff602f-6a8d-445e-ba1c-755b56d851ac"
        },
        "item": {
          "id": "bb919937-f8ff-4a50-9147-46f40eeab18f",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "6b832610-c955-4a85-832d-f60a64d669fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2233f98b-7b19-43bd-a764-55b3133686f3",
        "cursor": {
          "ref": "becf0260-0146-4923-a830-597b18db9af4",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "a13e87c0-db93-41cf-ab47-96fe03616651"
        },
        "item": {
          "id": "2233f98b-7b19-43bd-a764-55b3133686f3",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "e80022f5-1c7b-4fac-bf3b-69de41624fa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ae1c002-7153-4dfa-9577-1d59585eb081",
        "cursor": {
          "ref": "9740cd51-80d9-46dd-b7fb-a779a8479c58",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "ad69f80a-3044-49a7-be03-b096f7bb8be6"
        },
        "item": {
          "id": "3ae1c002-7153-4dfa-9577-1d59585eb081",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "1da04a24-7135-41ce-9e36-5a8634cc0ac3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "447bdad1-1cdc-4554-8be6-b8213b27f4ee",
        "cursor": {
          "ref": "ca1210d5-24bb-4698-8845-a457014348e0",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "476c21e9-acd9-4c80-8c22-5b04fc7155bd"
        },
        "item": {
          "id": "447bdad1-1cdc-4554-8be6-b8213b27f4ee",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "a6b1c99d-1f5e-4726-8111-12e0b4dab554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3de4553d-a5e2-42c8-b2b3-5b48897a0836",
        "cursor": {
          "ref": "7110cdb4-5df0-4ad0-97bd-03a4ce3fe74a",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "6737c451-53b7-4265-a398-fc4cc65cf937"
        },
        "item": {
          "id": "3de4553d-a5e2-42c8-b2b3-5b48897a0836",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "e7061b1e-15b4-495c-9418-f196c20edbbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd038172-4fcb-434d-b8e3-624bb22d9146",
        "cursor": {
          "ref": "bc5624ba-1408-4bfc-b7dc-9356168897cc",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "a4b7eda4-bc25-4db6-ae29-9ba4153428e2"
        },
        "item": {
          "id": "bd038172-4fcb-434d-b8e3-624bb22d9146",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "18f1cd3f-c45e-4c6d-968e-05424b1584de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b7d070c-11b1-4c26-bf21-f0119c31a1e4",
        "cursor": {
          "ref": "92fa029b-5cff-4d4a-b638-52d0bae921c1",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "12b52ea4-c7d0-44c1-ae5d-a7b1b2284b42"
        },
        "item": {
          "id": "5b7d070c-11b1-4c26-bf21-f0119c31a1e4",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "1eaa7c80-b1ef-4f60-a36a-630e748b30e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6a0570a-8451-4379-9fa7-efccd6541128",
        "cursor": {
          "ref": "a3d5325c-bd35-43c4-9c76-f6c13b8c45d4",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "2a848bd7-f951-4181-9e29-bd8f66496956"
        },
        "item": {
          "id": "d6a0570a-8451-4379-9fa7-efccd6541128",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "30102c90-38da-423b-8b18-94b578ed5a7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e41f8f3-8776-4aa6-a22c-ae8a13e57f4a",
        "cursor": {
          "ref": "46c93112-d8fc-47d2-bae6-faa48e5da9dc",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "22eec13e-b307-4db7-bf34-f0f5ad5900d4"
        },
        "item": {
          "id": "2e41f8f3-8776-4aa6-a22c-ae8a13e57f4a",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "c23647d6-e63d-475c-920b-ddf97108f087",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cb385a8-b203-4d22-993c-eeed7968f3fb",
        "cursor": {
          "ref": "47b90c7f-0a62-455e-9d7d-33ab63b45291",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "8659a952-6ec8-4c14-94ec-eec16944f1a6"
        },
        "item": {
          "id": "5cb385a8-b203-4d22-993c-eeed7968f3fb",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "a8e62d7b-240d-4c58-9a9c-ae01ed8a7a1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "429abe11-a1dd-404b-be13-dfaa7de3e134",
        "cursor": {
          "ref": "b1090700-1c70-4315-b0df-5b3d49869fff",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "9df89def-6eca-4ca0-ac23-6262de99b28f"
        },
        "item": {
          "id": "429abe11-a1dd-404b-be13-dfaa7de3e134",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "7505817e-c13d-4844-a57e-a2f46b9067d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebc8edc5-eba2-487e-9b2a-fb55a8c089ff",
        "cursor": {
          "ref": "da536bb4-bee4-4e9e-ab9a-7eda069c47a1",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "7b487e24-fb2d-4fd4-9e09-ad32655010c3"
        },
        "item": {
          "id": "ebc8edc5-eba2-487e-9b2a-fb55a8c089ff",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "9a7a4bbe-b127-4d28-8b18-10b25e88174b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34c4b58d-6096-4d1a-95cc-65478ef741ed",
        "cursor": {
          "ref": "0ce00502-3832-49e4-a2bb-113bc3f01833",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ffb1e2bb-1bb3-4d70-a2a3-5d5fe4cbc7c9"
        },
        "item": {
          "id": "34c4b58d-6096-4d1a-95cc-65478ef741ed",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "05f5cfa0-ccf9-4162-9560-d3debf293fb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd7dbf2d-52a8-4107-90ae-0af7031ab4c8",
        "cursor": {
          "ref": "8598f73f-b428-4882-8315-d11d0dd57ffc",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "d18acc49-1fb7-44e5-9e2c-5922dd2c9cd6"
        },
        "item": {
          "id": "cd7dbf2d-52a8-4107-90ae-0af7031ab4c8",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "db571969-fb9f-4c87-84e2-09a6caf7229d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6e88962-c2d1-4187-9bbd-bf152caedb39",
        "cursor": {
          "ref": "824624d9-8e59-4d7e-993d-9a6c43793a42",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "c66b3811-fdc1-404e-9657-d0512ca04707"
        },
        "item": {
          "id": "c6e88962-c2d1-4187-9bbd-bf152caedb39",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "c06994ff-1307-43ad-8bdb-920e1b401ec8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55a6a6a1-9b06-4e9c-a2b4-7ddf17c399d7",
        "cursor": {
          "ref": "2056c7d8-96e9-4464-b80e-79a35a48d881",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e840f4e3-01eb-4a58-924e-65d5dad87e20"
        },
        "item": {
          "id": "55a6a6a1-9b06-4e9c-a2b4-7ddf17c399d7",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "6f316e1e-e3b5-4ecc-80da-6355aef994d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9040695c-df7d-404c-b59e-c3bf5c4c6648",
        "cursor": {
          "ref": "cb434988-087e-4550-9c5f-f4366d2fcae3",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "8748c578-1930-443a-b55f-d0f7b95e96d4"
        },
        "item": {
          "id": "9040695c-df7d-404c-b59e-c3bf5c4c6648",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "3baea647-5192-4d0d-9024-a6903d61f666",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2892cfcc-3d19-40dc-87f5-b97ace456d7d",
        "cursor": {
          "ref": "093529a0-61e7-40a6-a438-b7d1c19b6a2f",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "26447e16-0b36-411e-acd6-50f1ad7e3019"
        },
        "item": {
          "id": "2892cfcc-3d19-40dc-87f5-b97ace456d7d",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "8498a050-4806-4e79-90f7-3cd92fbf7163",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2efe4471-705a-48d9-a63b-3a50df4c93f0",
        "cursor": {
          "ref": "16fdf1ff-6066-403b-a543-95938566bb1e",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "acddaba9-db2f-4138-b4a0-781e23708145"
        },
        "item": {
          "id": "2efe4471-705a-48d9-a63b-3a50df4c93f0",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "bdfd5f85-0655-4e75-80f5-05d5636e9027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe8a7eb8-db44-4bfa-bdb6-349aaf7a9cff",
        "cursor": {
          "ref": "4c6520c6-96ef-49e1-adc6-82ba0baada0f",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "6d47ee82-35c6-46cb-8632-ce2d34a452f0"
        },
        "item": {
          "id": "fe8a7eb8-db44-4bfa-bdb6-349aaf7a9cff",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "d3b93615-7448-4d30-b692-487d9fc6a541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f289175-51c2-4ab4-8cee-03e2fee0ea5b",
        "cursor": {
          "ref": "4285b065-63f5-4a10-b6cc-454e2240be8f",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "aac8842d-c159-499f-818c-dd151f68d3d3"
        },
        "item": {
          "id": "5f289175-51c2-4ab4-8cee-03e2fee0ea5b",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "70e989d1-96dd-4a18-a6e2-418fa2addeef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d51205ad-cb71-4c35-90cf-f14c3fb54d2b",
        "cursor": {
          "ref": "b02298c6-645b-4e53-8525-6f7e83c68843",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "bbb9cdf4-0c74-422d-a92e-5ccf438082b0"
        },
        "item": {
          "id": "d51205ad-cb71-4c35-90cf-f14c3fb54d2b",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "196ce412-d5df-44b3-98c3-ba23b45dc139",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e776d736-85d8-4879-a2f3-b452a413a5f5",
        "cursor": {
          "ref": "8a73d21d-f800-4a8d-87e8-529fb684d9ec",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "e3abab77-3078-4227-985f-753e3f990f8e"
        },
        "item": {
          "id": "e776d736-85d8-4879-a2f3-b452a413a5f5",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "8437429a-fec9-4919-a20b-c06b3c08350a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18491687-d974-45b0-bed2-c59fbf321254",
        "cursor": {
          "ref": "469885e7-3be2-40ea-ba88-b4279e5daece",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "4e614a5d-19c0-4f32-b58f-f61da83cd4ac"
        },
        "item": {
          "id": "18491687-d974-45b0-bed2-c59fbf321254",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "78299aa8-7afb-482c-97b6-b136c36bd6f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "0d6e09e3-77e7-4cd3-9247-dff8a3a9202d",
        "cursor": {
          "ref": "675e785e-6d10-41dc-b540-9c8210f73b3a",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "2f42e322-a68e-4362-a528-501584aa8f87"
        },
        "item": {
          "id": "0d6e09e3-77e7-4cd3-9247-dff8a3a9202d",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "1d19c605-c931-4233-b607-6441523f424a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "6afa685e-7f23-46b2-ab70-ab073b7ee423",
        "cursor": {
          "ref": "0ab7aa54-7543-4be2-85cf-55e1699e9959",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "3a86e5ab-41bd-49f4-bbd4-6ba002ea2f6e"
        },
        "item": {
          "id": "6afa685e-7f23-46b2-ab70-ab073b7ee423",
          "name": "credentials_issue"
        },
        "response": {
          "id": "a583182a-2893-43a9-8346-66f6941ef809",
          "status": "Created",
          "code": 201,
          "responseTime": 1932,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbf515e2-2db5-4540-863d-6069fccc6c62",
        "cursor": {
          "ref": "71df1c74-852a-4e28-9180-625362724644",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "d6c7166d-45f5-4059-8123-1aa3e77e0d90"
        },
        "item": {
          "id": "cbf515e2-2db5-4540-863d-6069fccc6c62",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "3330c1db-b923-41c0-8477-81f284b73204",
          "status": "Created",
          "code": 201,
          "responseTime": 2322,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f971a385-a150-46ca-a0cd-a4948a0c6f8e",
        "cursor": {
          "ref": "654fb4e2-0423-4a5c-a35d-8c27f5028867",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "07208f1d-3c3e-444d-8e9b-142cbdad34c7"
        },
        "item": {
          "id": "f971a385-a150-46ca-a0cd-a4948a0c6f8e",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "8293b924-f26f-4506-8c18-79baeb6d700e",
          "status": "Created",
          "code": 201,
          "responseTime": 2085,
          "responseSize": 1007
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "917079fa-ef84-47e5-902d-1fb1fbc0ae26",
        "cursor": {
          "ref": "b8782bc4-43e9-4fea-a24a-b11153ed385a",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "2c2efd30-f5bf-472b-84a4-3299a114eeb6"
        },
        "item": {
          "id": "917079fa-ef84-47e5-902d-1fb1fbc0ae26",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "815384bd-acaa-4391-9d37-e21dc935c1cf",
          "status": "Created",
          "code": 201,
          "responseTime": 2336,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-02-24T00:41:30Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-02-24T00:41:30Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "2533ebd5-1166-43eb-a0ce-c41391990b08",
        "cursor": {
          "ref": "7060d3ef-0271-4cce-959e-e9fe18eb6ddc",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "9b8b6aaf-9f80-497a-9f2d-68fac47e68ec"
        },
        "item": {
          "id": "2533ebd5-1166-43eb-a0ce-c41391990b08",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "599c1c48-2db2-4040-a7ab-1a7158d89237",
          "status": "Created",
          "code": 201,
          "responseTime": 2216,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f05b767-45b7-4865-ae1e-63fe47efaf2e",
        "cursor": {
          "ref": "27f20769-b298-45e7-a915-f1951c728cba",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "67e36138-02bf-4541-8e8e-30b771e6c8db"
        },
        "item": {
          "id": "0f05b767-45b7-4865-ae1e-63fe47efaf2e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d5068a73-93bc-472b-84ca-1a2bf8f17a34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f05b767-45b7-4865-ae1e-63fe47efaf2e",
        "cursor": {
          "ref": "27f20769-b298-45e7-a915-f1951c728cba",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "67e36138-02bf-4541-8e8e-30b771e6c8db"
        },
        "item": {
          "id": "0f05b767-45b7-4865-ae1e-63fe47efaf2e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d5068a73-93bc-472b-84ca-1a2bf8f17a34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eab1f023-7a83-4823-b1af-13b4b6970049",
        "cursor": {
          "ref": "be25c548-6cac-452d-834a-0f14f9d7ab74",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c3304aeb-c454-44c1-b5a2-d28bf33669c6"
        },
        "item": {
          "id": "eab1f023-7a83-4823-b1af-13b4b6970049",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "5dcd548b-8baf-49ab-a9a6-918dcf8df39a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe0a9365-c6fb-4b13-bf99-7c04fdcca1f8",
        "cursor": {
          "ref": "a5b033a5-722d-4309-ae7a-11e2b5c339c6",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "91630201-a9fc-4ca8-a937-4ba0924c7954"
        },
        "item": {
          "id": "fe0a9365-c6fb-4b13-bf99-7c04fdcca1f8",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "33049e70-04de-4f9f-b164-8a95050c2bcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "163f9eba-ebfa-4958-b4f1-f9a032ac84b3",
        "cursor": {
          "ref": "728e70e4-5865-4452-bd27-02660f259a2b",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a9a0c969-0146-44f5-b63b-6c400864be71"
        },
        "item": {
          "id": "163f9eba-ebfa-4958-b4f1-f9a032ac84b3",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "184481bb-84ed-4523-b656-cc5cf410266a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "311e7993-bc93-4dc7-b857-854370dbb5a5",
        "cursor": {
          "ref": "172cb296-2153-4a0e-bca4-01e03d6414da",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "322542df-7ced-4e27-ac6d-e2906921a42e"
        },
        "item": {
          "id": "311e7993-bc93-4dc7-b857-854370dbb5a5",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5888674f-4b1e-4ebc-b85c-31dd3a6d755a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90c68d10-46b4-4934-96f2-a3503a090ddf",
        "cursor": {
          "ref": "936ad3f7-321c-4a3a-bb96-572d658790b4",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "518272df-986f-4f60-ad5b-04c1e8711267"
        },
        "item": {
          "id": "90c68d10-46b4-4934-96f2-a3503a090ddf",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "be8fed78-1de6-4391-953d-4c06c1e61f84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1042bac2-8ffe-4fc9-a744-42b52e23c454",
        "cursor": {
          "ref": "92856a6f-c368-4d61-86fc-5c849d32a164",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "3141e34a-d599-41a6-b0c8-c4a631004c0f"
        },
        "item": {
          "id": "1042bac2-8ffe-4fc9-a744-42b52e23c454",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "a1091895-d910-4f1e-a955-17f143e98b37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d89df835-dd7e-47e8-8d9e-dbd4c55411b7",
        "cursor": {
          "ref": "eecc10b5-314c-415b-b0c0-b3ae7a532867",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "062562a4-79c1-4c87-97ca-65563f149a54"
        },
        "item": {
          "id": "d89df835-dd7e-47e8-8d9e-dbd4c55411b7",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "15adfbed-7311-42df-b4b4-a649c43b72ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ec83e8f-526b-4ad6-8432-23aba50668d7",
        "cursor": {
          "ref": "36dc882b-0e81-4d60-8355-18398c55e9af",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "9895839c-528f-4ccb-948b-68de722ba533"
        },
        "item": {
          "id": "1ec83e8f-526b-4ad6-8432-23aba50668d7",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "17accb9a-a86f-431b-8966-4c0cd045c08b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c90130ba-d7b8-4bc8-ae49-b9e1beb52a3e",
        "cursor": {
          "ref": "4d3845ec-0515-44fa-889f-4bec7114d2b0",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "6a638aed-58f5-40ca-bb31-3225143c299f"
        },
        "item": {
          "id": "c90130ba-d7b8-4bc8-ae49-b9e1beb52a3e",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "33b838e2-f449-40a9-8f7f-04375c3ceec9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1acc31fe-0cce-4c60-9980-7f842a0504eb",
        "cursor": {
          "ref": "c77088b9-d419-4b4d-b00e-b3e533f35f0b",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "a30240ef-47a0-4cd7-9a64-978052e790d5"
        },
        "item": {
          "id": "1acc31fe-0cce-4c60-9980-7f842a0504eb",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "eefedf7a-8900-4ca1-88e7-5e7ef747428d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faa30494-a5c2-4f4c-941b-ee258b2a92a2",
        "cursor": {
          "ref": "e622b320-bc1e-481e-b006-df75d43e1c74",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "aa7f0d00-cf98-4047-a4f2-db1f04719436"
        },
        "item": {
          "id": "faa30494-a5c2-4f4c-941b-ee258b2a92a2",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "8dea3075-c6ed-4e51-9f15-332aa5d4d52e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd3f607d-36ac-47aa-a0ce-f5b851cb6123",
        "cursor": {
          "ref": "0e1f1158-90f6-42cd-8996-80678c6124a6",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "731b6069-df38-4a18-86ba-32431d281737"
        },
        "item": {
          "id": "bd3f607d-36ac-47aa-a0ce-f5b851cb6123",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "20174e4d-0fb4-4e6d-bbca-6479ee270fb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a296c80e-995f-4972-8907-dc5410e537ac",
        "cursor": {
          "ref": "53611741-32a8-468a-bf59-1e3e5d02ead2",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "15f26339-7e7a-4d20-8d24-1f5991fcc7d7"
        },
        "item": {
          "id": "a296c80e-995f-4972-8907-dc5410e537ac",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "0aef34a5-e811-4799-93d2-beb247ca9ce9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4959a6e7-8270-4347-95c9-d399bd553833",
        "cursor": {
          "ref": "abbc5a1e-a3c1-4d47-bb6c-df7ca3d63280",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "c97857b4-28c7-4058-bf60-46bbb17166ef"
        },
        "item": {
          "id": "4959a6e7-8270-4347-95c9-d399bd553833",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2dca0bfc-2a18-4643-89e8-e6c0e5223c06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24b0424e-59b8-4cc5-b75a-926a34e71dea",
        "cursor": {
          "ref": "82f1ade2-a8ce-4627-9494-a10c0e4ec8c4",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "135ad898-226c-42ec-8081-37500d2e084f"
        },
        "item": {
          "id": "24b0424e-59b8-4cc5-b75a-926a34e71dea",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "910297e6-7f34-43f1-bdbd-90abc8917478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9e04b6b-c315-421b-9c04-bff1d5462c6f",
        "cursor": {
          "ref": "9e85ea74-a22c-42ec-8221-5612a7e1d43e",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "76b483aa-417c-464a-9da8-91fe83ac09bc"
        },
        "item": {
          "id": "e9e04b6b-c315-421b-9c04-bff1d5462c6f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "990a35c1-20dd-47a8-9683-fea729a255c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72a128e8-3f24-4892-b241-2f1a5d96b4a4",
        "cursor": {
          "ref": "0ac35961-f5a6-4158-ba25-248bef81ee0b",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "3eaa51a2-ff75-4ba9-a166-601af8715062"
        },
        "item": {
          "id": "72a128e8-3f24-4892-b241-2f1a5d96b4a4",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d1df87e8-e0ab-4d83-8253-e5cded37a78a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fa9d046-eed4-49f2-b821-4d7c4ddb9520",
        "cursor": {
          "ref": "41963eea-5ce9-4cc8-b145-743f844bf387",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "83fd5ec9-9962-40d6-a71e-6a42313db8c1"
        },
        "item": {
          "id": "6fa9d046-eed4-49f2-b821-4d7c4ddb9520",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "4ff92679-edc7-4ce1-b52f-2f266277a032",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2b2987e-d419-41b8-aa15-2c1e2355ba32",
        "cursor": {
          "ref": "e0188aed-63c3-41a0-9830-887960a370ca",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "58599cae-7e40-4a8f-9e3e-ec63c4a9dfb0"
        },
        "item": {
          "id": "d2b2987e-d419-41b8-aa15-2c1e2355ba32",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1c75c1be-f7b0-4461-8c20-9993b2786637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4d533f2-d51e-41d8-9639-94ed283e6c86",
        "cursor": {
          "ref": "c3afc1a5-647e-4d92-9df9-50286e0eb0c0",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "489ad326-bfe9-42cd-b332-2226f66e3363"
        },
        "item": {
          "id": "d4d533f2-d51e-41d8-9639-94ed283e6c86",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b0bfb329-db9d-4086-a7af-31ddad385e3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f3fb344-398c-40d4-8239-33c61b4d2132",
        "cursor": {
          "ref": "9eead995-3592-47ac-a624-5315a6a352f6",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "a5614fe5-f3ce-4f47-a407-2fbf14afc304"
        },
        "item": {
          "id": "2f3fb344-398c-40d4-8239-33c61b4d2132",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "cc32108d-c7cf-4ad9-b600-9ac608a57ad1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "946c1304-a1a7-45ab-94a8-557a96a0aafa",
        "cursor": {
          "ref": "fc8a7ae0-cb3c-447e-9042-9beab050ef06",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "282a5c8b-8cb8-4e4e-a1f0-784e9f2c30c9"
        },
        "item": {
          "id": "946c1304-a1a7-45ab-94a8-557a96a0aafa",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "99238bdb-1057-43fc-9277-e632a7026f3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "212bc681-8b0a-4d15-a1eb-5c02b3c9a384",
        "cursor": {
          "ref": "4c815311-d3a8-4f1f-9c09-a299818e3578",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "bbe766cb-9748-4228-bc09-4847a8518ca9"
        },
        "item": {
          "id": "212bc681-8b0a-4d15-a1eb-5c02b3c9a384",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "68d2b53c-b202-4167-9e15-89a1e0f303b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0a42541-b44e-4fd5-9e2c-d1821394b598",
        "cursor": {
          "ref": "ddb8d397-0792-41d7-ae28-c991c1f392c2",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "76e7d800-b0f4-4004-8aab-aca4c40c8f37"
        },
        "item": {
          "id": "d0a42541-b44e-4fd5-9e2c-d1821394b598",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d7bc64cd-5ad9-4e2d-81e6-f98e5b3f4caf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61d6bb47-4ba0-4fcb-af7b-633212dd21b1",
        "cursor": {
          "ref": "479e6bfd-71a2-47cb-808c-1d3db79a5259",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "6581db6d-9e9c-422f-b8fd-f8b5be73378c"
        },
        "item": {
          "id": "61d6bb47-4ba0-4fcb-af7b-633212dd21b1",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b8b83097-64e8-4712-9d7f-0a241231293c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e3e52b7-6f3a-4efa-a178-55fbed692a32",
        "cursor": {
          "ref": "a9f8cbb4-4d1f-4416-8588-42e9d183e1e7",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "3348e758-6e9a-4393-b5bc-b959fdb27454"
        },
        "item": {
          "id": "4e3e52b7-6f3a-4efa-a178-55fbed692a32",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "179b24d1-207d-4c50-aa78-f3cbbb990c8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e653e606-d5f2-4501-b206-316fbc26190f",
        "cursor": {
          "ref": "4a41f9c9-7b36-4221-a330-4e61174d4cef",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "5cd83feb-3a22-4924-96ff-a3a27fdb1584"
        },
        "item": {
          "id": "e653e606-d5f2-4501-b206-316fbc26190f",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "5019632f-5c69-4943-b610-5839025abd93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31482767-92e0-4d5e-a0d4-536971c167da",
        "cursor": {
          "ref": "4a149528-8e6c-45cb-928e-05ba29013585",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "e16e9ff2-e9dd-4a5c-9009-d4a2472682b3"
        },
        "item": {
          "id": "31482767-92e0-4d5e-a0d4-536971c167da",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1a7e2e2d-7fbb-43a2-a1e7-9e064549edf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4edeef9b-d609-4988-b09b-504b00398493",
        "cursor": {
          "ref": "6d6011c5-cfda-4b98-9768-56ad505db29a",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "26d63f34-c63c-47a6-a892-645ee2002f9d"
        },
        "item": {
          "id": "4edeef9b-d609-4988-b09b-504b00398493",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "0f9bad5b-a28f-4484-8c92-0362f4f95037",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "205d4cda-4591-4bcd-a8f2-77cc91fe457c",
        "cursor": {
          "ref": "749687c4-78ba-498f-b53c-c3b4fb5938d4",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "a209faa2-7df8-4447-8515-bf3aa77b2409"
        },
        "item": {
          "id": "205d4cda-4591-4bcd-a8f2-77cc91fe457c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2cf547f9-62e4-4a57-bf26-b2db750d8036",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f02830f3-e9e4-4014-acd8-b7999b37ecf4",
        "cursor": {
          "ref": "207ef02b-c058-47f5-93dc-d6ea902250fe",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "c217fe2a-177a-4b43-aed7-85f0c1f88d02"
        },
        "item": {
          "id": "f02830f3-e9e4-4014-acd8-b7999b37ecf4",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "b9ec1f96-6b0e-4017-b28f-7a75cc8bbef0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1f7200a-ed94-48b8-981e-7e5dc2d3dc4b",
        "cursor": {
          "ref": "ccda66c6-28b4-438c-a4fc-32785c362221",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "36c50af6-790c-4f5e-9079-119a753882d7"
        },
        "item": {
          "id": "c1f7200a-ed94-48b8-981e-7e5dc2d3dc4b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "270056d9-2e4b-435b-ace3-aa2d8be40fb5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "27d75e48-6ec0-46a4-881e-68176379d323",
        "cursor": {
          "ref": "9c4bfc3f-ba3e-46b3-ad2d-ee8be197ba6a",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "eb96da4a-7338-41d2-ac75-41bac061c3a9"
        },
        "item": {
          "id": "27d75e48-6ec0-46a4-881e-68176379d323",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "cd103f56-d485-4402-8634-784d281595aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "cd514a1e-9d6f-40c4-810f-29fa09800249",
        "cursor": {
          "ref": "08539779-ee7e-427b-8235-c7326b329392",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "504c0486-24e0-4496-b4ea-87d557c3075e"
        },
        "item": {
          "id": "cd514a1e-9d6f-40c4-810f-29fa09800249",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "99b63ba4-9301-4f8b-8856-4f58c8505e07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd514a1e-9d6f-40c4-810f-29fa09800249",
        "cursor": {
          "ref": "08539779-ee7e-427b-8235-c7326b329392",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "504c0486-24e0-4496-b4ea-87d557c3075e"
        },
        "item": {
          "id": "cd514a1e-9d6f-40c4-810f-29fa09800249",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "99b63ba4-9301-4f8b-8856-4f58c8505e07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bc5eab3-a039-488a-a126-a504675d9f36",
        "cursor": {
          "ref": "e9839318-21cb-4dda-8c98-08bdec55cefb",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "12cd84e8-d8bd-4580-97b7-510221499d62"
        },
        "item": {
          "id": "9bc5eab3-a039-488a-a126-a504675d9f36",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "d74721ca-15a0-46da-9c1f-60f4d7094c81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16eeeaef-eaa2-4216-b6c7-06939e69424e",
        "cursor": {
          "ref": "56edd084-2157-4f2d-8b2a-69f92138ed26",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "ab63db97-45df-48d2-942d-ec9373d92b18"
        },
        "item": {
          "id": "16eeeaef-eaa2-4216-b6c7-06939e69424e",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "971147d4-0e51-4d19-8b03-c92de4b54d59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e574e11c-10d8-4b90-b146-3cd2209753fc",
        "cursor": {
          "ref": "0ef80d06-b461-44c0-9978-381caa07fc04",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "02c07a66-4e4b-4f30-9a60-0584e7d5f45c"
        },
        "item": {
          "id": "e574e11c-10d8-4b90-b146-3cd2209753fc",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "03dc6081-4a73-47e0-a2e4-bcf434fad2e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f8888ba-c0a4-441b-885c-c83700611616",
        "cursor": {
          "ref": "dfc77462-6b65-4f7e-8b6c-0580ac897ea1",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "39a9ff3b-366a-416a-8d24-1a5e77550d21"
        },
        "item": {
          "id": "0f8888ba-c0a4-441b-885c-c83700611616",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "6d0f65fe-bb87-47bf-b7da-48519bfcf344",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cfc9a67-936f-4a02-9b2d-8cab9b461230",
        "cursor": {
          "ref": "3b5365b7-4b11-4403-8175-1f6fb8e1d8c9",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "4cfbbf15-bbf1-4dcf-94f4-e253dfac9467"
        },
        "item": {
          "id": "3cfc9a67-936f-4a02-9b2d-8cab9b461230",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "b6f04967-847c-432b-90b9-394bbef42eae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98f05fcb-a029-40f0-aa77-2c79b07e499d",
        "cursor": {
          "ref": "9429e5a7-3c35-4953-9c8e-b8c4d2029189",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "51bca204-6615-4c2e-a9db-85a82af519de"
        },
        "item": {
          "id": "98f05fcb-a029-40f0-aa77-2c79b07e499d",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "01b25c35-7859-4d46-9709-10872a0b4f9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0538932a-415b-4d75-b10d-96f12f01921f",
        "cursor": {
          "ref": "9dda81af-e16f-4712-8c8f-2b9966fde910",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "0db124c4-6ada-4ba7-8afb-414e47c41b83"
        },
        "item": {
          "id": "0538932a-415b-4d75-b10d-96f12f01921f",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "bed32e46-a5a2-4a8b-a9d3-d0c3db81bf70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f1b9155-2c77-49cc-afe3-c140e4284be9",
        "cursor": {
          "ref": "264fbcaf-481e-4359-b017-44e98b2ffa8e",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "62302053-3930-46a0-a5ec-7ba118ce8c6e"
        },
        "item": {
          "id": "7f1b9155-2c77-49cc-afe3-c140e4284be9",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "131d18c0-5068-4f9f-a487-e6951de436e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aa75361-d864-4cf7-a960-44a05c9e1d9b",
        "cursor": {
          "ref": "7249c0ae-9deb-44af-beed-ab086a55c9d3",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "2e794f25-83fa-4873-898d-45444f929daf"
        },
        "item": {
          "id": "0aa75361-d864-4cf7-a960-44a05c9e1d9b",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "769c27b7-1428-41c2-91b4-31770f955c30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31f2c708-5f12-4077-80ed-73c6368c54c8",
        "cursor": {
          "ref": "83be71a7-d6d9-41cc-bdb5-7aeba3fdc6fc",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "76ff878b-004b-4b5a-8b28-2905f87ce82d"
        },
        "item": {
          "id": "31f2c708-5f12-4077-80ed-73c6368c54c8",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "85253950-cc7a-43ca-93f8-5528a6c78a08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffadfed4-c0df-4ba2-a227-753e575e8226",
        "cursor": {
          "ref": "1c93ccbe-dd18-4cfd-bd6e-fefcd6685583",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "734411d9-5960-498e-ad26-079e8e1d580f"
        },
        "item": {
          "id": "ffadfed4-c0df-4ba2-a227-753e575e8226",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "bcc243cb-0b87-4522-97c1-ef0b9df1ee33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a13c9dbc-5383-47ae-a0d7-b0199a1690e8",
        "cursor": {
          "ref": "e73e66d6-8d17-4778-9e91-f2e1444d7bcd",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "0fd9f181-e075-46de-9fb2-a43ac30c0842"
        },
        "item": {
          "id": "a13c9dbc-5383-47ae-a0d7-b0199a1690e8",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "6f1843a4-fc55-4281-a599-0df13e6db99d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fba5b55-f7bd-44a0-978a-1650a81126c5",
        "cursor": {
          "ref": "af8cda21-a9fc-45bf-92f1-0660e7082394",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "4a514b09-9c2b-4d95-b3c8-9008921f2eca"
        },
        "item": {
          "id": "4fba5b55-f7bd-44a0-978a-1650a81126c5",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "627abfc3-6c40-4823-b1aa-848c38b909a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2081bad-74b0-4e42-8bb8-5454bee6e85e",
        "cursor": {
          "ref": "a6a5837e-69a5-4b5a-bbdd-54b0f2dac4a0",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "c522b968-35ba-4e1b-9158-2c42cc780d2c"
        },
        "item": {
          "id": "d2081bad-74b0-4e42-8bb8-5454bee6e85e",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "c91bdd8c-2e79-4392-b997-6c20c57c0d3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "156629ed-c527-4150-8cdf-1b2bd1cfbcb4",
        "cursor": {
          "ref": "8f68becd-d670-4ce6-b4a9-a27c8da615e8",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "8332fda1-0b46-4c98-ac3b-e8cb68a6b857"
        },
        "item": {
          "id": "156629ed-c527-4150-8cdf-1b2bd1cfbcb4",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "6ae98a8d-c8a0-4d69-90dc-6dd2d124a10a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ea9ac7b-a052-45b0-bfee-b4d3d7a3b9f6",
        "cursor": {
          "ref": "acdfddf8-a761-4cd7-bcbd-5292aabb7f6f",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "2a222bbc-35a6-4db2-9cc2-f143a58aad1d"
        },
        "item": {
          "id": "1ea9ac7b-a052-45b0-bfee-b4d3d7a3b9f6",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "2f7b0747-833d-4000-a578-4c3515375dee",
          "status": "OK",
          "code": 200,
          "responseTime": 268,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "8f4aa78c-02e9-48d1-bf5b-b8986cd28b43",
        "cursor": {
          "ref": "ca3ca1ca-b5f8-4152-b220-ef7ba400a9de",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "536bbb91-0c28-43db-ae2f-a41df500db1b"
        },
        "item": {
          "id": "8f4aa78c-02e9-48d1-bf5b-b8986cd28b43",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "0a9ed7a1-6083-4e1b-8fb6-4160e385c2a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c574daf-bed1-4a17-9d20-6a9b3ec97ac0",
        "cursor": {
          "ref": "6ef14e6c-51e6-4e22-85b5-53d84e0dc6c9",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "98518624-f560-4172-aa18-a53da31be6f2"
        },
        "item": {
          "id": "8c574daf-bed1-4a17-9d20-6a9b3ec97ac0",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "ec29dd0e-26ab-4231-855d-76959a4894f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54a56f29-60e5-41c7-a026-56104eb4bf9d",
        "cursor": {
          "ref": "ec04fbee-89ca-40d1-a359-94cfd3749a42",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "30efb3e5-e6a7-4848-ab0f-476c4d9fb1e0"
        },
        "item": {
          "id": "54a56f29-60e5-41c7-a026-56104eb4bf9d",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "248ca453-6811-4f22-b5e0-0f4ab96407a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d7d9293-f733-4ea9-865d-5f9adf114ad6",
        "cursor": {
          "ref": "fbbaa947-b158-455b-b6fc-78d11eb9321a",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "117aae0a-fef0-4326-850c-7c51607bffa4"
        },
        "item": {
          "id": "4d7d9293-f733-4ea9-865d-5f9adf114ad6",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "4ddd2143-1437-4d68-9a64-7c4a510968cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07460cd8-0776-408f-8ea8-cf12b11024f1",
        "cursor": {
          "ref": "b45c2a0f-75a5-4365-8c6d-d9cb610c190b",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "efbf5594-2f1e-4a9f-8437-3284592510f4"
        },
        "item": {
          "id": "07460cd8-0776-408f-8ea8-cf12b11024f1",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "2262761b-ad3d-47ac-8176-0b55c1b8439a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41aade19-9ce5-4525-a62e-226d857df057",
        "cursor": {
          "ref": "b7df4a9b-5abf-4fbe-842e-3a8e21b295f1",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "03b55dee-da60-4cf2-a7f9-8d3b47a68644"
        },
        "item": {
          "id": "41aade19-9ce5-4525-a62e-226d857df057",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "b09abecb-d797-40c3-8980-df8f5794888e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75eea339-6961-4091-9850-69b38d944540",
        "cursor": {
          "ref": "12b9444c-884e-4930-bc86-3a1a9fa08eda",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "d42ef9f8-337c-44b4-8ec6-8dffa331e9ae"
        },
        "item": {
          "id": "75eea339-6961-4091-9850-69b38d944540",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e77f64cc-68e6-46cf-80b3-5779782641e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da782bc7-02ba-494c-a31d-cf4efdfc0206",
        "cursor": {
          "ref": "b83720f4-220f-45b9-af72-bd64a7931c54",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "ea643bf0-bdf5-4968-a377-7212a8133c40"
        },
        "item": {
          "id": "da782bc7-02ba-494c-a31d-cf4efdfc0206",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "a808b570-844c-40ea-abc4-9a1a08699a08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a329f75-28c1-44f0-9fe2-761976edc5e4",
        "cursor": {
          "ref": "eadb13ba-475c-46ae-9e2f-344522173dbc",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "c8d69b7b-2c67-4d22-8dff-914790b9b191"
        },
        "item": {
          "id": "7a329f75-28c1-44f0-9fe2-761976edc5e4",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "ebc3fd5a-1a36-4b12-95dd-8d1b35f1339b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2c120c9-5964-43b4-986f-2933f1720d37",
        "cursor": {
          "ref": "ef94a623-f953-4ddf-a4bd-cd341b609b2d",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "645d86ef-e350-4721-a4f0-24e95c853acf"
        },
        "item": {
          "id": "b2c120c9-5964-43b4-986f-2933f1720d37",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "cb52b19e-197b-42d9-861d-e012f95573ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e56214c9-bcc4-4193-b9ff-66db7c058921",
        "cursor": {
          "ref": "6fe4a830-afad-4ad2-8076-b580243fc546",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "d747100b-d75b-4291-bb70-45a7edac5301"
        },
        "item": {
          "id": "e56214c9-bcc4-4193-b9ff-66db7c058921",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "09e695b0-1f75-4d70-9b38-78b52a18054d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f9bd932-2891-485b-a6d1-7acd6287eb2d",
        "cursor": {
          "ref": "056806a4-2983-4cdc-86c8-907d42f2a77b",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "8ce827b4-6102-4f0a-aaf7-7ea47535049e"
        },
        "item": {
          "id": "2f9bd932-2891-485b-a6d1-7acd6287eb2d",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "f2cd1581-2019-444e-a5e7-9f85766f5416",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79d49596-d1b9-44f4-9bf6-1c3d16bd0fe1",
        "cursor": {
          "ref": "4f3a326d-263b-4439-9a56-e413364c8783",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "d629f8a0-e694-46b2-a41e-7f40fd2f12c2"
        },
        "item": {
          "id": "79d49596-d1b9-44f4-9bf6-1c3d16bd0fe1",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "8f8db6d9-1986-42ab-be58-de7c0f51c55a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcc4671f-93f8-4b9f-8891-15533666e105",
        "cursor": {
          "ref": "f4ed47b7-6a65-457b-8a39-641ed0b4bd19",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "7230f473-6070-4f4e-98cf-9d3592b3db9d"
        },
        "item": {
          "id": "fcc4671f-93f8-4b9f-8891-15533666e105",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "145133f6-b650-4dad-99c5-a3291919cfed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c79f1a2a-5ca4-4dda-bcde-b3cce4986d45",
        "cursor": {
          "ref": "6071ddb4-dd04-42e9-b0a8-e898b2f7dc8d",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "a6cf603b-6971-4bbb-bacf-87a24df7c877"
        },
        "item": {
          "id": "c79f1a2a-5ca4-4dda-bcde-b3cce4986d45",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "f724fdd2-5ab3-4090-ac9c-73de3d944a9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04ccaa2c-1886-4ab7-8c90-32fbd668299e",
        "cursor": {
          "ref": "b6ef8d4d-b8c9-43eb-b07f-b87f8946beab",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "15dd8b3e-6b70-4040-b24b-c89c5c0249da"
        },
        "item": {
          "id": "04ccaa2c-1886-4ab7-8c90-32fbd668299e",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "78c1f950-b63a-460a-8833-4357f6249cce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e417f91e-34da-48a8-9c57-bb56bdd37248",
        "cursor": {
          "ref": "cbcc1691-2191-418e-be10-d68bb8cc1fd5",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "bdf76d25-6d7c-4f63-86a6-8de255d3fcc1"
        },
        "item": {
          "id": "e417f91e-34da-48a8-9c57-bb56bdd37248",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "fdfb4cf1-52f5-426f-a847-5b43d6bf5d4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31759aa6-e97e-430e-8c64-f64f2fc8d5ad",
        "cursor": {
          "ref": "b7082259-4a67-4d9c-927d-6c63b67172db",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "7f490ef6-aa5c-4d5f-a8fc-e662a9084e58"
        },
        "item": {
          "id": "31759aa6-e97e-430e-8c64-f64f2fc8d5ad",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "6f3fbaec-4c5b-494b-8956-ecdf73a50fa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "085b7f9e-f958-45ce-a6be-0a8201c8c2d0",
        "cursor": {
          "ref": "3c2b0d76-6f8e-4e54-abd6-9b59f5aec3f1",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "4d0caa9b-9134-496a-9202-cf5fbdab5a94"
        },
        "item": {
          "id": "085b7f9e-f958-45ce-a6be-0a8201c8c2d0",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "19db085a-a2bb-4c3e-bed7-959e3d6f8c31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53da78c2-9da1-4edb-87f9-7fcb8452aba3",
        "cursor": {
          "ref": "eefc65d1-503c-4257-8e5b-2a97e63c306e",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "42a65f44-0ad8-4825-879b-07f806e9c03c"
        },
        "item": {
          "id": "53da78c2-9da1-4edb-87f9-7fcb8452aba3",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "34c1fb26-ca9d-4522-b946-6b7141082d9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98734477-ce0b-41ca-82e6-cac00f121529",
        "cursor": {
          "ref": "01794c48-fdab-4cad-98c9-eab1c5355929",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "510aacf9-6154-48a1-b29a-30316287cfde"
        },
        "item": {
          "id": "98734477-ce0b-41ca-82e6-cac00f121529",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "c655eee0-3edf-433d-a4b1-1a8a232df5f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70671c34-f9d3-4bf5-9d5b-271d11f51266",
        "cursor": {
          "ref": "978b186c-e2a6-4fdf-87a0-153c76db0b6f",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "1821fa81-5f58-4827-9154-8e01afcf2de7"
        },
        "item": {
          "id": "70671c34-f9d3-4bf5-9d5b-271d11f51266",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "eb037ba4-f562-4d0e-a74d-3504e539da82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89da823d-ea34-49f3-937c-9fea2186e6b7",
        "cursor": {
          "ref": "4928470d-9a08-4c60-bbe9-146146fd8ea9",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "c5aa180a-569f-44b3-8dd2-b8a9995b61c9"
        },
        "item": {
          "id": "89da823d-ea34-49f3-937c-9fea2186e6b7",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "d44f2526-f3e4-4772-b6cc-d43b810b05e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d7991b4-4b84-4f9c-a966-ca1f9c075850",
        "cursor": {
          "ref": "6ce8474b-72da-4a1d-953f-1a286412d9d6",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "f38a00dd-4233-46b7-b07d-30fcb615e0a0"
        },
        "item": {
          "id": "6d7991b4-4b84-4f9c-a966-ca1f9c075850",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "f00f297d-f0ea-4b94-9206-4f02f4d49fce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fb39d9a-c129-4bf4-b4bd-7118879c9f7c",
        "cursor": {
          "ref": "2a547d6f-60e6-49f0-b22c-81504420ccb1",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "cdddc8fa-961e-4b62-9f6e-836eb2fc35d5"
        },
        "item": {
          "id": "0fb39d9a-c129-4bf4-b4bd-7118879c9f7c",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "728d7602-746d-49ca-a1e6-29cb86c9528b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3180df0c-ab1b-4433-8409-d875603dd2b8",
        "cursor": {
          "ref": "ec8ecf1a-6da8-4f10-b484-8b15e945be41",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "a02b853d-7cf0-40ad-a88a-82f206857cad"
        },
        "item": {
          "id": "3180df0c-ab1b-4433-8409-d875603dd2b8",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d1e4015f-5afc-4638-9c30-270b56c5981d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a7751f4-9cfc-4f0c-b5fe-da72a2fb7c4c",
        "cursor": {
          "ref": "7d6042a5-304b-449c-bcf9-de970b6b40fe",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "9c4f05dd-33d9-4abc-aacd-f7e00b71eb07"
        },
        "item": {
          "id": "4a7751f4-9cfc-4f0c-b5fe-da72a2fb7c4c",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "690c3557-517a-4f73-be56-c1049b30c3be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4337f49-b9ec-44f9-b8e7-79e81bce7e8f",
        "cursor": {
          "ref": "f8e0e362-f7a9-462c-bb60-84666627d5f6",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "97087992-b6a3-4bac-8a6f-58c588480aa9"
        },
        "item": {
          "id": "c4337f49-b9ec-44f9-b8e7-79e81bce7e8f",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "ccb5b7a6-d5cd-4e5b-92d5-68133190c0e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d2a6865-340a-42d5-b1fa-aba0ef60e5f8",
        "cursor": {
          "ref": "fe3ed437-c7ff-4d14-bcb0-b9b1b732149a",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "9b1bdd84-1b7e-41e6-b8b5-75954122ab90"
        },
        "item": {
          "id": "0d2a6865-340a-42d5-b1fa-aba0ef60e5f8",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "8a533157-824e-43aa-a201-f679468fcc2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eb364af-9590-415c-8119-7c7cb58710e1",
        "cursor": {
          "ref": "269ee7db-c15d-4b7e-8648-f63ae4b2b87d",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "469151a7-9a7b-4ee6-a87b-49d45093e44f"
        },
        "item": {
          "id": "3eb364af-9590-415c-8119-7c7cb58710e1",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "20ea4339-ef9c-4e58-ab40-db77c46a465a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23e94d2b-50d0-4661-8031-f562167406e8",
        "cursor": {
          "ref": "e6e38dff-c4e5-4a52-9548-6fcd69f96f35",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "b63ad0e1-bf32-48c7-b9d0-242b8ed55c16"
        },
        "item": {
          "id": "23e94d2b-50d0-4661-8031-f562167406e8",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "e6f5b10a-e15f-431b-b575-e8e57e30bbe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3093dac-4064-401f-8975-9ee326e3de93",
        "cursor": {
          "ref": "36a16fe5-d006-4742-a825-710fa157cae5",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "79fec1ae-ac76-4178-856d-bfde4f7c373d"
        },
        "item": {
          "id": "f3093dac-4064-401f-8975-9ee326e3de93",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "a7b04295-529a-4ce1-9ddd-e7769f03170e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a91d0dc0-585a-425d-b0ee-b661dc7937a6",
        "cursor": {
          "ref": "6a84aae3-d1a7-41cf-b03b-f5b7d9ebfe17",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "619fd9b5-9bd7-49bd-af29-5a7293ce921d"
        },
        "item": {
          "id": "a91d0dc0-585a-425d-b0ee-b661dc7937a6",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "6ab7d3dd-0fb9-4d4a-9967-85c928ed2644",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d47577b7-ee12-472e-a98c-baa9706984b8",
        "cursor": {
          "ref": "831af4dd-1ad3-4325-a620-fbd871de90ee",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "43a92b44-7694-4c93-b0ee-0de8745128c6"
        },
        "item": {
          "id": "d47577b7-ee12-472e-a98c-baa9706984b8",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "4e8f0346-d747-4487-9702-ea7ec0089d0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17910c88-bbd8-41b7-880c-c89889d0b917",
        "cursor": {
          "ref": "f58a7bab-e13d-4cf3-bc01-7e1b0874be75",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "3cbd2ba5-f873-4735-8f08-0b7431cea9ec"
        },
        "item": {
          "id": "17910c88-bbd8-41b7-880c-c89889d0b917",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "fb2cffbd-cb2a-4c23-90f9-d6d5160b4a1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07f20316-c4b5-44fe-8b52-afa5223767dd",
        "cursor": {
          "ref": "c6ada147-c222-4658-9697-742bcdc80018",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "1ba458ab-4e35-4a06-8fe4-402c3c590ffd"
        },
        "item": {
          "id": "07f20316-c4b5-44fe-8b52-afa5223767dd",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "e17e40f7-b331-41c5-a4c4-9205911a6af1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9c9ba94-0e58-4be8-a5ad-4e019a070113",
        "cursor": {
          "ref": "0d4a9304-2473-45a7-bf35-d19a77e17d71",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "0ad11aab-8874-4535-b096-22387982a863"
        },
        "item": {
          "id": "a9c9ba94-0e58-4be8-a5ad-4e019a070113",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "2102571f-7a1c-4063-a1d2-4abe29920417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "837765e2-b6a8-493d-8d0e-d4cf082bdbdf",
        "cursor": {
          "ref": "b9a288d3-91e2-47a5-acd7-d265df005935",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "97912894-235e-41da-87e2-e0d0ed9ee0d0"
        },
        "item": {
          "id": "837765e2-b6a8-493d-8d0e-d4cf082bdbdf",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "1913718b-1cc8-416e-8c95-a587beee60fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c298ff7-8500-47ce-9da9-0432016fe7a5",
        "cursor": {
          "ref": "922597c7-7930-4bd9-ade5-59f595fda3b9",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "11c39483-e31c-4a6c-93c7-6a245f1fcf79"
        },
        "item": {
          "id": "2c298ff7-8500-47ce-9da9-0432016fe7a5",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "a4aa93c4-88fb-4fa1-929f-6d32e8bbd61e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 138,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8818b80c-dc24-48ae-948c-bdf9353a6e3f",
        "cursor": {
          "ref": "b815244e-c008-4512-9834-42a849cccb96",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "9353db2c-368a-4553-bd45-3adf070d02d6"
        },
        "item": {
          "id": "8818b80c-dc24-48ae-948c-bdf9353a6e3f",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "5d9de8d5-2ea1-4307-a153-7e9fb5cc6f61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 147,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b321f054-3444-494c-9acd-057653bc6020",
        "cursor": {
          "ref": "bea2a8d1-bd65-4664-a923-a38756648af5",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "30fe3664-bc83-45b4-b461-27b2b810d0a3"
        },
        "item": {
          "id": "b321f054-3444-494c-9acd-057653bc6020",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "db30dbb9-b80e-42af-8861-fa6402f499db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d78e5d59-b8f0-4eba-97bf-878605c0959d",
        "cursor": {
          "ref": "e277235b-0b09-495b-92f6-8ce24f9cab78",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "fb45c24c-14dc-4d02-81a4-b00bde42e1db"
        },
        "item": {
          "id": "d78e5d59-b8f0-4eba-97bf-878605c0959d",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "f24d041d-643a-4d8e-8f40-95a2736ea0f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b29c5a5-4ef5-491d-9853-bb24a8aba0c0",
        "cursor": {
          "ref": "7c5acd87-4b1a-42a3-8651-4fd933d96533",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "14ec35b1-ae75-40f6-a39b-8874856d97cf"
        },
        "item": {
          "id": "8b29c5a5-4ef5-491d-9853-bb24a8aba0c0",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "715cef4b-7894-4cf3-a670-2c41b08601a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a567ec7-79c4-42e6-bceb-52d5c5c6f8bf",
        "cursor": {
          "ref": "faf7700a-539f-4ecc-94d9-ae5faa5ec9c3",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "e78688c2-19c7-4104-9204-398067565339"
        },
        "item": {
          "id": "6a567ec7-79c4-42e6-bceb-52d5c5c6f8bf",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "5a46a646-9c87-4e30-9209-3b782bc874aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd24d2ba-085d-474a-b428-fb3ecccaee06",
        "cursor": {
          "ref": "0d4d2027-b2dc-4448-9498-123dc17c7026",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "35eb827d-dbed-4e8c-bd06-74ce3d139f52"
        },
        "item": {
          "id": "cd24d2ba-085d-474a-b428-fb3ecccaee06",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "61bdfa36-2cc9-4438-b27b-653b3e5ce52d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e652535-8a60-4f94-981f-64ec18be8e4c",
        "cursor": {
          "ref": "8aa899d1-6fec-4ffd-bccb-a9afab763877",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "4d9bf05d-7281-463a-99d4-ae48def52601"
        },
        "item": {
          "id": "4e652535-8a60-4f94-981f-64ec18be8e4c",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "41b83505-c171-4a1d-8a0d-f98c2b0f3ede",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69371f6e-f355-40ae-8267-16b983868b57",
        "cursor": {
          "ref": "fdf456d6-962e-42fd-b8ff-0e14a7ddc9c5",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "cde621c2-2e36-40c8-b375-dfbea026a846"
        },
        "item": {
          "id": "69371f6e-f355-40ae-8267-16b983868b57",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "b0deacaa-45d9-4047-88d5-ffea41d548de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b152c40d-9137-4cb0-878a-73cce291f3bd",
        "cursor": {
          "ref": "83dbc6a3-72cd-4f55-b00a-03c66ffd8795",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "8793a47a-44dd-4de8-a85e-4d1e798206de"
        },
        "item": {
          "id": "b152c40d-9137-4cb0-878a-73cce291f3bd",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "19f8e2c4-02fc-4b43-83f6-cbcec54e9573",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b535ce56-390c-4f70-a7be-392c30adf3d9",
        "cursor": {
          "ref": "69eb2c58-9a0b-4e04-8b2d-38a7ab243458",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "5fff7d1a-8b07-40f9-bab0-a801c45706b0"
        },
        "item": {
          "id": "b535ce56-390c-4f70-a7be-392c30adf3d9",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "68f73a12-2045-41a6-b26f-a460e858661e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a212da2d-d867-4031-913c-e8de10eef22d",
        "cursor": {
          "ref": "ca417869-47eb-45e5-82aa-5257ee83ac38",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "833899d2-9a6e-49d3-9b6b-e089ce6b2202"
        },
        "item": {
          "id": "a212da2d-d867-4031-913c-e8de10eef22d",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "7e342996-852d-47d9-bffe-25179ce13204",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4f6a948-b75c-4453-b1dc-00d269683cb1",
        "cursor": {
          "ref": "66282f97-8dfc-415a-8e35-665c52814bd6",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "664738a3-f30a-4da0-9eca-31c1ccc99be5"
        },
        "item": {
          "id": "e4f6a948-b75c-4453-b1dc-00d269683cb1",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "0f7a037e-2a57-4665-afb6-edd8a75b2819",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae78e71a-5a74-4b1a-9753-37f8b889d400",
        "cursor": {
          "ref": "ef2d3e18-b69c-412f-a497-2bca3dcf5a7d",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "fe744a1c-1071-4441-93d4-0d0163653e19"
        },
        "item": {
          "id": "ae78e71a-5a74-4b1a-9753-37f8b889d400",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "d8ad76aa-bcad-4c30-bfa1-112ea5e14ce3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e9d2c97-fe51-47bc-9734-dcba6ee653b8",
        "cursor": {
          "ref": "ced85019-f584-41c3-82c5-8dc396328d4b",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "520a70d4-0e99-4cc6-b30c-1541e6ce4635"
        },
        "item": {
          "id": "4e9d2c97-fe51-47bc-9734-dcba6ee653b8",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "dad9c4fa-2086-412a-ae7d-3f1f62d97daa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e96bec6-725d-479c-b1b7-de19e5caf11c",
        "cursor": {
          "ref": "c6fd6263-273d-4915-85fc-f6f98a700bff",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "b0157d2b-19b4-4781-a597-0fbc3f028810"
        },
        "item": {
          "id": "8e96bec6-725d-479c-b1b7-de19e5caf11c",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "c154b4ae-aca5-4235-94d4-56a0e3487e68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff42b8f7-0aa4-40d1-aca0-2b79b5e6961d",
        "cursor": {
          "ref": "308adbd9-82d6-4d43-82f0-ff93dd807ebb",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "f00c5208-a20a-42bd-afdb-1802ca0449eb"
        },
        "item": {
          "id": "ff42b8f7-0aa4-40d1-aca0-2b79b5e6961d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "ade03e04-897c-49d6-b5aa-bf62bd1995f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "871ebf86-5eb4-47d1-9b97-f2a36b5ec921",
        "cursor": {
          "ref": "9de4d351-6bdc-480f-805d-c8ad485ce0b6",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "c63d53e7-b7d3-48c4-a0cc-46bc935313e5"
        },
        "item": {
          "id": "871ebf86-5eb4-47d1-9b97-f2a36b5ec921",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "0874a974-844f-471d-9f34-9dcf2197efed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd030dce-37a9-47e7-b27a-f4c459f4a033",
        "cursor": {
          "ref": "57e13d98-e642-4785-94dc-e49b84ec5f24",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "036e1d8b-85ea-42e8-814f-8ed0cac66776"
        },
        "item": {
          "id": "bd030dce-37a9-47e7-b27a-f4c459f4a033",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "fda228a6-eb9d-41f1-8ad8-c2a89a1d212b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5de6de5-9ee9-4df8-8f5f-a89f180d85d7",
        "cursor": {
          "ref": "5bb8adc6-7d63-42cd-8bb4-deaa0ab1b5ca",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "0310e498-69ee-41c6-87b5-7b6c2bcc38f8"
        },
        "item": {
          "id": "d5de6de5-9ee9-4df8-8f5f-a89f180d85d7",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "8ff91dda-17bc-411a-ac9c-5133ef98882e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c19df77-631b-47d8-b0f3-42817958f7a6",
        "cursor": {
          "ref": "20315ed0-1ab2-4757-9ac1-56a5c91b8cd6",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "b034ee40-9dd5-404f-8734-5052f7925614"
        },
        "item": {
          "id": "7c19df77-631b-47d8-b0f3-42817958f7a6",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "6080e6b9-0c28-48a8-8f4d-ed5d50e122eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd76d6a0-2d8a-44e2-80a7-2acbb1ae744c",
        "cursor": {
          "ref": "64c3ef0c-d5de-4e80-9306-f22de6f8caac",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "c7e4df19-a7fe-4743-9cbd-32108bf99fcb"
        },
        "item": {
          "id": "bd76d6a0-2d8a-44e2-80a7-2acbb1ae744c",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "6717f6e1-e812-4e7c-bee3-652d60913676",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df5383f9-ffdf-48d9-82fb-f67a018c413a",
        "cursor": {
          "ref": "3c7b0ed7-79e7-4c33-b2c9-df1edbfa2ab2",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "ae9fc068-08a0-4511-a181-ee2685e76814"
        },
        "item": {
          "id": "df5383f9-ffdf-48d9-82fb-f67a018c413a",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "989ae4af-024f-4197-8a29-aebc5ff3961c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cee8ea9-4499-4326-ba74-f61554e096bd",
        "cursor": {
          "ref": "7c5b95d4-0b60-4887-83db-99930bba2aad",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "9dcc7491-fd4c-4546-bb48-54d2b824f27c"
        },
        "item": {
          "id": "1cee8ea9-4499-4326-ba74-f61554e096bd",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "d7893e92-fadd-4196-be3d-e4ba9ae13bae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4097962f-c3be-4222-82cf-5f5ca5f42a02",
        "cursor": {
          "ref": "a43b1094-c64d-499a-89e1-c23162590004",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "a1aff39f-d4aa-4eed-a638-7e23ea1cd6c3"
        },
        "item": {
          "id": "4097962f-c3be-4222-82cf-5f5ca5f42a02",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "45f7daff-48e6-42ab-af5b-fc476b82d1ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06e4b71b-175a-4bf1-a66e-e291d7b8f02a",
        "cursor": {
          "ref": "d28be7ab-dfb6-4226-8b94-77e50cab750a",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "572a95b9-d1fb-485d-af28-a3544d38eed1"
        },
        "item": {
          "id": "06e4b71b-175a-4bf1-a66e-e291d7b8f02a",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "422077cd-a1e6-4cec-82b2-a95ae6651e10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33ee9d82-005b-476e-ac50-fa2f5eca5c02",
        "cursor": {
          "ref": "77a3f07c-cf77-4d0f-b288-6006ab632f47",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "5dee3b20-4d50-439d-93df-016ac579e578"
        },
        "item": {
          "id": "33ee9d82-005b-476e-ac50-fa2f5eca5c02",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "ae25ee68-366e-4006-a0ed-a40134596c7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7618785-bb2c-41c3-8793-e329990d1a6f",
        "cursor": {
          "ref": "ab40cf82-dccd-4bd3-8926-4637b245a71c",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "20532bda-65b1-4b1d-9def-c2622eaa9dde"
        },
        "item": {
          "id": "d7618785-bb2c-41c3-8793-e329990d1a6f",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "26b4f1ab-1aee-482f-bc51-9c40031e77c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5a5cee2-03b6-4bb1-a9cb-3deea06d9cee",
        "cursor": {
          "ref": "b3e34ea0-d376-4ae7-ba1c-544ceee8ba8e",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "f24f4f28-8852-4618-a243-e38ef2ced72b"
        },
        "item": {
          "id": "b5a5cee2-03b6-4bb1-a9cb-3deea06d9cee",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "81f83135-bd79-4a5d-bf9b-443f3041eb8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a49318df-b4ba-4da7-b8ac-4ca810ec52b7",
        "cursor": {
          "ref": "722f3e7e-57d0-4685-957d-a07098f1a155",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "43919e8e-ba2f-4676-a25c-6d63b6d0e136"
        },
        "item": {
          "id": "a49318df-b4ba-4da7-b8ac-4ca810ec52b7",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "8f37f48a-99b6-4c41-af06-4c60feef51de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4a9bcbf-8bc8-4ba5-854e-36d6f31959ea",
        "cursor": {
          "ref": "7b6e1687-1b41-4392-9c7d-457404d2d512",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "20138000-057b-4913-a73d-84da7862bc81"
        },
        "item": {
          "id": "c4a9bcbf-8bc8-4ba5-854e-36d6f31959ea",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "fa8f83f1-acf1-4c19-956a-e5138add024d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe6df189-323d-4eb5-a51e-afdf43996558",
        "cursor": {
          "ref": "31290ee1-1760-49fb-8ab4-a0aa886b79e5",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "aa54f8b7-9fb7-4564-b022-b70d35f127dc"
        },
        "item": {
          "id": "fe6df189-323d-4eb5-a51e-afdf43996558",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "9aae228d-9ef4-43e7-bafb-84384cc3b926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c39fa30-0303-49a2-82c5-44c0bac0951a",
        "cursor": {
          "ref": "f5442c15-19ed-41d4-bd67-135fbcae5b53",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "fb666dfe-b968-4e87-a7be-3729fd77667f"
        },
        "item": {
          "id": "3c39fa30-0303-49a2-82c5-44c0bac0951a",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "f57101ec-5659-489b-b905-a099bb21e839",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "028567be-4e72-49be-8734-1796e85503e6",
        "cursor": {
          "ref": "9ee0d87c-acc8-4546-8d10-77005ecc4127",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "33230486-554b-4e0c-a5ab-4ee1718a88e7"
        },
        "item": {
          "id": "028567be-4e72-49be-8734-1796e85503e6",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "fb7da6d4-8335-41ba-9146-fc9ecd47b5b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44622d5c-f0e1-4f02-a2b7-f24e078cf4e0",
        "cursor": {
          "ref": "50e3ec97-3f1e-4b23-9e6a-e29934b53579",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "c40c8919-ef68-43cf-90a3-e0c46b0bd966"
        },
        "item": {
          "id": "44622d5c-f0e1-4f02-a2b7-f24e078cf4e0",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "091ca73a-df87-43f2-bcd5-6c5f1492288a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e8a42fd-cd30-41cb-903b-efbed3dc2e61",
        "cursor": {
          "ref": "aa81b064-a597-4527-b136-03fcd151f218",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "14ee5ac2-565a-4df9-a9f4-fcb5d9b5b8fc"
        },
        "item": {
          "id": "0e8a42fd-cd30-41cb-903b-efbed3dc2e61",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "42f42bba-b828-42e4-8aed-d86add523687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07e27f3a-fa7c-4753-8a25-43376621d2f4",
        "cursor": {
          "ref": "4db04065-1ace-4baf-8a43-c517b4ec5492",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "dc73bf42-d4bd-4c51-aaaa-41dd31a4f9c2"
        },
        "item": {
          "id": "07e27f3a-fa7c-4753-8a25-43376621d2f4",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ee766cd0-c7f2-468e-b2ac-a709ec92ef4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e02b9f13-bae3-491a-bc0e-9825dfc6cc04",
        "cursor": {
          "ref": "f76206d1-24fd-4bee-bcb2-e17f27b30753",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "0b285290-fd72-4975-8cbb-f86efdda80d3"
        },
        "item": {
          "id": "e02b9f13-bae3-491a-bc0e-9825dfc6cc04",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "1f4cd469-5b64-478d-b0ce-1b33d38191fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0c18187-8f41-4205-92c2-3dcc494ba287",
        "cursor": {
          "ref": "5946d761-85f5-4ed4-ad66-92eeca223ce5",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "01164885-fa9d-4f2c-94ec-e10668c1c5ef"
        },
        "item": {
          "id": "e0c18187-8f41-4205-92c2-3dcc494ba287",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "783c6474-21cd-476b-bc0e-12d87e0986b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "835e347d-6db5-4d8e-a037-8dc44758a0a5",
        "cursor": {
          "ref": "91c66b98-fc9e-4c45-9d7d-4c00b3395b2c",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "2de2216f-39b5-4506-a0e1-d2c0d333f010"
        },
        "item": {
          "id": "835e347d-6db5-4d8e-a037-8dc44758a0a5",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "da6a2862-982a-447e-b706-03b30f9dba28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43fed5da-b9d5-496c-a383-0fbb2603ee8d",
        "cursor": {
          "ref": "58457f1a-6d38-4332-9e18-f289edf4bca1",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "f697fd39-6bdb-43c2-812b-1f298b499147"
        },
        "item": {
          "id": "43fed5da-b9d5-496c-a383-0fbb2603ee8d",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "fb1c2ce2-c218-4788-a5ae-e6245d75d56b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2050d488-6470-4a99-ad72-2200a0d76b83",
        "cursor": {
          "ref": "b176c4ef-8178-44d8-b5de-5b4ac0423689",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "2960cc44-5bc4-4505-bb44-d56fd1e2a7e8"
        },
        "item": {
          "id": "2050d488-6470-4a99-ad72-2200a0d76b83",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "4c679283-cde5-4a25-8a71-b00930c7d1b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c845c91-e82a-4a5c-9446-ce889e0618d9",
        "cursor": {
          "ref": "108ed30f-8b7d-4686-b8b2-fc9aef97acbe",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "786bf131-1706-439f-94b7-b13103d2e4dd"
        },
        "item": {
          "id": "0c845c91-e82a-4a5c-9446-ce889e0618d9",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "e2aa8739-568d-4024-98f6-5efbb6794f3c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "88e428ec-e20e-4814-a51c-c0f7d2e176fd",
        "cursor": {
          "ref": "644023d8-87c9-44b7-9c48-8c816488e291",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "ebd7e560-9748-45ba-ac49-194dbe0412dd"
        },
        "item": {
          "id": "88e428ec-e20e-4814-a51c-c0f7d2e176fd",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "698c943f-76b2-4d9d-8d6e-2221a4dc3bee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "27dff6fc-0b9a-47eb-90d0-f2a747f6e34e",
        "cursor": {
          "ref": "67ab8404-1f45-42ed-9c42-88130521b01a",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "bb8aaf79-47b6-41ac-9324-35cdc120e696"
        },
        "item": {
          "id": "27dff6fc-0b9a-47eb-90d0-f2a747f6e34e",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "9fb1b225-ca53-4e2a-be69-5e7c1b211d9a",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "9362f226-cede-48bd-850b-5d0c68023133",
        "cursor": {
          "ref": "2362e693-807e-494b-9f67-bb2f29b9c789",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "d0c9bc0f-ca10-4229-9ff4-29378c469e4f"
        },
        "item": {
          "id": "9362f226-cede-48bd-850b-5d0c68023133",
          "name": "credentials_verify"
        },
        "response": {
          "id": "c63c8514-f0ff-42c8-b7f5-af9965347d85",
          "status": "OK",
          "code": 200,
          "responseTime": 2306,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf78aa4b-1b0a-4e1a-8588-c1da8842f29a",
        "cursor": {
          "ref": "5f842582-67b3-429f-840b-fec61e5ef7f6",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "9c882433-d619-4edd-ab82-5d5cc4097443"
        },
        "item": {
          "id": "cf78aa4b-1b0a-4e1a-8588-c1da8842f29a",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "e4928077-8e04-4e11-a413-d27d2aabd01b",
          "status": "OK",
          "code": 200,
          "responseTime": 2695,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "46a935d7-d446-4c2c-b16b-712098c1045e",
        "cursor": {
          "ref": "c280b2d6-c161-494f-b372-e2097512ee91",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "357d19c6-1e6b-4b6b-820d-e01e76c65652"
        },
        "item": {
          "id": "46a935d7-d446-4c2c-b16b-712098c1045e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ab4385d4-ceb5-4153-aaca-a533c5b39bcf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "46a935d7-d446-4c2c-b16b-712098c1045e",
        "cursor": {
          "ref": "c280b2d6-c161-494f-b372-e2097512ee91",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "357d19c6-1e6b-4b6b-820d-e01e76c65652"
        },
        "item": {
          "id": "46a935d7-d446-4c2c-b16b-712098c1045e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ab4385d4-ceb5-4153-aaca-a533c5b39bcf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "46a935d7-d446-4c2c-b16b-712098c1045e",
        "cursor": {
          "ref": "c280b2d6-c161-494f-b372-e2097512ee91",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "357d19c6-1e6b-4b6b-820d-e01e76c65652"
        },
        "item": {
          "id": "46a935d7-d446-4c2c-b16b-712098c1045e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ab4385d4-ceb5-4153-aaca-a533c5b39bcf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "5ce33124-04f9-41c2-8179-36e243383059",
        "cursor": {
          "ref": "c63890dd-f58a-4144-a1e1-fb0e11f70633",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "fd342526-5fdd-4411-b4a5-d74bd64e7c22"
        },
        "item": {
          "id": "5ce33124-04f9-41c2-8179-36e243383059",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "3f205f0f-8946-47a1-93b1-f71b342685f4",
          "status": "OK",
          "code": 200,
          "responseTime": 423,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "c83563aa-db9d-4625-912b-206502a96a4d",
        "cursor": {
          "ref": "9fdd5c85-a7de-469f-a36c-f37b76671088",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "28422958-4c75-4bb0-b33e-19e1b1378105"
        },
        "item": {
          "id": "c83563aa-db9d-4625-912b-206502a96a4d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "de67a92a-2fb5-49cf-ad7b-04aa88090bad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "c83563aa-db9d-4625-912b-206502a96a4d",
        "cursor": {
          "ref": "9fdd5c85-a7de-469f-a36c-f37b76671088",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "28422958-4c75-4bb0-b33e-19e1b1378105"
        },
        "item": {
          "id": "c83563aa-db9d-4625-912b-206502a96a4d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "de67a92a-2fb5-49cf-ad7b-04aa88090bad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "63166ff6-61b0-4df5-b020-ee28c606fb63",
        "cursor": {
          "ref": "0bc9f30d-5403-470c-87f1-69bd60abbe30",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "45b7a832-f582-44e3-ad41-a4ec4821624f"
        },
        "item": {
          "id": "63166ff6-61b0-4df5-b020-ee28c606fb63",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "393d9b6a-d49d-4518-aae1-a2f6115eb8b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 491,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "341309e4-8900-46cf-9a53-9b62648edd61",
        "cursor": {
          "ref": "a230fbdc-1370-442f-819f-3e7c90498e9a",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "d73eadca-aaae-4414-a534-c534e31e72d2"
        },
        "item": {
          "id": "341309e4-8900-46cf-9a53-9b62648edd61",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "919cfa79-ec10-4784-8801-395a9a3f1a24",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "341309e4-8900-46cf-9a53-9b62648edd61",
        "cursor": {
          "ref": "a230fbdc-1370-442f-819f-3e7c90498e9a",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "d73eadca-aaae-4414-a534-c534e31e72d2"
        },
        "item": {
          "id": "341309e4-8900-46cf-9a53-9b62648edd61",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "919cfa79-ec10-4784-8801-395a9a3f1a24",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "6ed3d3bc-5a47-4adc-817b-0c3496fb3040",
        "cursor": {
          "ref": "b50a3d0e-8a94-4f8e-ac90-0524b644ee93",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "a3637191-baf6-46ff-a59d-ad6790ccab0f"
        },
        "item": {
          "id": "6ed3d3bc-5a47-4adc-817b-0c3496fb3040",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "f56fba08-0d6f-4f85-91da-6442ebae2cb1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 113,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}