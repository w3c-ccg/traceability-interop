{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "426c3002-3e97-468d-9b93-98b4405d8681",
        "name": "Clear Cache",
        "item": [
          {
            "id": "5ab9699d-4da6-4705-b89e-541fa46ff3f3",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9697695e-77b3-4630-8566-ab0107e6b6d5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2bb6663b-2182-44db-bc77-5fe9616d9be8"
                }
              }
            ]
          },
          {
            "id": "7be5f89e-e7ea-4e5c-98b7-da95f1377cf6",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c055dfa2-a721-43c1-ba14-e006f6e57601",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "12d98faf-d4e2-4d28-afc9-b4d095cd5236"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c96b4219-3521-4020-8885-0a821642e0af",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "cd7ff851-5572-4d2a-a22b-419130bb8ccd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ae8933b7-4c79-444a-9b7c-fb6da39ebe61",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c9b286c2-5794-4200-8434-ce4c40ef8dac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "62fee6a2-112c-435a-9834-ff8c3c261226"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "144148ad-15de-4135-973c-4a37c2542955",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "88a06410-7080-4f08-879b-7eaf04a6327c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fc65d737-dcd6-4cd1-8507-dfada9635233",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b73a7bbd-d281-4487-9d1d-dfc8e921c268"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9caa208a-99dd-415e-b123-3c75ee26fd96",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "1c9f89fd-7e87-4052-bf8f-99815178b37e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c5911958-6868-4af8-9a82-dad9ac5ef28f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "31f3e41b-8d9a-4097-b3e8-2a8246a86097"
            }
          }
        ]
      },
      {
        "id": "e694add0-5661-4b78-b14f-4c1f48e13ee6",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "8f7a8faa-b059-4770-8c81-4f74b90a0da0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2e478b38-5300-4d5a-a86b-3775b9fc543a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1a772644-e013-4f07-bc38-f47ff8e2c848",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecbcec93-fd42-4831-91a8-d1e7d93c54d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "017f619f-6dae-4e0a-a166-7efbea50b067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb930db0-1a6a-4499-8a92-35869fb52352",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95433dd6-6567-4a8e-a0c5-8e4fb5164ccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "afd3e1b5-a36e-4e86-8e06-223bb8098de7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d616d072-931b-495e-bf74-b7e94716b73e",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43117a9d-4d2f-498a-8384-69ba3d900695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0b904937-1e4c-4776-9fcf-7a1b76d0a422"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "087e7e2f-b0c8-4dfd-b7b3-e05dda4aef62",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2f1c181f-2de5-4a00-8df0-b3503850f332",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b62e88d8-d203-4a27-8ffd-21bba817ec4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9018d760-4063-40e9-90a3-b15adc0d9ebd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "732b22fe-40f5-4b95-ab72-54334caea6db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fd7f029-f177-4f9b-8bb5-b61202392008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b076d82-7751-4d4f-9cb1-eb260ecaa22b",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90e73ce1-0318-44c9-a92a-eebb32922fbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "395cf844-b0ff-48a8-9d9a-2bcf355528fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8596062-b7f5-49e1-a104-09f002a0a72f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "592a29fe-cb4e-4e4d-8297-2e1bddaa8e1c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "11087534-967c-422b-afd7-1ea72cfc9807",
            "name": "Positive Testing",
            "item": [
              {
                "id": "33533f17-4f28-4c35-a101-d8f0c09190f2",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "11f8f4c8-2ea0-4343-a048-bdfefcb8d333",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "c416519e-bc53-4fb4-8766-2f42aa7ec088"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b0216f04-40fe-47ce-8a97-9abca57ba6b5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "bd922d16-3097-4df1-b0e6-5f34db094564"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9687d40a-cb3a-4fad-ad82-f4541296a419",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "10df7f67-61ae-49ea-bb39-933477aae9d7"
            }
          }
        ]
      },
      {
        "id": "934edd58-20d6-43a6-8342-bedad7fe7d17",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "0ddda6c7-1699-460a-af5d-c49222a317c3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a6e30e44-17e4-4f76-8ad9-d904edb98bab",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "621f5213-77b0-474e-a151-4a46e3f678ac",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7bf27ce-0c75-4721-8cb9-ac369271ffe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f23408b-3a36-47f2-8298-f241ff2e03ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78816263-15fc-45d3-92c5-90e80ce753da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4787971a-454b-49fb-91fd-4fdade0f6044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e54a058-6b23-465f-8531-4c29bb90524b",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da3afe94-a530-4205-9a6d-33e13f254e4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb7622e7-f2ea-4987-9979-1ab86d7c7e85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02dba373-09a2-4905-bf1d-9c9c6698ddc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d7a95c1-fa41-4b76-9a45-78c9e611d7e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cc67f54-0930-4a63-ab4b-704854f7efbe",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "436d1e5b-541e-4f7c-8908-5d6e58643fba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "755e121b-28f5-4b27-bf65-3d56748f2847"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca7ea571-4228-419a-b11e-8f25cc6ffbbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a16a43ac-b6f4-46ad-878a-f182cfdd25fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdc8f3b3-ec90-4f04-a9ae-d2b3e13d3212",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd942f95-3bde-4183-9826-ca08a279756a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44e66ca7-495d-45f7-baf0-e050dc1f7ece"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a5ebe45-4b2d-486f-8495-3df448b51828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6f01ce7f-d95f-4c22-9ae0-44200fe835c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8af22ff2-b488-4a93-bc05-2fec4ccfbbd0",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92bc2d13-d883-47a0-ad44-7dae6529fcae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17557733-679f-44bf-927a-dae3d134b6d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9667e90-bab7-436f-a551-b026b3549878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da495948-1990-4056-9e7c-3bebe6b7141b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d00d369-2df9-4589-b483-e51044e93a84",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c94fb9f-4357-4774-9db4-0e9a0bd4f4ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2901086b-d2ae-4fc7-8b80-891450a92a98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3661313-abad-4174-87ba-f79aed7d2b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "78497567-b6d3-4ad7-9c87-84a71a681059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a449d0e-4323-40b3-b61b-fc009e7671a8",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7309ac0-6d30-4d86-a5fc-da2cc2268628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "519f1868-fd30-4b2a-8449-3696486aef34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85a654a3-6435-4c33-98b3-a0df72279189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "387c03ed-0585-4bbc-81c0-60dd6c84f020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c14f1935-bfd3-4c28-8e4d-9dbd11aa60bf",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8afcfaad-3565-4c2c-815f-1b1c372bac52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9e70f95-83f3-4f62-a7c1-95a7272288a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ac20465-56d9-482b-b1be-c99bdb8929ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8eb5202f-4223-4976-a65d-88772a09f53a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "090aae45-3681-4656-aa46-d5fdf4bbe763",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e5c22e6-9d76-4086-b103-52a55811364b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5522f5ac-a2de-4645-bbc1-9530600ede9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de3941e0-c810-4361-b7e9-c9923d4a698c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "991b1565-dc8e-4bbc-aec3-b5377269e824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3a974a0-730d-458a-8df6-adac4f76b3a0",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12aca7fe-7675-443f-af4a-af2ada73b3d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3703339c-7849-4937-9e3d-e0009037696e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82dda6cc-14c1-4fbe-8f04-0d8cd3d74a5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4a6a2073-f58d-449a-8aff-baef0d872a6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21a2133c-a15d-44f5-910d-dc245136b57d",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "049e26c9-5686-4f44-bc77-bd41ecdb356b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b5d1aff-8d84-4282-be11-9348dd38ee65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ee2db60-84e2-4069-8feb-ba28279accca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "699c0eaf-2bb0-42ac-a6ed-1200bb4c836c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7036cf17-a2fa-4231-9744-3607eacf18c1",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c826f597-ac08-4e02-90da-2f5569b9aa6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98521229-abe0-4dfc-9d0d-c71f3f121410"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7fa357a-fa3f-4e3c-bb8a-27ed86ffed3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "34d1a0ab-1741-4aaa-a212-37e22f3057f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e537f39b-e511-4e6c-9ae1-b09f2d24be3f",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac6f2498-759e-4fa9-a0ad-cba118335e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29c67b14-c2f5-47d2-bf5a-b0eb401c66c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98181db7-4b07-431e-89bd-4ba799663371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c14e563-ad2e-446c-ac41-6dcab4224241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71152a24-9eb4-4afe-9a37-653f2979215e",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e35dcce-7dc2-4518-b3ab-0e70e8c445c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ca5144a-1403-480e-b66f-9bb53e6bf400"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df5ad1cb-4c79-4256-b03d-54208c54092e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b4b1994d-25ef-403b-befc-bb18e236ab0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "debe1a3c-28a4-41b0-904b-8012910598ac",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e8d5e90-ca28-46bd-a4ce-216f6ec3c6a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16e6c55c-126b-457b-b607-8f931ddb0da3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67c6fb3f-0ae6-46a7-9089-d3a703f369ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "000f81d2-891c-4e31-862a-0bd77e1751e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6b788f2-e0c2-481c-94a9-71e7b90bf321",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fed9acde-f01a-4738-84ce-653308d89c89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f6f2942-b86a-4192-9b43-e9f32ac09480"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2cd18b6-3895-4526-aee6-7e1162e2021b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "58d75211-9a10-476a-99f4-1760ecc60d1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "958d10d9-1e8f-4699-8832-ce626a874eb4",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9371c772-e5c9-46a6-bccd-7abdafe6b716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "801fa661-3466-48eb-9c82-61eff69928f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e60166dc-ecd6-44a3-a7b4-75eddff43c51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be8d0d2e-0015-4754-8139-5a2fa45f9a51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dc7e62d-db19-4140-9fcf-fe422bf708df",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7f1e517-70ef-4b0c-b18c-72010c9c8902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4aaa9fa-ccae-4c57-9856-f3b8d534e2fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61996ad4-c2d5-46a4-a984-a43f19c054c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ab088f3-8e58-4d3f-ae73-6cf3b0845ed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b159436-7173-41d4-bb85-7792af4e7587",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb0c358f-32c1-428c-986f-ccc5c693f7dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "169af12a-7826-433f-b114-3b7e744feddf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebdd0907-f1ca-4b37-b452-e06996e1ed49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b96673a0-af0e-4215-94ac-45f45613cd06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52deff48-46f3-49de-8203-191ce5519f72",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec32850b-d1cd-4134-8072-316fe13a30a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcff9849-f261-4710-b297-1913abc253ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ac0b739-a96e-4aa7-b463-03e254facc5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c1101ff-c165-4fe9-b6ee-93d8909ef017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76d2c272-451c-40bb-8c17-cd867f27c860",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d62c4cec-379f-4c02-a692-863a732ce4c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4efd7d0e-6b50-4baa-8a18-fe086ddcf6c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20a67a21-72fe-47fb-ac48-fa5d7d4e14af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca18d7ea-f119-4bf0-adaa-a64ab696d032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c499e072-40ff-4788-b317-c007a804d73d",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a52caadd-5a2b-4c18-8a4f-cdcfba0be2b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c95f2137-8c9e-4f2e-89c7-b449ac323d5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a562add-c627-4431-97df-8adfdcd68a71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5e8a9b4-ffc8-4954-8b1d-c7f28972154f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "485037e8-1107-4aca-8ec5-8839360ca186",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34a21cc4-6364-4b32-9c20-cf8fa76cdc3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04cdd9db-cebf-45d7-9bdf-1a80208b1d14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a9698bc-3192-46c9-aace-3c81bc9ed1f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3d9ad0ce-6700-4113-80e1-b5085d838de6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13c16ec1-6559-48b8-ae5f-f9bdcb31ad5d",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5719546c-db29-49ff-abb4-bff73ad090dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5247f624-7754-476c-9335-e9909ba9c2dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16f7acb7-d806-4ab7-99fd-584ffcec0c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "75f0a0fd-924b-4759-abc7-cc38ef0ee719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "673f76e0-ed38-4a6b-9fd2-9878d18be943",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e691b15c-c311-4c39-9e40-0bde311e6516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e72b8643-453f-4117-aa4b-4817c8f22f2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efb5d316-8295-4586-8b2f-3173541a35d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6cf3618a-9462-4f05-914d-e7da2eced112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dc62f95-12d6-49f3-82a8-a7272782d0f5",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07afd763-83ce-444c-98c9-e5239a276c76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfc77689-270c-4c8b-bfe0-5b609687a43b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "063a3856-9dc0-4940-b43c-0bc056c99350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa025174-c0fc-431e-a3b5-a66644276a6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bca48dba-0efe-486e-993a-e4bace58f3a4",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8875abc6-b1c4-4a43-8474-66d2516da00f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ccd6120-8c49-418f-9c56-1ec0312763c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4679eb8d-2dd0-4b22-a8da-fce47e251945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8474c31-8a5e-424c-b16b-b18af3e9603f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a27c972a-97c9-44ea-9393-f993dd4e3783",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "865fae2e-0edb-4a80-8642-873356cdb8a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78bed14e-e562-4d15-99f6-f56d65ad0b9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8091dcdc-5a62-4ac4-8b3c-ee1673f2e8f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd17aebc-3454-4c7d-9278-516ee1da519d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b9d2d30-c122-4861-a325-353900a2ef55",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffe05652-4741-4506-b3fb-b1a4f7839dac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73066136-2fb9-4b62-b37c-7acbbf236d9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b18730dc-17b3-4511-ab7a-b6c74331662f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6650da94-5f14-470d-83a5-2a78f25aac55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec0a6779-e8e4-4af0-9904-c286a0b4cc20",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5cdf590-751a-431b-a262-09252a539513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ec31e25-b13d-4382-869b-413599343d58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f0a59e6-cdbc-47bb-a354-d9b4b5c277b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "38bcfdc5-64d8-456d-be5d-6bed8171ebe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77394f2c-cdc3-43ff-a9ce-da4967208a00",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8b2da85-2b4e-4b39-9a4f-79b36e79d689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f19de4af-1e48-44f7-a6b1-2aef009fee57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45d5bab3-760a-454d-b579-1f7819f68f18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0930d880-8435-4c83-9511-75df463ba990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf2e21e9-6a7f-447d-a20c-54da7b0530d3",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3c5aee7-863e-4bab-8dfb-8197268ff361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2d53a36-8c6b-45bc-8f5e-232f66caa19e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2caec5e-f1ed-4e69-9ae9-62b644c04afc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec3edb33-99b1-4c86-9413-2e37d221d8b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "795fa5cd-a0e1-4e24-94b0-7fb49fda81ed",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85885451-547d-4025-be2f-09062acbc265",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34f6c008-eb1d-498b-b17c-eabda4b9680b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8510dce-8849-4e48-b31b-7af31ef560f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a86d5c1-5407-405f-9f2a-48faf354e327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d384db10-0917-4950-b1b6-80a4e3f5003d",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d084540-c946-4268-8276-28c425a1a127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8a8b409-bf1b-4ddd-b37e-0e8d88cabd3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "368cf685-ed5c-4032-922d-780b2c9ad972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd3b2e4d-c046-4e81-a735-1da62c59cd62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dc08443-a63d-4b89-a612-cf1d69cb6fc1",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "856520ec-4532-4724-a8bb-dcb219d2a609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97fe9247-bb8a-4939-a6e5-43479424fc17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "312ad62b-b8b0-4388-95a9-ae6c0bbb9a26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "3e47af7e-0fe3-4c8b-9aba-a96a15a9b70e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80669a78-df79-4cc7-ad38-6e48c311b6ae",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec1eaf87-58fe-4502-b86f-3bd8d5999e50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8e704992-f444-4325-bd26-1c0656e4471b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec554dcb-d4ae-433b-af43-211ddc07bce0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e5d16db5-42fd-4025-b3ce-a60920543f65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7129b82b-4e5d-4f95-a225-33c389421837",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d95c4637-a26e-4401-9b35-5f62f52f85d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b49643c-85bf-4ec0-8290-6156f4fd4831"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4cf8b2a-ccf6-4e8f-9a53-a775f9d9b25a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3d0850f5-f369-47b7-ad72-0eb5d9cab239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14e2ac28-8bd6-4251-93df-a30de8ca8636",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60de79c2-66db-4849-b436-daefe38a1274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "696afc42-c746-46e7-ad5f-9e89b906599c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be4dca74-7ffd-4f1f-b209-dd2935a188e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c7e6dedf-686d-4530-bd3e-a28fc288f282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "071c93d0-0dc3-4160-9b38-5de64cfa1ce4",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a00f26d-aed7-4891-88d6-05f19d1f7c61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b60b8f20-1ec3-4157-8d61-2ced2d2b672a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b5736fe-5451-4cfd-bbe9-75ce41a0b8da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1145464b-7773-47e7-9e0f-57e2fc5b7d23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02251b4a-45f1-46e6-b162-40ad38a0871e",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caa8ddef-2be5-4b95-afcd-5f1bf1f30e1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33190969-f0d6-4bea-a9c8-acdc1981c361"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "704fc06b-64da-4237-adb4-b5e98d32a08f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f0316b9-9a4e-4b84-a3bb-a63334c26489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08d46f6b-8b37-4a79-b4e0-cb876849d66a",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f5d4716-b341-4857-b585-76fd64981af3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28848375-428f-4178-a324-225c7b56c97f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "144ea892-9b7c-4c20-b3c6-7f51ef681faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a3dfd0a1-f5f3-4ae0-b62d-7c0dd92d01cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7acde6d-d01a-4e31-84dd-eafadadee152",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6104e4e0-af22-472c-b0d9-693e6a71a8e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c915b12-b731-4c72-b285-582dff9d1b35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ebd96ab-f760-440d-9b2d-661b7eef66b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "3eaafce5-95d2-4db9-8a29-a8a45f45bff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a93e05e5-f0a6-47ce-8b8d-b9c7be01c164",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc74e97f-4b92-4c5e-9dbf-1149a8c36644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "199af42a-5e4d-4f55-9c77-f5e5ff9b41ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31d68c60-c30b-426e-be43-108f27800731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a26b023-f22c-4431-aef5-509c77816eaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8a63487-4d7f-4adb-aafa-9eda61e5025b",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "976186a3-fedc-4727-b32c-a04245e75a63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3a18021-2d20-4d21-94f0-f508668eb9e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53687330-d8f5-4862-8bc9-4bbf7f2dc275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c3ad325-ec54-43a4-bcc3-5be53d13f31f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e71aa0f-2c56-415c-ae07-831f0c67cdbe",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9245a04a-37d4-4f33-9022-15f9c84d376c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "333571d3-b056-4213-8ca6-3be91b4654da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6031087e-23da-4c83-9d10-dcd680bee569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "06cb5f7c-f2dc-487f-b697-39722e088dbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59201a72-60a8-45c5-b77f-f67407c249ca",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a170d029-bae8-4535-a5a4-5fa0a83be47d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b754bd8-a77f-47e8-a4ca-06a470b1262e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78b112b0-d523-4a3a-a953-2c8df7b74171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ef556ca-509f-4826-b042-72fd13e241f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "110a1b22-aa85-4fb8-a483-7d100fbfda25",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73db4fe8-e6b9-4ab3-980d-5efd0c7021a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5c2abdd-79a5-405d-b91b-3b265bbc2a3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c534f33-cdb9-4bc1-85c0-c451eb1e22b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "feb74c69-8b1e-437d-843f-29cd893a0ac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f24ebec-87fa-4ee9-975f-8bc8ad024c3c",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57000c2e-4244-4d54-9059-7210986d449b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c98e6ae-1595-4496-abf3-6600d3f18256"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8a616ea-33f5-42ed-8962-7a018dc270c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "82aa8279-4d4e-40a3-82df-bb626a892551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8c4191b-16ec-463b-987b-6ca92388bbd8",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2fd3dc1-817d-4387-9b85-c75516b729dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f539cc86-1b63-4e11-86f2-6a953fc94247"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c2e8187-2fd5-434d-99f0-82450367cb50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "70487c49-b76c-43d1-b020-e57e89a31142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0148ced-81e7-467e-a442-a07727a81bd6",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50cae591-16c9-486d-baaf-e922cf43ff06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f4719a0-2a67-431e-82ed-8cf6996c0351"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da2b6ad8-a53e-4b63-9255-49ef8ee725aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6a7b7570-9545-4b8c-a80d-7f01a932596f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "050edbba-fd48-407d-a628-049a142e0403",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61c2ec79-21b7-4daf-8453-a9887de3cb87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ac5010e-2e4a-44d0-afed-342084e4b0be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80a6d341-5c39-455a-a8e1-a87fd4631ec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "47b3f0f0-0f2c-4ac8-b66c-bd37982a9e1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6ee7d38-0165-4e59-a552-b9a8085993c8",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1dab630-b94f-4256-b30f-5b6960106fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1903cdc2-e1d3-4869-b5af-bfdbabf0df93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7acefdc-1475-4121-99fd-7fc6626d22b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e83b4ef3-5f90-4c93-ae93-04975596d20b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3972cb88-070f-4249-a24a-3f9e3e725a1f",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8583c92f-de7d-4774-bf33-08387c679b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02a566e9-7def-4aba-9089-1b61c89c88f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc8be6d4-12d7-45b6-858a-52af7c4bffa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "477f2196-6ed4-47b9-b3cc-3407f03263de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f412cf65-5527-44ad-8ef7-be31977e396b",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f876688a-95bb-4411-ba13-418616bc1bb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02e37657-92fc-4236-aa0c-d628b2ad195a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea771b59-a2b0-41aa-b8ac-3e816131f955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f768099f-a00e-4c03-862b-0280c625374c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "855433fd-e247-4e63-8f36-70390ab7d0ef",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9164e890-42ae-467c-acc4-80045b404f20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed461f0b-8916-4743-a91f-65f718f397bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e58dbcec-e97f-4aca-9662-9b4d206248b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5902e331-fe05-4108-9ef1-abb0a178e28b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f6c9940-adfc-478f-8d92-d2d38093ff27",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a142a9f-696f-4c24-a93a-29a7ca5cd227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a0349b9-5b0f-4ee2-9b90-655bb4efbaca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6be4f97b-0ea9-4a64-8a60-32aab666e63d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "336df3d7-1885-4859-9d09-e48018dbe1f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4382ebb5-14a0-4c6c-b659-6f78f82e5b65",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43328776-092f-4a3b-9c3c-3707d0bc73de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e5e471f-9a5f-48cf-b78d-d27aba29d225"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5362bf46-40ce-4a94-a393-96143c1ba6b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "08605e43-affb-4623-9e66-2ff077cf4a9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d85a802-45f3-448a-a4f1-a9e75c760232",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d321ee0-ec8f-4734-8432-3c0cfe0b7ecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca30962d-3215-4af7-beb1-9ac5486ea9aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f79306dd-3796-4da7-8086-a84fc706465c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae00aaed-b665-4890-b55c-bb88a0c47d40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad2a5102-9eb9-4ba6-8523-9ba0a3edd3a9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9699881d-5126-4431-b0fc-28669fc8bcb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1cdc1c1-31f5-4ba1-9a13-920ad571d263"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19773dff-2850-4d1d-a8e7-5bf9a83e6bb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4d917d73-5428-486f-bb1a-1d90890562e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc6a6c89-b82c-41df-bf45-ba3695c7ad93",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46bec0c7-ae76-4f53-be85-094751193751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d1af4c5-92a7-435a-81cf-698a63d741fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ad2be49-31fd-4c0f-b51d-e90ccaffcc54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d86fd13a-27a0-4a13-9954-c36dc0a0afa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eacb568d-8da2-4d30-8ffd-9ff22559a194",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee92abfc-3094-4c6d-8259-c5cacdda76fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67d5b6e1-3787-4694-a9e7-81791b73fced"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e2da93a-83a7-45b7-8e80-dc7a072acd34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "200f4801-a963-4c37-848b-898404930f18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d231e16e-6bea-4410-a4e9-417a6a88f153",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c91f180a-f019-43d3-ad6c-16551a492c83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c649f1a-602a-45ef-ac5d-f609aa236d95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50e7efb6-23e6-4429-a149-c3aad1b3b5eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "0969eaf4-7d5f-4c3f-ab75-5521237ec29e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba4032e2-54d7-47d6-be21-b91643a339cf",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab0ee122-4973-4373-abdb-473eb05648d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a31ab106-72f7-4e3b-a183-b061ff7d84f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "426cc337-1ad7-400b-b6c3-c9be5eacd5a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "564c004d-c000-4a36-bdb0-36f52d73675a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78f05d09-47fd-43f2-a597-db751e6e8c5d",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbe559be-d0e7-4bc3-958b-63e327ce159b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9781fb4-3443-4854-965a-923423ae3432"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aac8da44-c5a9-4931-8777-101e4b19d5c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e50ae499-2878-4a95-88b9-1f8e27921b2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eccdb20-b90f-4184-9253-99fa01f13bfc",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eeeb3e0-63a3-48de-9317-aa14f8abcf45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "287fe25b-3c0d-40e9-9876-3c0154174e79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a74bdaeb-0a75-4e2a-9861-351fded0247c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "213b934c-f969-4a15-b3e5-e3864201013f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77c18eb3-a4bb-482b-8874-4221f48fbed3",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c029598-6da4-48e6-ab79-ead86af7e802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f59386f-aae9-4573-8461-d890b8517d7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48570e33-1b94-42d6-aff9-6dd3a5ddc36b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f148966-8b66-4a46-8c0d-aec75fdcbe68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "276b621f-a512-47f2-a62b-9279fdced1a1",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d2b6e07-cb1e-4d7c-b662-e50f9bf7ac8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e707bc8e-4a8d-46c4-bb56-97c9f1cdf4c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2648dcc-bd15-4973-80d6-46e1e286a598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e4554620-8e92-4ca2-8891-a830b898d600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e8c9e09-d8e0-4655-bbaf-5cb1903549a9",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9caa5b9-040c-4cd2-87b3-fd354aa973a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c6186d1-9aac-45c1-9724-c10c70757cde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3e7686c-4a9c-49ed-99fd-b899b325ed38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c712569-1fda-414a-ab30-87d5d5090b45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff64cf04-c879-4037-91f2-9c2edf84d948",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b662d75-931a-49b0-9395-2f15c5693282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b3b2864-378e-4e37-9a23-1c4f0bacfc30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "739cb7d6-071b-40a7-a086-4452bfca909f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4a20fed-6033-42c5-9c0c-a071295a721e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be637111-86aa-45d0-832a-b021d420041e",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ddc2940-c455-48b7-8ee5-201ae9f4bdec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db0f78c7-49da-45ab-862d-30b3d463733e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e2016e2-ed59-4d7a-a8b7-53e235209430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "35ead284-1788-4689-b89b-826c30a004cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6e0a63f-d51d-4c47-bc5e-0959d16e56e1",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05f113c2-54ba-49c8-addc-a5720291afa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51944703-7632-43cc-a412-f3306679e3e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db15c11d-1bf7-4422-9f81-b20da9912530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "32e9e2f0-21fd-4d0f-a3eb-7ef7a9bf2655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "845461b0-ee42-481c-bb65-67c0aa5ceaff",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecd395e8-9c04-44ba-9f1c-26f606292bb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9d906a7-b498-475f-87da-8d000b96b9c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64018eaf-ea37-45d5-b923-a32724a5f85a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a71764b5-5d07-4c9a-a40b-58e2e59daaa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1848f9d-822d-4ae9-8c33-7be5d0873556",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9941077-a349-4778-b235-3b159e1da34f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3647fcc6-1eaf-48fd-a44c-f3d047e95b73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c9e536a-e778-4fd7-8e4a-3b687b4f8876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0bb9075c-2cc2-4197-9b05-cbcfc785d900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7934fafe-e65e-4e7c-815f-1ad7e085cdef",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b0f4c35-1dc3-4530-80d3-a30ee1094a3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53bbecd8-5046-4b9f-82e4-59e0ea0726c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78bd3baa-acac-493d-9757-7db5682b5a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "26a17b47-87be-4bc4-bf42-f6477a4faf01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f62f1d1-081f-4275-9e99-c69563e9878a",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b3b3af0-c4b6-4693-89c5-79ce40eb5e6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "197e8316-4205-4677-a15c-d656c40e01d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a143f054-c1f5-424a-9bda-6d8d79c76806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6e4b8b6-2a57-4d3b-bf18-cf770e1469f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c0d4bf6-ca78-4658-9511-0cc18769ed86",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06c57d0f-2fe2-4120-b999-e44d5b54cb0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8cf8006-cd29-4bad-b411-a79e0559079d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24a0985d-71f5-4ebd-9109-d4616460e29b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2eff9e07-06df-4b69-8ec5-307fb8e11590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ec481de-1ae0-4f00-ae3d-576ad8cce8b3",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e4b347f-ba70-41bd-b1c4-86f7475031e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2afcfd8-b166-41dc-a5c5-38986e7f0b4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0169f3f-b183-4322-9ed0-59cb9184f12c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "07d46037-105f-4bdf-9455-025210bc0ed6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adb03571-4d44-42d0-adac-b0a9e484493c",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27e3314f-1bd8-481e-9c6c-2f8ddb6d35b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18275dd8-668f-4c4d-bb93-6b2b4242abdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1cbe15c-98de-42c0-b675-29001646a961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "312ec71e-bddf-401d-a684-b3e8c8666bd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e142d90-8b2e-4ce3-883b-94e138b552a3",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4442905-1a0d-4094-a843-717f85b0644b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58000572-1284-46bc-9177-f6c1a037bb05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc97bc54-96cb-4608-a89e-5ee5d3c63750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a4813354-d855-4ed4-be16-55c58d0aca9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49d4af40-9e68-463a-b627-8b53262ad466",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7de26dde-a830-492c-b8e4-6d55e9739210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0845c042-b529-429c-b18a-1eb6005cbebc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a0c595c-4627-419b-89c0-971dea1421a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "843b2488-2ce9-4cc8-a36d-f373202f4770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de76dd37-47a8-4ce9-9983-06cf2ce5aaac",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2585a1b-23e6-440f-b3db-9b102415185a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cab2c28e-8c09-41b6-aa2b-124549e4532a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2874ebe2-7b6b-4719-b249-11fa2544bbb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e546c2d2-14d3-402a-afc4-ef4be8586712"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17d3c3c3-4faf-491e-8940-fe2b56c1df2d",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "823ad1ce-bc94-4cce-a4f1-5cd44086c1ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2202ed1b-1bc7-4b4c-ae84-58bef4f8aa0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3f4f49c-e0f1-4051-9e68-7de6b353e811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "24e9f1f0-f724-4688-8984-80aa38474b7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d0b1e64-d022-4118-9053-c488493d42e8",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "675ee365-d9e6-49f9-b8a0-4cdef670290c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e5cccb6-f372-4783-98c9-5ccf6a171e81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77732a93-c15c-4179-a8e9-5c1535f2f83c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a0d6df6-2f76-47e2-9774-92f1f79d7c7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6744b61-f009-4bd8-8b79-4337f5d1b9e7",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f1a77e4-7cca-4e78-bbf9-fa1e7e82669d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3b3acff-bb6e-4381-8513-8b08256e6ec2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcd31448-a70c-4ea5-a282-0ccf68c35218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c86c713-1a56-4d39-9672-1048d10227e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14d0fc83-780f-4cc8-9b23-266db3094138",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6f7f93a-6f09-45a5-b582-bc6d35700990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dbd6efe-8f08-4d56-bd57-06def42d5371"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a062293d-e1fa-4480-8b8e-e21142e09d06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "470ef48b-bb99-4a36-9a2f-889deed73217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b02d9442-3bbf-46b5-a8bb-a5446eeff2c2",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d3f9c82-f5ef-4cb1-87ff-12eb97f9c7a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb8ea50b-582b-4fc8-804f-41679d3027ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a9be52e-56aa-4da4-8a71-cfed4e4e17e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "445f2439-9d23-466a-a146-61f0bb48e97c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7523b8df-ad09-45bf-8719-29ad700d9615",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f358e61f-a7aa-4d4e-ab33-715f4620d848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e81d280-c8b7-48a6-8cfc-7641148b83c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6177f79b-0ffe-4c38-86cf-825fc05f9e3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5ddcc551-838d-4d3f-928c-7d079a88c5b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42423076-c56d-4486-aa47-d86df4ab4fe8",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3b313d1-c610-4e3d-897e-a717fbe8239e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3563de8f-0f3c-4faf-80a2-ecbecfc18d14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ad5b72d-3b03-4b9b-8f3f-64d437669cb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2c7cb33-19ea-4365-8165-e7779e38fd0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd95ceb6-93c1-45c9-9d8b-808aa1f21198",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d46b45e-9859-416e-abf5-25a7e5b829a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "395c331c-15e9-4c01-b592-7828ecb30a56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e842ecfc-bac0-4d30-bb1c-78444f025c47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f2914ed5-30a8-4aeb-94f2-9b4800ae92b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9936bb1e-389b-44bc-9dbc-b78267f6f70c",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "149ae483-3d99-4f4f-a2e5-5baa164c09dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19b6cd24-632e-4308-9376-47beec861772"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b345251-ecac-450b-94c4-5f09f802bd21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a6b3c12-24cb-4d6d-a856-d7d296d1bcc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef102988-6f49-452d-b1cd-4701257fb9e6",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5d4c013-0545-4cc9-b2fe-5ee2c9db29c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b5ab32a-1023-4b54-a96a-625445c3ac79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59d5d9a2-0947-4613-ade5-a2148fe43146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "55a73e31-02f1-4dd4-ad41-c49335d2394e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a37aa78d-d2a0-40ff-917a-93cadd0f3a30",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfc6479f-72f2-415b-b7f2-223db1dd2e1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "02ec0c64-d3d2-407b-b7c7-37d1a5b4ff6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4beca96-e00f-46df-bf4f-903a4695b307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b2dfe4e-03fd-4be7-ac4b-750ee57bb75f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c5be7502-ad41-4797-962f-90db6e55e082",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4d936f17-7f16-4158-a02c-b9c0faf41e5c",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "502e5900-56f2-4a30-9e5b-5f68fe9937b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a9305b87-9fe6-4592-8dd3-a84b4f00108f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "411562e1-1e8d-4426-b71f-45b4c9bc832a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "89640777-2462-4803-afe3-d5e7388b5bba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25fe04c8-b717-410f-9f9e-06ebd459faa0",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84c400b2-cb43-4c1a-a331-d2a5720e77f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b98bac64-f34b-4428-a5fe-acafb42d5c33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58b6be5c-b81c-4b1b-8536-72194bc4d3e8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "d378cf1c-70b8-4407-a6ba-8f44292081d4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "249fdab2-3736-4874-b9ba-2b8d11d7e29b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "edb951ba-1c66-4c07-bbbf-73d8f5677470"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2865706a-7617-4e00-852f-ee001bbb4710",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "42f2d5fb-5461-4407-9676-920da83ff658"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7ce422bb-61ca-4a94-bbbe-df5a5337fa73",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a1854903-f39b-47b9-a800-eb70b55fa9c4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e22d76e0-1fbc-4afe-a094-d1873c880cbe",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0e3e6748-cd19-4e8d-a6c0-2121acbfa347"
                }
              }
            ]
          },
          {
            "id": "d7df865c-2677-4af9-a0f7-a3bb63f11a95",
            "name": "Positive Testing",
            "item": [
              {
                "id": "59958a79-c04d-4868-ae67-8e9aab06499e",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2543aa42-1a3b-4ff9-9fc4-f1bfe42f3135",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bb349ab1-00b0-4ce2-baa5-9a692adb1a66"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "19aec9d2-3f00-4a33-b859-8a81150bab0d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b94be8ba-6f51-4634-a02d-ce232c0d8aba"
                    }
                  }
                ]
              },
              {
                "id": "4841f56d-f83f-47a8-9474-07895a1c6689",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a0eafe5-7045-44b4-ad48-b79f8c42a978",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "36a5a697-7d5f-44d8-a490-3baa02011cf6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9d1e1911-1864-4c88-84b9-8d2db53084cb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c3fa1d23-209f-4e3c-a912-baf6d893902f"
                    }
                  }
                ]
              },
              {
                "id": "eca8df48-24c5-43c8-8976-0002dbac5358",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a811701b-ea42-46ef-aaa4-e791b70c4e1c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "358b5c47-bfad-4a87-b079-03c8b0addb8f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7e86aefb-4cca-4c82-a9ce-3b2597282bce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "c3c8c348-16a4-48a2-9315-8c2119f527d2"
                    }
                  }
                ]
              },
              {
                "id": "ccafe0c7-7958-40ac-a549-bedde613264b",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc56e42b-d39e-46f2-8a72-3e7f38fac742",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "69fe37e4-593f-423a-b259-875df973f4f3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "af743051-30ed-4faa-9e33-fcb92ba6903f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "96d4a494-fca2-4321-aa4b-b2b6f836e739"
                    }
                  }
                ]
              },
              {
                "id": "cd053af8-036a-46dc-9792-76864e1d8b2b",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8bf7036-5faf-45b4-ad53-d04992199101",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "23bb8066-7927-463d-bfd5-718b159733ed"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "036ef261-496d-4d0f-8189-f3028188f4c2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fb7c1fac-783f-49b7-b288-a55846b0197c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bab3bb04-07d0-457f-bd85-0c7d1e802172",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a0be5a98-d8f3-42f7-ae4d-3b07ffb960e6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a31575c7-ec9f-4be4-a62e-2093a72ad561",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c07ac5c6-1de8-4bd3-b0a3-42bbe1b47958"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e84f1506-52bc-44a3-a06a-5663f99c29e7",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "1528170d-11f4-42c7-9d71-b1c0a9319899"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5125a76f-7b40-49de-840f-b15addfe7968",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2be33026-cc9e-49ad-a6dd-328f4dd5b201"
            }
          }
        ]
      },
      {
        "id": "6e0233e5-6129-4368-8f03-4726a99264f2",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "6e322dd3-4fa4-4662-82b4-32e9410864f4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e1ae12d7-bed3-486e-8ab7-d8b879da32b7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b104a296-fe77-497c-8896-bbb0b3131a7f",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "404d2362-1d0a-4473-8758-c4ef623ca136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24abd602-1ff6-4f65-ade5-12fbee1e73d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f18e7a5d-74fa-4b81-9445-aff6ed4eecce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8e3316f-4ac7-41da-a7b4-170227f07406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd1e959a-12ad-4b91-b408-2029bb81df2d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dd1155d-82b8-48b5-892d-9258e724157f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc242c90-6118-412c-93c8-143bd1a8ba74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a76e90ef-022f-4da5-bb0c-138742c51004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4be59e32-e258-43a4-b652-9ef3b42ccb4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b992c07-1a3c-4053-9d8c-27ad75c60b5c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0d47847-4e79-4ac4-8789-17ab67047bf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "549d4f92-412d-4086-a1a1-20d24295b31d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eada873-c59e-479b-909a-c8e90cbd5731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e80ec579-2dec-467c-9d5b-c3f19150d5c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69c8c190-71bb-44bc-b36f-2ecf00da7ea4",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "550f83e0-7d26-43c6-915f-e74613080e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bdfda7d-efdb-41da-8f5b-300774214e35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79b044c7-95a4-4ead-a7d8-75bd19a84de4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8790f306-37a3-4795-9076-9c9cc894e288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aa4348e-09c0-45f7-a7db-6296e8893a32",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dc81b33-1bb5-40b4-b430-75b643b13c24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e515ed0-3173-4d3c-b572-2d0e756a9414"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07db4fad-8d5c-4cd8-8aa4-6e3a05939a8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd3da297-8b06-4b2f-a765-9266d2bc38c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0949468f-3d41-4d19-b2c9-cea1ea1b11c4",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "013c67e5-0105-438e-86e7-69019d44e43a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9d78e96-ff53-478c-bdcd-48af00839f74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b4029ab-b10c-4c5b-a4f6-e7af17bc2dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "55213c5c-7677-4370-be77-028b204392df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "107ad4a8-174b-478d-aa55-5b623215a049",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baf76654-e1f1-4378-a31b-f9fa9b26a8c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4df0209b-ddf9-4c1f-aaab-e20fd696f62a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44f921f0-bfb8-43a5-bc19-93a9ed3b2c89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "243fc576-a0de-4c8f-b1cd-1a574b037422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ec50fee-a7b4-4933-b26d-7929cb504f2c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff1c4a62-38e8-4373-9e1e-43378f7b8217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95c0fcf4-a91f-4e78-8bd5-3d006a139dfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "604147af-ff61-4ace-a82e-549a8f4eecab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "17a36bdf-6762-4786-969e-2e4571f906db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18d09881-1c82-494d-a3ff-5f9eb2f8575f",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a498ffe7-136c-4845-b2bd-1b48e1fddfe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7a52b52-2a26-4604-8da8-c83157ca5495"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2310a38-df03-4391-89b2-e206dbaa3b15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "10ad0ae2-e83d-4753-b5da-a547d1fc6b0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c38e9492-83f8-498f-ad0f-78deac5cb92f",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad0b5355-f008-4bd4-8892-4b3db3816c78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbea15e8-6fbd-4928-b6e7-c50dc8d7fbeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6318a6cc-7dee-4294-abce-abf8820f5155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8e10dda-3d0e-4948-8b12-30bb40a9c8a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7768386a-77c0-4149-a7f8-88884b8c3163",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c227c19-933a-4882-80ce-20721ffbae92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6551a99-b977-432a-bdb7-8710667ee927"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf63f929-a09b-4ec2-9259-18fee541451c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "445613d4-20f0-4012-b036-cad1cd9a64bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5497907-0718-43dd-b27e-0fd2062d3bc9",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2ae60ef-778e-445b-abea-4569199229c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5759188-85a5-4b21-9b05-75c8839c0606"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "748b7875-2f01-4980-8f44-7ea0239ce15a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ef7bc2f6-6b78-4e65-96d0-babe32ef2496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdbd2af8-b163-4283-ab66-aac1d6c3c7e1",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c5c7731-24d7-4b07-904a-7627f1d17efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5637a4fb-1ea5-4f83-88e1-827263139aee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d813b452-831e-4c96-be10-4c4ff2b4d76e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "aba320dc-46af-4166-ae91-bbeb3e99b0e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84ccaff0-ae8a-4f7e-8b0b-9bd79ca13407",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30546cd2-8504-4367-81b2-212dad72e25c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d832dbb1-580b-4714-b9fe-542acbf4fd61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe0546e4-be39-4feb-b0e6-fc2b72e5dd06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc338291-5054-4cd5-a479-c9ab98d50139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "855581da-06f6-4ded-90ee-aa78b5fb4f93",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dafe599-900b-42ef-93a7-6dfb98546169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c396ccc6-0559-4af7-9440-bdcf10c17f2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22af4d7b-6721-4a9c-9e5d-5bdc0b7f3b5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "1392359d-109a-4b72-abd6-7927d7c26e66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5799d961-d921-47e5-a74f-9b7e4524e524",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbae61fe-9132-46c8-bc93-43814e85b552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b0bf76e-dc48-4ff4-b567-a5f05efe801d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92ee77e4-6593-4a51-b6bf-cd5b3a75b84b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "5231d408-b790-4286-9f00-4d24144953cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34973122-a80b-43ca-b930-27c435d51302",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0394956-6e2f-4f60-8dc5-55cbbf5788e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0882600e-7bc0-4b9f-99dc-67fd8b318d9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76c01d95-1850-47e4-9dd9-6de887dae727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "032931a9-ef4c-45f5-b762-06b71cbd08c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8a39eac-786b-4d77-9c4d-0405b49a074d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd703e8b-8571-4ecf-a89e-2a42fed406e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86b39814-d99f-49f2-ba38-500f225a3a86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af2df3f9-4474-4bef-a59b-35c47fc0a26c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "12544435-fbd8-4238-8dce-cded4ff66063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73ab14d1-3253-40e8-be9e-5e382d863e83",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d16da51b-ef88-482e-8e6a-b7d5e1a1e4b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dac95d22-b86f-4721-ac45-4236c6881e94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebe842f1-d595-4e72-87b4-65e8d7a44560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "25567bf9-3979-4a25-b3c4-1b4579b195d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cddd47c7-9578-4492-91b0-f1956a20b658",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21204450-5ad2-4dd4-81e7-ef9652011017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8822302f-11fa-4a9c-8d40-cf81358ec12d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "910019e9-2d0a-4ac3-9472-7acb42f9f799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5578e29-870b-45de-98ba-fbb3f9236e18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f150534f-6de7-450e-8883-60b4759b14e3",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49a8d011-15e4-4128-8008-b611c23c4ac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e73ca51e-52cb-40c1-b0a9-c270267767c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b793bb54-9865-4a5e-8d57-7f849b5098ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ea321ed-a8b7-4bef-9c0f-0f115999b543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf203e3b-8d6c-405b-87b9-04470cd7e3a0",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "684f5208-e6eb-4097-ba08-b9fc84cbdc68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2112422a-de4d-4b14-a969-09e5135aa128"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64f1f7b6-6c5a-4077-b9f6-174af34c33fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8720b18d-0f8c-4a39-ab10-ebf86483ecc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68087487-58d9-486a-9eff-70161ffaff7b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b831af65-8931-43a9-bba2-4e9d05bc3330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aea8dfc-4d4e-4234-b948-e969ab729fac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1880ae43-bb7a-4ef2-9ce7-6596bf53c002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef773a45-abf2-4643-9493-6ac6331257fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66707b28-50b8-45dd-9d9b-18ec5360e030",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e01374fe-78e0-402b-8cb2-d5085fa47238",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc52f2f9-4170-46c0-b7ea-278a6b427b18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eab4e7c-a69b-44f8-906d-9169a194660d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "66f6636b-ae56-4aab-bc18-6867a5d43ab0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4abc966-efe0-4f94-9348-ae91efad19a6",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebd7248f-524d-4c53-9d7a-a098118cd81b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a4992d1-6531-4650-b036-c4f78d144d1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58acf5ef-abb0-4c33-bbd4-1ecbca408557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "de9670d1-8407-4850-9185-d81bb52f6eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48111aa5-3a7b-41ab-aa8a-0a6a2726a24d",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c380c428-bfec-4bf0-9af4-39ddbffc322d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c7566a3-86bf-4934-bb86-30e4d1a6b787"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10e08ea2-5ba6-4248-a300-06732737f2fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6d733a7-4dc0-43da-afcb-d0b533ee5dc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "937bb4f9-c1a7-4fa0-ac97-9d090b5cd41b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "780e6677-d6ef-4a6c-b285-34034bd529a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c64e7fd-fc77-495c-9049-11871868d5be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fee2776b-12d2-489f-9795-ff284a156f88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "56287c9f-59f3-4cda-9c80-3d610c66b7a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9848d2a-194c-4196-974d-a1aed07391a6",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2af37a03-e59b-42c6-ad79-0c6e7810e218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dfb1a99-27fa-48b4-adc9-a3ab07c5599f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea16bf65-e99e-4b60-9768-a9f0c0edcad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6368def1-6561-4861-8cb0-09546f3735ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c61d3459-a7d1-4c44-8049-e83d671d80f9",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52b29073-fd70-440f-ba6f-090230d9b235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fdaccaf-6e37-4666-ad29-67a5308c535f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "148553ee-8e56-489a-945a-0435a46035a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d48d7b70-4b08-42b7-926c-ea854d1c56b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72c26f2a-0af6-4e78-81c4-ea6401a3ddc3",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50e90de3-927c-4253-b3b1-7b7ef410bd9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dd73450-ed0b-4dff-9c35-b9a0bb3decfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baa1028c-b16d-4f52-bcf7-ff33f1e0c326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bab8714b-badf-4d6a-9616-4b21259cac52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaec7fd3-8582-49cd-8f85-5f9e32186e6a",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3e4def8-7680-4ad0-87c1-a8e5b5219d1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d58cb0f-66df-4e82-977c-21c2fb2b3477"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73c8e27f-60d9-4dc3-8892-4a6f28b1f059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "61cfbbc1-db95-4305-813c-fe5ccfabff4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "523766a9-438c-4d4f-87f9-9e0326f3f548",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dad58490-0c13-4dc6-a7b3-b25d6b9df42c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b0d5bcb-e549-48f3-bd36-6833925cb987"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54e1f026-43cb-407a-bec8-5cbdcf33bfa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf27fb42-730d-4659-9e94-50f579358cb7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "150ce1e6-3a34-42e6-8415-fd2579fb7ee0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bbe65430-40a5-4067-854b-4d688cc32ddc",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21357f40-5a41-42f0-9dfe-785401b8bbd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61555838-78f6-4185-ba53-e24557b261ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4a44ae6-b879-4d6f-9e31-2ef3facf9b6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fa7c78eb-d9d6-48c7-b82e-32f6426374e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fb9e2e5-e6c8-47fd-9793-7ed784fad014",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57c0d9fb-3ea2-4bc6-8036-b16c84cdace6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "7822059c-16c1-4e8e-a94d-c9e10b32e703"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1bca838-853a-4fce-bd31-57d749bfd204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e9a03155-523d-41e2-915e-ca594ea6ec9e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d68cf967-fa4d-447f-a7cc-28de1d32f8df",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "64948f3f-58b5-4790-8540-c8ce60ba6a54"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e7acbdca-f9c0-444e-af29-d45893529a7f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "820c4231-7f67-4d63-8f05-4a51e2ceace0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c93e30ad-1286-45d8-b718-9bb5814a3a79",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "49a66a12-6b63-4d45-92e9-349c51463b86"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "721b2cda-43b3-47a3-985f-541e09f6ac87",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "14dc58c8-045d-4fc9-882f-247ccbf38f85"
            }
          }
        ]
      },
      {
        "id": "85798db2-bee6-45fa-ac8f-1f8a0abf57ee",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "443c17bd-e34f-45ff-b59f-f78ae6d38dcd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "119119cf-e594-474c-81ac-8a5fd62628ba",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f2b38596-3afa-4993-a036-ec27f554563c",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6aba854-b1a2-4f35-a305-f38e15c7dd97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dbafe0c-4b10-4792-b428-adcb4eb0862c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c113283c-c6fe-4bb5-bc3e-6f0977bf9187",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46baa5c8-1fa5-44fd-ba2e-470b176ca2b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f90be191-48ec-48b9-93b6-18c9a1072765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c511752c-967e-4149-a63d-d746b7e4fce8",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd74700a-3a3f-4bb8-8558-dc850c1908f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa871df7-59ca-425a-a0f8-34b38c1b4b2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd712565-c92c-4326-995a-ea92571e417d",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df02c48b-7f57-4f22-9a15-b179758b2eaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06941f1c-b3a4-4980-bd80-100e27bee4dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eadeda9-b0f1-4563-8197-879a84b57104",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23037763-66fd-468a-bcd7-b3cd224ccdf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ce83cf5-c6af-490c-b99e-24c8a6508339"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e4425b5-959a-43d5-9964-38b9c98c51f9",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1ca0f7c-9a1c-467b-9b66-4c03cc8386b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bac9d7fa-7509-4b7e-b5be-9a90c63292b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d90760b-aaf9-4184-860e-91585fcf99c7",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bcb5b7f-a2b5-45ea-8482-0c7ebbfab977",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eda6a1d-776a-4cce-aadc-af9f1f173251"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79ef7c7e-8e62-4838-81bf-6bb780a964d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e256810-1d6b-4c65-a5a6-b250bfc91bc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db99c84d-1670-44bb-ae00-2679efbe52df",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea275b89-2e56-4516-8494-44e8adaf160b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f288eb39-f6ec-4e98-a749-afb6e537b3fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "141c4ac2-3b5e-4686-acc5-98d4e3534798",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d75da61-4749-49ea-9e59-9ca19d1afe6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acdcdf70-8843-423f-b501-5630008fefbd",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7d0a449-1c6f-4286-b51a-cf1718fc31ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecc47135-cf7e-4be6-a6bc-6db6ff8fa6c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12e65d2b-d18a-49af-8303-cb7a225f0c2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fd1f84a-49d8-40dd-9725-4f6eb70f42e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab36a024-9e0d-44dc-8053-7ed114f2ff15",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de2c5315-b165-4495-bab5-22e8a073b98a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b63daa2-2c18-4bad-88b3-81158853f496"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d267573-4db1-4486-99f0-a2ce3d324832",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dd7b9b1-422d-4447-9533-7fb5c8958b7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55fae37b-c54c-4886-8280-37532097a9ba",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f275ea1-d7f1-40ea-b749-bf3e024d1cac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04e0abb7-356b-4957-87d9-43ab5512e4ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00f1e51e-31d3-4947-a9da-489d8bb27fb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca690e98-3e25-4153-ab6c-a29bed4c1063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29236e25-e742-4ffd-ac97-8ae4d88d2611",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b850146c-e0f9-4425-af86-08416f064e3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9f786c0-dbdf-48c7-aff8-205730ccbb00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fc25f9a-6dca-447b-9dfe-700a7c1a6359",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48536f5c-def3-4769-ba09-cb3b20192975"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a85af90-be66-4e16-8bb1-dbdb9514778b",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5296ca6-b851-49e2-9cbc-4a8715d866fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80c5f55e-aa04-492a-9298-45434a18aace"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1780aa78-fa88-4b2f-8e19-ee4cedc7fb33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42f7b6dc-4043-481e-a356-b2a71084ac19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3502d914-3143-4b4a-8ae2-12fd62006e37",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a839cb03-b34d-4661-b5ca-6f615ea43326",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f9b077f-17ca-4704-aa20-dfcf890603ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aea12ee3-46b3-4984-94ce-b6af8459478e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03be8e8e-bb18-464c-ac78-4661bd4e9dcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "210d9b3f-2fcb-4d8a-9b4c-3ab61df12969",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1684d75c-c83d-4f2e-9a54-51445272ae85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e941e113-102e-400d-9863-212038bff701"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c94762f9-77e8-41f7-9ad8-d675007d5f52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0780e4d9-5565-486d-a51f-5109f36fb2f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39152a69-fa6f-4d06-a8fb-5f330c0dbffa",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cb5080f-af7f-4c56-a15e-195fe32b4def",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8eefca43-7bd4-48db-b54e-db8e21318781"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ffcbfb7-ae23-45cc-b9bb-daff48436758",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "657b56c7-e685-44c5-8fc6-e6985c843ebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5907f5ae-7ea8-4592-845c-7f6d8d0ba793",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee6378fb-d1e3-47bf-9368-cb75b8d91970",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e88c3ed-44e6-419a-94cc-41ab8e29f9ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ead3c407-77b4-4799-84d3-ad813280bdc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd69c394-3b49-4cde-82be-32ae0fa070ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48d4f4a9-95c7-44e4-bfae-eec3052260b5",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58cff333-0c70-4310-9c18-5b5fb60d7146",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab183633-85ae-4fe6-bcf7-71162ddd873e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d29b2956-ce75-474b-b4d5-e707a59e7cb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a946ccf-706c-4e92-add5-d9152c3de431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b489a63-0e24-47b3-b410-fd6bf6c397cd",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe893b56-c528-4e1d-88c7-89ca10d63e2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48ef8461-1f60-4fe7-a13e-013cbf51837a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0ae8bde-7db7-4d39-bf24-60fe6da5830e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93e56b02-37a1-46dd-b22c-04c1ba3553b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff455395-cdc9-4077-9eb0-cce96909eed1",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5d4acce-2dd1-4d34-8698-4dd9c5671558",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1463c680-4a8c-4f24-86e1-5da3e8d04456"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "169da4f3-76ef-420f-a804-cbb7a7ead482",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "841a1e79-dbe0-4dd4-89ca-357ee72c0483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5f4a4cb-2b82-4821-b757-91977d126412",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e4b0307-5782-49d0-8df6-914f59727936",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50e80ab1-108e-491e-a566-ad4985d8ae59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b759a68-ed6e-41a4-9242-ce555fa1451d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18d8224c-b141-4b46-bea5-eca35be56b16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "805032c5-d3a6-4ae6-be60-c36bc9efe6a3",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59d8ac79-82cb-424f-9e8d-98c0f151d8be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09f5d5be-cb12-46c7-8363-5afef0f48dbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8878a558-822c-4745-b9d9-07e1418c439f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1875f7c5-feb0-4625-9e7a-f781c3667b36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5244416-8fa5-4bd3-985d-43fd3b83986b",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3600bdbe-0a54-4312-9a1c-cd4a111c04c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3c1e033-cf0f-434a-bfd2-e6bfd76d7a08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a579212-b7cd-41b4-b7f6-0926a75caefb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74a99460-8c05-42b3-a75d-5347fbb3673a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4ed68ef-9ee8-454b-90f3-43cc2f0b8194",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f425559c-b022-43c2-8fb5-d7352d9fa14d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7bcc671-0480-4c40-b0c2-090f1b2087bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c63a57b-dd90-44b1-af42-03eae8f556dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b7751d8-e9a3-4631-8c93-4c9687f34343"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d076ed6d-398a-424d-8244-e16037edd633",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4959e0c7-8f73-4ab3-8d46-6198845743a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4446a84-a7b5-4c9a-bc04-4273d3d9e1cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24751f1c-7ed2-482e-aeca-2e589f99d75f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa4bed9d-ff8e-4b3e-87a9-dc4472def133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "509220bc-5d96-4f0e-b682-3aafcd74e7cc",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "255ccfcd-1333-482b-ad15-4c544e0668c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b427d820-861e-4cf2-9d06-9bd4d7f22e87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39d9aae1-99d1-45bc-ba14-82692ecc5151",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf6da208-fd25-448f-9f5a-ed90dc131061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc0e6895-4ba0-4c16-a34c-74839f9c2090",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a16fb1d9-fb98-40ca-994c-da721552225d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ffaeb8b-ab58-4e62-8bdb-a2c525d3a94c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ddd840c-1367-434c-9acf-0f7ac612d071",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c440be00-e049-41f4-8f15-f4b2afbc9e4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56db2651-25e1-460f-81f6-170c63b5348e",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b89286d-7180-45bb-8a64-63af1435223b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ee2c599-61cc-488c-9f7c-e7e349fc91a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "665de2a2-0058-4da8-a172-73ac040592d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5181809-d285-4ec5-9f04-7cb37eb4e7c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fc3a0ad-9fbe-4936-a82a-482e00beaca1",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bf9438e-2103-49b8-a76e-f14810560004",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c492d26-35bd-4bb7-b535-7d1de7986a93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bac09b3-5cdd-4792-96ca-d8e33b45a989",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6e00069-43b7-4f3c-aff2-508c7e3f2d87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "813d3685-9ee1-49d8-ab05-62ae423bae83",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceee2077-cb24-4594-b987-cdfa42519c0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b60cbd3-1547-437f-a81a-4f91433461c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e76507f-de7c-4000-a24b-1b42628cc9e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2ecc169-6684-47c0-a587-6df63fdf2830"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afe77ad1-b06e-4506-ac67-ac1cd3c30c76",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74c7b90a-01ba-4e9b-8eb9-7aa239bfe4e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86ad07a7-d078-463a-9244-8612337a7723"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c2a32f-2f48-4e29-ba2c-d0e7f2616b6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10c5b4ad-63c1-4ceb-9204-74ffcba60275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fa8e7ab-de49-4c9b-9d00-86109dd05118",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4ff6753-8b69-4826-9938-28ef1fea8e12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b070254-3330-403d-8ce1-ad068568e2ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f20f94ac-4d7c-483b-ad99-9edda5a0cda5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a438f96f-5fe0-4754-8598-cdcb5e9104eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea4e82a0-cbd7-4003-83a7-844c8bb65c0e",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bc2479f-d5ad-4ffc-a969-061a731ea279",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96564112-e70a-40c7-b756-629387481b45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fdb879c-57b4-4118-8946-5e89559e343e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20e17bbe-6470-4509-8542-5eea8abe5511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eadf566-0955-446b-8f23-5b33b1d13eba",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0b9c911-743e-4c4e-ac7c-3f339a1c4a34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b49e120d-bff5-4ad1-bd7c-720e6a7a454b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d14660a5-5676-4ea7-9f60-b2caa3403c9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a96ce92-c61d-41d9-b72c-2e893cd8ad6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43409e35-6f8e-4668-bbbe-a508a3a443c0",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d42f3e1f-b906-4cc7-bff9-907469277977",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bae7beb-1d16-43b7-89c7-4a396645ce45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec65ed94-71d7-4ef1-acf1-4b5db314daf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb1f5664-2ead-424e-9ed0-f92b39be592f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2dfb503-2970-4f5f-9d91-3d468be3164d",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aef86ef-5632-468b-80d8-0d31e325e4da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e3f45aa-11a2-4291-98c4-c66081df9738"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0812572d-4350-4485-a523-fcecc4347775",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a7f15bd-b999-4d4e-a63e-44bbea819525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "368e07b2-dbe1-49ab-8d50-6c798303ad6b",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edba9071-4d4e-40a8-bc3b-40d7ad693b9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e7f4e66-0fd3-4484-8857-24e5ef0c6fe6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e665ca4a-9d83-4ea4-820b-be524811bbdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31d71c05-37ee-4de8-a462-4bf3f1b50ea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37e59912-ff38-4281-ac0c-21d8f05cfde1",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d3ab06c-a774-4fec-a6a6-7d23069ffa2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efdb043d-9979-43ab-973c-13a5df1966a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bf95a41-bc11-4bfc-a4b4-b04adbf4afa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0969d152-a7a0-472e-a35d-ed88566638e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89e4ea59-d684-4d42-93c9-6e3d77cb201b",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3caca42f-7cfe-439f-9104-8495b0245968",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "317aa483-3bac-4a49-8405-045f9801deaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44a26a4a-25b2-4548-9727-9aaa670806bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e431480-2832-4454-a300-c16cf6217a75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1580a5dd-9d60-4c0f-98ed-7345143e1052",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1be939a3-b4ee-4e44-b8d5-528bc226dcb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98981e23-f5c1-49f5-9a5f-36b71d903a8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b465ce0-23a6-4a4f-a1e4-c43c3584e24b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "399631a6-4920-4b81-85f1-d8e43a60feba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4de63a24-b330-45d5-9274-da8281e700f8",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6b32c91-ffb2-4e4b-a5a7-4558a86916fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "731ad29e-61d6-441e-991f-c4c754fbd14b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81bc9d42-a687-4736-b1e8-6a36125f865e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfc715a4-acc7-44e6-addf-3d4f0ab23970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caba41a4-68d8-4c22-a731-a922d20dca51",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d009ced-c7f9-4ce2-bdb0-d53dc7a05a1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1ac407c-f65f-42ae-937c-10527631afe8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64678675-192d-4ea8-88d6-b1b554bc08dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67099062-ff3f-4217-a271-b2759bfe6144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "531a7c93-7ab9-4d67-98b8-1aadaeb5bcb5",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f9098c9-37df-451a-9ca9-b1319eed7b3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd1136f6-d93d-4c4d-bc22-902d6bf30b3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c32cab3-b257-4d2b-84e8-8842c463e0cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbf07900-bac2-44ac-8399-579547dc06af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd9517a5-6063-4abf-9504-d731f8ca4c4e",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5cb6bd8-6efb-40da-abf8-3d40e38491f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abe07ab5-4b8f-4563-b94a-b9b85025ac03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "286823eb-7e97-473e-b603-b1bc1ec04693",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2756d51e-a461-4679-a6c7-b333f5e2a0a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd987a08-d723-44f4-b16e-cf2498ac0bba",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4acbeea-1876-4d23-b602-8fc4ded85a29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8d71b99-5e67-473c-a4b9-bb4b5a2e5ff9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe45d098-1e4e-45eb-8c76-ba155d10e62b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b35c7da1-4195-4213-9205-193ad60faa26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fb9622c-0b28-4bab-9c14-ab9bb64de8a6",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de27523b-3f07-4bfd-8adb-3fab73d0a515",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf4869c3-4277-46f5-abbb-028df14d01fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2ed777b-ea36-4b7e-a0a9-2ae043da85bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e7871e2-87a6-4bb3-9099-95fc21be3327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14e63828-b411-4eed-9425-781b4e5c3ebd",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4824a2e8-8138-42dc-9b50-6a1792970e00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6305577e-cdd2-4d95-8791-3614cfeb8d4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f98d3b59-6aa7-4f3a-b890-7267166644fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64707a1e-2f26-4473-b797-3311c9797e4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13685716-4c23-405c-a7ad-5a58e1b082bf",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a1913f9-9243-4ac8-bac6-665df62f2f99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e73f693-3706-48c1-ae06-73ca063a40ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8284c5d2-5f0c-4d70-9b74-ebbedac9cf32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bbfebce-866f-43e7-98b7-7363b5c23919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f894226e-917d-400d-91ad-45ca69b93132",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d6a55ad-fc6a-4a75-9778-ecd61c54cd5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69c15cb4-b7ab-4a3f-b3c2-1115e1722d85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9559c3af-7718-47e6-a31d-1711c62d648b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d15fa4d3-cd0b-41f3-b065-d0a034737864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b7cf4b3-a3ee-45e9-9905-4b8f4b4f7f44",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b331311c-e1fc-4fc9-b23a-82e196a02d23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94a2e537-af09-43b7-985d-5dd930454619"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a427acbb-9384-4abf-b897-1e7695f5b7cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e42ec41c-2576-4542-a58f-55c3152c7120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b231194d-2492-4bee-9fc0-686d386aa66c",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f994559-93b0-42d5-b941-78fe85257b6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8a42a7b-0f5f-4bdc-8bc0-0889573d88a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70a68479-abbd-41d3-a4f7-cde963bb337e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d241982-5688-4b6e-9c89-32ec106ee17a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f879990-5700-4d9c-ba0f-dca32cd62303",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16932adf-5656-4894-9282-1035a4ec6c38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dceda51-4482-4a8e-88ce-9e5bd1f93c19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f6d9da5-d354-4351-8a91-0567ec9974a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "283dc677-a06e-44e0-9a56-2f20d5776f8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "520c7f53-0fd5-4f10-8690-e0fcc1698300",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cca02c9a-6f39-4f4b-b69c-059a2ae0c3cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f95cb274-3120-47c5-9923-e0b2726be45e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97a02c97-2c2d-46d4-8b3e-be8512f7a03e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54b28de1-48d8-49d4-aa49-337b17549e50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1136c5d8-d12b-4226-bb4a-10a21b1520ce",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7d3f90f-64d0-4828-8633-9d0f297f1b7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1f37865-b63a-4aec-9e61-71d92cf3dc00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3662f4d7-c79f-4d13-84bc-15c4f59c3a52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82068697-7d60-4a29-8741-5787d4d3fa71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ad1c9ba-5f1c-481e-b063-ddd0835865e7",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3c4ab88-bd3b-451c-885f-a013fa00724a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0006c8f9-b233-4eb9-87f0-0cacbb6dd247"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2f6bc02-21d5-41cb-8b7a-4abdcfd09477",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2bf146a-4ada-40f7-9982-8220c6158e9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35c33f36-1c0a-45a7-b018-e588f4d537e5",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "063ac9f0-b908-41a9-932d-7cef2c102b0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23ef4b77-9f63-4ddf-9d48-528542e2c462"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98bdbe98-3ac2-406e-9d53-ac914c24a8d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c9d721a-e8a9-43fb-a7f7-2044de4825e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cab380e8-abc6-4cdc-88a7-9c773334bd1e",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c9c4b25-4126-4d53-a191-33c55d5c82d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6164a68-216d-40af-a839-11792aa31c7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "727e5cbf-4f79-4c60-bec4-e896786c6649",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c7578dd-745b-43ad-8554-3b4339e10124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d87ed2e1-1067-4d5a-bfd9-5152ec8605f8",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2217d6e3-c689-4aa8-91f1-0475d8744d22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26db4fb3-d6be-4af8-a4a1-0e461fd3d8ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c0ca32c-7229-4dd8-aefb-6db06b9f14d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82560329-2d55-46d5-958c-65adb27b5a3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c9215c2-f7a6-46ef-9fe4-e57ed6523c03",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a6b6764-577f-4664-8041-1126091a8f4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22bab336-3052-460f-b991-62f21551c46f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17d6c87a-3f91-47f1-a3f3-de90c91acf18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7682363d-3a8d-4ca7-b8a6-8ddac5142213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd227dad-76bf-4628-9cc5-b8ed4f89652f",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a745797c-927f-48c0-8e9b-e4d6bb24828a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea8ddd8b-1ef1-4188-b19e-92d99cf5ee2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3316a43-5ba1-495c-97f5-54ed1ea639ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a576491b-2b32-44d6-aeda-1741e7456415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f8b9fa5-086d-4f05-a4db-b3366a623cad",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb007855-ada1-4550-adb8-13c044b5ec39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d50934c-29f2-4ca9-9b6f-733524a8000a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1b5d19e-3f53-4406-82f7-613018b432f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1057416-234a-4066-b4dd-86d2f639c276"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c42dbd0-309f-4870-94a2-6c9924d079b4",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9e90391-7bd7-4034-badc-10538f2fe3db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28a1bdc9-7841-4f61-8883-585b37632607"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "162453dc-a946-4a04-b2f3-58797b2fdc19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd6b3dfc-ae0f-47ac-95d2-97d1b8e1d1ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c21a2aec-2985-4ee5-8095-228842669801",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd53a3a7-e8d7-4f83-bf11-b882150f3ff0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d1663fb-f6a4-440d-98cd-0263175dfb5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70b6bbff-c356-4e62-8f1a-9989b18c8ed6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "708e39c4-21c2-4106-adb5-cb9bae371ac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89429449-9935-49c5-85da-b3241afee7a1",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dee1fb3d-daa8-42c7-95a9-ff91ccf8a67a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90dbaca1-8088-420d-831a-c6e80cbfd99a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc6b0310-2446-43ad-89a5-73da144938c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8b9d597-976a-4942-8796-3b38849e1051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a3ae89-5ca3-43c9-80f5-f62f9062fcea",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb22b91a-cd35-455a-8a88-4bf8edf70b5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8099a7a-2e2c-4ce9-8a0f-8e15c3199a5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8042c513-db5e-4b28-aac7-64cb77038267",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4485649a-a7b8-4646-9df7-2952fe1b1921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5c67e89-8ea4-450f-8dfb-86e845b87a97",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60982aee-e8ce-4483-aedc-f500ae719d46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1d9e937-9926-4618-ba0e-056f8cad73f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef689dba-e256-4ee8-b49a-205e34e1ae86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d374c74-c07d-4e12-80ef-5d87c9c42581"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c227621-817d-45fa-9e55-bd4976ac9678",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae824a39-a8e9-41b6-842e-11ed97f1cae3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8aaaa6fb-4b77-4acd-889f-f45fc09e6953"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28f69dad-ce1b-4170-bcb8-581749a5960c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1184d564-9f39-4e5e-b7a4-fa35ea631cb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ecaf896-227e-4a4e-af55-1980f9d252b4",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efe16c65-61ff-4ea2-9cea-f3fde2f21507",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3830648c-cfd1-4c3c-80a8-468431262bc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a17eaec-d117-48a2-ab94-2d1ea2c9c9ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2a154dc-f042-4756-afa3-00070d358987"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30f852d7-af0d-4591-afa7-46eb4294fc1f",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33dcb3c1-4011-4369-bd64-8f5e33855503",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c3e7074-a2e3-4e3c-aa34-8f99def54633"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a51cb18b-2a93-4e18-b683-7b6f5c5453e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c585691-ff35-46f9-a954-c79f3cb8425e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "450bc057-78ba-4b18-b1b5-0ea9d92ad221",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c44e9af2-c665-4161-811b-8d45b5b06136",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db67d9ac-2705-4314-89ba-2bcd467f7cc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "782496b4-2c04-448e-b899-74b8dedd1c02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "348a8129-5f9a-463f-8f5d-7e80831fd66c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b1c62ea-efc7-43b4-a6c1-2770c0d4da89",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed09a637-dfd4-425f-bfda-621b63a68398",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76fc4209-ed6c-46ac-b8ae-70b109403df7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebf79b9c-bf40-4d89-be09-2c22e4fc3697",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f0fae6b-825c-4001-8bc4-950fbafb6134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d51f479-7104-42fb-b80e-286f58db5598",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbd3d820-def8-4b4e-9ea8-9eeb8437f8c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14e49930-02f1-4629-ac8c-71672494b98f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16d2830c-c9db-4871-baf5-f148a53a9ead",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d567f5d-2795-4099-a82e-e907f78a1ed8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d57aacf3-34a1-403d-b9f2-51e8c06f6037",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd6e4e3a-ba67-449e-945d-a52202efc478",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3017de36-eb85-4e2b-aa75-deadcb3cce6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "464dac5a-445d-4b9c-a644-5bb57021eaaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efc2391c-04f4-4287-93b3-e1a3248bd9e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67b3e410-2df8-40c4-b377-67493de2b799",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6243582-0430-4703-9154-9f20e8bc2d65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8678273-002a-416c-9032-85c9a90d74ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "994604bf-cff4-48d4-83ea-278023d397fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15388904-b98e-4c06-862e-94cf69ae6e68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f8b468e-2156-4c5a-b0eb-d4543f9eabc7",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77cc545a-01f8-47fa-9dbf-fd3e8c463fd6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6dac866-f37d-486c-8f0e-b6dcf3cd08fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0386f126-6ea3-4212-b25a-144aa87ada79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03075d1b-e1c6-4c75-a292-2c26bff8b194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6682b0c-d96c-4f1f-9cec-5675d4c289e5",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4caa375a-3ccf-448d-b8ac-212e69f64f22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3c55342-677d-4382-b3bb-267e7e6508a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cc707d6-2bc9-4283-ac97-2206bc04ccd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6969f7db-655b-485c-94c5-d87c4077646d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "607788cc-e4bf-4084-a3c5-202847f9fa49",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3316a1fa-b75f-4ec2-a791-c72a34f6d2d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1934d98-e864-4458-9381-86ec03383795"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0691da46-cb40-4ec4-9972-13b8ad481a65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1543d1c-c3be-4471-bb4f-8be963ae621e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "141dbd16-4f3c-43ca-b76f-86a83e5fc52e",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22b084da-acc2-4c3d-a608-690f3b0bb025",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6af9a9d1-0685-46f0-a600-ffaa834a945b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03dcd49b-1bfc-4657-9bc7-25860b11004d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65496b00-dff7-442b-844a-260f5d07e40f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf90d00d-c491-49b5-814c-ce60e1c1fa09",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae590686-6f4f-46dd-bc9b-ed97236fba82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0e6445a-be65-4e24-9e7d-88ac676cd336"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a477e5fe-242b-45e5-92e6-4d7ec867c083",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77de5901-a531-4514-8246-2fb8f0d393e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "470f6518-0fc6-4be0-9c52-f9c2addc13e5",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db94638d-69a3-46f8-8f1c-cf5cc497394d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79e73e75-de47-4f15-95c1-137439645168"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32ece4ab-2803-4a3c-b478-c23a3f285cdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12cd351d-576f-42f1-875b-092ab5afb41c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25e9b310-e9de-4bf9-bb45-f584509308d4",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d978d724-e5cc-45f0-b31c-4cce37a7bab2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa4b4ab0-3f97-4aa5-8f93-06d315baedf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfeb4f61-ab0e-45fb-a69a-1762dfb4032f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e342f56-9c7a-4ec4-99c0-cae279b4d0b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5118e7af-6b5a-46d5-8c61-962b2bc711e3",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fbaaa80-d7ad-456a-9598-49f1886cc066",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef28b33a-80cf-48e2-8b02-314e41db91ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39890ebb-78fe-42e2-9550-87d3aa3596bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89a8b71f-1620-4681-8f03-ffc0f1436658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c8f6779-cf4d-4d0c-b536-8ad12a8bf257",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9ef5edb-8664-4f0c-82a4-301aa956c3dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6cc0d06-e662-4823-8b81-580fa0e756fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4863ec0f-bebf-46e6-a8e9-bf635366c1a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ee38158-39eb-4695-a728-2384a303b963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7502068-d60f-478b-bc74-adb2254a084b",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a583c15-8cf3-4d10-b671-948c194155e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6281f82-c795-4835-b6d4-9525f9c16c10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e16395bf-77af-42e8-a9e9-1a0df284f39a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b75dbc7b-e5f7-462b-8148-549d12c3d874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa36bda9-469c-4e30-bf88-ce00c6cd2dd1",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c129a88-3c8a-46e4-868a-c9598502d5c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3b08e0c-6af6-4183-9c92-7d9627acef3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "751342d9-319c-4520-919d-285d78030616",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6a3f596-e202-4e60-b05d-c0238eb0ebdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "360a37fc-7b77-4d41-8c49-c5734dd381aa",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ded8e4b-1485-40ed-a898-31b77c8cbc4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c819941e-ce3c-4266-91ff-d74973fd9e20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fcffb1e-5594-4d83-9999-be6b8480d9bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf2826ef-822d-4922-ab7f-f58491e4e10c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04d0a70c-a9f8-4cff-8900-e49b04453b4c",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "796c31b9-136e-48ce-b193-bfb60900ddd5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9b75241-73e2-42c8-92ae-bccfeb5e6fa8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66eb934d-85d9-46a4-a752-cbf6e8b5ef0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f40ecc00-dc8a-4421-9844-888f582a7d20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7df367ae-99fc-40a6-b0cf-8213ffddd7bd",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1294674c-da41-4b95-8791-6510888db5bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b55b77e6-45e2-4b1c-a0b8-bf780d1e05e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "196b247b-3b04-44eb-8eb3-25527c68ee74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03b0db10-96f1-4fec-85af-8a82894d8916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "316ed171-5835-4601-ae62-7f2428cf400a",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dc4e495-4b1d-4d5b-bf19-09d38f264abb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c8774ca-2d05-4d8a-aeac-a9ab6a0ae101"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53cfdd30-9b90-47d9-8b56-51b7d11eff13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1323e4b4-d0d4-418f-a83c-9c2a9026d6d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a87fc0d-c409-4861-b74f-6f57b19f3a51",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf782dbb-ecc6-4c16-a852-d94a56444b5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8ae3bbc-3e74-466e-bb94-31bc20b7c24f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c67bb39a-c9d9-4d5f-8bec-64fa40a30e44",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac93ff5e-e95d-410c-a850-dd7803656a11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfd0d957-4cb6-470b-b5e6-f62f9d7a797a",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d22f7b22-67c3-4a5a-a99e-9429d5f6d723",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57256583-ce53-463a-ad81-ed9da09abb78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "396c4eba-b9d3-4e26-9e77-fc6e55070ee7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f35ff63-24cd-42f7-b55e-b56532fc0652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec8f300d-e4ca-482f-9253-d54cd2603718",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2826f6c-f7e8-4b08-ac33-25adaf029adb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00dbf393-3c5c-49ea-bfc5-841b00f5dcfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3039d4f9-16bf-4df1-91ac-214b287408e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db8cc863-9f95-4648-aaa6-8795e51cdfa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae544459-473e-4e47-b34c-48591fe450f2",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23d29df3-3ac4-4054-b513-b218c217c5d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78ce2f66-b18e-4496-b6b3-103a9ae151ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f71069a-69a0-4d9c-a2d5-4bfa09570682",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "813e1b70-3277-4daf-a649-751831788fec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d43d3a98-efc2-4195-bfb2-16e1db863021",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4193f59-28b9-4f1e-8bbc-4073e96f0f49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e975fbf6-ad51-4710-a2b0-00b1335d2bc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb45a542-8496-4ec1-b03a-54bd0be9b7e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8ac614a-2a9f-4502-8f9a-252bf07814a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "586771c5-f646-404d-82cc-0055dc29f51d",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55bea798-6288-4e71-a5e8-f0bba721d331",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "096eeee9-81d6-4d7d-97ff-3f498b6076ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b846bdf-b816-4da0-bb48-ff2d50638a3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fad13967-1b2c-41c1-992a-367ede542ad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f737cac-da37-460a-90cc-b923771bf4fc",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63a4f520-fba2-44b6-a4f8-144ee48a24d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d801d1a-ab3c-42e1-a56f-8a41b6f02722"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c122fdd-7a6b-4569-9d27-510164dd4c44",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12a20f95-89b7-49f5-bf25-41780cbbcf84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e5d8319-9a0f-4fe4-8309-58a450f2b3a1",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a668a685-434f-4936-a3b5-859838fa5c42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64189e0b-5625-47e7-8bd9-52543eb07a3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28727caa-a952-4391-b56e-b54e7104821e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "774fa959-4f31-4bfe-9682-ec1c701d1bf5"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cc35be71-d4c6-4646-9fcf-7c5f0231c48d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2787e13e-293b-4215-9167-4304fe3e5d0e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "111d6ea1-9224-49ed-af42-c6d27e5987d3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5bb192f7-dcd2-4dbb-9c9f-028bbf2ccf41"
                    }
                  }
                ]
              },
              {
                "id": "5b0ba0d6-bd87-44a5-bc9d-e9c449cc6717",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7586f2ec-ae7f-40a4-a6d8-84fcf67a14aa",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3367ea5b-010f-4fb9-8df8-2afaf499e15f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "d2623bee-f061-4a67-a451-a3ffb46e79cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "393097cb-b2c3-44e5-ac0e-ce2e08093571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "56c14c07-9069-4a03-99cb-5d1350651095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b283e6a7-d67a-4a8a-9a6e-01b3728a66e2",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "219dffa9-e31f-4894-9d60-b8304a3a4a27",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "7cc8db58-8d13-4473-b632-490eda1785a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6573777-02b3-4cd3-b59e-fd88b3eabed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "124281dc-607d-415c-9ced-38c0183b46d1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "77fc61d9-e1ac-4000-9ad3-2fda2f21d63f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e2b3745e-21b0-4ffe-8518-6cc48c590319"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5d82ab9f-51fd-45d6-8350-76a63c697807",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1217736b-d45f-4dbf-9e02-eaf0796b81c9"
                    }
                  }
                ]
              },
              {
                "id": "71de2825-8c04-4ee8-b165-0133a5feabdb",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "f33bfe3d-b81c-4e6d-8f0f-cc958a358657",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44b826c7-843f-4ad2-98f2-889f835e5a48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "ccd08d07-ebab-4a73-ac49-1e9bdd6add78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6306c98-d752-42ef-86e8-51f985610735",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df951a3f-4d9a-4264-ba56-5439bfe9386f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "dcc2c715-c535-47ad-a3ca-4a960ca4f106",
            "name": "Positive Testing",
            "item": [
              {
                "id": "880456b2-1f99-45ee-8b98-3cc8495c9b8d",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "008e13ab-8ad2-4439-bf37-9d4017723262",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "35531285-ab7d-4524-8d8b-60cf820d25a8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b93328b-8cc3-437b-bd64-a8f3dd15af7e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5d2cc634-f4e8-4b78-864a-bc7483442727"
                    }
                  }
                ]
              },
              {
                "id": "99b6e533-818c-4d78-8823-763544eba7b8",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0fa0bbcf-f225-43a5-a2cd-6416a246ba95",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9cfd344e-09b7-419a-ad59-6c098e2f2ddd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "acc68528-a5f8-4372-95e9-c124ef628c58",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f94e02e6-79fa-4a42-a3e1-e93bcbd2d3ea"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d5f92148-2cc8-4aff-8dfa-c3cb14c9ff81",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "7255a3ce-a1e2-4fc9-b54d-92c54ed7188e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "75b3c5c4-b734-4565-94bf-790b80cd20d9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "607bd0d8-357a-4990-ad11-a3eb33a32ba5"
            }
          }
        ]
      },
      {
        "id": "28291a6e-9557-4305-b58e-7d27d01a7598",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "80b35fbd-1b69-46fd-8853-89da7d7bea52",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2bfb24ef-a389-4b92-b933-e9d102c5b971",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6003a201-140e-49b5-b347-0f426008b846",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb76e2cd-66c9-45f6-872c-f4f96bdf1ec8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "81474507-ec27-458f-9743-a7ed2202134a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcca33e6-3eb7-47f9-a191-a7849541c08f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "be528189-86eb-46ec-865d-a01cc9df7d96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0892a8b-29bd-4243-a524-dd029e722444",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12606d65-84ea-4353-bd00-8983cf2b0750",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2d1d71e1-a6bf-43dc-838c-714cd395b08c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a83c47d3-83fd-4d44-b9e4-74ef18757af8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ff7df066-b90a-4b2d-9d1a-310a445bf4db"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "08f074af-7be5-4c64-a407-33f1b239040e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a0adf299-033e-41ac-8a5a-9fc9da4b2794"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5d1ab778-f345-4a9e-a4de-66b0019a7ece",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d4e9077c-1b39-44d5-a6f6-405ec96c70ef"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "84924102-0abb-401c-86ec-e2da0030fd10",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "61cc262b-c42b-4acd-97e9-b6e487cc34a7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "66068c8f-a42d-47b1-9c30-17a1ff00d0f7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "04401e81-3a45-4ed9-99c9-2c28b18bd3ba"
            }
          }
        ]
      },
      {
        "id": "3f4be39e-bc34-4810-8d83-2bf1c31d122d",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "38d6ea9d-e2cf-4f79-8ed4-b45b8fdb7744",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7b328e68-6e48-4be1-8e72-aa66072c16ec",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "354125a4-8ab3-49be-babf-50e2727a0d87",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79751c2e-5fa0-4cc4-82f0-7b8119f3db80",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "94d89e75-4693-46a5-84c1-b4457051950c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f51fe11-9b61-4333-a43d-ae3bec90b900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c0c2b3ce-97c9-47e4-aedb-989979c80a52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21d2c843-3abf-4cf1-ba8f-35df9fba9bec",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ab3c553-3fcd-4fe8-8ce1-6b6d7f29b1c8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "92d47410-4aa3-4fdd-b67e-9dd268e264c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8a54194-a6ba-4253-b7a8-47700cee57f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cffbc7b5-9938-40cf-a2ef-1af40fe99fdc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "23ef262e-2449-4f39-82ce-74f856b14673",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0e5f3bfd-b95e-49ee-96e8-e9f28ee4a9a3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0c9cebdc-219c-458b-a642-a995a7077ebe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8ced6104-1255-4f5a-abc9-01586e3b5eba"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5b135a86-0d34-48c6-8283-be01f0aea820",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c53f5002-f597-42c2-b2f7-e1e06bd008a2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d8c662f4-e03e-4724-9b98-8310188acea8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "85005319-55df-4ad3-a8d9-c491be8238dc"
            }
          }
        ]
      },
      {
        "id": "382ef07e-8e80-4eb2-950d-765752c37855",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "11dadb83-1b14-4bdc-bf76-0de843730dbd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "59b2b475-957e-49b4-aff5-278af3a2656c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d29b6696-c637-4217-9172-56c08b4a1fc9",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "424702ca-36a1-4652-acea-50b9e0bbb78a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3d443422-dc4e-416a-a6e3-f4e9a11e0f63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b944c309-c3f4-4bdb-b415-d76d2687bb59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8c9b3345-a6f6-4b53-889d-7a2a37ac9a9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e293ff2-d1b0-44d2-ad54-c957f8ad8da4",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7183704-564b-4016-9d27-49cb7da20739",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "528759b3-3f81-46a4-a4ee-aa1aa45a004b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bebe0ad8-611c-4e61-9c37-1440d2d377d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cbcab5a3-3436-464a-b125-f15b11b10b75"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ff602e4b-63c0-4a18-b8fd-8ae4403b708a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cc5023bb-faa2-4ed4-a828-026df368e18c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7c506613-1b2f-435b-83f8-0f1571daa74d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ad3d4e66-a9cb-4c93-bdea-dbbf7721fe31"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eff39d3a-53d8-44a0-b19b-deb81957b7cb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "1f9d1751-34f4-49d7-9850-7a426a9e9505"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "27fca723-4408-4a38-a879-d4ffae3c5285",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cbb75f5d-925d-4ded-9238-c23e0987bff3"
            }
          }
        ]
      },
      {
        "id": "cb17a1bb-b3d9-43af-86bd-b23def05b2e5",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d255e928-ac92-4851-8d51-13e650d121f4",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2d448491-d97a-45d4-a2a1-625acc3d711b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "20ed2ad2-7efa-4a23-8025-8eee02ac43a0",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "161ee1e5-aedb-45a7-8759-7cc0ac703157",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "765c368f-375c-4564-af61-49dcfae7cf68",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 259,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 39
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 14.13899613899614,
      "responseMin": 3,
      "responseMax": 438,
      "responseSd": 46.93966373361334,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1677199211011,
      "completed": 1677199225341
    },
    "executions": [
      {
        "id": "5ab9699d-4da6-4705-b89e-541fa46ff3f3",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "0d859d69-b839-4859-b316-894aa7495c34",
          "httpRequestId": "f4513e6c-958b-4b37-a312-0c53065239ee"
        },
        "item": {
          "id": "5ab9699d-4da6-4705-b89e-541fa46ff3f3",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "75fb376f-eff9-4f21-ad75-7a122b4d6351",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 0
        }
      },
      {
        "id": "7be5f89e-e7ea-4e5c-98b7-da95f1377cf6",
        "cursor": {
          "ref": "c10a328a-c95a-443d-a16e-25bdd1f6ede3",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0b4e47bb-e4dd-4e60-a55a-2c23ce0253a6"
        },
        "item": {
          "id": "7be5f89e-e7ea-4e5c-98b7-da95f1377cf6",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "41645e19-923f-4329-8cf2-8544bf665111",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "ae8933b7-4c79-444a-9b7c-fb6da39ebe61",
        "cursor": {
          "ref": "a533d66a-91fa-4dc7-a18f-825f239fc652",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "36401307-2a0f-4f03-b5f1-5434fe584ad6"
        },
        "item": {
          "id": "ae8933b7-4c79-444a-9b7c-fb6da39ebe61",
          "name": "did_json"
        },
        "response": {
          "id": "7d1b9ef0-a943-4e4e-90a2-40595b681411",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a772644-e013-4f07-bc38-f47ff8e2c848",
        "cursor": {
          "ref": "0b2ea842-a4b0-459f-8300-3d6ff4448fd6",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a3f58c4a-65ec-45cd-b179-4efe34459801"
        },
        "item": {
          "id": "1a772644-e013-4f07-bc38-f47ff8e2c848",
          "name": "did:invalid"
        },
        "response": {
          "id": "9ea10a1e-a4d0-4c17-ac7c-1f4a30ede3e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "1a772644-e013-4f07-bc38-f47ff8e2c848",
        "cursor": {
          "ref": "0b2ea842-a4b0-459f-8300-3d6ff4448fd6",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a3f58c4a-65ec-45cd-b179-4efe34459801"
        },
        "item": {
          "id": "1a772644-e013-4f07-bc38-f47ff8e2c848",
          "name": "did:invalid"
        },
        "response": {
          "id": "9ea10a1e-a4d0-4c17-ac7c-1f4a30ede3e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "bb930db0-1a6a-4499-8a92-35869fb52352",
        "cursor": {
          "ref": "7bca8956-bae2-4cd0-ac5e-0e6894479b84",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "d30346db-0986-4be3-bf31-a4ebd6070bb6"
        },
        "item": {
          "id": "bb930db0-1a6a-4499-8a92-35869fb52352",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "b4b4b7a1-b43a-4c71-a0ed-a80f19c5e297",
          "status": "Not Found",
          "code": 404,
          "responseTime": 106,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d616d072-931b-495e-bf74-b7e94716b73e",
        "cursor": {
          "ref": "3af83be1-3d38-4cf2-9b3c-4bada13c2de1",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "57574fb5-6cae-4f5d-8f93-05a1e4917eb7"
        },
        "item": {
          "id": "d616d072-931b-495e-bf74-b7e94716b73e",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b3418d4e-8887-4c1a-ba5f-f3fd0bec5d54",
          "status": "Not Found",
          "code": 404,
          "responseTime": 5,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f1c181f-2de5-4a00-8df0-b3503850f332",
        "cursor": {
          "ref": "3b3bea90-1b3d-43c7-a757-acc804353289",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4414e515-e29f-44f1-be16-dfd26fd27313"
        },
        "item": {
          "id": "2f1c181f-2de5-4a00-8df0-b3503850f332",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "29986125-dab7-4163-a837-49b94e9f9374",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b076d82-7751-4d4f-9cb1-eb260ecaa22b",
        "cursor": {
          "ref": "33fbf7fe-ed36-48c6-9204-4042cbc7044e",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e0d0a062-644a-42f7-bcad-a6a51f399ccb"
        },
        "item": {
          "id": "1b076d82-7751-4d4f-9cb1-eb260ecaa22b",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "56bdc64d-6ac7-4db4-8808-a211213eeec6",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b076d82-7751-4d4f-9cb1-eb260ecaa22b",
        "cursor": {
          "ref": "33fbf7fe-ed36-48c6-9204-4042cbc7044e",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e0d0a062-644a-42f7-bcad-a6a51f399ccb"
        },
        "item": {
          "id": "1b076d82-7751-4d4f-9cb1-eb260ecaa22b",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "56bdc64d-6ac7-4db4-8808-a211213eeec6",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33533f17-4f28-4c35-a101-d8f0c09190f2",
        "cursor": {
          "ref": "1ad10825-4451-4b53-8956-37db743f7200",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "bf56ebc1-82a8-4881-b077-eb111b92d4d6"
        },
        "item": {
          "id": "33533f17-4f28-4c35-a101-d8f0c09190f2",
          "name": "identifiers"
        },
        "response": {
          "id": "c2ce05c5-7ca5-42d6-a618-e91eedbcbcdb",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "621f5213-77b0-474e-a151-4a46e3f678ac",
        "cursor": {
          "ref": "536b7fb2-c307-4171-900a-ad5a351e3fcd",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "557a19f2-9ba5-4c79-8fbc-5d9195e0ae5b"
        },
        "item": {
          "id": "621f5213-77b0-474e-a151-4a46e3f678ac",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "aa997b07-344f-46b0-99b1-d756b204a50e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "621f5213-77b0-474e-a151-4a46e3f678ac",
        "cursor": {
          "ref": "536b7fb2-c307-4171-900a-ad5a351e3fcd",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "557a19f2-9ba5-4c79-8fbc-5d9195e0ae5b"
        },
        "item": {
          "id": "621f5213-77b0-474e-a151-4a46e3f678ac",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "aa997b07-344f-46b0-99b1-d756b204a50e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e54a058-6b23-465f-8531-4c29bb90524b",
        "cursor": {
          "ref": "68938adb-b634-43c6-ae7e-aa90c561d540",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "9947b629-f26f-4767-8b50-892abe1d339a"
        },
        "item": {
          "id": "4e54a058-6b23-465f-8531-4c29bb90524b",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "bcb10965-8c7c-4938-a668-c074c10d7d32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cc67f54-0930-4a63-ab4b-704854f7efbe",
        "cursor": {
          "ref": "ceaa7469-73fa-461a-8f22-76ef9a0c59d6",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "398001bf-2e8e-44ad-8090-70fec23b9cba"
        },
        "item": {
          "id": "2cc67f54-0930-4a63-ab4b-704854f7efbe",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "d9245e4b-135b-4e47-8053-12acef9e6d99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdc8f3b3-ec90-4f04-a9ae-d2b3e13d3212",
        "cursor": {
          "ref": "7da28c8a-94b6-4732-a657-534a6e601e8f",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "410d7550-1636-469e-964c-bb58b651185c"
        },
        "item": {
          "id": "fdc8f3b3-ec90-4f04-a9ae-d2b3e13d3212",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "847236bb-816a-447f-8b61-81570b18b04b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8af22ff2-b488-4a93-bc05-2fec4ccfbbd0",
        "cursor": {
          "ref": "db3ca75d-0056-42e6-ac92-5ed1abd9f67b",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "d35ac388-e476-4c98-b469-ba18c7aaf566"
        },
        "item": {
          "id": "8af22ff2-b488-4a93-bc05-2fec4ccfbbd0",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "dcea43c2-37a9-40a9-b428-512238f94ad7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d00d369-2df9-4589-b483-e51044e93a84",
        "cursor": {
          "ref": "17cdfbf1-3773-4978-bc4b-1fafeb474771",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9f9b76db-6ee3-4156-8c2f-9328ae5f5e87"
        },
        "item": {
          "id": "5d00d369-2df9-4589-b483-e51044e93a84",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "80b5af58-680e-4a08-83d0-ee20a18e42c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a449d0e-4323-40b3-b61b-fc009e7671a8",
        "cursor": {
          "ref": "2e1a0708-7370-4da1-8ba8-f92c9cf05fd8",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8bfb524d-d2f2-429b-8735-94115b8f81cb"
        },
        "item": {
          "id": "7a449d0e-4323-40b3-b61b-fc009e7671a8",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "7e4bbbe5-1808-4d71-8370-e736f380ef66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c14f1935-bfd3-4c28-8e4d-9dbd11aa60bf",
        "cursor": {
          "ref": "7b77a70a-a825-491f-8f6e-ec911324f8fc",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "e9fc4944-f6c5-42a7-bd3b-ad98601776f7"
        },
        "item": {
          "id": "c14f1935-bfd3-4c28-8e4d-9dbd11aa60bf",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "1143558a-c000-4d4c-b8a3-b9d1f8262cd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "090aae45-3681-4656-aa46-d5fdf4bbe763",
        "cursor": {
          "ref": "f24932aa-f3a1-4e5e-9072-b1a876080e4c",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "e44790f1-6d06-4da9-b02e-5bb82a0b1251"
        },
        "item": {
          "id": "090aae45-3681-4656-aa46-d5fdf4bbe763",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "b72a4afa-b899-4372-b430-432ccc22d323",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3a974a0-730d-458a-8df6-adac4f76b3a0",
        "cursor": {
          "ref": "c868c7a3-f10c-4fc6-a7e9-f7f149599ea6",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "8a623ae7-f8a6-4458-a43e-26035ce8fd7b"
        },
        "item": {
          "id": "e3a974a0-730d-458a-8df6-adac4f76b3a0",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "310bb76f-b6a6-49c1-b4a8-472f2ea8a62e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21a2133c-a15d-44f5-910d-dc245136b57d",
        "cursor": {
          "ref": "12552104-d2d8-4360-9d1c-49a9465fe088",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "783c69fc-8285-4ca6-9cbb-8d0ff8685f58"
        },
        "item": {
          "id": "21a2133c-a15d-44f5-910d-dc245136b57d",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "33c8e213-e050-4317-86bf-0a844015a706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7036cf17-a2fa-4231-9744-3607eacf18c1",
        "cursor": {
          "ref": "1aa216bc-42a4-4e8b-80c9-77e4acfee9c3",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "890a50e8-2bc4-40cf-a56c-fb36109135eb"
        },
        "item": {
          "id": "7036cf17-a2fa-4231-9744-3607eacf18c1",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "f752af6b-72d7-430d-9e15-2fb96a553c9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e537f39b-e511-4e6c-9ae1-b09f2d24be3f",
        "cursor": {
          "ref": "cdb21e6d-7dcb-45d1-ae8b-8fdfe74e1b26",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "49b6c52a-d487-47e9-9285-1d1d9d4f7af1"
        },
        "item": {
          "id": "e537f39b-e511-4e6c-9ae1-b09f2d24be3f",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "7fe52483-913d-4a54-89d5-c4d88a3d4fb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71152a24-9eb4-4afe-9a37-653f2979215e",
        "cursor": {
          "ref": "cd79b37d-4a89-44db-bd29-391beebceb19",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "1f7d6f04-42e1-4393-aa03-b2f10fd9f9a1"
        },
        "item": {
          "id": "71152a24-9eb4-4afe-9a37-653f2979215e",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "37639b96-163f-4c7a-9f0d-c4ea535c580b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "debe1a3c-28a4-41b0-904b-8012910598ac",
        "cursor": {
          "ref": "da9872a2-29c9-4a24-b761-eb357eb9e0a0",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f794198b-485e-44c8-912b-d33a01e840ba"
        },
        "item": {
          "id": "debe1a3c-28a4-41b0-904b-8012910598ac",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "5b06fdb9-dbf2-4871-9108-0fbef7793b26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6b788f2-e0c2-481c-94a9-71e7b90bf321",
        "cursor": {
          "ref": "e75f2a78-d9f2-4c22-865a-edb012acffa7",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "58814243-131d-4f20-8ed4-964fd4f1dce8"
        },
        "item": {
          "id": "f6b788f2-e0c2-481c-94a9-71e7b90bf321",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "fc5bffa8-87ff-4056-b551-b6624a77b7eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "958d10d9-1e8f-4699-8832-ce626a874eb4",
        "cursor": {
          "ref": "391ddc92-8bef-49ae-a974-16063f52a95b",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "33c1349d-525f-4f4c-a73f-83c5fab32877"
        },
        "item": {
          "id": "958d10d9-1e8f-4699-8832-ce626a874eb4",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "55399964-19be-45b3-9cb3-47df70399c33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dc7e62d-db19-4140-9fcf-fe422bf708df",
        "cursor": {
          "ref": "9a736f15-24f0-43ad-acb3-47c67e6279b2",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "0808edee-dc81-4d83-98d5-56472b2e277f"
        },
        "item": {
          "id": "0dc7e62d-db19-4140-9fcf-fe422bf708df",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "e9ab1c78-d5df-4d19-a436-a8523772312c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b159436-7173-41d4-bb85-7792af4e7587",
        "cursor": {
          "ref": "7af29068-05c8-4a55-bc8e-de87d5bf14cc",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "b83d4343-a192-4e8a-a237-5462ff418257"
        },
        "item": {
          "id": "7b159436-7173-41d4-bb85-7792af4e7587",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "7d700ee0-0ce4-4891-a13d-adb384a105fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52deff48-46f3-49de-8203-191ce5519f72",
        "cursor": {
          "ref": "310a0dfb-ddfb-487d-858a-a3f6f6f12fb9",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "cb8ac08f-91ae-4d99-85db-a9f51e8a908d"
        },
        "item": {
          "id": "52deff48-46f3-49de-8203-191ce5519f72",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "3673877b-b1d3-438c-899c-24f146b9b706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76d2c272-451c-40bb-8c17-cd867f27c860",
        "cursor": {
          "ref": "0d8da84e-7977-4c18-9466-4d5ff2e781d1",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "f549a973-486b-41ea-bb75-ba98e5ce5968"
        },
        "item": {
          "id": "76d2c272-451c-40bb-8c17-cd867f27c860",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "66b3c234-ad71-4008-bb1a-318775602801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c499e072-40ff-4788-b317-c007a804d73d",
        "cursor": {
          "ref": "d103640f-b1a1-4152-9581-71069c66a33c",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a9b6767d-fe93-4797-8331-c3151c4e8d60"
        },
        "item": {
          "id": "c499e072-40ff-4788-b317-c007a804d73d",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "5a158051-d12b-45e1-a831-1abce4d3209b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "485037e8-1107-4aca-8ec5-8839360ca186",
        "cursor": {
          "ref": "062fabf9-a143-44fc-87ca-f119f079c5d1",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "eca834a9-476d-42ff-882c-2c6770a66e08"
        },
        "item": {
          "id": "485037e8-1107-4aca-8ec5-8839360ca186",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "03f01799-6a33-4806-ae57-efc676c24fda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13c16ec1-6559-48b8-ae5f-f9bdcb31ad5d",
        "cursor": {
          "ref": "ffac7d21-d64c-4283-b6d1-fef42a4b7a40",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d15e064d-26cf-4e65-abb9-0abd5d7735a3"
        },
        "item": {
          "id": "13c16ec1-6559-48b8-ae5f-f9bdcb31ad5d",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "60d658a9-f42e-48d9-abbc-f18fca268eb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "673f76e0-ed38-4a6b-9fd2-9878d18be943",
        "cursor": {
          "ref": "15a7f012-75bd-4faf-8a9f-3ead4ee4743a",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "90ee141c-6afa-4f9e-ac26-e6f7a4806f45"
        },
        "item": {
          "id": "673f76e0-ed38-4a6b-9fd2-9878d18be943",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "abc95ca4-ce15-4403-b380-90b138ccb2a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dc62f95-12d6-49f3-82a8-a7272782d0f5",
        "cursor": {
          "ref": "a642b19e-c7a1-42e2-afcc-2a1f038bb1b3",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "081b19fe-8758-4350-b992-2ea943e04bf5"
        },
        "item": {
          "id": "2dc62f95-12d6-49f3-82a8-a7272782d0f5",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "59314683-b24b-434d-a963-b5cfc7a43272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bca48dba-0efe-486e-993a-e4bace58f3a4",
        "cursor": {
          "ref": "a53c36e4-db6a-449f-b547-417edcc2362f",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "fe59c5e4-7a7e-475e-ab45-0e72c8b6a569"
        },
        "item": {
          "id": "bca48dba-0efe-486e-993a-e4bace58f3a4",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "96a048dd-ca9d-4ec3-93bb-34123b9a96b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a27c972a-97c9-44ea-9393-f993dd4e3783",
        "cursor": {
          "ref": "a9c456c1-1257-4c4f-ab6d-5400422df17c",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "e0173d99-373a-4fdb-a436-9d9fa30eb5d8"
        },
        "item": {
          "id": "a27c972a-97c9-44ea-9393-f993dd4e3783",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "89da45cf-7ea7-4cb9-8f34-c0a04c9080c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b9d2d30-c122-4861-a325-353900a2ef55",
        "cursor": {
          "ref": "a291eeba-46d1-44fb-a8bf-2f99ff7a7be4",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "8b0cbb8b-3a16-458b-b994-07c230451bc0"
        },
        "item": {
          "id": "3b9d2d30-c122-4861-a325-353900a2ef55",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "62277378-ff30-40b0-bbec-c8854e907c43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec0a6779-e8e4-4af0-9904-c286a0b4cc20",
        "cursor": {
          "ref": "a8a36e95-fc76-44c4-a606-588d0793907a",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "e035f294-9d37-4f45-954f-02256a3be854"
        },
        "item": {
          "id": "ec0a6779-e8e4-4af0-9904-c286a0b4cc20",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "d8373f61-461c-40c5-bd7b-66cac94ee471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77394f2c-cdc3-43ff-a9ce-da4967208a00",
        "cursor": {
          "ref": "395fb4dd-42c1-4e4b-993c-cc8be8bf21ad",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "2f5869e9-b8b9-438f-ac11-136eb2a1ffda"
        },
        "item": {
          "id": "77394f2c-cdc3-43ff-a9ce-da4967208a00",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "ff9f6095-e30a-4ae9-8167-c78e6e16cefc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf2e21e9-6a7f-447d-a20c-54da7b0530d3",
        "cursor": {
          "ref": "1ef86af8-ad45-46b5-bc12-afa83df958a1",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d286b8ce-b594-4739-a1c9-d101531297da"
        },
        "item": {
          "id": "cf2e21e9-6a7f-447d-a20c-54da7b0530d3",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "fe6a4aab-b734-445b-ad32-3522db40d174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "795fa5cd-a0e1-4e24-94b0-7fb49fda81ed",
        "cursor": {
          "ref": "89ed55e2-37bb-4feb-9ae8-15614497e234",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0bbf5feb-c7b1-450f-acbf-3b01b1257ff9"
        },
        "item": {
          "id": "795fa5cd-a0e1-4e24-94b0-7fb49fda81ed",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "087f0d6b-8df9-4e97-855b-74a216568cff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d384db10-0917-4950-b1b6-80a4e3f5003d",
        "cursor": {
          "ref": "f6288484-240b-4218-b61d-55907f620952",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "e6eec628-a3c0-43a8-9fcc-9db627874ba6"
        },
        "item": {
          "id": "d384db10-0917-4950-b1b6-80a4e3f5003d",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "6e3a19a4-d62a-4b5c-aea4-98203a5649a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dc08443-a63d-4b89-a612-cf1d69cb6fc1",
        "cursor": {
          "ref": "6abff09a-1391-48bf-a723-734c85094902",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "7b773cf0-4bfb-458d-8abe-cbaf6d7a36e5"
        },
        "item": {
          "id": "8dc08443-a63d-4b89-a612-cf1d69cb6fc1",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "f92f5678-be29-4010-8ad9-04ea7de166b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80669a78-df79-4cc7-ad38-6e48c311b6ae",
        "cursor": {
          "ref": "56028615-6109-4eb5-b9be-0ee1b2c9856e",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "430f67e5-0d1e-43a4-bc40-b7e7a331429c"
        },
        "item": {
          "id": "80669a78-df79-4cc7-ad38-6e48c311b6ae",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "2cfc670f-e363-4c70-ae70-825e9956a1cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "7129b82b-4e5d-4f95-a225-33c389421837",
        "cursor": {
          "ref": "2557baa0-5904-4463-b378-7366d98c45aa",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "9be51d4c-2cac-413b-9943-cf65de13640c"
        },
        "item": {
          "id": "7129b82b-4e5d-4f95-a225-33c389421837",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "92c23356-d5d9-46ed-aa72-29befe21cc7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14e2ac28-8bd6-4251-93df-a30de8ca8636",
        "cursor": {
          "ref": "b558b034-1704-44a1-a862-825a285e2ef9",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "ca12852d-12b5-4cad-beee-9efda6ef9c79"
        },
        "item": {
          "id": "14e2ac28-8bd6-4251-93df-a30de8ca8636",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "532a792b-cf3f-4bb2-b547-3f4c3f57ecff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "071c93d0-0dc3-4160-9b38-5de64cfa1ce4",
        "cursor": {
          "ref": "749e553e-8aab-48ba-90ab-e66b178efc6f",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "6afc1f8a-b87c-48bc-87be-c5543392c65e"
        },
        "item": {
          "id": "071c93d0-0dc3-4160-9b38-5de64cfa1ce4",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "0a9ba3eb-7b08-4079-b121-1fc8d0f90628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02251b4a-45f1-46e6-b162-40ad38a0871e",
        "cursor": {
          "ref": "5eacb3e4-8474-4e4f-98c2-e7017c4ed825",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "ec3edd98-021b-49ad-890a-0c581ad9af65"
        },
        "item": {
          "id": "02251b4a-45f1-46e6-b162-40ad38a0871e",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "8ae0e8f6-1d22-4ee5-b4aa-3969acf4f7db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08d46f6b-8b37-4a79-b4e0-cb876849d66a",
        "cursor": {
          "ref": "7f189aae-4f0f-45a5-bc42-f12f9b2a9fdd",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "1ec40838-9161-41c4-b608-f8dfd3998fe1"
        },
        "item": {
          "id": "08d46f6b-8b37-4a79-b4e0-cb876849d66a",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "528327c5-caef-44c6-96f9-77847b112b0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7acde6d-d01a-4e31-84dd-eafadadee152",
        "cursor": {
          "ref": "a4f0041a-f4e5-413e-9489-fff7bb2b04f8",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f1ab4bd7-6d3f-49ea-a490-246ca49a7e2d"
        },
        "item": {
          "id": "a7acde6d-d01a-4e31-84dd-eafadadee152",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "c8ebbb9e-e2b5-4914-b6cb-e547ea6ac371",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a93e05e5-f0a6-47ce-8b8d-b9c7be01c164",
        "cursor": {
          "ref": "3b44a6db-cbd5-4b0f-a2f3-a566ee219bea",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "efae80d9-8198-4b95-b526-11ffe8031cf4"
        },
        "item": {
          "id": "a93e05e5-f0a6-47ce-8b8d-b9c7be01c164",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "0c38e720-5022-49c4-8d62-fb1fa135a46b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "e8a63487-4d7f-4adb-aafa-9eda61e5025b",
        "cursor": {
          "ref": "6e66dafa-b459-4e87-bcdd-2fe2714e4034",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "b6d73094-87c2-44cb-a3de-3b56d06e0686"
        },
        "item": {
          "id": "e8a63487-4d7f-4adb-aafa-9eda61e5025b",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "cf59c931-1983-434c-85b4-4f935e347987",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e71aa0f-2c56-415c-ae07-831f0c67cdbe",
        "cursor": {
          "ref": "e94e5f46-dfbf-4163-b2b4-03fbe3eb5b90",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "95888626-83c1-4fc7-a873-1645fdc5f5b7"
        },
        "item": {
          "id": "3e71aa0f-2c56-415c-ae07-831f0c67cdbe",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "777ccdba-2564-4996-9cc9-7ac28a0b8750",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59201a72-60a8-45c5-b77f-f67407c249ca",
        "cursor": {
          "ref": "d4f37de2-9ba1-41fe-a0f1-b3863cfe1ede",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "62ab5ea3-03ed-463b-a94d-c7949446ad6a"
        },
        "item": {
          "id": "59201a72-60a8-45c5-b77f-f67407c249ca",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "5790c59d-9ad0-45d1-a54b-e7506077af87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "110a1b22-aa85-4fb8-a483-7d100fbfda25",
        "cursor": {
          "ref": "fa4ba25f-f8c8-44c1-9cae-0931a7fca751",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "7824a6e8-47d6-4a17-854b-f31152af2c20"
        },
        "item": {
          "id": "110a1b22-aa85-4fb8-a483-7d100fbfda25",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "fbb7bdbb-eacb-4db0-8e99-df235234e64d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f24ebec-87fa-4ee9-975f-8bc8ad024c3c",
        "cursor": {
          "ref": "93b84121-032f-4ef8-89f8-e6e6daf8c5c1",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "f5fb478e-1b0c-45a1-a73a-de4fabe606b7"
        },
        "item": {
          "id": "5f24ebec-87fa-4ee9-975f-8bc8ad024c3c",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "90a192a1-74c2-41a1-9cd9-40171728557b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8c4191b-16ec-463b-987b-6ca92388bbd8",
        "cursor": {
          "ref": "a64af91c-6206-43b5-b49d-430ba49fcadb",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "0f25b010-90ea-4670-85bc-aa10896fd449"
        },
        "item": {
          "id": "e8c4191b-16ec-463b-987b-6ca92388bbd8",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "71da6f9f-4b3e-4c30-ae3b-98738e5cf23d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0148ced-81e7-467e-a442-a07727a81bd6",
        "cursor": {
          "ref": "4501320e-4c4f-44bb-befe-4020d3e51139",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "852d2e27-9598-4f7a-a00d-9e7e0d71f634"
        },
        "item": {
          "id": "d0148ced-81e7-467e-a442-a07727a81bd6",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "34bb0e0a-d183-4c57-a653-eb38e21ac31e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "050edbba-fd48-407d-a628-049a142e0403",
        "cursor": {
          "ref": "2edc0f44-1092-45fc-bfde-98f85c642fa4",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "2ed18437-4aa4-405a-9528-ff52a4e39c55"
        },
        "item": {
          "id": "050edbba-fd48-407d-a628-049a142e0403",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "e908c155-19f5-48ae-bdb3-2aecc9ecec88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6ee7d38-0165-4e59-a552-b9a8085993c8",
        "cursor": {
          "ref": "9526196d-58b4-40e8-9ac3-afc7ea53ee86",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "d23062be-a813-4172-836e-d23efa4ac899"
        },
        "item": {
          "id": "e6ee7d38-0165-4e59-a552-b9a8085993c8",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "97b1708b-fc1e-4881-9d8d-843d0f640c5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3972cb88-070f-4249-a24a-3f9e3e725a1f",
        "cursor": {
          "ref": "c8de988b-9558-4b4c-b145-2b8bb27759d7",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "8f626d45-f363-46f8-a623-a6a2586779c0"
        },
        "item": {
          "id": "3972cb88-070f-4249-a24a-3f9e3e725a1f",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "15ed8351-08a4-4e31-81d9-969618066201",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f412cf65-5527-44ad-8ef7-be31977e396b",
        "cursor": {
          "ref": "cf5581e0-4402-4e8a-9964-6888ecd1ad8a",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "debed7e2-cedd-41bc-a1a0-ccc2eb6ed7ea"
        },
        "item": {
          "id": "f412cf65-5527-44ad-8ef7-be31977e396b",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "8465b6bf-4a82-455a-902b-e05e7d6bb68d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "855433fd-e247-4e63-8f36-70390ab7d0ef",
        "cursor": {
          "ref": "c140db4e-db47-46b5-ab95-f1b44a840028",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "a9fa707e-c971-4c6c-9a08-a09ad9f8869f"
        },
        "item": {
          "id": "855433fd-e247-4e63-8f36-70390ab7d0ef",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "e4369886-5081-40f8-8053-c7593893d0d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f6c9940-adfc-478f-8d92-d2d38093ff27",
        "cursor": {
          "ref": "0d160615-bce0-4c94-bdec-bc69cf20a8b9",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "8d526fa9-5a78-42e2-9f47-a2e0570f0d07"
        },
        "item": {
          "id": "9f6c9940-adfc-478f-8d92-d2d38093ff27",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "94723346-ac13-4a99-ac39-9b356c9fcd86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4382ebb5-14a0-4c6c-b659-6f78f82e5b65",
        "cursor": {
          "ref": "a801838c-3b28-4cc8-ad37-a40213e0b27d",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "ed098da6-02c8-484d-94de-c03901015c20"
        },
        "item": {
          "id": "4382ebb5-14a0-4c6c-b659-6f78f82e5b65",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "a542029d-f741-45f3-9177-dd247a4c274b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d85a802-45f3-448a-a4f1-a9e75c760232",
        "cursor": {
          "ref": "018f359f-508a-4eaf-8911-cf18e46cdd48",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "0578e33a-49c0-4332-b2ef-bc4c44ddf3d9"
        },
        "item": {
          "id": "9d85a802-45f3-448a-a4f1-a9e75c760232",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "bd1b3c1c-3548-47bd-83a2-6380b263090b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad2a5102-9eb9-4ba6-8523-9ba0a3edd3a9",
        "cursor": {
          "ref": "53287d92-63ed-40ea-bf1b-282649d126de",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "e546ddc9-88b0-4f10-9f47-3a8f23b6687c"
        },
        "item": {
          "id": "ad2a5102-9eb9-4ba6-8523-9ba0a3edd3a9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "fa6f2178-7972-47a1-91cb-81bcea212a8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc6a6c89-b82c-41df-bf45-ba3695c7ad93",
        "cursor": {
          "ref": "0eb4524c-b1df-4f2c-a058-3451960f284c",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "7fdfae29-855e-4da1-9137-e772f300bd9f"
        },
        "item": {
          "id": "fc6a6c89-b82c-41df-bf45-ba3695c7ad93",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "2421da84-7843-4282-aefe-a8a2e0242d8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eacb568d-8da2-4d30-8ffd-9ff22559a194",
        "cursor": {
          "ref": "ed5ff3b6-55e7-48c4-bb8f-99b618134895",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "d9a2e67b-53e5-4dc1-bdf2-d46f5335431f"
        },
        "item": {
          "id": "eacb568d-8da2-4d30-8ffd-9ff22559a194",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "9c5be8dd-2220-4783-98b3-2e955938ef42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d231e16e-6bea-4410-a4e9-417a6a88f153",
        "cursor": {
          "ref": "58abbbc6-f467-40ab-ac8c-c02ab9810d87",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "dd3fd8cf-d781-4300-bdd0-9c82b5289d82"
        },
        "item": {
          "id": "d231e16e-6bea-4410-a4e9-417a6a88f153",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "d4f63865-1763-4682-b1da-61c89cb0ba7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba4032e2-54d7-47d6-be21-b91643a339cf",
        "cursor": {
          "ref": "f53f759c-99ae-4365-8087-e6c0e6d9a1ba",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "901e3e51-04ad-470b-80ad-fd32bc4b2bc0"
        },
        "item": {
          "id": "ba4032e2-54d7-47d6-be21-b91643a339cf",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "a1540efd-11fe-453f-a99d-487ddf4cdff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 684
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78f05d09-47fd-43f2-a597-db751e6e8c5d",
        "cursor": {
          "ref": "bf93cc4e-e109-4757-8f5c-d3b85db0cb36",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "f5fc0d8c-578d-432f-9f05-1ecc0213d263"
        },
        "item": {
          "id": "78f05d09-47fd-43f2-a597-db751e6e8c5d",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "f16e2340-f472-4640-af2e-df53e782f7db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eccdb20-b90f-4184-9253-99fa01f13bfc",
        "cursor": {
          "ref": "17072e07-2f98-47b6-9c7f-49f29927d2a1",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "673515db-1431-46ca-af4f-1d70ad8caf0c"
        },
        "item": {
          "id": "1eccdb20-b90f-4184-9253-99fa01f13bfc",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "173f20f4-8519-4b96-9fa1-f026ad5322ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77c18eb3-a4bb-482b-8874-4221f48fbed3",
        "cursor": {
          "ref": "0e40e3e1-4666-4c9a-ae7d-68122d61c317",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "4988c75a-0f2c-429a-b58f-b168f9b0c5f4"
        },
        "item": {
          "id": "77c18eb3-a4bb-482b-8874-4221f48fbed3",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "4df279b4-c095-41ab-8d31-8144f595761c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "276b621f-a512-47f2-a62b-9279fdced1a1",
        "cursor": {
          "ref": "680b36cb-0871-4e42-b568-bbc9f7358d68",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "c44c48b8-5eec-4ab7-a465-553753431975"
        },
        "item": {
          "id": "276b621f-a512-47f2-a62b-9279fdced1a1",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "17720347-2694-4a7f-b4d8-498a27ebfab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e8c9e09-d8e0-4655-bbaf-5cb1903549a9",
        "cursor": {
          "ref": "086d0e75-d816-4322-891d-28709aa12064",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "0753e154-aeda-41a7-9e07-7d3ef5fa3b6b"
        },
        "item": {
          "id": "6e8c9e09-d8e0-4655-bbaf-5cb1903549a9",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "6ddd2d8b-f2f9-47b9-9aa9-f92c631fdd5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff64cf04-c879-4037-91f2-9c2edf84d948",
        "cursor": {
          "ref": "bedfd1f3-69ed-4e18-a049-43635c857b14",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "4ebe63d8-1d1c-4e91-a7b1-805ec30637a2"
        },
        "item": {
          "id": "ff64cf04-c879-4037-91f2-9c2edf84d948",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "fa2088df-f2cc-4e14-8573-7f24fc9c9e23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be637111-86aa-45d0-832a-b021d420041e",
        "cursor": {
          "ref": "a8953989-e9ae-4d17-9dfb-2c5acccc5696",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "0f938209-5827-4c27-b3fc-170825549229"
        },
        "item": {
          "id": "be637111-86aa-45d0-832a-b021d420041e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "744c3a51-529a-4358-aaab-121d408accb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6e0a63f-d51d-4c47-bc5e-0959d16e56e1",
        "cursor": {
          "ref": "2440aaa1-3062-47df-96d8-d73bfef135a4",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "a5f49698-7406-4c8e-9b1e-9fa022ddb6b1"
        },
        "item": {
          "id": "d6e0a63f-d51d-4c47-bc5e-0959d16e56e1",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "259e1c01-ed4c-446d-ad9c-d3d2d4a65807",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "845461b0-ee42-481c-bb65-67c0aa5ceaff",
        "cursor": {
          "ref": "677310cd-6011-440a-8ac7-8d0f9f5e7f2b",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "30acf8d5-677b-4762-8dcf-11c4694c6032"
        },
        "item": {
          "id": "845461b0-ee42-481c-bb65-67c0aa5ceaff",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "4b956bda-4b42-47d0-a5b4-3bb056e24d02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1848f9d-822d-4ae9-8c33-7be5d0873556",
        "cursor": {
          "ref": "19ef02fe-c590-44fa-9248-544815c2c7bd",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "0fe21032-1588-4cd7-ba43-42404e66799d"
        },
        "item": {
          "id": "e1848f9d-822d-4ae9-8c33-7be5d0873556",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "7aff3a9b-7b0c-4000-a45c-524bedc2bb96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7934fafe-e65e-4e7c-815f-1ad7e085cdef",
        "cursor": {
          "ref": "00e896db-3f7d-4cec-af16-7e87957a1925",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "61ad0e57-ec98-4458-a0e8-cbf2db829395"
        },
        "item": {
          "id": "7934fafe-e65e-4e7c-815f-1ad7e085cdef",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "f9813f54-b818-4698-a493-f52542028681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f62f1d1-081f-4275-9e99-c69563e9878a",
        "cursor": {
          "ref": "b9b42a34-9d8e-493b-b42a-3787915294dd",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "c81e130a-7848-4f5a-9572-ce35cfec16a5"
        },
        "item": {
          "id": "9f62f1d1-081f-4275-9e99-c69563e9878a",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "9cc5dca1-da6a-4a43-a2ae-df7d8fb9ac7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c0d4bf6-ca78-4658-9511-0cc18769ed86",
        "cursor": {
          "ref": "3ad55472-8e95-4e59-a8bd-78e246547422",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "2cadc53e-25c0-48a2-8ac2-f68ef7e68fe0"
        },
        "item": {
          "id": "3c0d4bf6-ca78-4658-9511-0cc18769ed86",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "1065ce6a-deb3-4669-9c2d-127da400271b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ec481de-1ae0-4f00-ae3d-576ad8cce8b3",
        "cursor": {
          "ref": "6a5658c3-e60a-4e94-bdeb-7186161c8a7e",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "f5ec853c-d3f1-4870-b431-b33acbdd7604"
        },
        "item": {
          "id": "2ec481de-1ae0-4f00-ae3d-576ad8cce8b3",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "a496e6c0-1c65-498c-84c2-3d98b2793a52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adb03571-4d44-42d0-adac-b0a9e484493c",
        "cursor": {
          "ref": "9b036ca9-b7e5-432e-b5e3-f0b9c9aaad31",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "c52f6f53-bbde-49a9-9961-ee1ddfff1efa"
        },
        "item": {
          "id": "adb03571-4d44-42d0-adac-b0a9e484493c",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "d5a75694-4277-48a5-ac25-36e062a36cf5",
          "status": "Created",
          "code": 201,
          "responseTime": 23,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "7e142d90-8b2e-4ce3-883b-94e138b552a3",
        "cursor": {
          "ref": "cef7233c-05ec-42e5-9058-ed9c3b5f01c7",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "79bdf165-a93d-4cba-87ea-b4b0081839c2"
        },
        "item": {
          "id": "7e142d90-8b2e-4ce3-883b-94e138b552a3",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "ba1216cf-d41b-4480-988f-70aeb67a0a81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49d4af40-9e68-463a-b627-8b53262ad466",
        "cursor": {
          "ref": "002b5424-9004-4f17-ae6f-c96edd78b8db",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "f771d3d1-88e4-403b-aa28-111f7cf4101e"
        },
        "item": {
          "id": "49d4af40-9e68-463a-b627-8b53262ad466",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "dbb640e6-f507-435d-84d5-c193808a19ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de76dd37-47a8-4ce9-9983-06cf2ce5aaac",
        "cursor": {
          "ref": "d7c76730-bcd8-46a1-b190-91f246af38c5",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "d1a6d2b9-a6a3-4d3c-8b2f-ae25ecdae097"
        },
        "item": {
          "id": "de76dd37-47a8-4ce9-9983-06cf2ce5aaac",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "684dbc1c-11d2-4913-a879-bc3a242c1422",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17d3c3c3-4faf-491e-8940-fe2b56c1df2d",
        "cursor": {
          "ref": "cde44c65-b5f2-46c3-9670-bee3a0e5fe57",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ad6970e0-5999-4bd5-a8e6-e6c18edbb874"
        },
        "item": {
          "id": "17d3c3c3-4faf-491e-8940-fe2b56c1df2d",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "08c8a38d-4a4f-4033-bb5e-b5411c6ec3b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 514
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d0b1e64-d022-4118-9053-c488493d42e8",
        "cursor": {
          "ref": "27106733-2c2e-4bb0-ab0d-66772ea3b5e5",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "816b03a6-7c6f-462f-bbb5-cbaed8abad27"
        },
        "item": {
          "id": "7d0b1e64-d022-4118-9053-c488493d42e8",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "9a158e8d-469a-4306-ac62-28d6c75df6e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6744b61-f009-4bd8-8b79-4337f5d1b9e7",
        "cursor": {
          "ref": "75270f13-274a-40bc-9fc1-917e1e484ce3",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "46a18370-b54a-4d5d-8ac1-62734aca870f"
        },
        "item": {
          "id": "c6744b61-f009-4bd8-8b79-4337f5d1b9e7",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "9999e664-50ec-4b0e-a6cf-64856446b93e",
          "status": "Created",
          "code": 201,
          "responseTime": 21,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "14d0fc83-780f-4cc8-9b23-266db3094138",
        "cursor": {
          "ref": "d4feee45-0192-4772-ae64-f07fe2bd63ed",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "4ec57a95-6490-473d-8052-b90052167313"
        },
        "item": {
          "id": "14d0fc83-780f-4cc8-9b23-266db3094138",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "d9286b6f-7014-4263-8706-dd0136841777",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b02d9442-3bbf-46b5-a8bb-a5446eeff2c2",
        "cursor": {
          "ref": "9365c43e-8f14-467f-87ae-fb7bd150f012",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "4c3a6dba-6ff7-4729-a731-2f506356afdb"
        },
        "item": {
          "id": "b02d9442-3bbf-46b5-a8bb-a5446eeff2c2",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "17678b7b-e603-4fea-bb8b-24100ad1bdfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7523b8df-ad09-45bf-8719-29ad700d9615",
        "cursor": {
          "ref": "5cddda6d-ad0d-4c13-b48f-2d641d263f02",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "da146c57-779d-4caa-b950-d3072fd7dfde"
        },
        "item": {
          "id": "7523b8df-ad09-45bf-8719-29ad700d9615",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "42969010-71f2-4c5e-8bfb-fca719426089",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42423076-c56d-4486-aa47-d86df4ab4fe8",
        "cursor": {
          "ref": "02fc9cdd-e831-48c1-b2f1-f36e04637bc5",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "91381ee4-7a5d-4821-9f7c-1098069c14f7"
        },
        "item": {
          "id": "42423076-c56d-4486-aa47-d86df4ab4fe8",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "4d78d5ed-244b-4da0-9266-7917270fbb97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd95ceb6-93c1-45c9-9d8b-808aa1f21198",
        "cursor": {
          "ref": "f794b36d-9315-4c86-8a4c-c22792242b3b",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "4e4a1daf-7c9d-4b76-b4fc-7ef3bf51e8ba"
        },
        "item": {
          "id": "fd95ceb6-93c1-45c9-9d8b-808aa1f21198",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "b63fbc22-7814-4fe1-a5d7-2e349f239881",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9936bb1e-389b-44bc-9dbc-b78267f6f70c",
        "cursor": {
          "ref": "21f7e0d0-b5ab-491f-ae39-244a6b76c679",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "af5e78db-fdfe-456d-b41f-3b7d4f481c1b"
        },
        "item": {
          "id": "9936bb1e-389b-44bc-9dbc-b78267f6f70c",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "707c85dc-e6ce-4960-aaf6-a41cf9272f43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef102988-6f49-452d-b1cd-4701257fb9e6",
        "cursor": {
          "ref": "017af48e-c919-4126-a9a9-f7001719003e",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "42f652d4-dc91-46b9-a1c2-19a1115841ff"
        },
        "item": {
          "id": "ef102988-6f49-452d-b1cd-4701257fb9e6",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "fbe4b230-3835-41bb-89d6-f18c14aaf295",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a37aa78d-d2a0-40ff-917a-93cadd0f3a30",
        "cursor": {
          "ref": "28029359-aeb4-45cc-a5b5-f9dabf8f7951",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "025d59f2-1dbf-4eb3-8215-752e06cdd2ef"
        },
        "item": {
          "id": "a37aa78d-d2a0-40ff-917a-93cadd0f3a30",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "f2b94147-2413-43d7-9140-89bc8dac0642",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d936f17-7f16-4158-a02c-b9c0faf41e5c",
        "cursor": {
          "ref": "abcf1dba-91cb-482e-a079-6f07ee81620c",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "5e7b0762-a02c-43c9-892d-56e63a07e862"
        },
        "item": {
          "id": "4d936f17-7f16-4158-a02c-b9c0faf41e5c",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "33f25217-23f9-47a6-a812-11eb2df56e49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "25fe04c8-b717-410f-9f9e-06ebd459faa0",
        "cursor": {
          "ref": "5a39ba59-f5b4-405a-87a2-6c0a4c4fd08e",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "55f8a978-7adf-4e9d-9a54-b965f67c27bf"
        },
        "item": {
          "id": "25fe04c8-b717-410f-9f9e-06ebd459faa0",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "c332727a-c67b-4321-99ac-10c3ea6bd634",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "59958a79-c04d-4868-ae67-8e9aab06499e",
        "cursor": {
          "ref": "68b68c92-0bc9-4058-84b7-547b5fcdd388",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "6c1ab64d-0afe-4968-9a09-304ec0ac5d7f"
        },
        "item": {
          "id": "59958a79-c04d-4868-ae67-8e9aab06499e",
          "name": "credentials_issue"
        },
        "response": {
          "id": "f67a4e84-484e-4a3e-b80a-56f235fe1c3a",
          "status": "Created",
          "code": 201,
          "responseTime": 32,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "4841f56d-f83f-47a8-9474-07895a1c6689",
        "cursor": {
          "ref": "890b66cf-8d74-4886-bc2e-3c8c5d8be29a",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "47b6ea15-c256-40e2-bd8d-f5537422ec2c"
        },
        "item": {
          "id": "4841f56d-f83f-47a8-9474-07895a1c6689",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "51658b42-38ab-4584-99c4-a29461c6d401",
          "status": "Created",
          "code": 201,
          "responseTime": 22,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "eca8df48-24c5-43c8-8976-0002dbac5358",
        "cursor": {
          "ref": "911f7fc0-2bd2-4bd2-9602-8305ee1291a3",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "5e61ccf6-2e1d-4640-81f5-05b3dfd99503"
        },
        "item": {
          "id": "eca8df48-24c5-43c8-8976-0002dbac5358",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "f7ce41b0-e4f6-4f0e-b091-0bef347b5691",
          "status": "Created",
          "code": 201,
          "responseTime": 22,
          "responseSize": 665
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccafe0c7-7958-40ac-a549-bedde613264b",
        "cursor": {
          "ref": "c96c8da9-c248-466f-a648-dafceef8f7a3",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "f976c855-5424-401e-a274-1812d4502bcb"
        },
        "item": {
          "id": "ccafe0c7-7958-40ac-a549-bedde613264b",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "7e3167de-77b3-4210-8528-c56853d27a2f",
          "status": "Created",
          "code": 201,
          "responseTime": 21,
          "responseSize": 633
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd053af8-036a-46dc-9792-76864e1d8b2b",
        "cursor": {
          "ref": "f5116ba6-6d34-48e3-9266-d58eb0084735",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "08e29497-0d7d-4cdf-89e3-2ae6443b2700"
        },
        "item": {
          "id": "cd053af8-036a-46dc-9792-76864e1d8b2b",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "ebf41a85-dd08-4ae6-b8c2-9229bef7cd00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "b104a296-fe77-497c-8896-bbb0b3131a7f",
        "cursor": {
          "ref": "c0b402f9-b756-4d07-8654-33e5f51e78e6",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "09ad5879-a56f-4443-a4f2-c18552fbfd85"
        },
        "item": {
          "id": "b104a296-fe77-497c-8896-bbb0b3131a7f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a35d0833-bc12-4a18-b317-91f7808c39ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b104a296-fe77-497c-8896-bbb0b3131a7f",
        "cursor": {
          "ref": "c0b402f9-b756-4d07-8654-33e5f51e78e6",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "09ad5879-a56f-4443-a4f2-c18552fbfd85"
        },
        "item": {
          "id": "b104a296-fe77-497c-8896-bbb0b3131a7f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a35d0833-bc12-4a18-b317-91f7808c39ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd1e959a-12ad-4b91-b408-2029bb81df2d",
        "cursor": {
          "ref": "bc866d29-ec7e-414e-84a0-a14a069daf8f",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "3d6be445-7d87-447b-a97f-f742db0f4fe9"
        },
        "item": {
          "id": "bd1e959a-12ad-4b91-b408-2029bb81df2d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "badec0e4-7693-488d-af39-a3d9f0866f8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 307
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b992c07-1a3c-4053-9d8c-27ad75c60b5c",
        "cursor": {
          "ref": "501f9155-2160-49dc-9c2c-2400517887b5",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "f803be8e-7b7b-4ffc-8212-69095802c7a3"
        },
        "item": {
          "id": "9b992c07-1a3c-4053-9d8c-27ad75c60b5c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "1617a50a-c4bd-449a-94e0-064f5b902c84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 306
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69c8c190-71bb-44bc-b36f-2ecf00da7ea4",
        "cursor": {
          "ref": "399737ee-aeeb-446d-9c23-c4b717f28df2",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "edc880eb-5572-4cfc-873f-dbad4c9f2702"
        },
        "item": {
          "id": "69c8c190-71bb-44bc-b36f-2ecf00da7ea4",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "4d944edd-750d-4747-b6a0-b26df3850449",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aa4348e-09c0-45f7-a7db-6296e8893a32",
        "cursor": {
          "ref": "5a821d7e-8bf1-455a-976d-2f38dc11816d",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "b4e4b989-a981-4452-80c0-1f5a9ce0bd67"
        },
        "item": {
          "id": "2aa4348e-09c0-45f7-a7db-6296e8893a32",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "3f683e3b-0261-426d-95f1-3a570ba5ac14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0949468f-3d41-4d19-b2c9-cea1ea1b11c4",
        "cursor": {
          "ref": "487cda44-dcf0-4ab9-b5da-b7273d6439ca",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "7e406fd2-bf77-493b-b2a9-deb813765111"
        },
        "item": {
          "id": "0949468f-3d41-4d19-b2c9-cea1ea1b11c4",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "4836f76d-167e-4015-b55d-35cbbe358a1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "107ad4a8-174b-478d-aa55-5b623215a049",
        "cursor": {
          "ref": "b11a8b9b-2887-4f1a-9f59-45259600f6b7",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "088526ff-1518-4066-a94b-68490e47f560"
        },
        "item": {
          "id": "107ad4a8-174b-478d-aa55-5b623215a049",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "5b8da6c5-8bd8-468d-a2ea-50382733b189",
          "status": "OK",
          "code": 200,
          "responseTime": 3,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "7ec50fee-a7b4-4933-b26d-7929cb504f2c",
        "cursor": {
          "ref": "64405f50-8ded-4d83-81a8-8468ea66c6bf",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "4de73d15-8546-4fa2-8d6a-191d59e4c4b7"
        },
        "item": {
          "id": "7ec50fee-a7b4-4933-b26d-7929cb504f2c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "26c5410a-211c-4943-a68b-c4d26581d147",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18d09881-1c82-494d-a3ff-5f9eb2f8575f",
        "cursor": {
          "ref": "7a348c8c-f7fe-4367-83a8-983363cc2fb4",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "538b0318-1bd6-44ce-af25-609e94cfe833"
        },
        "item": {
          "id": "18d09881-1c82-494d-a3ff-5f9eb2f8575f",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "446412a7-c99e-474f-82c5-b1e138ed2a76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c38e9492-83f8-498f-ad0f-78deac5cb92f",
        "cursor": {
          "ref": "14ccc28b-96c2-408f-92d6-05ef260a6267",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "8ee78c61-1fa8-4b79-88f6-03ebac11a295"
        },
        "item": {
          "id": "c38e9492-83f8-498f-ad0f-78deac5cb92f",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "f27c5d0b-fee0-4d5e-93bf-6f39823a444a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7768386a-77c0-4149-a7f8-88884b8c3163",
        "cursor": {
          "ref": "e84c4253-1db6-4334-a02a-c71c6c021e1c",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "3a02d12d-a995-42d2-bd4c-366ed5198325"
        },
        "item": {
          "id": "7768386a-77c0-4149-a7f8-88884b8c3163",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "d0654012-f3d2-4b53-9fa0-53d75c5f8fb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5497907-0718-43dd-b27e-0fd2062d3bc9",
        "cursor": {
          "ref": "8ff26bb4-66db-49d2-95d3-6dcd6f12a0d7",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "d55d7812-22c3-48c3-be6f-a1d948cb053d"
        },
        "item": {
          "id": "f5497907-0718-43dd-b27e-0fd2062d3bc9",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c35cbcc7-1036-4b16-9f30-1051e2644997",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdbd2af8-b163-4283-ab66-aac1d6c3c7e1",
        "cursor": {
          "ref": "4cde4063-c2b8-48df-9f56-bb84051a3bb5",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "4f83adbf-911a-4ddd-b336-c2654e87031d"
        },
        "item": {
          "id": "fdbd2af8-b163-4283-ab66-aac1d6c3c7e1",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "2ac30475-a751-4c36-bacd-7990c20ff961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84ccaff0-ae8a-4f7e-8b0b-9bd79ca13407",
        "cursor": {
          "ref": "b9a5f88c-4fd7-45c1-972e-3af098aea9bc",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "5de848da-38d4-490e-b3fb-547f575ad292"
        },
        "item": {
          "id": "84ccaff0-ae8a-4f7e-8b0b-9bd79ca13407",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "5993e966-ce9e-4329-b7ba-8e06483d80bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "855581da-06f6-4ded-90ee-aa78b5fb4f93",
        "cursor": {
          "ref": "33ee134a-2769-451f-a375-acdf7287a049",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b24a3838-fd37-44a3-b33e-f8f5a531398b"
        },
        "item": {
          "id": "855581da-06f6-4ded-90ee-aa78b5fb4f93",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2314b30e-7b30-40b7-83a6-5c72f134d706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5799d961-d921-47e5-a74f-9b7e4524e524",
        "cursor": {
          "ref": "9ae5c8da-554d-4c67-85c4-c5ca5cb101e6",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "f0db47bf-60ea-4364-8add-190bb45c2e00"
        },
        "item": {
          "id": "5799d961-d921-47e5-a74f-9b7e4524e524",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "4f60aa8c-8cdd-442f-8175-b56797115d74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34973122-a80b-43ca-b930-27c435d51302",
        "cursor": {
          "ref": "cf313d3e-0b4b-4301-9308-4a4936259eea",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "14a259e8-f9bd-407b-b91c-66de3027408a"
        },
        "item": {
          "id": "34973122-a80b-43ca-b930-27c435d51302",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "339032a9-622a-4091-ae5f-bdee4ade9b67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8a39eac-786b-4d77-9c4d-0405b49a074d",
        "cursor": {
          "ref": "06a1979f-115d-4b29-a461-5ff5ca34baf0",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "4f6b29ec-1c90-40f9-a795-1530782a4a97"
        },
        "item": {
          "id": "a8a39eac-786b-4d77-9c4d-0405b49a074d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d63d3627-107b-428d-9ad6-0bab0f743e95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73ab14d1-3253-40e8-be9e-5e382d863e83",
        "cursor": {
          "ref": "e10a45c8-49a0-4709-bb26-931f8672fd29",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "52e557a4-b244-4251-9335-a05ed6b641b0"
        },
        "item": {
          "id": "73ab14d1-3253-40e8-be9e-5e382d863e83",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "4b3da557-a007-4f5d-8423-d575e8ddebcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cddd47c7-9578-4492-91b0-f1956a20b658",
        "cursor": {
          "ref": "ca042a9f-6bbd-4390-9166-ff1d6218d176",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "46673940-349c-411a-99d4-ebfd63bc159b"
        },
        "item": {
          "id": "cddd47c7-9578-4492-91b0-f1956a20b658",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "5152e5f2-7e76-41de-a398-1130124beccc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f150534f-6de7-450e-8883-60b4759b14e3",
        "cursor": {
          "ref": "17b2f2ee-4835-486b-a0ea-fb57fd1ae036",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "003d1294-4da4-440a-b9d0-fe37df3b2ec9"
        },
        "item": {
          "id": "f150534f-6de7-450e-8883-60b4759b14e3",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "dea41f6d-6f40-4b5f-a261-21383f9dbacb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf203e3b-8d6c-405b-87b9-04470cd7e3a0",
        "cursor": {
          "ref": "5e365551-3932-4dda-a2cf-a883d0bd6631",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "f3eaab2d-9154-4dcc-8f4f-d103cef6e57f"
        },
        "item": {
          "id": "cf203e3b-8d6c-405b-87b9-04470cd7e3a0",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e3cf5b2a-e2ba-4357-860c-828447b8061e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68087487-58d9-486a-9eff-70161ffaff7b",
        "cursor": {
          "ref": "d3cc9e2a-ad49-46ef-9aad-12b4d22a9b2d",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "999d36c6-3832-4bda-b0b7-8601371dd774"
        },
        "item": {
          "id": "68087487-58d9-486a-9eff-70161ffaff7b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "edfb6c2e-2190-4a7b-a80f-dc9503da4ddd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66707b28-50b8-45dd-9d9b-18ec5360e030",
        "cursor": {
          "ref": "26340ed1-8cd7-4e3e-861f-7513188dd174",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "b48fd3b7-9dde-4f31-9281-271f96b41589"
        },
        "item": {
          "id": "66707b28-50b8-45dd-9d9b-18ec5360e030",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d6d7df4e-76e2-40ee-81e3-721b12d910e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4abc966-efe0-4f94-9348-ae91efad19a6",
        "cursor": {
          "ref": "9b8af64b-22ff-437a-b58d-7da465648496",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "a1d4b5e5-19bf-4104-94ea-160434ed475f"
        },
        "item": {
          "id": "b4abc966-efe0-4f94-9348-ae91efad19a6",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a61fe9da-7357-4d5f-b953-3774b6c90a1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48111aa5-3a7b-41ab-aa8a-0a6a2726a24d",
        "cursor": {
          "ref": "7ce1e335-390f-4ab3-849b-c2c7cbb19935",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "1ee3822f-23dd-45c8-8ea1-65f7ba9ea483"
        },
        "item": {
          "id": "48111aa5-3a7b-41ab-aa8a-0a6a2726a24d",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "30503346-aec1-4c18-812b-0f260709ee4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "937bb4f9-c1a7-4fa0-ac97-9d090b5cd41b",
        "cursor": {
          "ref": "ac988915-6441-4a52-9663-b3092fccd41c",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "340e6c81-1b71-402d-94bd-c96fa7254b58"
        },
        "item": {
          "id": "937bb4f9-c1a7-4fa0-ac97-9d090b5cd41b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "4df09c69-813f-4be1-a049-9a782796f417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9848d2a-194c-4196-974d-a1aed07391a6",
        "cursor": {
          "ref": "ef963ea8-18fc-4ea7-9ab6-86176c944973",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "a5c076e1-f53a-4609-a945-5b7de1af1076"
        },
        "item": {
          "id": "a9848d2a-194c-4196-974d-a1aed07391a6",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "730b92a4-7f2d-492e-8f8f-af8e31a98b83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c61d3459-a7d1-4c44-8049-e83d671d80f9",
        "cursor": {
          "ref": "1ee8fc79-26d3-4699-96c2-d3fd6cfc87c9",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "3193022d-b82c-4461-ab43-39b0142e3f60"
        },
        "item": {
          "id": "c61d3459-a7d1-4c44-8049-e83d671d80f9",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "5ecfb65c-7185-440b-8c9a-45fb51deab63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72c26f2a-0af6-4e78-81c4-ea6401a3ddc3",
        "cursor": {
          "ref": "623ae7e6-6517-4a96-8ad2-91df81887d5c",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "842da7bb-6797-48c5-a231-23cf985aea66"
        },
        "item": {
          "id": "72c26f2a-0af6-4e78-81c4-ea6401a3ddc3",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "7dd8d22f-d409-418f-ae92-8a750be7f9cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaec7fd3-8582-49cd-8f85-5f9e32186e6a",
        "cursor": {
          "ref": "72a01a55-41f8-470c-902e-6bc0e444606f",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "8284e3cb-dc80-4fd2-a76d-9ce1b5eeebe7"
        },
        "item": {
          "id": "aaec7fd3-8582-49cd-8f85-5f9e32186e6a",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "3925f1ee-ab86-42da-8733-7b1286d5bd24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "523766a9-438c-4d4f-87f9-9e0326f3f548",
        "cursor": {
          "ref": "8ffd6786-de60-42e2-a3cc-d29147a470e8",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "0ca005ce-e751-43a6-be88-9508015bd1ab"
        },
        "item": {
          "id": "523766a9-438c-4d4f-87f9-9e0326f3f548",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "0446fdca-21af-454b-ba57-959f2453d2c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbe65430-40a5-4067-854b-4d688cc32ddc",
        "cursor": {
          "ref": "558aab7b-9c0c-4797-8b5d-381ca8033290",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "d9aabadd-af05-49be-8ff3-2f61504f27e7"
        },
        "item": {
          "id": "bbe65430-40a5-4067-854b-4d688cc32ddc",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "62b6a6bd-fe1c-439f-83f6-cb3da1fb96f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "2fb9e2e5-e6c8-47fd-9793-7ed784fad014",
        "cursor": {
          "ref": "51f25fdb-0fb6-4a2f-8762-9855bceb1076",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "2100ac00-2dab-41f0-892b-8227e38f596c"
        },
        "item": {
          "id": "2fb9e2e5-e6c8-47fd-9793-7ed784fad014",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "925f6fd4-1b55-4899-84bd-671db0683723",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "f2b38596-3afa-4993-a036-ec27f554563c",
        "cursor": {
          "ref": "024a4bf2-8e9b-4432-a20c-1b10340ad4b3",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "5b339102-22ec-466e-8561-f011bd404bc4"
        },
        "item": {
          "id": "f2b38596-3afa-4993-a036-ec27f554563c",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ed9cd608-08ca-4682-b3a5-c71381e3b0f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2b38596-3afa-4993-a036-ec27f554563c",
        "cursor": {
          "ref": "024a4bf2-8e9b-4432-a20c-1b10340ad4b3",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "5b339102-22ec-466e-8561-f011bd404bc4"
        },
        "item": {
          "id": "f2b38596-3afa-4993-a036-ec27f554563c",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ed9cd608-08ca-4682-b3a5-c71381e3b0f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c113283c-c6fe-4bb5-bc3e-6f0977bf9187",
        "cursor": {
          "ref": "d3249714-57d9-4a4f-82a1-26d5ff987c09",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "05e0efff-c467-4db4-a85f-a5a7aba205b7"
        },
        "item": {
          "id": "c113283c-c6fe-4bb5-bc3e-6f0977bf9187",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "387facd2-7155-4410-b7b5-071eb55dad18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c511752c-967e-4149-a63d-d746b7e4fce8",
        "cursor": {
          "ref": "9eb8513c-0d1f-4855-9864-37f8e458a29d",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "35e3522a-78db-4781-b954-b90a9491dbf5"
        },
        "item": {
          "id": "c511752c-967e-4149-a63d-d746b7e4fce8",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "b07b3df6-1ab6-4375-a2c9-149713b5fcb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd712565-c92c-4326-995a-ea92571e417d",
        "cursor": {
          "ref": "cf16ea93-5b8e-414c-a3c3-82ee68d69cd1",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "7c0b0d2b-baf0-47c7-8a9d-e4a3891685dd"
        },
        "item": {
          "id": "fd712565-c92c-4326-995a-ea92571e417d",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "2dff3fd0-b189-4d73-9174-b1472a515079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eadeda9-b0f1-4563-8197-879a84b57104",
        "cursor": {
          "ref": "035b9e56-a19d-45c2-8e1d-f9e1f1e1e6af",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "fdbbad50-1d09-4d85-8f37-7c457b270898"
        },
        "item": {
          "id": "6eadeda9-b0f1-4563-8197-879a84b57104",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "1ba5aed0-a7fb-4403-9214-9be0846197f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e4425b5-959a-43d5-9964-38b9c98c51f9",
        "cursor": {
          "ref": "b4339e29-973e-443c-9041-533974336a15",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "6d02d383-c5f8-4727-aefe-0c35c8d450a5"
        },
        "item": {
          "id": "3e4425b5-959a-43d5-9964-38b9c98c51f9",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "e8e304eb-ee56-4088-9fc2-74f806dcad17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d90760b-aaf9-4184-860e-91585fcf99c7",
        "cursor": {
          "ref": "432bec5a-d93d-4afb-a73c-8cb7ddfb0ec4",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "fa544770-b810-47eb-810e-5200d6c3d85b"
        },
        "item": {
          "id": "6d90760b-aaf9-4184-860e-91585fcf99c7",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "44114a95-7f9d-4242-aea2-69ee0630b48d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db99c84d-1670-44bb-ae00-2679efbe52df",
        "cursor": {
          "ref": "f4fe06e3-d0b1-41ea-a223-70118574399d",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "3ec2a625-d701-461f-9549-8d347e07317e"
        },
        "item": {
          "id": "db99c84d-1670-44bb-ae00-2679efbe52df",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "465da868-20e6-48f4-ba05-a9d3ce38406c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acdcdf70-8843-423f-b501-5630008fefbd",
        "cursor": {
          "ref": "7623b518-497f-4d5c-b3fb-cf8c8cd4891c",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "cb05ef54-df16-4d92-b32d-91770dc674c6"
        },
        "item": {
          "id": "acdcdf70-8843-423f-b501-5630008fefbd",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "c08e9209-7ced-445d-95a5-bd7bf0290b4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab36a024-9e0d-44dc-8053-7ed114f2ff15",
        "cursor": {
          "ref": "11a626d2-4891-4047-8317-3891798abaad",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "8dd9cdb8-da96-469f-8804-f4b7ab66e401"
        },
        "item": {
          "id": "ab36a024-9e0d-44dc-8053-7ed114f2ff15",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "706b4c12-8fb3-47ac-bbc1-3e57cf9a9656",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55fae37b-c54c-4886-8280-37532097a9ba",
        "cursor": {
          "ref": "19cd2d93-898f-4e36-af76-fa3871f78914",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "1893bd9c-9514-4a45-ab3a-f19e5549a8be"
        },
        "item": {
          "id": "55fae37b-c54c-4886-8280-37532097a9ba",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "ec09ba55-8db1-4ffb-b850-519620c76985",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29236e25-e742-4ffd-ac97-8ae4d88d2611",
        "cursor": {
          "ref": "8535d2c3-69d3-41f1-b939-df91b907adfb",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "c70e8bfd-dcd8-430a-b2c9-c4a0916e5f9e"
        },
        "item": {
          "id": "29236e25-e742-4ffd-ac97-8ae4d88d2611",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "566dfcdb-f4a6-495e-aeb7-88194e139f8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a85af90-be66-4e16-8bb1-dbdb9514778b",
        "cursor": {
          "ref": "9c005e4a-dd86-4c74-b4b7-eedb19b3b418",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "30f85fa5-53ea-4ab4-a309-664fc411e2ad"
        },
        "item": {
          "id": "7a85af90-be66-4e16-8bb1-dbdb9514778b",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "cc6996f2-4779-49d4-82b4-1e30ac9375d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3502d914-3143-4b4a-8ae2-12fd62006e37",
        "cursor": {
          "ref": "282a5a52-326e-4227-ad0e-8648d2f96e87",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "5def4d2c-0ef6-43ea-90ec-d978b4a10438"
        },
        "item": {
          "id": "3502d914-3143-4b4a-8ae2-12fd62006e37",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "b7fe7026-7f86-4cef-a48f-38dc92ccb2cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "210d9b3f-2fcb-4d8a-9b4c-3ab61df12969",
        "cursor": {
          "ref": "1aebf5d7-903c-4fa2-abd1-ab721cf88c34",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "493ef19b-886c-4fc7-b05d-00059a5e399c"
        },
        "item": {
          "id": "210d9b3f-2fcb-4d8a-9b4c-3ab61df12969",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "ca496f3f-cf7f-496e-ad10-39fff5fa4d64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39152a69-fa6f-4d06-a8fb-5f330c0dbffa",
        "cursor": {
          "ref": "e8d57bc1-52bf-476e-b565-bd92307ee3a6",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "b9d1ee5f-5de1-418d-8ca6-5fce8f9b3207"
        },
        "item": {
          "id": "39152a69-fa6f-4d06-a8fb-5f330c0dbffa",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "a022c4ca-3f5c-4e74-8136-11a864b28203",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5907f5ae-7ea8-4592-845c-7f6d8d0ba793",
        "cursor": {
          "ref": "16a966fe-71c1-455c-bc94-7e3cf60419af",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "a0d3b02a-7067-4220-b4e6-c83c61785e85"
        },
        "item": {
          "id": "5907f5ae-7ea8-4592-845c-7f6d8d0ba793",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "84791769-3bfb-4294-b8ab-a55eb4323d32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48d4f4a9-95c7-44e4-bfae-eec3052260b5",
        "cursor": {
          "ref": "c1dbc870-cd8c-435e-9ae1-ef65fea848db",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "20c9998e-5d41-4492-94c8-2add75775115"
        },
        "item": {
          "id": "48d4f4a9-95c7-44e4-bfae-eec3052260b5",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "18d387b8-1adc-42cb-a84b-243ede2c0140",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b489a63-0e24-47b3-b410-fd6bf6c397cd",
        "cursor": {
          "ref": "cb3d5fc8-4967-4c1a-8744-c70f6550836e",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "405b00a4-7920-480c-9369-98a4fbe713f8"
        },
        "item": {
          "id": "2b489a63-0e24-47b3-b410-fd6bf6c397cd",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "59cbc9cb-a9e4-41a9-975f-dca0f581d2c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff455395-cdc9-4077-9eb0-cce96909eed1",
        "cursor": {
          "ref": "f40afaf2-5c13-4d9c-80bf-102359b489a9",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "cd2cfa01-edf8-4882-ae28-957b8543dfd2"
        },
        "item": {
          "id": "ff455395-cdc9-4077-9eb0-cce96909eed1",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "821ac075-a277-4175-9419-c6cdad565587",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5f4a4cb-2b82-4821-b757-91977d126412",
        "cursor": {
          "ref": "a9a8f5ee-9301-41fd-bc57-612c52deda3d",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "2a4e830a-9431-4ec2-b86b-f3c07cdbdc0f"
        },
        "item": {
          "id": "f5f4a4cb-2b82-4821-b757-91977d126412",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "e5670765-678f-40fc-97b0-4b83bce21a30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "805032c5-d3a6-4ae6-be60-c36bc9efe6a3",
        "cursor": {
          "ref": "cb060101-59f1-4644-a451-445cb93e6df6",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "702abd99-111a-4c0c-ba19-d228c0386df2"
        },
        "item": {
          "id": "805032c5-d3a6-4ae6-be60-c36bc9efe6a3",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "9e6d2220-3eb3-4fa2-8d02-7fef88d032f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5244416-8fa5-4bd3-985d-43fd3b83986b",
        "cursor": {
          "ref": "933d13da-755f-4a55-b2f8-a6e885c60aa0",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "5c498786-92fd-4391-9d07-d94dd1d78740"
        },
        "item": {
          "id": "a5244416-8fa5-4bd3-985d-43fd3b83986b",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "44476b89-53e3-4af6-a0fa-65e15a73cfd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4ed68ef-9ee8-454b-90f3-43cc2f0b8194",
        "cursor": {
          "ref": "aa217dfb-2157-4e9b-bad8-5950d8057cd6",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "435584bb-20b9-485e-be48-4acbaa469364"
        },
        "item": {
          "id": "b4ed68ef-9ee8-454b-90f3-43cc2f0b8194",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "023cf5d3-2c2c-4e57-9f0c-618925c07522",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d076ed6d-398a-424d-8244-e16037edd633",
        "cursor": {
          "ref": "39e70cd1-da89-465d-813b-8175906f730e",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e7771f86-6f55-4dec-b8d3-837c5eca9fbc"
        },
        "item": {
          "id": "d076ed6d-398a-424d-8244-e16037edd633",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "d5d44c77-507d-4cd3-90a8-07ee9699ff9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "509220bc-5d96-4f0e-b682-3aafcd74e7cc",
        "cursor": {
          "ref": "415335f4-dd66-46fb-9a28-3364040a5fd0",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "0106ed7a-1c86-4800-a47a-4478e4bb68e8"
        },
        "item": {
          "id": "509220bc-5d96-4f0e-b682-3aafcd74e7cc",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "c8a691bb-3b45-460a-85c2-63cd6ab888fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc0e6895-4ba0-4c16-a34c-74839f9c2090",
        "cursor": {
          "ref": "8acbab50-9b73-4e9c-b03f-3c37dc4a468b",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "63e9bad4-b97a-4eda-95f0-b28502ad5a26"
        },
        "item": {
          "id": "fc0e6895-4ba0-4c16-a34c-74839f9c2090",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "69ee6ac7-3f24-4abd-83f7-1605adb44533",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56db2651-25e1-460f-81f6-170c63b5348e",
        "cursor": {
          "ref": "d285275b-7d3b-4100-b914-ee909ed72796",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "eb5c2af6-ec00-4893-9989-198d6b7da9e6"
        },
        "item": {
          "id": "56db2651-25e1-460f-81f6-170c63b5348e",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "14ed3137-8f1f-4675-9413-b6e58287cabe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fc3a0ad-9fbe-4936-a82a-482e00beaca1",
        "cursor": {
          "ref": "31a0afd0-d0c2-4914-afa1-5b3e3dd99f69",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "5821aa00-70c7-45cc-8aec-52dc58222725"
        },
        "item": {
          "id": "2fc3a0ad-9fbe-4936-a82a-482e00beaca1",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "bc0a49df-f87c-49cd-b344-529b21b33d36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "813d3685-9ee1-49d8-ab05-62ae423bae83",
        "cursor": {
          "ref": "2dc7b726-b4f9-4e6f-8b1a-0b1d677a6576",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "edba94b6-75d2-4a0b-adba-28cfa3dc8e9d"
        },
        "item": {
          "id": "813d3685-9ee1-49d8-ab05-62ae423bae83",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "85a745eb-54c2-49e3-b888-3c3a2050c6ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afe77ad1-b06e-4506-ac67-ac1cd3c30c76",
        "cursor": {
          "ref": "f2bc4fc7-5f33-47e8-803a-5df5d8f63edf",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "3c05ccf9-77b5-4e99-951e-64fa8c6333ca"
        },
        "item": {
          "id": "afe77ad1-b06e-4506-ac67-ac1cd3c30c76",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "fc487da4-2b65-4acb-a2c4-1798ce7bae1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fa8e7ab-de49-4c9b-9d00-86109dd05118",
        "cursor": {
          "ref": "b4170197-4b7e-426a-8a9e-0863fc9f1b9a",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "a2494653-f30a-4d6c-8bea-7d1187c9d80d"
        },
        "item": {
          "id": "8fa8e7ab-de49-4c9b-9d00-86109dd05118",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "f8b4095a-1ebc-4357-9d9f-645f11c757f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea4e82a0-cbd7-4003-83a7-844c8bb65c0e",
        "cursor": {
          "ref": "13b0d7fc-1602-4f71-aba4-08d719f7d902",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "197e3f09-0261-4bd0-8704-d32f94aad7e5"
        },
        "item": {
          "id": "ea4e82a0-cbd7-4003-83a7-844c8bb65c0e",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "c056cace-a118-4056-a31b-c3b8ab0a7bc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eadf566-0955-446b-8f23-5b33b1d13eba",
        "cursor": {
          "ref": "b0c2a4f5-60c3-49ae-8c6d-7b13edb9c585",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "5dc9553b-f56d-4d43-929f-c51a107579de"
        },
        "item": {
          "id": "9eadf566-0955-446b-8f23-5b33b1d13eba",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "21517a34-aec0-4e79-a203-f61cd74d892b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43409e35-6f8e-4668-bbbe-a508a3a443c0",
        "cursor": {
          "ref": "f9d5068c-2853-41af-a68e-585be6029c42",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "94d860a8-d40a-40f7-ba6f-4a1c55e567e4"
        },
        "item": {
          "id": "43409e35-6f8e-4668-bbbe-a508a3a443c0",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "b0fe917e-8cfd-49a5-af15-d98e2bd4a915",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2dfb503-2970-4f5f-9d91-3d468be3164d",
        "cursor": {
          "ref": "b8779b04-d7e5-475f-9c6a-da18ef70d742",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "f934fa1e-f84a-46ce-b2c7-953cc495d1c6"
        },
        "item": {
          "id": "e2dfb503-2970-4f5f-9d91-3d468be3164d",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "8157b817-0235-4101-af4c-0c4c2491ba73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "368e07b2-dbe1-49ab-8d50-6c798303ad6b",
        "cursor": {
          "ref": "d16d7af1-2de5-46f3-bcdc-b29ffe0e2989",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "014df7d5-1cc8-43d0-b2a5-49cb999a6fc7"
        },
        "item": {
          "id": "368e07b2-dbe1-49ab-8d50-6c798303ad6b",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "3fb2565f-8123-485b-b623-0bcc59e4dc31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37e59912-ff38-4281-ac0c-21d8f05cfde1",
        "cursor": {
          "ref": "c9e0d0c1-92d8-4066-bc87-fa08d65f9a83",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "cc7103f9-5625-420c-92f5-a611e57abe0f"
        },
        "item": {
          "id": "37e59912-ff38-4281-ac0c-21d8f05cfde1",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "fb8dcced-e50b-46d2-b650-e5e8b82d88e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89e4ea59-d684-4d42-93c9-6e3d77cb201b",
        "cursor": {
          "ref": "74ef99ab-10dc-4cd1-bb60-20132906997d",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "35da7e37-00fa-4d1b-bbf5-5b343157d2ab"
        },
        "item": {
          "id": "89e4ea59-d684-4d42-93c9-6e3d77cb201b",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "bb710593-3b4f-446b-a337-aea0a35dcf6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1580a5dd-9d60-4c0f-98ed-7345143e1052",
        "cursor": {
          "ref": "4ee51e6a-7b1c-400a-8afd-bad40e883d57",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "25f1e7c5-c42a-4408-a7a9-84777bce3daa"
        },
        "item": {
          "id": "1580a5dd-9d60-4c0f-98ed-7345143e1052",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "f5d0f424-be02-4a5b-8c0a-76c1aef37416",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4de63a24-b330-45d5-9274-da8281e700f8",
        "cursor": {
          "ref": "2c99b41e-8b47-4f73-bd50-c93e82f4e87b",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "d88a2072-5f94-436e-abf2-ab00a2d7a96a"
        },
        "item": {
          "id": "4de63a24-b330-45d5-9274-da8281e700f8",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "8fb0b743-b235-41b8-89d2-f32452d6fd5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caba41a4-68d8-4c22-a731-a922d20dca51",
        "cursor": {
          "ref": "53514fb8-05e0-4911-9010-b684a24451d7",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "407eeac9-f3c8-4471-bf6e-c82b5a9d8c44"
        },
        "item": {
          "id": "caba41a4-68d8-4c22-a731-a922d20dca51",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "aa27e3e2-4b8e-487a-8e5a-4bc0b428683b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "531a7c93-7ab9-4d67-98b8-1aadaeb5bcb5",
        "cursor": {
          "ref": "0ac6e29c-6f0a-48b0-b6b8-d6645ff86b8a",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "142fa84a-b99c-482e-b843-99e4001c54f0"
        },
        "item": {
          "id": "531a7c93-7ab9-4d67-98b8-1aadaeb5bcb5",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "1715ec2a-9abe-4497-8189-a2753bcfb15b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd9517a5-6063-4abf-9504-d731f8ca4c4e",
        "cursor": {
          "ref": "262bcc7e-457b-4007-8549-7f10c593ea52",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "44c61510-8c9f-4fc1-8e03-76f89f2ea7b3"
        },
        "item": {
          "id": "cd9517a5-6063-4abf-9504-d731f8ca4c4e",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "fdd45605-f41f-40f5-9cb9-dda3f1031b5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd987a08-d723-44f4-b16e-cf2498ac0bba",
        "cursor": {
          "ref": "65a28764-dced-45df-8cfb-170c20436454",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "2f686996-49a6-4605-abe0-64b07777d538"
        },
        "item": {
          "id": "fd987a08-d723-44f4-b16e-cf2498ac0bba",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "d1126713-6362-4f43-b88f-4646b04d1f99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fb9622c-0b28-4bab-9c14-ab9bb64de8a6",
        "cursor": {
          "ref": "500d1a0f-e387-46fb-867c-32feb8712761",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "2f9e6b46-70e3-4c8d-9539-b6246c8ae70b"
        },
        "item": {
          "id": "3fb9622c-0b28-4bab-9c14-ab9bb64de8a6",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "e3ac4d90-2baf-4efc-b6d7-fa254f1b19c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14e63828-b411-4eed-9425-781b4e5c3ebd",
        "cursor": {
          "ref": "73921178-7f6d-4610-bbd2-6cc897669812",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "573428c0-9dfb-42fb-96ce-3bb85e580e89"
        },
        "item": {
          "id": "14e63828-b411-4eed-9425-781b4e5c3ebd",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f622b40b-deb7-4bb1-a0ed-66d55f276878",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13685716-4c23-405c-a7ad-5a58e1b082bf",
        "cursor": {
          "ref": "e6051758-3020-41af-830a-40726617be28",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "5d5d6e7f-fd6c-4fd4-89b8-d257d10c7b17"
        },
        "item": {
          "id": "13685716-4c23-405c-a7ad-5a58e1b082bf",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "f3caff5d-7de7-44ad-9cf4-45878997169f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f894226e-917d-400d-91ad-45ca69b93132",
        "cursor": {
          "ref": "c8f7370a-c662-4fcf-9069-5c75bb8c7265",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "88fd2106-d29f-4710-934f-1478ea6e81e2"
        },
        "item": {
          "id": "f894226e-917d-400d-91ad-45ca69b93132",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "5bbc7142-458a-421c-b6b9-89372188297e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b7cf4b3-a3ee-45e9-9905-4b8f4b4f7f44",
        "cursor": {
          "ref": "15fd5e50-c340-47b4-acef-9c37970d27a5",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "d40e2f65-f831-4885-af5d-7c8869bf1f34"
        },
        "item": {
          "id": "0b7cf4b3-a3ee-45e9-9905-4b8f4b4f7f44",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "e6a0d721-dca0-4ea6-9152-3145883b66a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b231194d-2492-4bee-9fc0-686d386aa66c",
        "cursor": {
          "ref": "d9200ded-9ba8-4490-8f1b-f64a54a29a00",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "52fd3c4c-a8e0-48a0-a566-f6c83522cce9"
        },
        "item": {
          "id": "b231194d-2492-4bee-9fc0-686d386aa66c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "2b66de6f-9603-4a41-bbca-af52c962a022",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f879990-5700-4d9c-ba0f-dca32cd62303",
        "cursor": {
          "ref": "cf5c4bfa-df62-4e6e-a552-2cbbb99e80b4",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "5534b9c2-a859-48cf-9e4a-9c33ad5a4f22"
        },
        "item": {
          "id": "2f879990-5700-4d9c-ba0f-dca32cd62303",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "f9f5c644-26af-4dfb-8b60-e24cb93c1d93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "520c7f53-0fd5-4f10-8690-e0fcc1698300",
        "cursor": {
          "ref": "6d4a6875-ea65-47ce-bb75-4cc45bc0d80e",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "21e75157-427a-4d6f-8402-20842c4de873"
        },
        "item": {
          "id": "520c7f53-0fd5-4f10-8690-e0fcc1698300",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "5066bbd1-0bda-4269-aa5e-c9b4f7d3bc22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1136c5d8-d12b-4226-bb4a-10a21b1520ce",
        "cursor": {
          "ref": "3c0f8fd9-2d5c-4121-b117-4e3befe9c51a",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "e711167d-89b6-406f-9258-bbd40400adeb"
        },
        "item": {
          "id": "1136c5d8-d12b-4226-bb4a-10a21b1520ce",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "46fdea97-6ba7-4eb1-bd16-7cce2db0840c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ad1c9ba-5f1c-481e-b063-ddd0835865e7",
        "cursor": {
          "ref": "c8d27650-94e2-4f8f-8b8a-5b8cdaabf54c",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "d677357c-99ac-4688-a9f8-bd1c3d355ed6"
        },
        "item": {
          "id": "6ad1c9ba-5f1c-481e-b063-ddd0835865e7",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "2c501fbc-8ce8-4626-9f35-eb47b3bd7f57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35c33f36-1c0a-45a7-b018-e588f4d537e5",
        "cursor": {
          "ref": "96cb4c34-780e-461e-801b-3abdf8b35c61",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "c0eecf2a-187c-4ccf-9b22-33e943b5617c"
        },
        "item": {
          "id": "35c33f36-1c0a-45a7-b018-e588f4d537e5",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "3ca249e3-6dc4-46bd-8190-5e688d1ced79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cab380e8-abc6-4cdc-88a7-9c773334bd1e",
        "cursor": {
          "ref": "107bdc26-1845-474d-8aa7-f8c993472e8c",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "268a25e2-7f6d-41a9-88a2-2e92667a94c8"
        },
        "item": {
          "id": "cab380e8-abc6-4cdc-88a7-9c773334bd1e",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "11050107-cd26-4555-88b7-04bd8bae72dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d87ed2e1-1067-4d5a-bfd9-5152ec8605f8",
        "cursor": {
          "ref": "d9d3ac4d-3653-44a9-9087-f08bd89e2e71",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "2c82823a-eab3-4a67-8d37-a373a80e7427"
        },
        "item": {
          "id": "d87ed2e1-1067-4d5a-bfd9-5152ec8605f8",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b386c9db-d17f-414a-bbf8-a138c9e8d901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c9215c2-f7a6-46ef-9fe4-e57ed6523c03",
        "cursor": {
          "ref": "a8ad32fd-d0e4-40ed-ba3f-3ee615061393",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "430647ff-0d44-459e-a60a-cc362f68bfb9"
        },
        "item": {
          "id": "2c9215c2-f7a6-46ef-9fe4-e57ed6523c03",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "01844e57-7645-4a30-92dd-7916d64923d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd227dad-76bf-4628-9cc5-b8ed4f89652f",
        "cursor": {
          "ref": "711c80b8-141d-4f30-b0d2-f4f18f2ec598",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "81106589-13b1-455c-a1a8-5e814af5997a"
        },
        "item": {
          "id": "fd227dad-76bf-4628-9cc5-b8ed4f89652f",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "c04124dd-394a-4a76-8f58-a9c6c5e3dda2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f8b9fa5-086d-4f05-a4db-b3366a623cad",
        "cursor": {
          "ref": "6efad26d-16c9-43c5-99b7-33e67407c569",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "60a1f1d9-9dda-4c10-8162-6ce58c5d3e3a"
        },
        "item": {
          "id": "1f8b9fa5-086d-4f05-a4db-b3366a623cad",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "891884df-a7e0-427d-82e2-9b221b5d275a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c42dbd0-309f-4870-94a2-6c9924d079b4",
        "cursor": {
          "ref": "fb080181-d672-45f9-b196-81a70783905e",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "31cfe27a-c5fe-4c83-a1be-2719405d94b2"
        },
        "item": {
          "id": "3c42dbd0-309f-4870-94a2-6c9924d079b4",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "202fefef-d068-4f87-9312-324db4bed830",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c21a2aec-2985-4ee5-8095-228842669801",
        "cursor": {
          "ref": "87146a12-64d9-4c3f-ab1f-ec50413292fc",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "292f6d53-1558-4836-a386-1451db68a728"
        },
        "item": {
          "id": "c21a2aec-2985-4ee5-8095-228842669801",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "81735eb5-2ce2-46f8-9f5f-d2aa441a0f86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89429449-9935-49c5-85da-b3241afee7a1",
        "cursor": {
          "ref": "b63f888b-086f-466f-a40a-dd7d19299aa7",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "3aca5194-7260-4b25-a885-9498c3f54560"
        },
        "item": {
          "id": "89429449-9935-49c5-85da-b3241afee7a1",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "d3faeeb6-4ec7-40a5-a5e1-c3113b2a7977",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a3ae89-5ca3-43c9-80f5-f62f9062fcea",
        "cursor": {
          "ref": "3fa51087-5f25-4570-b7d5-e10349c83457",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "ba1d2f69-7239-4ce4-938c-8b796745b27a"
        },
        "item": {
          "id": "b2a3ae89-5ca3-43c9-80f5-f62f9062fcea",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "3b33a524-8d3b-43e1-8e9a-3c46662f1d24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5c67e89-8ea4-450f-8dfb-86e845b87a97",
        "cursor": {
          "ref": "cd9c3bda-82b0-4cb1-8fd5-2370409319a1",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "130469e8-6be5-4e0f-a9d1-5cecf794560c"
        },
        "item": {
          "id": "a5c67e89-8ea4-450f-8dfb-86e845b87a97",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "18f6c1a1-398b-46e4-ad58-a542bfdd7a73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c227621-817d-45fa-9e55-bd4976ac9678",
        "cursor": {
          "ref": "eb54f0fb-aa79-47d1-9b9d-8ee777f541f8",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "d6c98ace-327f-43fa-8903-5c572200d24a"
        },
        "item": {
          "id": "0c227621-817d-45fa-9e55-bd4976ac9678",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "01cbb02d-97e8-48d1-bb36-c7be5bb89c00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ecaf896-227e-4a4e-af55-1980f9d252b4",
        "cursor": {
          "ref": "8b46f5e1-09ac-4c3e-b824-2d1494ce9291",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "0561ccff-3dda-4908-9604-e5d863cbdd56"
        },
        "item": {
          "id": "0ecaf896-227e-4a4e-af55-1980f9d252b4",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ac090db9-19df-4c0a-9e70-d4badcb5c137",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30f852d7-af0d-4591-afa7-46eb4294fc1f",
        "cursor": {
          "ref": "85377845-570e-41f7-baa0-384daea8e825",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "a98f1d15-3bf3-4a19-b884-5ca35ae5a59e"
        },
        "item": {
          "id": "30f852d7-af0d-4591-afa7-46eb4294fc1f",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "5daefbfa-8a92-40ed-a5f7-162cb5783279",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "450bc057-78ba-4b18-b1b5-0ea9d92ad221",
        "cursor": {
          "ref": "b61b2b99-c9cc-46a7-bf99-edec0ce0de5e",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "df32a70a-2195-4b33-97c6-6ec2974e31e2"
        },
        "item": {
          "id": "450bc057-78ba-4b18-b1b5-0ea9d92ad221",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "e2b5f490-a8c0-4edc-bbbe-010a6b5d2e5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b1c62ea-efc7-43b4-a6c1-2770c0d4da89",
        "cursor": {
          "ref": "afc3064d-52c1-4ced-b42d-49e8d2d6a8a0",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "439e0deb-ba91-455a-a96e-0b4f1f5346e9"
        },
        "item": {
          "id": "8b1c62ea-efc7-43b4-a6c1-2770c0d4da89",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "720d4b93-55d7-48d4-98f4-a077156b3c4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d51f479-7104-42fb-b80e-286f58db5598",
        "cursor": {
          "ref": "bc39f4c7-3d5f-4827-883c-0270f5f1bad5",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "f73c958e-3283-43bd-8ba5-e1bc383bdf1a"
        },
        "item": {
          "id": "2d51f479-7104-42fb-b80e-286f58db5598",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "5c3aef0b-b511-4765-9474-a1ec73fc658d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 218,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d57aacf3-34a1-403d-b9f2-51e8c06f6037",
        "cursor": {
          "ref": "21451659-b8a0-49de-9bc0-84985138f2ac",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "c8f596f9-368a-4227-ae3b-b8de7a9dd8ae"
        },
        "item": {
          "id": "d57aacf3-34a1-403d-b9f2-51e8c06f6037",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "ff7e1724-838c-429c-91e0-1c69182ce1a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67b3e410-2df8-40c4-b377-67493de2b799",
        "cursor": {
          "ref": "75fa7912-8a76-4b06-a9c4-90a0310aa1fa",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "8ca78c9e-d6bb-4bcf-a99c-5703673854db"
        },
        "item": {
          "id": "67b3e410-2df8-40c4-b377-67493de2b799",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "0ffef589-91d5-4aa9-91ff-bb9a48ac0a34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f8b468e-2156-4c5a-b0eb-d4543f9eabc7",
        "cursor": {
          "ref": "25d4da00-20b2-48b9-9832-861055a8f967",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "2937535c-9ecd-4b0f-89b2-e6ab132d2e51"
        },
        "item": {
          "id": "3f8b468e-2156-4c5a-b0eb-d4543f9eabc7",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "8d5e7ff7-2ff6-4814-bd74-a526bee680c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6682b0c-d96c-4f1f-9cec-5675d4c289e5",
        "cursor": {
          "ref": "a428d40b-d764-4ff7-8d2d-06aeef1e9d87",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "de0c3524-01ff-43c6-8f3a-6f2d573cccfd"
        },
        "item": {
          "id": "b6682b0c-d96c-4f1f-9cec-5675d4c289e5",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "9c1aa0b9-5859-4734-84b9-e4817881269e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "607788cc-e4bf-4084-a3c5-202847f9fa49",
        "cursor": {
          "ref": "2d3da35d-bfc2-4657-964f-1ef719379e20",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "93a62b8b-7056-411e-bc14-1d6fc6163f2b"
        },
        "item": {
          "id": "607788cc-e4bf-4084-a3c5-202847f9fa49",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "d7a791f2-ea4d-4c53-b4eb-1fdf2e1d2cf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "141dbd16-4f3c-43ca-b76f-86a83e5fc52e",
        "cursor": {
          "ref": "32c27a2d-04b8-43f8-ac87-004908220cf9",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "bee3b0f0-244f-41c0-af84-92b3db7a1838"
        },
        "item": {
          "id": "141dbd16-4f3c-43ca-b76f-86a83e5fc52e",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "c1fcc8b0-47b0-4c8c-9d31-87ea45191a5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf90d00d-c491-49b5-814c-ce60e1c1fa09",
        "cursor": {
          "ref": "244cb660-fb07-454b-bb58-b03faad2002a",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "9efe9d34-b3b3-45d5-a1e4-e55bd6352a7b"
        },
        "item": {
          "id": "cf90d00d-c491-49b5-814c-ce60e1c1fa09",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "d58ffa14-ca8e-412c-953f-7a19e48b4664",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "470f6518-0fc6-4be0-9c52-f9c2addc13e5",
        "cursor": {
          "ref": "add12f2c-6181-4c09-8dde-86ae933247a2",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "e9f77dc8-b6e2-481c-8715-2cebad925fba"
        },
        "item": {
          "id": "470f6518-0fc6-4be0-9c52-f9c2addc13e5",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "baed71d3-1fd3-4ea6-ab50-a410fde17697",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25e9b310-e9de-4bf9-bb45-f584509308d4",
        "cursor": {
          "ref": "a5ef8c92-6267-4635-9fc2-2ff4c18b0b92",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "aa0ef216-0ef4-4f1b-871e-a5f57480ffbd"
        },
        "item": {
          "id": "25e9b310-e9de-4bf9-bb45-f584509308d4",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "7197b347-fb8d-429f-a93a-3ef29e41db41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5118e7af-6b5a-46d5-8c61-962b2bc711e3",
        "cursor": {
          "ref": "e21acfe3-0519-479a-b46f-e35ebe7b738c",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "e54cbd83-3475-4f3f-80ec-5a7a835dacf6"
        },
        "item": {
          "id": "5118e7af-6b5a-46d5-8c61-962b2bc711e3",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "1a769434-82c4-4172-b2f8-4451354e1c2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c8f6779-cf4d-4d0c-b536-8ad12a8bf257",
        "cursor": {
          "ref": "fae90771-32f7-45e3-b6da-23ac77ada734",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "1254c8d4-0e15-4237-8c40-7ecedaba93b9"
        },
        "item": {
          "id": "8c8f6779-cf4d-4d0c-b536-8ad12a8bf257",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "cf3de352-ba62-42e5-a84b-a51e3e10f964",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7502068-d60f-478b-bc74-adb2254a084b",
        "cursor": {
          "ref": "4d2bb04e-bfd0-4bab-8f5b-c1739bf1ea77",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "0cb46a18-4fc4-4026-80b6-80ad4d169edb"
        },
        "item": {
          "id": "f7502068-d60f-478b-bc74-adb2254a084b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "05957302-b5c4-4a78-9a1c-5414cb78b3aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa36bda9-469c-4e30-bf88-ce00c6cd2dd1",
        "cursor": {
          "ref": "3467cd51-5e5d-4ee3-8b29-c6f435d05980",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "d47cf713-f2c2-4470-977e-8043f5833d65"
        },
        "item": {
          "id": "fa36bda9-469c-4e30-bf88-ce00c6cd2dd1",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "1f0a5386-4295-4e39-98d4-a65ec5e509e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "360a37fc-7b77-4d41-8c49-c5734dd381aa",
        "cursor": {
          "ref": "8cd4e0cc-c9c6-4b21-8daf-4b0fd0126633",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "7128817d-e33f-4047-b1ba-5c38dbec385a"
        },
        "item": {
          "id": "360a37fc-7b77-4d41-8c49-c5734dd381aa",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "28a5adbc-dd3c-4411-b0a1-93ffb54e4cc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04d0a70c-a9f8-4cff-8900-e49b04453b4c",
        "cursor": {
          "ref": "574031b4-a5d6-4835-8624-93464ecc3712",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "3a5eb1c3-7917-4b82-b4ab-f573cec0f7ff"
        },
        "item": {
          "id": "04d0a70c-a9f8-4cff-8900-e49b04453b4c",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "242cdf5f-0953-4805-99c5-51fddc566621",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7df367ae-99fc-40a6-b0cf-8213ffddd7bd",
        "cursor": {
          "ref": "9a0ddc6b-3802-49aa-bbc5-b0b6a2699647",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "34894b52-87ff-4a8f-aa76-535827296e3a"
        },
        "item": {
          "id": "7df367ae-99fc-40a6-b0cf-8213ffddd7bd",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "5c1ab751-46d0-4d0b-a3d1-43e908ec8b7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "316ed171-5835-4601-ae62-7f2428cf400a",
        "cursor": {
          "ref": "c295849a-8e1c-4fdd-9bc9-c382026300b3",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "7fbc96a1-5fc0-4654-a680-1dd30cdd3381"
        },
        "item": {
          "id": "316ed171-5835-4601-ae62-7f2428cf400a",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "86a7554f-4c4d-42a4-b73e-809b7367307f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a87fc0d-c409-4861-b74f-6f57b19f3a51",
        "cursor": {
          "ref": "aec5a6bc-25e6-43aa-bbc7-e26e9617465b",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "7e928e08-d6d7-4c79-8afe-54e128a20383"
        },
        "item": {
          "id": "3a87fc0d-c409-4861-b74f-6f57b19f3a51",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "5f0854ee-70f9-452b-92ca-3bb1abcb727c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfd0d957-4cb6-470b-b5e6-f62f9d7a797a",
        "cursor": {
          "ref": "7a21a35e-8ad9-4e78-ba0d-4c5beb865c56",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "07aadcf7-7d16-4178-9299-110e89fa851d"
        },
        "item": {
          "id": "dfd0d957-4cb6-470b-b5e6-f62f9d7a797a",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c6fad81b-80a9-4779-b2df-fa5ca9b2cdda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec8f300d-e4ca-482f-9253-d54cd2603718",
        "cursor": {
          "ref": "7e25bac4-272a-42eb-9a41-cfe95459d3f0",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "931645ab-b11a-4e00-b2e2-23cf01c355bc"
        },
        "item": {
          "id": "ec8f300d-e4ca-482f-9253-d54cd2603718",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "69631366-9fbd-4e5c-b6ac-74bb24a6a8b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae544459-473e-4e47-b34c-48591fe450f2",
        "cursor": {
          "ref": "60e2e87c-60e8-44f8-b3f3-dd0a27afd2e7",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "7171c769-19cf-47c8-adac-b201c999eab8"
        },
        "item": {
          "id": "ae544459-473e-4e47-b34c-48591fe450f2",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "992046ea-6fb9-4824-b48a-723b9440b458",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d43d3a98-efc2-4195-bfb2-16e1db863021",
        "cursor": {
          "ref": "9b487bdc-efcc-4ea1-bd3e-7837e12e348e",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "e5a07ca0-d7f2-49df-9df2-e7804fceea48"
        },
        "item": {
          "id": "d43d3a98-efc2-4195-bfb2-16e1db863021",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "e853c2d1-5ac2-4bed-b258-8d6a2307c606",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "586771c5-f646-404d-82cc-0055dc29f51d",
        "cursor": {
          "ref": "a5a59321-d549-4210-afb3-c781fcf2df4d",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "ea030348-b328-4bfc-be28-e32a7350ed32"
        },
        "item": {
          "id": "586771c5-f646-404d-82cc-0055dc29f51d",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "8380a486-73cd-43b2-9f43-4f1083e10c81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f737cac-da37-460a-90cc-b923771bf4fc",
        "cursor": {
          "ref": "7334d06f-9e11-42c5-aad7-bac66cf86896",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "49414e84-0c19-4c49-85b2-972aad73db30"
        },
        "item": {
          "id": "6f737cac-da37-460a-90cc-b923771bf4fc",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "ea4b0774-ef7f-40c8-94d1-3799df0f0d28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e5d8319-9a0f-4fe4-8309-58a450f2b3a1",
        "cursor": {
          "ref": "fe2da194-8662-4a8a-8159-1747ec7912fd",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "1c16ba03-55db-4f13-a4e6-127d68b91f15"
        },
        "item": {
          "id": "5e5d8319-9a0f-4fe4-8309-58a450f2b3a1",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "0f2bee5e-010d-41a6-ae37-4b2b474ae773",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7586f2ec-ae7f-40a4-a6d8-84fcf67a14aa",
        "cursor": {
          "ref": "7462f978-9bf2-43fb-a201-1cb4b582ecf1",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "f2d16d02-e0ae-410d-b761-b3ebeccb11d1"
        },
        "item": {
          "id": "7586f2ec-ae7f-40a4-a6d8-84fcf67a14aa",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "5900f650-7334-489d-be8c-363e7a58a1fc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 3,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b283e6a7-d67a-4a8a-9a6e-01b3728a66e2",
        "cursor": {
          "ref": "90549f96-23d5-4c3e-8f49-445453f967d8",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "361458ca-9637-446f-ada9-a27f66b29255"
        },
        "item": {
          "id": "b283e6a7-d67a-4a8a-9a6e-01b3728a66e2",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "fe45e99c-9a34-4c50-a445-c101c194ec08",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 4,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f33bfe3d-b81c-4e6d-8f0f-cc958a358657",
        "cursor": {
          "ref": "7b4ea7c2-3d56-49c3-a553-81cce6872494",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "208a36ed-d7dc-4939-86c4-ee883d07e723"
        },
        "item": {
          "id": "f33bfe3d-b81c-4e6d-8f0f-cc958a358657",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "bc01c824-a0da-4918-b2e6-090e2fed0028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:242)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:242)"
            }
          }
        ]
      },
      {
        "id": "880456b2-1f99-45ee-8b98-3cc8495c9b8d",
        "cursor": {
          "ref": "a7568c05-9c80-4812-8cf0-d4bd2fcdb954",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "48e1bb59-ad68-4015-a0e0-1caa51556eac"
        },
        "item": {
          "id": "880456b2-1f99-45ee-8b98-3cc8495c9b8d",
          "name": "credentials_verify"
        },
        "response": {
          "id": "912d44d6-7eb6-4f9e-8bcb-d14dbc0a1037",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:243)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:243)"
            }
          }
        ]
      },
      {
        "id": "99b6e533-818c-4d78-8823-763544eba7b8",
        "cursor": {
          "ref": "f208acf2-aae1-4def-92ee-464767548d29",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "5e72c6f8-7496-4ddd-970f-ed4c5a95d5cf"
        },
        "item": {
          "id": "99b6e533-818c-4d78-8823-763544eba7b8",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "bedb3e99-25e0-4367-a219-7521fddac2b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:244)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:244)"
            }
          }
        ]
      },
      {
        "id": "6003a201-140e-49b5-b347-0f426008b846",
        "cursor": {
          "ref": "5d92b98b-9bd5-42c9-8feb-e49d5def608a",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "212ef6fe-2276-44f8-8f11-15cb6c2978a6"
        },
        "item": {
          "id": "6003a201-140e-49b5-b347-0f426008b846",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c3bb22fa-b34f-4474-9a0b-c349a38555f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 3,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6003a201-140e-49b5-b347-0f426008b846",
        "cursor": {
          "ref": "5d92b98b-9bd5-42c9-8feb-e49d5def608a",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "212ef6fe-2276-44f8-8f11-15cb6c2978a6"
        },
        "item": {
          "id": "6003a201-140e-49b5-b347-0f426008b846",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c3bb22fa-b34f-4474-9a0b-c349a38555f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 3,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6003a201-140e-49b5-b347-0f426008b846",
        "cursor": {
          "ref": "5d92b98b-9bd5-42c9-8feb-e49d5def608a",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "212ef6fe-2276-44f8-8f11-15cb6c2978a6"
        },
        "item": {
          "id": "6003a201-140e-49b5-b347-0f426008b846",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c3bb22fa-b34f-4474-9a0b-c349a38555f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 3,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0892a8b-29bd-4243-a524-dd029e722444",
        "cursor": {
          "ref": "e6e50791-33c5-4040-8034-d196cfff7484",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "feb470be-a500-47a1-9700-8f063e46a416"
        },
        "item": {
          "id": "a0892a8b-29bd-4243-a524-dd029e722444",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "5986d38c-05a9-498e-8a5a-677edd748e6b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "354125a4-8ab3-49be-babf-50e2727a0d87",
        "cursor": {
          "ref": "7147e9d8-98ee-46b5-9588-00b96ab307d6",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "d87db997-af97-4825-ae41-587e30da5fe3"
        },
        "item": {
          "id": "354125a4-8ab3-49be-babf-50e2727a0d87",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "6cc594b6-4207-4d50-9577-8a92eda18efe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "354125a4-8ab3-49be-babf-50e2727a0d87",
        "cursor": {
          "ref": "7147e9d8-98ee-46b5-9588-00b96ab307d6",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "d87db997-af97-4825-ae41-587e30da5fe3"
        },
        "item": {
          "id": "354125a4-8ab3-49be-babf-50e2727a0d87",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "6cc594b6-4207-4d50-9577-8a92eda18efe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "21d2c843-3abf-4cf1-ba8f-35df9fba9bec",
        "cursor": {
          "ref": "68aee7ff-9226-4013-b362-8972f2b4b1ce",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "5dc2463d-d058-42f4-a3ff-a9d3a626c511"
        },
        "item": {
          "id": "21d2c843-3abf-4cf1-ba8f-35df9fba9bec",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "f16ed0a4-be41-4995-a158-cf70f6ac0564",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "d29b6696-c637-4217-9172-56c08b4a1fc9",
        "cursor": {
          "ref": "93c8bdcd-0eb4-4dec-8f83-78e3897fdfe6",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f9f05cd0-c2aa-491e-a75b-c0d9e48235e0"
        },
        "item": {
          "id": "d29b6696-c637-4217-9172-56c08b4a1fc9",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "4e0d144e-73cc-4db7-b1c9-a29e51fa2850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "d29b6696-c637-4217-9172-56c08b4a1fc9",
        "cursor": {
          "ref": "93c8bdcd-0eb4-4dec-8f83-78e3897fdfe6",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f9f05cd0-c2aa-491e-a75b-c0d9e48235e0"
        },
        "item": {
          "id": "d29b6696-c637-4217-9172-56c08b4a1fc9",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "4e0d144e-73cc-4db7-b1c9-a29e51fa2850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "4e293ff2-d1b0-44d2-ad54-c957f8ad8da4",
        "cursor": {
          "ref": "b460ed6b-c988-4ca2-947f-ca066a7b3423",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "f29690a5-8c74-4402-a22d-a561b7441ad0"
        },
        "item": {
          "id": "4e293ff2-d1b0-44d2-ad54-c957f8ad8da4",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "f1e66626-81aa-43ce-8b82-f9c7f517ca01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}