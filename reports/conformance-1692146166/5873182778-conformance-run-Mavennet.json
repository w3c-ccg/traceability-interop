{
  "collection": {
    "info": {
      "_postman_id": "faa02ea8-9433-45af-b9a7-893a98130da9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "5c388653-4b6d-4dfe-a4c4-c74dd8883aee",
        "name": "Clear Cache",
        "item": [
          {
            "id": "c9a28f9c-4b2f-48fe-9329-57eb5c3554a2",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0ff49b0f-3bf8-4a9f-9a8b-a938f4a53b08",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4aa34877-7b16-406f-b04d-11b2a199008c"
                }
              }
            ]
          },
          {
            "id": "a0e467dc-f63d-49cc-845e-c53753d1ee7b",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "33b9d5f9-8a6c-4912-b7c4-d83ca668d03e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6b69ae22-5087-4c91-a24d-d5b981467d82"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "f0e5202b-c561-4cf9-9522-4954c7faf702",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "3cacb53f-0d5c-427e-ab8a-97c79c6a5f28",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b8f66377-38c4-4f60-a428-07fbcb405978",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "80658697-197f-4211-bffd-247b83fca2bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "deb1cb78-9df5-49d6-baa0-51691e456dec"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c6068c43-5e39-4a14-aecd-7d5fb16a2a35",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dea9c059-59a0-4a4d-97fc-3121cec90b32"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6a81b083-d114-4d1c-be4c-cd35036b9db1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "808aac03-7c22-494c-affe-1bc80c7b00dd"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9e4f6a3e-d24b-4457-9d36-b5372f3aa088",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "8f331bcc-e71f-483d-8ad9-95e958ab4720"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0cc694c8-16d8-47c0-9aa3-a2d50419f63b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b7af1073-1fdd-4f87-9920-db704559e576"
            }
          }
        ]
      },
      {
        "id": "444bef31-8ec1-475d-a9e9-329291d2b5bd",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "dff5b453-6238-4f5c-964d-958891c01900",
            "name": "Negative Testing",
            "item": [
              {
                "id": "228db665-e9d9-4a42-97af-7500a5d4c125",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "98b721e6-446e-4a3b-aca4-77aa2f764f38",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5528f049-39e5-4727-8a6e-c6c651984305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "86eed923-e886-48a7-a110-4a0b15b1048e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e9ae84-09b3-4b51-8440-3981454941e5",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e39ed699-d57e-4a92-9226-089d6bfb06ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4d5b00d4-cc0a-440a-8962-ecc8fb564318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fab6248-b78e-4243-b0aa-85285fbc302e",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47cee9c1-ed2c-4e4b-8d11-73cd3ca92bc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "840747dc-3901-4374-b52a-c6b3254cf736"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bd0e5911-8748-4de7-8597-b8cb20ec26d0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8a8dcfc1-18ec-4ebe-88a6-324f010e5daa",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2756ae43-fad4-4747-ac65-0701c04f3f20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "74eea27b-de91-466b-b61a-fc2955c65246"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "713fbd27-a4b2-4b0e-8849-a25e10e59713",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6b0a744-d7c6-424c-81fe-50c9828c3d5d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "265f264e-3c0c-4023-9e53-945e21b28667",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d71771d0-2d94-49ca-b818-6ba6ed97a1b6",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "765a8b88-b379-4a6f-8722-a7ea7135937a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "6ee2ff8f-aed7-4c17-89ac-1a6be8cb8213"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "35b15eed-ae2d-46aa-9e00-889ae4ca169c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "d7ff133f-d9c1-42ee-8b63-b78b0488c415"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7e234b14-c9f8-4cfd-854e-cd6c064a2d21",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ca35f6c4-07a6-4233-a5af-7c5389f7dd1e"
            }
          }
        ]
      },
      {
        "id": "50f372a1-f152-4de3-9ba7-29d1738c1e38",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "056df8b7-b96b-4365-9c8b-7c130b57a2a6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4a719138-22b4-4e6b-8e39-ee5d5b32a882",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "498807d9-6872-43ef-bbfb-e381528f5b0d",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3bc698f-ad0a-414c-b4d1-084551e08cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8cff02f-5e50-4cd7-abb1-23a4c8796370"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd4906ee-33cf-4ada-b3ef-da55367262df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "50561a0f-bb87-458f-93f3-7fd373a200d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97c9345a-5aa6-4431-be82-25f43bd4a475",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bec45a90-e3c5-4f3e-a5ef-94a649af1f98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "928a79ef-2489-417d-ab2c-2fa5abaa4ae9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81530105-e62b-40e3-adb8-9ce0068a3450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a8ab4e3f-bde6-4ff9-bb15-d651e0bfd3a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "444812dc-3246-40da-b928-8dc31d88f337",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c3b44ee-067e-4b1a-a60a-e72310b0cd15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfc06ce2-673e-414d-8a6c-3fd6d74a1540"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de1d9312-a954-4aad-a83a-1266744c5ad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "728d6513-bafc-4bcc-90bf-bb7e908b394d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7be4e39-5f15-4b8c-abc5-ba166189a155",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bb28c23-3849-46bb-86b5-9258ae8bbe08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "246fc9d6-d79a-4eab-a4d7-e741045ec649"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aed15e8-2389-4d06-873a-f4a26d5159d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d6d830be-57bb-45b5-af7c-b50246ad3e8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab6bcf4c-d7c2-4b74-9947-f254ba2a95c5",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55247185-cc23-4fd3-87f9-b5e5681b6cbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbfbd313-aad1-4851-801c-330fcb869c35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ced3b6cd-8bd3-4c3c-8238-8373bd3b338c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0ebae447-e2c4-4cf7-8d88-c7678ca4f36e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc86e303-d0fb-4af4-acd9-7260e79216c8",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78109c46-c447-410a-b9c1-653855043437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b9faf42-8979-4374-91ba-0fa2c4ff4ba6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b384450-efd6-4eea-91d8-ca4b354da7ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d03b5ada-378a-4864-b700-7f62068daa22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f1cacf6-69ca-452c-84ba-19f7cc2778df",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b8f767d-705c-4d89-8203-d76e334a1f5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e99676e7-0d71-46a2-9e0d-036fe37d798d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "450bdb6f-b0ef-49e5-8c63-033b0bddaf6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "19817234-5c92-4855-94a7-de4441ee4ce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dc95949-953e-4210-b28d-5dfd31ec450e",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c0477e0-f1a0-4abf-a98a-c23146e7aa9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "648b0b91-794a-49de-9cec-e148477c4281"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4a9c96e-ffbd-4c81-9e11-0fc1b8854b9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9421533a-f99a-456c-9af3-e34478de731e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86b9a499-cb5c-4d0d-9b61-3724c68ba503",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28adc38a-853d-4f55-bb48-f29a48709f54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1473c115-5006-4857-8279-58e89527338f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ada73acc-fafe-46c0-9b8f-63550c75be8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9f4f4fe2-c613-4b1c-8fe6-0d6e4dde6837"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03e3d584-d55e-4791-bfff-a303678a950a",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a4474a0-c662-4819-adf3-1f93fa1ff0c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3a870bc-a7b0-4f23-a043-32364dd86086"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4bf7ebd-a96b-449b-a318-ffa7126a4cc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2c1c8f9b-2426-4271-803b-f094bc64f3e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7a588f6-4c45-443b-8b73-0883ace9a4a9",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7542056-75c1-458e-82f6-ede84d01c816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "168adb2a-9fb1-4928-8aad-3950a2154483"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36867527-dca1-4c38-998e-624d168af783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7b25bc10-f321-4f36-8ada-35f5af3ed7e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c11bd55-6c5f-4736-ac3e-584c2ff85bd3",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e0ebe30-d7bf-4096-bc57-2b134ab9bb3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13c8418c-a06d-407f-bb88-8278578f581b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5575ebdd-b957-456f-9d40-acd2135823b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3e71869d-25cd-4cd9-9b72-8011c4dc7dc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea51998d-f383-4c40-969e-9de9c0107d7e",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3a55b43-138c-4b47-9cb3-30798d36257e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56637d7e-b7af-4f6e-a5e9-db122f88979e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "158b6c8b-cec5-47e8-a8c5-cdeeb56de918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5df9e61-5560-4d57-b63b-274af10cec6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28f04504-c6f5-4799-aa4a-6d242d5f901d",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec1054ae-35d2-47e1-93e4-0f70da1c0d1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82736118-c78e-480e-9f16-17a91c52dcae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b4a5cb6-2af1-4f52-8da4-dc4dfaa684e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f0d24a89-cb6a-4d61-b0cd-8159a24f0638"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4bad8b0-e495-49b1-8997-07aac5663fa2",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7167f1e8-c4f2-4486-9c1c-f74c3e5891a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c264e00-031a-4512-93bf-706ea3b453b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5df371f-3bfc-41bf-8b9b-5eb9ad0f7ca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "95869af1-d071-4e86-99da-f0caddb24a17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0caa280b-bfd2-429e-8205-3b9740182279",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a708a6bc-95cd-4bda-b864-3f4c2c78ec5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a3cda86-e315-48d9-a8b0-ab5e7ce6ff41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01100da2-eaaa-4913-826f-d168b8e7b585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "98990fe7-7d29-47f3-ab28-499dcda63282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47fa3acf-fdab-4c5d-b06e-42586354e6d3",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04b21651-e165-4219-93a4-88f70687d918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b36e6bd-8c92-4814-a309-2712b88adb15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "476e37f1-77ff-43d9-beae-c30987ee78ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "657e902b-b762-4f4f-8944-9a31baf00ec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90185b86-79ea-414e-b7aa-41aacf0df116",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "457fea81-e03d-4240-b6da-459202f2b375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "377257bd-5363-4288-a3e7-5beb2f0fcaa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "336a442e-56f9-4116-a769-e8da8d5a4e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "45a8b275-ba51-4451-b289-d95c005a0956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "797c2056-7b34-489c-b306-400c1a97f7bc",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62b0a155-43d6-49a5-a0b3-80a1bab65aef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e1a917f-cdb6-43d4-83e9-1ca56f151bae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebba8c62-96c0-4793-aeec-057aee423ebc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "68fc8c20-4de9-435d-bbba-965e58856c16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad8ddc94-1f1c-4bc0-b10d-f9713a25337c",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9b02a7f-2adb-44e3-a54d-483d7c23992f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fa18dea-6b1e-4581-bf47-3875b2058f7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d51c857-d8b5-4582-a126-e5decc9c81cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "05dfaa8f-81c5-4dbd-bedb-6b89c68a754f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b71dbcb0-dc93-463b-8c80-f21f0f71bdff",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7b27a3c-d9ab-4329-9cbf-a6d83c33eaa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70215ed7-9955-4767-bbdd-a7db80b98627"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d702b64-f97b-44b3-abea-a593f06562b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b42f4d4-a033-4d59-ac4c-b52af9a20fa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3d5b035-c5ce-4087-b397-56e2968524f4",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "736e170e-f2f9-4625-8b44-59a71e5ac51e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa76bfd5-4ed1-40d4-806b-9b1c707cc427"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4725ce8-23c1-4a0d-bc6c-42491775bd7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4ea8dcbe-7655-4260-a53f-0ef0f0b4b69d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "103abbb2-f112-406b-9f4b-5c910362b945",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "191374be-7ba1-4469-99c6-2539b105c427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dbeb358-6b2e-4746-a49c-4bd97876ceaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "858e1b4a-b977-4752-936b-b1b310f7c3d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bb4ab6fc-8d24-426c-b10e-09502598c274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cde91d69-dd89-4a2d-b356-9cf8290b7c2f",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a03b4f6-b262-4760-bd14-c7b3c1971122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e8de86e-faad-4c13-918f-ca8caf86b9c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0d952af-00b1-429c-b681-27307be801cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "149fdec2-70a7-4496-bfc7-fa033961503c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "028fa665-f8d2-4a53-844f-1a819491ada7",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bb097f6-d6d2-4da6-ba3c-77cf74158c1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90a1e6f5-4327-4075-a606-47c77b79e438"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb38bd94-6b75-4435-9f09-f901632aaee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b89b575f-0a54-4362-a945-f4ba23dc79de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03d0b9bb-328d-4e6b-9114-fab0a36a6502",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8612412-ada4-47c8-a536-a8c54e40c89f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "338a148b-a694-4cb1-83ba-750672f3ff9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a303ef6-b075-488e-af4c-883f72d10b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fe23221-4cc4-460c-8b1b-b9d36537ac1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25cba7e6-7d5c-4647-bed9-2db8f6b890e0",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76b69678-b7ac-477d-8ae8-01b19a45f508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42759b3f-31c9-4197-a889-09a6bda20c33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61a43944-0d68-40b4-b07b-c0ef3d6ddb60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a345d8f-f732-43f6-8934-c50667d45a1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5590e73-b609-42ec-a967-bd4990a583e3",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b8e04ff-90a4-45cc-85d1-1f6fcb2557cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "205396a9-8bf9-474d-9c4d-55f30abd4350"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53ec95d4-6a87-4f2c-a22a-668af5d5e80f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b3028a2-e9b8-4128-85a2-85b2daef8caf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aebfaff-19f2-4ff2-84a7-f652b8a2623a",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83ba473d-05b9-4032-9e62-2cbc140b61b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46998ccc-25c0-4dc0-a202-066a32ddef90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee5eb54a-1234-48ab-9c5c-8ed0fe1812e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a5a9790-a10d-4ddb-8bee-9662c6b5af57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79ede5ca-e2c7-4f54-bc31-2af91768a194",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb85d55b-e483-4f19-ac1a-8d035476abe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63a03693-a309-49cf-957a-98caebf60a19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "242f3bde-7f34-4f9e-bac3-1d7d87c3cee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "27319b5b-8cfb-4fd2-935f-1c99d4d10f3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e479f2d0-ae14-4322-b46d-4c8feb59f63a",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5de02c00-7bb7-49e6-84c9-c9ae42438f92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b718f5e-5581-4853-a84e-41dcc84bc033"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aaac7b5-fecf-4363-87b0-36a4fb816add",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "482cbc5e-40ff-489e-a9e2-e2a95f5a8624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3ca5da4-7358-45f0-aa1d-1c804cda347c",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bedab95-9aa1-4a24-9649-92e2224bf715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d4a23ad-5095-4511-87f7-ab92336b96d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edebcd40-e3b6-4f9b-b681-85005a42e447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7ad00e4-7189-4d17-be7e-817891f26937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e31e1c06-5a7f-4696-b3f6-af606aa2406b",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3cb5f73-ba8e-4857-b4f1-de6f80d44fa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b368030-08fb-42c4-a853-9480123beecb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "549ef48f-fa43-4675-9751-32dabc22863f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "371a97a4-7e77-458e-978b-e34ff055fe52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b7e81ae-2b98-492b-b08a-33ac4eb789c3",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c7d7505-6047-4bc1-a0ab-f3d16769bcea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bae9e87a-d695-4cfb-949d-d5f8cccef2b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0120087b-1e52-463d-9f83-8c90e99a3efc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "598c30e3-8fe6-4dee-a9d2-b42fda9e2bef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08d8671d-8a9a-45ca-815c-a400acd8d0b0",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31c84da9-0b61-455e-b03a-5d4d5a9ba599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ae87ab1-83c8-48f4-ae35-8b396b73d18f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5ca3ff7-4e2f-4945-b024-9af52443ed33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "855eb4aa-805d-47e1-a0c6-9e61d32b33f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd36a4c0-e416-40de-87f3-4e2a29f70630",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d2ec245-f0a1-4b0b-a64b-d385c861205a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bfc5d362-cce0-4450-babf-1649317d7898"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dec6f439-6faf-44fa-85ac-64ccca2f9c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e250416b-e381-433b-9aea-3634dc75987c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e44e0b1-5cfe-49c1-8da8-28532c10648f",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36b57259-b745-4466-9b3b-e7c8152d07ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "beba2a30-79b1-4b0e-8d07-52124d26ab5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f99bcbb5-e205-4108-8931-0bfaf6874647",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "10220d5b-10ce-4001-a64b-8ae50138afa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1460eb73-8d18-4636-976d-bc07536f8afd",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b55d2458-d8e7-484f-8419-5fae3544d769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c7b6a6e-e38f-489d-a85d-2fc344ff669e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eb992d6-781c-41e0-ab5b-3e8a7679bd42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "55d47e33-5766-4357-b9aa-129310248c40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fc72cf8-8541-44ae-a70e-04bc733bef51",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "327efac5-4cea-4115-9697-43d20e42fda4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f5b07b5-13d5-44d0-bf71-bd71d9c6963b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8be73b34-adda-408f-ac2b-85745431c888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f9d0b27a-5eff-44ed-9a31-08e08ba566ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "085a4644-5362-460a-a261-3a8d0cf65db4",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27ecd8c4-e00f-49fb-ac00-8777c4aa2cc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7a1b8cc-631d-443a-be6b-69f8f6cf489e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4c420f0-a5ed-44e5-99e6-761b54a3b0f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "59118a00-fe29-44bc-a28c-bfbbe6f17b71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dd36082-5dcf-49a8-aa32-adfc3c9411db",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fd9f0c6-37d6-42f8-ac49-105dec62b10f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "538951ec-dd3b-486c-9493-70bb0fce26e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "273b08d5-308d-4d80-961a-b66042d82728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "41da9505-af2b-4f41-9fc8-19b3e4f3e4af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71108f97-2a96-4d24-9448-20c15656f188",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1499b432-7aec-4536-af8c-39f3ee343f9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b521b8c-14fd-4103-82f5-fd1db84ae278"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bbdd6c8-3625-44c0-a106-42350c9f0c97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "5e0a176b-e618-4875-8a23-085de2cf14ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5622ba99-4feb-4bb5-ae17-279d8b70866f",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "144d2d38-2364-4fe1-95cc-39c0947fd911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e7ad24c-6672-4aef-91c4-7518076148db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c23f1670-3e73-48f6-ad2f-3aa15b9e3234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c41252cc-9e66-4d61-9403-436faaa87ea2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea8794de-cddb-47db-8263-b907e79c7072",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09c65a2b-0ab8-44a7-b2ae-09083d891cf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7d30db7-f1d2-40d7-87ca-ce115582e694"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c4bee56-bf05-4015-b8da-e360446183b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e6363d1-f668-445e-a72f-14751512bf18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "328c7422-28a9-45a2-b8c5-cc3f0d40f577",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22ad27fc-cd93-47fa-9536-ce0cc920f6b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f256cc70-9549-4196-a889-3f7a1bff24b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaa18f5c-79c0-4c98-9fe6-6b7bfd5cfd13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8088d054-0127-438e-804b-fd2182567d8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f312ca66-a1d5-4a12-8fec-e6785fb349bf",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e3806cf-238b-4d8a-b202-f8e5e44a6eff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dca18792-3123-4443-8bb7-25c069ff739a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b102e384-990d-4667-aabd-4bd4ae551b4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "abfb6520-de42-4c9d-9b68-53cb20f1a3bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53d3083f-8ec1-44fe-84e3-0f9307377dcb",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf6dcbac-4dcd-4e21-940d-98a35e596a8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4845f466-93ba-4aa5-8e9c-275ae505bf37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87dafe4a-821d-421a-85f0-7ec482cb1952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "980d38b2-7ec3-433d-91e1-300c66817c19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1067967-d5d7-40c2-8a8a-fe5b52635d64",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91589aec-ed77-446b-a18f-069d671bdc1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9accdb94-1082-4c3e-a2f2-b86f73903e18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c085d4e-2d4a-41c0-b7fb-1e56ae495bd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6069f0f-3ec8-460b-a118-879f0bbf9870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3601f44-c5ce-4f40-8567-3f2f8d97a8d7",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7db25b2-d853-425c-ace6-f2ba1e9fd981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "757f3b1d-c6f2-4d53-a07b-df20df65a858"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c6c130a-7f49-4fdd-9164-eb22c27f4664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4f100d7-3f03-42ab-ac6c-cd8f14729c7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46c99e11-efce-4d12-bfeb-38f3b9162c98",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa756c1-8b11-4697-8794-3d1a89522b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc702abc-aae6-4faf-9f55-24f278ba3b8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21ffda59-8248-4d32-84a3-752c2723b966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4f6af378-0aab-45a0-a2eb-960a38a45fa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fb44911-a4ea-41bc-ad1f-5c990c223c3b",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca74931a-0458-4e92-8adc-3daea6fe8fd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5d07ea3-d79f-4777-92f1-793e0db1e7f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79f3a997-5e9e-4bbd-9e7a-7995f3a06982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6c31443-9e71-4c64-84aa-b31e17a4639f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8be1d5c9-1634-41e0-81ca-5fbed3e2ff24",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d412fa02-576b-4b78-9b35-514736286d04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f8b96b4-203d-478d-b62c-a468cf492aed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ad549f5-af72-4dee-abb1-a046ff74140c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "edd7cacf-5e45-4f65-85ee-d5fb71bb00b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dc3a03a-bfd5-45c6-bee0-632d5d60d269",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b9c7be4-472e-4e53-93fb-05dc2d17d32e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c14f17e-13d9-4a63-ab68-97135bbad3af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5420cc22-32d0-410a-a8fd-124472b06799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3d34465-7119-4878-8866-55f2b767f46d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a866f13-e9d1-4966-bd78-fe814e7989dd",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39855dae-8afb-4422-a1a0-7d726db8c9b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3940b1b-303f-42ae-9a84-bb6d2aea3d80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a11008a-ab25-44c6-a708-9961d3d1412d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "54bb7c4f-5cbe-48b1-8cc6-b11b23ed8344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0725e571-3b24-47a2-9a97-76839ec66c0d",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f39090f6-3f3a-4df7-a889-f1ae1191cfbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6813946b-1958-4555-9f2d-d29ee2ace902"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f25ed00-ee85-49ab-b86b-3be94383b0e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0fb8a1b4-a7cc-4d77-a6a3-106d186657fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "221bcab4-aca0-476c-84e2-36ac4192d79b",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98dd6e99-2997-454e-9eb5-d94860059749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1967886b-f7e9-441e-9675-e107767bfc64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7432162f-e526-4c79-b013-5c7b4ac0d0c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "f273b578-122b-432d-bb32-f97b508844b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8eac716-65f2-45cb-9f0f-c3e032109633",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0408eb4c-7a82-49c1-81bb-b683252a7398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2967d36-d036-402b-a690-43f8dddf6ad1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aa7acac-f3a2-4eda-beed-780a7044efa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d1e1c53d-e4b6-4d64-87d7-9329e182bb6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f799a9b0-b538-4af3-8b9b-f9685033d60c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fa805bf-edd1-4273-a86f-53a90413a842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69789e2e-e7a9-43ed-98e8-14ca4c3e2aa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61c64fd6-31c6-401a-beb9-5c8cd848c19a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1b68a4d7-3d7f-4454-bdba-4de9b2ffd660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55663854-31a6-4239-996f-4f02605b2a21",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e063afa-7633-46e4-960e-57d531ec29a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "729e76d1-c63d-461d-818c-aff484c13e3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fe034dd-ebed-46ad-a779-756e58d75e4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca4d12ce-c3f1-4d5e-9d2f-b43c88d4392b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3bd5f70-2b4a-4e66-9a02-5031950d7a34",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fdab3ca-6317-4660-b114-3c4af503f240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e42183fc-a064-4e6a-8fcc-4b7adc016c13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb5eb449-9180-42e6-b0f6-24cd31fe5450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6cae90e-55b1-4d10-a6fe-50020f6c83a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a330a46a-cfad-4699-8c7b-296d45fddc72",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75706d64-6cf4-4a5a-8526-ec0f604adc82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a80ce4a-d3ec-496b-8e46-55827a3adada"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc9c31f1-5dfe-4a29-a90e-b7c7df7b56f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "14fe87dd-f49e-40d9-9c5f-95bb178513d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75cd56a5-ad14-451f-85fb-18bfc26d7b16",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82afe274-9908-4f26-b611-2c68795ea448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f900ce04-5a40-45f2-8b74-ed8323a0dc99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "380af083-bd74-4a15-836f-78acd67d7be1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "36139246-b773-4958-be02-9de661acae4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39fce648-580a-40bd-8c84-0240b991ee04",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7def5b9-f897-4239-9764-eed2a743826a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36d08630-8ff7-454b-9547-2971b9bab90f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db288637-2a17-4a1b-b4d8-cfc288550c63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "13d22edc-fb57-4a06-9b45-2b48e49f726f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed093fe7-49b7-4d64-9377-a5179428026f",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "784deeeb-2d1a-4c74-a1d7-c5d5f3a35fa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfa7a7d8-d732-40b1-8eb0-e850b58ea23e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "618dcf06-b330-4f80-8afd-106d6472032e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b128b1e3-e995-4b21-b2a5-c8315e8e18c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69abdde1-f4eb-4c91-a192-94fbd93d4dcc",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "131d5826-5302-4d2b-a703-2eb6ef1b7bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fde5a6cb-b2a1-4f1e-aeec-a97843fe27f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aee2069b-67ee-4e4f-a94b-4789c4cbd378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "debdf8f5-bc9a-4240-89f4-265a02cf2dd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e08437e-bc06-42e1-8075-d2dd9ea51268",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2381a165-a413-4c10-97de-bfdf070421b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f8de8cf-f51c-4b03-80d6-e0cbf702688d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9a68e3e-4f03-48fa-80d4-3a40d6b5fdd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "42622d9c-3976-49a7-95ad-719c6e063d90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afe01ad6-ef7b-4750-ab0a-a8f402a1aed3",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a154120-00d9-4d91-8826-4326dbef7a3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aef95bf1-ea6b-43c3-ad33-b212f198c1f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a6c6671-3f74-4c50-a90f-dd393d3f7061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "03289f3c-0246-4e32-aae6-995e9ec8532a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d4735fe-4a68-4878-9651-5ac41fa7f0ef",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4920ced-50f2-4af4-a8bf-d2b8307e570c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e8f75b8-b682-4b57-b488-c2e5259868af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea2cc084-be30-496a-8ea7-ea24aabab0f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c2d1efe-00bf-44f6-ba50-ac86fa557f9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "055816a7-c8e5-4ce9-80b2-ea58e746cc92",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efb70028-580f-4a2f-a429-3a0459c121ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "829622b0-7719-4676-9de5-028469977195"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66ee0fd6-8af1-4071-8dfc-5e41a1b5373a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "198d4b69-df1b-4057-b455-c36a5db8b69c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebbdeb80-0152-4b5a-b4d0-2cea4a06c5c3",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "319ec5a9-7a61-4de4-a348-29477c1aca30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fadfe2ef-6df7-47bc-bfc3-938726a6e3de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a1c27e3-6521-47b1-820a-d84fddabe683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f49389fd-d3b1-431a-bddb-ec53cee157bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4ed8e5b-321f-4706-ba62-838155bca52d",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89ee20aa-afcd-4218-bb2d-33df0843a276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20c3657d-0c96-40db-b41c-d42cd20741a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c09de9c-ac43-4550-93f9-7b8980abc1ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae60741d-5eb7-4dc8-8276-950f3b77e208"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b919d8dc-2f45-4be3-868b-62adf895c4ad",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f871fee-5497-4fb1-aefe-fb92e83e48a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f663bbc8-9fc7-4778-afaa-21ac348e606f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e73e794-31a6-4ad2-8c65-73bfdee5569d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f755cb83-31bf-42dc-afa2-a72336df311a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c2c51a5-b940-4f10-83fe-b12fbd14523c",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0c5fd9d-f17a-4c17-a86d-bbbc5a6ba0d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "130fbfbd-b414-4a35-b4e3-0dfc33549e6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccd46f56-5b13-4b19-94b7-ba87abe84df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d60e9991-0f29-4de8-a884-65678d646b62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fdb873e-711d-4fbb-8f39-b00df24daba6",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "517aefd0-c92c-4d41-b17a-80fdefe5978c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc5a02a5-1319-4b5c-96a2-70d96d32798e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "531fa003-6010-4a6a-9b0b-d93abb12c6a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "163693c3-dc55-4309-a344-db352029782c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1302c9be-6f18-4c7c-9f0e-41f46c9913fc",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "506d4238-6b1a-4cdb-a4ab-d97c6dfc2c51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e506d2dc-d6ae-40b3-ba9e-41a3dd7adbcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c837f14-31d0-4245-a9bf-66ffd04d30a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "029c7a51-8b7a-4328-88d4-094c0b6803fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15e9df89-98ce-4719-a785-b71c33d24705",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9d242db-f84e-4dc0-888d-ffceca32a705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbd8e3a8-3cdc-4f97-9972-5dd90bc3550e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c920c909-2e88-4d16-8be1-8a9f81e8c610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d63daac0-f06e-4b87-8d2c-79366597cba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9486d025-dbd2-4c3b-a911-c1667222ce52",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6cb1ec5-73ba-48db-a24b-4cea4b54f983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b23ff98-d12e-47c0-bce6-1be4d8e2ea3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22d97aa7-411c-49f8-9153-baefc853683f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "118d970a-6916-4d61-942b-425209b1f414"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fceefd02-7218-464d-8e39-7a70b6e53be8",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f788bf18-a91a-498f-8086-08f403547d93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b69d4048-96fb-4b9b-bb86-a622d1b8dac8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2be549ff-d2da-4393-8c95-a625dce005f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f8b8a8e-74c2-4f9e-b400-6cbceee554b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7145134-fecd-4760-a48c-3c1bb74f5893",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1145a2ec-70a6-4da2-90bb-51740a391d5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "776fd0e6-22e2-4c4f-ae62-7dbba93dc892"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ace78318-cc21-457a-8fac-938194b7c83f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ecde60f-0ba4-4865-bf32-772b5817f38f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a290fd8-62f4-462a-9e69-afeb86b35c49",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0269142-735f-4508-ab5e-a0930f92af24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7a8d02b-96dc-44a9-bda9-9d7c91ada297"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4876da63-19cf-4c21-bfc8-0c551a625b3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3b1f832c-0139-42ad-9342-98cb01d9377b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "616d4553-9834-490a-8666-e3369ccca3ec",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b84c48d-3b3d-4576-8361-e4751dfd4ef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59d7078b-9819-436e-bea0-caf48b2854ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bca406de-194b-4049-9fc2-0531e661dba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2c25068-6a2d-468d-bcb3-6b99038a2f14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfa911e7-c978-48d1-9be9-42f54ca521b7",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be306ac4-8337-4a82-bac8-546a8f4457bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faaa81e8-eea8-43a8-8011-6f66c6430315"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f74f33fe-6add-4f4b-8587-f59931cd3e75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "adcac61f-4c99-4120-9e78-c7fee429eb83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "103b1e55-2988-4f93-b952-7a10e0672adf",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "772caa17-5a15-4fd3-8e79-239823edc61c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa9a2ab2-aa82-4247-aa04-014ad9eb1d51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c35e7aa-0bef-4973-82ec-a9ede1ce257d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "08b2c778-2291-4dc0-bf4b-842c25147761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67d7ccb2-dba2-4629-b175-97bb5d2e733f",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dad7e0cb-7534-4237-99e4-53f1dc3158da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "511f3d26-8318-480b-a5d2-17cbefac0a3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e6c37d2-74ee-4aef-8c0e-cdb9f68c254a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aceb5fab-5d06-4f5f-833b-dea2e4ddcc17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d025f509-6614-41ea-8e80-d1b961206c4c",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ece85cb-d06f-49d4-b189-d7b25219e194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dd04b54-b1d3-47f6-a24d-2873e32237b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fabc8457-a65f-4873-872a-91ddfd8fe2fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9becb688-c585-48c3-8e3b-d78d6b645953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00a87260-7292-4110-ab3e-c073640b0e8a",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "526c35ac-4790-41d7-800a-aa64bf716ad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2b2ca54-9d34-488e-a82c-084aa63d115c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b950d8-47dc-4480-825b-9f89060b81e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "74804f49-d3de-427c-a3da-eec48b85d315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9efbdf2a-8cfb-484f-8581-421369e9b2f8",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5989e8e4-cbd0-41dc-9e02-3dc9afb066eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56b9f197-088b-4b97-a00e-708b15e29a89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6d21f40-523d-4b69-82e2-8ce8e6cf83b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "95b75040-934a-4a38-9b2f-70dd79b7aa05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e990f5b-7dfc-4c19-a5f7-b8e075fbd430",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f2f2d5c-d2c2-41ba-b4c1-643bca3a71c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c355eee4-2b74-4caf-8c43-cabd8c5b85ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27048e12-2724-4dd5-8e10-c5cf15ac267e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "abef72c1-2499-4b1b-b103-903bba4dd107"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c9b772b-091e-4c49-a30e-6701ea321cc4",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79f133a6-1c4f-4f8a-9778-36d3464f4901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "783dcb4d-1ba5-48bd-8963-a68e63bfe86b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8596f0fe-00d1-4ce0-8aab-73f990323633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "721018ba-9bd1-4ccb-9d7d-657850220257"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01519d39-63e8-481a-a106-d5859f149291",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79813a12-7906-4f29-9df0-9edee39ab4db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "def2146e-5dc1-402f-b9e5-3f78d3407b6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a75ca848-765a-4db7-8591-183cef202832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff9c84b0-1aec-4428-87eb-4b8662071f3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dfff3ad-5a94-4260-85ab-c194f00adfed",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d0053fd-e997-4f65-b19c-c065bdec05e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac3b177c-3f2a-4431-b52a-debb4b9d5f3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea9dbab2-1174-46f7-afac-5152aa58a003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "63bb4d24-d85c-4ac5-a8f9-9f4121b158b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5f30af8-7f4b-4e7d-a3ed-94034907ac46",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dfcae7d-2b54-405c-a51d-7373867e3ac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "0a6aacfd-9264-4e37-94a3-94149ff20050"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c60bdb78-c873-4f52-acd8-55a2c728678d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c9e4b9f8-63ab-4f92-9d1f-c7825767f334"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8877734c-2baf-42af-b600-1de3d909ef54",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5e9b5878-c66f-4dfe-98f8-956adfa7149e",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2a397a7-3c93-41bf-a22d-016f704e339a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3326ed0a-153b-4354-994e-b272dc085c83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ad13bdb-82f0-485c-95ce-447d70ca52b3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8af336cb-1136-4d04-aed4-d77c4fde5de9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ecb4cfac-d2f6-466c-a302-38c37a7980ec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9b8d6d24-8f0c-4aad-84d2-f1a6a6b1a30b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f5816cc1-56ed-417b-9048-76d5e400566d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "84d1d6c6-637c-4077-8127-f0aeb867feb9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "582e458d-f554-439b-8348-e767bc1b22a4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "deb63292-c1e1-44d0-9d8e-8843311fbde5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "651d6eef-74da-4c7c-96dc-55726f0d464d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "aaf61f82-7f71-414e-b5e8-7ea12bc7e7f9"
                }
              }
            ]
          },
          {
            "id": "69df74bc-2e58-4091-a1fc-b3b29e55abe4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6aa9804b-50c5-4d21-a3ef-5bf911e7a962",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ad4f00c-9221-4ff7-92df-c36b17b9f5f5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5fa7d17d-a14e-42fa-a452-c3960e1f7db1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c394ba1c-e596-4142-85b4-34eb35eccd47",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "df156b0d-8fd5-4460-b673-d2085bb679e8"
                    }
                  }
                ]
              },
              {
                "id": "aaa79ae9-7f1f-41f2-acaa-55a1cfff01b4",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f76e29e1-ee40-4713-8fcd-ab28559ea631",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bb2c658c-830c-4cb3-9f2c-47e951184a57"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4c16b982-4c6c-473b-89b6-f7d650cc2629",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "af17c137-2ddc-46d7-b29d-a3aa265409b7"
                    }
                  }
                ]
              },
              {
                "id": "eb52ad4f-00a4-464e-9458-898bc2877e30",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9aeb0462-f0c8-496d-96ce-5979aca89a9f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d8104104-15d7-4e0f-805d-2ef6a26b4033"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8718b9cd-7853-416d-abfe-1971ab2e647d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6c3d750e-c50e-424a-b9fa-bb85f8bea1e3"
                    }
                  }
                ]
              },
              {
                "id": "0d1ad1f1-5345-4d9e-8c0d-c4beb426b190",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a4702f1d-f9a4-4e29-b38f-d2d5f95f5b79",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e45ac515-4402-42be-bdab-0aa1b8f15f1e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f6c1371f-7f2b-4d55-bfb7-d560cf643677",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "4052856f-3e2d-4e98-abae-7a4338a07eef"
                    }
                  }
                ]
              },
              {
                "id": "75c88cee-1ecb-46c7-97fa-065b5cca12a8",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "35f5476f-aeed-4cbd-a1cf-be43341198b5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b1516d13-b3c6-4154-8ba7-ea6a70700de8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "57968aca-5307-4a3f-94d2-1eb76572b680",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "fc6ef850-26d9-4703-b155-f8a8d80a816a"
                    }
                  }
                ]
              },
              {
                "id": "4ccb4d5d-d54f-45ad-bc0f-067e1c1cc971",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "48e6f705-20f7-4278-8887-1b6ed67c393e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "758e7a77-90bd-45ec-9603-6ba9be968467"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b13e785a-5877-47a8-8f9a-1446b93007e9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fb1b7dc4-ca80-4bdd-a271-697059ae906d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5478ad67-74c9-4818-9432-20e72559ed70",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ee411f7e-258a-4ad8-b3f4-9b47ff825751"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4a3f6d79-1201-442a-8bf8-8393abc39a8a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f4042379-7302-4fb7-bc2d-8892709ec067"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0b794078-045c-4c99-8106-54373ce37bbe",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "f959f3ae-de1d-4136-a3af-6347b07e166a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fb8ac419-5a33-49d5-a647-9a8af1f8762d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bd8d28cf-1a1b-4b4a-b08d-f29ca4f3df04"
            }
          }
        ]
      },
      {
        "id": "491f4d6a-6b97-4296-81d6-d98e1d53e5fd",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "afc12258-2f1b-45b9-88d0-e3b65af7b5b6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9315a9d6-7272-4ef1-872b-976bb49b5ba5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "708259bc-f739-4491-b1f2-e47b596e8c3c",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "958a0512-4257-4352-a5db-5c9c57d2caac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a945d5e1-d665-4d97-9bc8-a4d7a2d70e03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d72b861e-41d8-4a23-b3a3-bec8aebed5c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "6dac8f8c-a3de-4325-8914-1f1f67403d88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab9d7f0c-5635-4669-92f8-b65085182e57",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97a23cfc-1c2e-4ad9-a3be-e93d77740bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "266598d1-9053-4e82-aca8-f008c87fa67d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3292b840-d22f-4dc1-a062-70a5494665ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc8b50bf-9c6b-4bb5-80a9-edeba5153798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c512da0-2815-4dde-990d-077d05965d38",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73eeab29-d2ec-4010-8658-dcc3a48ace31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fef6ac15-4e54-4217-a5fd-7ad85985dc1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "303f3b2d-3476-4e92-b036-74cebb428d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "343c2594-3089-4e84-a4c7-d405de6cbb15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bea0cef0-44a0-4ea5-bbe1-9b7c0729809f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a78d13a3-f2ae-4471-a0a6-d1cc6394b180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "306760ea-a8ef-41f0-8a1f-24a46e6bd46a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c65e91e5-f986-4752-9091-e4e33fb27c13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a00db117-f7a3-419d-b488-a58e64f6213d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a4084c9-8db7-43cc-8b11-a7d5520509ad",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d0d4a6f-8ab5-46d2-ba9e-462a39648a91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b9b5266-550d-4600-949d-f40ac3b1a91d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fd05663-fd11-429b-aed7-71c5b7c6bcf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a0daedc-e5f6-4127-b9db-22d42cdd3872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "709bc7b6-dd60-4817-a9d3-73f85aa4f7d4",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbd200d7-85bd-4621-a681-918cdfad4e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "491f9274-7220-46ac-b608-4d909fe41bca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55a8efba-f064-466d-a874-fb07399657db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "853b50d5-a53e-4d03-93c4-fd6d5f15fc80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96fab29e-2632-4c6d-8457-93ffef8a4f33",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "082b8492-547c-4dea-9c2f-446ae567d9be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd2a908c-eccb-45e0-8cf2-db7880cd9586"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c7e1254-6265-4c53-8543-13c3d2292c57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2f21bb3-8dcb-47c1-82b0-fbf9fbd4760a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d40900b3-9303-451e-929a-33d67b4cac9c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e703979-f29e-4829-a0c6-9499c756d6d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6da04f5f-6a59-4500-b72e-3b1f5c01979f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b6126bb-e2c7-4590-9d99-8c788dfabe7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "556190e9-a196-4373-93ba-d9b0238af84b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc5d9e6a-81a0-4cb2-8b66-4afbe98c93d7",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d42d8d33-1115-4db1-aecb-61f796da0c94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "235f7bb1-09fe-4d41-af7e-4ef926180684"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6f6182d-6347-42f5-b8ef-04e11942d460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b35654d-3378-4dd7-8b5e-cc9131a2b897"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ee53574-c23c-4d5d-84b8-a0f9fde034be",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86ba565e-c3c8-4271-a2d9-6a14067ec749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68870bd4-9552-453e-8713-df4780684489"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3b9e435-4564-4695-9b65-bbb67765a84e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f45ba20a-7d68-4158-b664-a4dae609d219"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee730a31-cc4f-4208-9b15-e9b83f2b8cc2",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd5d03f7-1b72-44b2-b71c-c7e87926907a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76b423b0-4420-48c6-93d6-a9a0be9b12bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5157872a-d6b3-434e-83c5-078f4a9aa279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "d8590710-4967-4318-94b1-5249005f8b25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6af2e8a-9af4-45f4-8202-8507fa97b960",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68d321f4-57b6-4aa5-99f0-ef9142a5144e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a30e0ce9-ec35-42f9-8241-4db72500bf21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27b945ea-9a24-4327-94d0-8ba0df731739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c5409b42-77c1-4f27-bbe7-3acf83622931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d80dcc0a-95f5-4ebd-b9b9-bb79044e5c67",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab888630-6a43-407f-b1cd-a24e9c08ee31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35df4051-f665-4c9e-aea6-fa4a6589172e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "076f1c5c-39ad-49cb-92f1-77aadcfa59df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a016fe2f-45fe-4c5f-9560-738f2e798085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bd434c8-9181-4f66-b7bf-20f21148737e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee68da83-ca12-4016-b6bb-0068309dcbdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db204ec5-bc44-4945-94bd-0f6c599532db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9720f7d4-fd4b-48a2-b6b9-bb3d792c8d75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "2468f45f-c86a-45f7-b5b9-0f19022109de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a26a8ebb-ada9-4b70-9a28-8c27ac2faa5b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f0e281b-f5f3-42c6-b20a-51abcdd1fceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c94f0be-b30f-4698-85b6-c45f9216ec2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f08060c-f0f9-47aa-adab-633aa27613f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e90581d1-a84b-40ff-8bc6-84c733a77ada"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34dac691-9211-4ce4-b76c-423e9f2a5554",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edb4b710-cc71-4fe4-b2de-3b092d55a83e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "decdd4e6-9f4b-4d45-9d6d-89cb8af0f0bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07a47a62-0bbf-4664-a56c-a78b0c86f136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d564865-1078-4068-bdff-3590084d1d59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36a9b825-ffee-46da-816a-05df8210242a",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e506f201-48f8-4c4e-9d3d-5d2a50f1a2df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f490bc6a-b1fd-4746-9523-0f5acc7a923e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ded77066-2750-454f-92b9-68d9b4aca757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "aae0b2c8-a6e3-4603-a3b5-cd690c77641b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecaab518-6d99-40fb-9061-a21cac5c1858",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7259d4d5-089e-4082-a594-9a811ff48b0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c23a461-ecd1-4b21-9899-9b3b3b1e4ac0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67d2d258-b41b-4fb1-8c20-6fc7623280e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae15a72e-c4c5-4774-be10-80b1f6bf27a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8819f00f-588b-48a0-9af6-bb7880497e34",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d51e899-cb93-4010-a4b7-9851e8d1761b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07741eb0-174e-4edd-97b4-76447d4b7407"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff905bf2-8c4b-4de5-821f-c92e6c853cf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd508051-c8a0-4bff-b69f-65e372666867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c99b67ef-f8c1-4b9b-bffc-a25ae8b1c60e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01fc9987-0669-40d7-a27a-6edd881a5b88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfa009a6-4450-4cb3-bf06-e7bf8d3dc116"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "216684b8-03ff-4d87-92e9-a75ad9f7c0eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "97f6ec83-77be-4254-a053-f481d12b0f6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "743bbea2-d6e4-4ca3-a38b-62a074a7427b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bc79984-7f23-412a-95c2-b79ecfc8c6a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45abf502-75bb-4d35-91ca-c6fe19b75efb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5798bde8-f229-46d4-ae61-8891f53541de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0eae103-c376-479b-9b00-fc224e10f9af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "929750c4-7e5b-430d-81bc-0f26f55bea12",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6513da5b-d833-48ec-b6f1-2109b495060b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03f8efcb-2381-48e8-ac41-071f146ba75c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43789f1b-3a28-41b0-9247-efa7f8976bbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ff0d7dc-b9c9-4452-8bd4-bf8f3dbccfea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cf7878b-95e5-4dba-8097-20f122cf9533",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "777c6147-49f7-4614-8d21-a7fd46665430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5df43749-67d5-47c1-99ea-cd6627dab964"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9171533-ef36-4fc4-938f-e48d0461d1fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "266e4307-ac56-4de4-8770-1b97267c7528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b6c4a93-46d8-47db-92dc-7f0cce8bc730",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "855fc534-85ae-436c-81d4-e78d9b6b0f64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4417ac0c-86d9-4b54-94d0-d4d16afbcdcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ae1df8f-93bb-4c32-9c89-2c5cae2645ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a7c2500-df78-4e07-ad52-55145ac18b07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eed0eac7-50a5-433c-86f3-4f24d06ffcc5",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f28bbfa7-c8d9-4b5d-b865-8d2c3227a2e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e34fafc7-37d4-46ce-8f09-9efa7277b956"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9158d7d9-6f52-4aa9-9115-e76e76ff6430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32ac7782-6588-4e21-a6a4-0aeeeca3930a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6115c08-2c01-442d-ab34-fc0ad6e3c419",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "732afe8e-987c-43d0-bac4-0731b680bcec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0aeed6d-e02c-442b-9627-eb682db784d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12da1776-f89c-4c1b-a1a9-b700467943e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a596010-63db-43da-957b-5971808653f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a84336fd-777f-4373-b72e-327923bbcec1",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96f25e74-bc93-4564-9e7f-cc71f36bf587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2649463e-2ab8-4bf2-8a11-6de2d53a1710"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76be9536-8d2b-4173-81e1-aa39ad3bb2b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa634a1a-43b3-4b16-8f22-9d53bd4d78af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c770236c-c914-43f0-975c-afbb43f25a06",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6be403f6-9d73-40e8-ada4-9d612e41d637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d27cc6ac-973b-43ab-a45a-f20db8446e46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b125bbe-4c29-47eb-ba94-6620c40a15a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c7788e2-12cb-452f-a43b-e854837e749a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "273f8b33-c644-4bda-8552-ecaed6558db9",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9e5d538-458f-4b67-95df-8c9acc0f2624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b669090-30af-48c9-8004-11a5f51bfae0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38547e8d-86b7-481c-afa8-3f83e837754e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a448af8b-8df8-4493-8c04-45f2329343b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35c66323-e836-42af-883f-53e7e73bf99f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c453c0c-0049-45f1-a62b-1e58d12a7abc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b963f60d-d399-4eb4-9f52-d0641c7a54ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f786ad3c-d638-4879-8c12-c3aafc08a0f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b75de56-f4e4-4cb6-a84d-739450e8ddfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4099c6d-b766-433d-ab9a-509bb8808f66",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48610a46-cacf-48ff-b9d8-04e0d2141ee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66d1d20e-a26e-4f11-93a6-401babc16da1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16ca2ba2-492b-4f3b-82d3-beeff3711271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f91ba453-70c0-4f4a-a67a-523fd5c9b0bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "007c0ccc-b8de-4627-ad70-720858ba3cf1",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a6cc08d-1f60-4b94-8723-d94173845fd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7944f9d4-8e91-41e5-a4cd-24380bc0ad78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0597d30e-24af-4ecc-8fa3-e0b1b3645704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "54c1693f-2f49-41d9-9ac8-ccd3a7de6f10"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "94dbe2ac-ebcd-4c27-83d0-aefc28918937",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5b698afa-e41d-4c61-aca3-db7791107bb2",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb640eb4-266f-4579-afdf-2dcbb5d411d9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "09841c9e-652d-48e9-8588-b24d6e0a8fde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1227123d-9bc7-432f-a0aa-57b5d3bcaf3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d9ec871a-3a91-4f31-9ae2-667e7427638a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "65262f0d-b3c4-4bf5-8c15-01937a313cf9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0631bfdf-ef50-449c-a032-e49b93485870"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d421b73a-8279-482b-9cf4-9328e8c657da",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2037c31e-f616-41f0-bdc3-12b27b46282b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "06e38462-06b6-4b3f-ba27-d55025c0b9f0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "073c02c3-7c2d-48e5-a76c-3ef43983774d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "30a38d99-371f-4db4-9eb9-a40cc050d202",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1025382f-5ec0-45bf-a80d-267397c46023"
            }
          }
        ]
      },
      {
        "id": "6195a2fc-c95a-48d3-99e6-b027310c0774",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "20e33f1e-27d8-4ece-a410-70ba633f89b9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b68e06da-e292-4865-ad5b-7e0d0dd64a5d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "677af6fb-a57b-4352-81ee-29fc5731e179",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68966d41-997b-4366-92e4-d43a1aaade2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "916cfe8b-e161-45d7-83dd-5f46d095e6db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b9b59cd-73b4-4c85-ae4b-a4712daac973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "9cd532b0-f5d7-4ce8-a2ae-82577d6045cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8c090c0-15a0-464b-a3cc-1117feb6de15",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ed32d05-1b25-474c-93d7-2e98bee9e60a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af7e2361-d33a-4722-b22a-e3b667c7dafc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f17849c6-5b96-4525-ad7e-473c2ba023c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "add749b6-b53e-428c-90fb-5f80bf3b32e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df7c91dc-13cc-4d19-9453-d408f10a5258",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76319597-aca5-4665-8f2f-b0a54e158632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ab0b8a6-a3ac-4aaf-9547-e04a527aab01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8763e0e7-22df-4c95-8b12-f0415c81af2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0547f5c-b6ac-4262-b64e-32e24556e2b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eacfca5e-b4cc-4d8f-be84-23d093e457d0",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c897958-9d13-4c4b-86d5-a24bf27cf133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d97e106-322b-4897-9116-6e6571a47edd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b66ff78-ba51-43d5-96f8-8b4bb7b0bbaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "060ab4b0-561c-49b6-9e54-0ca172394d2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6503e53e-5314-443a-bc9a-62aed3478d27",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2493d7a5-49ef-4c13-a9b8-93635a8ee5f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faa9751b-a50a-4589-ad94-1b409c41033d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b6eafd8-772f-4bbf-bad7-e7869f29d5c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "58c2e2e1-bbbf-4dde-b374-f143c8916b2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b864b2c8-b40d-49df-89d0-0173cf0afd52",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cd8f625-9d66-44d5-aa32-ae9bd312f98c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "490835c2-21d5-45df-bce5-704cd0069276"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9f58a1d-6323-4e1b-8554-7fb15d93acc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd9be529-5197-4878-b97f-4b37af4cb295"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d812efaa-b515-4f17-84ab-322f34936f2d",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa4f726b-fe3c-4b0d-9fde-1f522a46d13f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa28fc0d-1156-4e14-9651-95314c097cdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae67436d-3ab9-427e-880d-f708adc7ac4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "384526ea-2846-4f54-8a02-3b23a999e979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf43da55-3b51-4b9c-9d5f-9e7a08cd6ea4",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97d018de-f1aa-459a-b27a-11acc63da886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca31e9b8-87b0-496c-a8d7-7a3b11c50fb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9bb5a1b-8f24-4213-a479-a052dcff980d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2d22cd3-efa3-4fe5-905a-0f2b447baf2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cfaebbd-9ea4-422c-aae2-840a369586e5",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a18ad13c-2b71-4fff-b2b8-f91e4f2518e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "017aaf11-0662-4268-8bfe-1fa6d9311d4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49e70177-69c2-4009-88d7-3c572fe5f474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "79274383-1d8d-44e1-a1b4-62d870e95cce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fba9f3fe-5925-481e-b714-5e55caf21ca1",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb0c90ef-9c7f-4e52-a93a-bbb1e83b404c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6fd21de-a656-401b-9bb7-2a74e0c6237b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee5e1218-e4a0-49bc-9e7c-02b194b65844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "05ecad47-40ed-4672-9365-e75b9c79caf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f463c076-04ab-4fad-ac79-2ba886d98fa3",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "493a1ee3-07d6-420a-bb0e-e5033f35b2ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "add154d4-9ea8-4f73-a088-1d695b350296"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55cc4078-cf67-4447-9872-712ffcd15669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "7d3997ad-2027-4ade-a10f-5a197fd27e28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2e723be-0687-4b27-abd6-5a60e512c68b",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "287d7b2a-38ee-47f7-a8a6-2b3ae36d750b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee2e1dbc-c842-4886-a949-554e3451e77a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd5087c6-dd13-49ba-a75e-2b5a38832263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8b269cea-4557-45ad-8f7b-6b2877b9ebdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0f0c3da-eb6f-4b2b-b9ed-8616f8e3afd8",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cecdf66-6a0c-4ed0-b0b9-4cdb6c9d26d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b17e4f0-5635-43f9-a46e-2ab194103aa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bba299a-c47e-4f04-bb17-14ed2651d233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c24c4792-cb2d-4f58-bd20-809d8136d2ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a145757-dd58-4872-aadf-d1875723cf16",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c304ef04-0d21-4d39-a2d0-f6a6930f2c63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a1f4cb9-2580-43be-808e-6004ca10338e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77926dbb-99df-43a5-b318-d6ddc5078070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0fca60a-8915-41d1-a683-91dcbc359821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d101431-5b2a-401f-864d-84b988bd10bd",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88478b6e-5635-4415-be2a-2c73385fa410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fc7804d-4976-42a5-bab0-bf84044487ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "521100b9-eb64-401f-8144-39033c429c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "4300669b-9e4d-4c84-a871-f89f65dedf39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e506d40-9519-496f-a57f-e2d78616043e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6510cb29-d46b-4ed9-a134-49dce71ad604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "570c25d0-8d16-4849-92c6-218abef132b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9c6b516-9aa1-496b-92d4-669e6fcf682b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "24485160-f9a4-4b3d-8ab8-03db0358a614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b68da8b1-88bb-4901-a134-705e922fa5fe",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a94ec24d-a73c-426d-884a-3d32b192c7fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "680ae596-0186-4b00-a3f7-19942708a3fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a9ebd04-85cb-462b-bbfc-facc54f61cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce27711e-84b7-45ae-9218-85bc86f91b99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a778b980-57a0-4aee-9275-085ed6c89ed0",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bd2e98a-f418-40c1-af44-f953f366cd89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "267b1a3a-2d41-4363-9a41-13881f14d8f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f4d963-e2e4-4ad1-a97c-dd2b61598abf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "beb43174-ab6b-4db8-86b8-1984c82f7e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e9c159c-4e2d-4ece-9be3-7e646d65d991",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cce74717-f212-4f73-9c0a-a30c662e9cc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f498be5-e7bb-4649-96ea-3d62d87a9c8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e81a46c-fecf-4182-bf83-a9f2571357e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "45ef0376-654d-408b-bbf7-7c3adea9c8f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d64de109-4046-46a2-ad97-f9d6706b14be",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b72641df-bea3-43ad-a220-ae0f644f9eec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc6b129f-18cd-4f13-8015-ddda59f7c048"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ba88419-f37c-48f1-a20c-af7d69b75830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3d83be5-e4b7-4724-a75a-3c84b4c7973e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad313777-17da-478f-b838-6e6888102c91",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12edcaca-1ed8-4ca8-bd48-3116ccb09b76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0984a3b0-0436-4028-bdad-40f5c003b95e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7667307f-7e2c-4b46-84b3-24070ed47774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6793a994-faba-4e81-88bb-51b438d8daff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "347488a1-c3af-480f-8d43-9e99f13c8548",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a7413b4-db32-4c6c-86e2-52991265568e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e1165c1-b24f-46e6-a04f-4660203dadfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94b827cf-993a-419a-b332-c5555b338433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a5b7f9d-d49b-4811-ab15-02cfc69d5315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e69606d1-3c04-4d79-baaa-23a1f19888a4",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eff567f0-35ae-452f-ac8a-3de36897da7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "656065e1-d063-4245-b84e-d9a4fa7babc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f603c52-8f9e-44dc-b419-d38904222857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fdf88647-0bff-44d7-a7f6-a809808d6148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7c2831e-930e-40db-b36d-8d4ad4c8cfe2",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be0e0360-3008-4816-ade7-d3c8cf79dec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d69c0a2-7a42-4e82-8e1a-b2e89b781041"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53b7cf7a-b774-44d6-a255-9841e851c2ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bbfc5c58-19b1-421a-8118-f84e21bc2615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "283c410f-908b-4952-8b95-3935ae03b6f1",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f2c4307-87b9-431d-adea-0a46b222ebc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c6a2958-3fa0-4a9a-add3-9c48d2435154"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b26f687c-819e-47be-b2a1-e0462af7a779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c62422e-eff6-4f08-ad72-5160e43d16da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65b58caf-8b79-404a-a683-c2a1aaae5123",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffd5bc1c-bed6-469b-bd83-9e3aca35fc12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaf7fef8-a05b-4259-8f17-6529c4237280"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0a6d6d9-fdd7-40e8-86be-25c68ffa118c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fcbe8f62-9934-4895-a567-95426cc7805d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d360191-3d92-4ec6-bb0b-6a726f0a8dbf",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24e469dc-07a3-45a0-9932-6d386c3aa7af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bec07f6e-2987-4ca1-ae88-58e1cce42a75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea325d28-79e5-4f64-bfa8-e44bd8915acf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab3b053e-8cd3-4694-ba14-38c94fb2805f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4de1108f-d12b-4a1d-b7d1-22a517a65d69",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d61af83-28a9-4e13-a332-4dc34f466b11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "420e29de-8f7c-4277-910e-a7f6a2fc1494"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae6005ec-8dc3-42fd-8d2e-4e88e9cb452a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b58ca4f-115b-4863-8d16-8272174fe226"
                        }
                      }
                    ]
                  },
                  {
                    "id": "034ee324-51e4-4726-a302-30012c0d684e",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb56dada-51f3-4732-8317-4c0c99614938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3ec1096-c999-49e8-9642-efe493d1f9c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "761291bc-8c16-4414-8e85-ebe0e538db7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e259a77-9f64-4f1f-9c1a-b235129ec4bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf0de8fc-2bb1-41aa-b797-d1adf1551102",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44c6651a-7bca-41c5-ac80-6ff9d89a2350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5a7027e-21ee-4839-b05c-91e64c2670c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7721b5be-4c47-4f9f-9305-3d62f4364b8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2839d34e-78fe-43ff-b5d8-e787ab56749e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a266b953-3f2c-4d3d-8d07-c903cb74e7e7",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc4777fb-35e5-45a2-a837-0f0225674cf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55301e59-ae23-46b7-864a-829485371201"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b9d3a43-2e2e-41b4-bf5c-12c001c20d6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "81c0e20b-998f-4dff-8b28-b19d9d166bad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3a5dec1-297b-4b1d-8c48-b3da6f5f96ff",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c30a718-b528-47d2-89fa-0233e0d52135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d35a3ec8-f860-4b30-b618-97bd66d7403e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1160c1c7-eb59-4aa8-b9ba-cdd2603128da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d877076-11f9-4cb8-ac9a-0a43b951f097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c7e5d03-db75-4f5b-97bb-b4d5deb0a72a",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57337e98-12d8-473e-bf6a-46c730ddb34e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20f0c133-5e41-42b2-a8e6-ac3ef04d27d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b295e4e-7968-4106-b1d7-83e4fc16fb55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "269f90b8-9963-40ee-9509-da865e21ab0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa250239-e794-49b6-b14c-6ae77b10944f",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79226e49-809c-4ae8-bac9-8e6f4b8656bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b27df064-11d3-4223-badb-8e1b18b9110d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3636cedd-2d33-4ff2-abc6-6f1e2a153056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "648b3ad2-122c-4ee4-81e5-9ece90456bf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e62a31ec-ee62-473d-bef2-282d54508ee7",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78b2cff0-5ff1-48f9-905a-9ff0c0d2b16a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f55bec2f-8ea6-4732-b1bc-87b3e16f7ab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce8c1028-4713-4cdf-9ca0-5b432209d5c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a5cfcea-591a-468f-8d85-106808d99088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7090a9c8-6fd7-4960-9a71-50ccca81de79",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f779c6c-7cf7-45c2-ae45-a909bb433bf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6a54d53-7341-4c0e-a668-ac96ba3a6316"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a8198ca-c3e5-4639-bcd0-c155738a6325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "074eda47-071a-4ba6-a31b-b69c57504be1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a23fd4d2-823f-41fd-bc10-0887cd0fd6e4",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29557448-5a75-47d5-aeaf-d5b649fa6c95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b26d79f-f143-4d9b-8d1a-70aed3c520d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b542e367-fbd7-4424-99f4-c2cde54f4be8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2d463b7-8465-48cc-ae8f-81937be99762"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "08f4ee5f-179f-42c2-8c62-b211c0716f0b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ef339df4-55fc-49a2-9bfa-738b63e6119b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9861a4e3-4e7c-4347-af1e-01c1c9f047ae",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "66b290b3-a179-4d5b-8e65-7cd6de6a5dbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22f8ea2e-44fe-4c9a-9aae-7b8936362327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c9be70b4-9978-4635-b077-7d574030b83b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e46a9725-e8d4-4540-95e4-335b6881aa74",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d3bd8975-272a-4b9d-ac78-3864c5bd829b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ae9a960-0617-41a8-b195-11935845cb0d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0760e8fe-7d48-4a67-ac70-8848035900fc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "387e6e79-3518-4bd2-bee4-c5abca655f85",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c270a237-cd4c-43d2-a249-56cd2fe53a87"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1334378b-9666-4b19-b006-8d41cc99cd09",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bc3b54fe-0f8c-4201-b1d9-ffb412ee5836"
            }
          }
        ]
      },
      {
        "id": "f874b27d-ec16-42aa-b63b-402271fd8ad3",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "8c702d32-5afa-42a7-832a-d6620e21a959",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5ed3a148-a926-421b-af2e-3339aa4d3a9d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f727cb09-0336-4a2f-a1c0-8ffa719b64f8",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64c993c3-6c33-48e5-904d-ebb279d36654",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bcdb875-bcbb-45d4-bec4-340a3aa0bd23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7ca80f1-64a9-4693-932a-f8b3e66c60bf",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afedfa39-d6f3-4e56-8e36-f21a21a30fd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28d15f57-be0a-47f8-8e16-e690918fbf6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "603061dc-c2b9-4329-b49c-239dcdfa8646",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d887cce-85ae-4473-831e-ed98b9ece070",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25750c47-7887-4ac4-a6dc-c197976926ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e87fae50-6668-44c9-bc68-f9824826d9a9",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beeb78e5-c569-4996-af13-6949b94c9edb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51744189-0611-45e8-b1f7-debcf03088a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "098b0827-9c46-4977-a9a8-4d5e9cf6c96d",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebb13e32-1967-4a8a-b2aa-1eb086101cd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97a33f4e-ff9f-44a1-9e1a-c9674be1cf5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8875ad03-2a4e-475a-bfda-1a848838fc0f",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e675507-b17f-4dcc-a6e9-ecb06b08682d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7020141c-80dc-4519-8d74-f6556dd09af3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca0e42db-32d4-48fd-9ccb-7a9575a4ea87",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1808129-6558-40e9-ab7f-27f72cbc9195",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b9cfc43-cbcd-4b4a-a5f7-332216d30230"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ebb1364-d4a7-41b3-850f-4f87e728bf41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a3c26d0-524d-4a2e-a7ef-02fcf0c14150"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce24db9f-8047-4b16-a016-ac3e26ff55b2",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3efa933b-6894-4892-9db7-fab281c72aaa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a27cef8-121b-44a5-be23-c6255c16b1bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a39c0170-beff-4974-b5cb-95891c7413f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f534af4-f948-481b-8dd9-415c2f8b47ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50b6fca6-e976-42bf-b42e-a3232cccaeba",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd80b8ec-00bd-4414-9ba0-3840a3b9c494",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db8250c2-8ff6-4c74-bf2d-64b3d3963327"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afb122d3-0f83-4f65-8bab-8d0f074645be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64d920b5-10b5-449f-bb62-4d13e3a906c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ad7dc09-8f8a-4bf7-ad84-56b0cfeab3d0",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de88babe-1105-41a1-9ca4-48d3d1a7cf1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbedc599-0e4c-490e-9e0c-72392b105cfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b782ac3-ef81-4dce-811f-b2e66adf00d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38399a78-7ba5-4fac-8a18-42c0c3f3773e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daa97510-26a8-4462-ba65-93e34de8ffdd",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d6f8444-4598-4fd4-83ce-0453dc091cb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73c15e95-ca3c-49f8-80a8-f749b191686c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cefa858b-5192-4103-a354-173a7cf674bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "555fd6fc-9367-41ed-8518-9e122823e627"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b761fcd-a47b-46db-97db-4b069951b789",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1d38cf6-e502-411f-86e6-9a40b7eba150",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1f96ad6-8202-45da-98f9-f4f0b734c2d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd1ca2cb-05f8-41ac-b267-3e94dda1a356",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e307056-581f-4abf-8ae8-556d830ae7aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86e1f9ca-39bc-4e10-b153-0c163cc95e67",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca8dde66-20d1-47a0-9ca2-93a1e7fc85d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "983b3b16-fd5a-4112-a59d-d6170e290fbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce402ef8-cd3e-4e63-8a08-c4985996269f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5727dbba-8459-465e-824f-67e683741c0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7fd3744-aed3-4bc8-8dad-e98d8d596a6d",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1674e8d6-6d27-4f21-8fc5-0be987914281",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83beae13-c0c5-425c-9694-65b7569b4a29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9d3d4cb-34c4-4f7d-a11d-ddf290fba9c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0319124-ccf2-46e7-8183-41bf7f14860d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fd6dc37-45c8-43c2-bbbd-548e60b6921a",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7267aeb6-2e49-43dd-8498-751c24c41246",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0559748b-4e2d-40b8-98e6-8f230b9e8293"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f505bd78-7d32-481d-be50-b43e9f19bbdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4351c690-b071-4920-a940-ddabcdd24dd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01bb552e-72ae-44f0-b1b9-1372297d92b3",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ab8f86f-eda9-441e-89a1-a668d233e288",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cff094fb-4d56-4ab1-bec3-2795a850c0f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a599f2e9-55c2-463b-adfe-eb8c2076e651",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7fa8b62-62ef-4431-b573-4aca1e6574a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcdfb75a-899a-4192-940e-41e875152a5d",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9139ff93-37d5-478c-95db-4a1c16e3b8da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2033f4b4-e36f-45d3-951e-c72f4e78f06b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a8886db-efcb-4fb3-b81d-88165fee7b09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed61ae51-1566-445c-bdbd-16225cea49ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45399740-9a55-4e02-9303-dee8254df61a",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bb89e93-c464-4cef-b8bf-03a81b956152",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7db663c1-824b-474b-8f9f-08ab3b80c287"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d4b8a88-6ebb-426d-b4f0-462e4f57ef24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "823305ed-e1c9-4de7-be3f-cad405c6422c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4010d82a-6372-47cf-a78c-d5ac7e612e95",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9862b5fa-565f-4381-84e5-8e1e5885b819",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c48ba4be-4b08-4dcd-ae18-378c971867f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b5b1d80-205f-41b7-a987-32a53d74453f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38630c5d-4957-466a-ac3f-5dc8060fbdeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39042efe-1eb9-47aa-a381-2d3e916d9031",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8216285e-ebb1-493b-ac17-a9274a884737",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24402440-5d7b-4c93-a5ad-8a2dd7ada44b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "570d012a-4e60-4ace-8c73-4e8abcc646be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f9dcff2-8c7f-4383-970d-1757b6c6e131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5b4009a-1471-4815-b9c7-81a9de4c8fba",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9377a1fb-1444-4983-9823-54d73c4fcf23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "942c09df-2f2d-4ee5-860c-b954413c006d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "603bd6ee-3c6c-495f-b5ff-e5611306891b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cca2b91-4712-4259-aa1d-c53ac41f3f86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cee0c87-c27d-48ad-b6e9-e18086ad9bd5",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65678288-6550-49c9-9956-4b7b6ed4f4dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e5897fc-16c3-47cb-82b5-86f046797828"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81f857ba-d9fd-4159-ab95-a80f5fac6e7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81b2019f-554f-4285-991a-57271be42403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80c4f1bb-a934-47b4-8739-d0ef3a25a06d",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b76e6040-b874-4222-8df9-44d468f7d512",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3534cccf-833e-4f85-8bca-692bee2e4bdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4b32825-c17a-403f-9908-cbc25d70229c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "147e0bcb-48d0-4c7d-8277-af0238785289"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03c6f8c1-7ca7-469e-8403-9241541eba21",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b4c0818-e9ea-4010-a3e3-25da6f849eca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f724b3c-cc5f-468b-a5ed-6f450058473c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8fdb18a-d2de-4125-8a53-1fbca2a7e5d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1168380-7701-4f31-83df-a7ab8083e594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba02f583-f01c-4823-b312-b4caf3c24fa3",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e181bcd-77d0-4597-9253-2ea40b7fe59a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ff4b0bb-5279-4b40-9e85-810c4ed02774"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c15fd5b-fac4-4dfc-9984-5fe8b05fdf15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43d93fcd-03a6-48ea-9256-591d490341cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a47c21af-c098-4543-ab5d-1b1a4ee230ea",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c05da678-cd08-4a4a-986e-9423ec39c4b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0f24083-2659-463f-bee2-000bd4c1f91b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cae91ad1-2503-48eb-a2e2-c4f5a99c4576",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a238dc2f-9858-4694-926f-3b1a7128573a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "453d065e-6472-4312-8ed7-d1c4f61c0b0a",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acdca58b-ccf0-4f16-a008-3a57b8f2931b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e2dc966-b232-4ea0-90f2-46b9364b6d88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7a26475-30a0-4b31-a872-21296c7f3cb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e1f06f9-489d-4dc2-a2ad-c4332973c355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "163cdf84-4eb1-45c0-871c-4b9eb5192a8e",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0a3799d-3801-4232-a061-cdc0e2fda42e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5299108d-83b1-452c-80e5-ae62603c5cb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e0863c3-94eb-4131-b686-cd9746f88fe2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc78b1ff-f7e9-4119-bcda-eaf1d653de50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4df188f-f8d7-4a31-9de2-237cce197efe",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a100d62e-c680-4232-96d5-6883d772757b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f77b8b09-3b97-4620-9c41-1af11cecd9a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0540ff69-a100-4f25-bf8a-99e3afbe74a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b5c3375-a2cd-4793-94c7-00c66a1704db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebb9de01-d6ce-4b1d-b10b-ad5d941cc182",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bda3b436-e64c-4c92-a29f-de688073ad5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c449273-f9da-4b14-82b9-12abd5620dd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da55da55-c9a3-4b16-8993-811eaac6f58e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe2713e3-0cb9-4456-b422-ebed94c417b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29a15166-d1ff-494c-8ddb-56eac41fc860",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5f12914-effe-4e31-896e-b846dccbe02e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a330ed07-8b37-44a9-b627-943d7302565c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4512af88-ba61-459d-b7a3-fd7c2f02f287",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82105535-1d0f-4d4d-b7d7-1e12300fc03b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "666d8fe6-8814-441b-a3fe-938130f9663a",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "765d698b-c2db-466b-ab6b-95a26c03ae2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7663dded-0bb0-423a-a24a-823687bca89a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51710470-5187-4d2e-9b4b-082fa6e732b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da1ac762-bddf-4e44-90ce-14b143f140ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bc7ed2b-15d9-4611-b679-268f1fd3bb7e",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b96fec1-2bbd-4d88-86c9-a97f6ea765dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7388b002-4c9a-43b4-ac9d-d9c421cc842a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c05d8f81-bbf9-4727-bbc1-50ee45ebf673",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27d4ce8e-84a6-469f-ac25-3006f18f9679"
                        }
                      }
                    ]
                  },
                  {
                    "id": "659e468f-86d9-43ac-9ed6-2b4c4140386d",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3026b128-e600-4095-ab46-68ec1cdc5c1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9525d173-7b9a-4371-8bbf-883cd8e368e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9f4d134-57b1-4288-adb7-04b512c6b6b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0ae65e2-9918-47b7-9d9a-58cd5a6e2d7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd8df60e-cfe6-478f-bf42-c9fb9ad94aee",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b63050a3-56c0-4b09-b994-67d9265f4bff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fa2c064-f328-4e8d-9fc8-7ecacb6127cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff69ef90-c232-48a9-82d0-c2760d3d5ad9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "021a0a5c-6d4a-4a19-a9fe-be93521567a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca034f0a-44c3-41cc-ab15-766016098843",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4211c2ba-ba80-456d-88f2-ef1948734b63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9185935-f951-4f4d-a7df-39b3a1d52083"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba0339b8-c529-4529-8f4a-2aa63ed15a8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb1f9bd2-dec4-41ad-8700-d5cf6066883e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ca81fa4-e6ad-4b49-ab0a-deac0a4873c6",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "229e75cd-563e-45a6-8a60-772a11b79a46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd0078e4-850e-43c2-9ed4-10d2a8ec1dbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8411bc05-c030-40fd-b31b-61214d8c3203",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e11253df-2c4d-42dc-97c8-75ad702e2a21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44ae1aca-b398-4cc9-b053-552b84ac290a",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12f13ece-1f40-4e85-82d8-9b1b61c0f6d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3b59405-7930-4ade-96a2-1ebbab0a3dd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ec11b41-c29b-4a8a-a548-8fed2507743f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be3ae5c7-3977-4aa4-bd14-04edf64fa537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ba8f3cb-6f3f-40ec-a112-ab91b1fefd47",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24619d0b-f475-4b87-8e73-745393e27fb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8751985-1eb4-4af0-a72d-0e2fc3818e02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2961c2fa-2757-4df0-8a82-78727ec43300",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0c90333-be31-46ce-893a-5c30fbebbb94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e16354d-413c-4e23-8f94-031929dbfc03",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a9f3ed7-861a-4a43-a083-3ab5e9204d0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1414766d-53a1-4323-a230-a9fbb868c174"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0c83927-0dfd-45ca-a3d7-533220fed9e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa1c15a4-5453-4588-8775-61d267126b25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e511d3d0-7722-4bd6-9090-cd660090f209",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceed0be1-e42f-4249-b95d-92f2d81c487e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bed9f885-3836-47e8-8e9a-70bc7fd578f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e520d0a3-4c4e-4602-bee3-f175d7e79f34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "905f4f75-dfc1-4aa7-a31a-d3afe76cc6a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5efbef46-aefb-4b10-9031-18a8c2e68bac",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3608896-8286-49c0-838d-a390baec5870",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a934995-d10e-49f8-ac55-cc6514212e08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07d153aa-82bc-444a-b148-5051886a7de6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d14916d-9417-4e4e-8ca4-fe3085fa4d8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfaca373-fab0-4aa2-9517-6f0cf0dbb3be",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd04e965-fbe5-4152-b21d-70749ca82a67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c9ba4d9-fd06-4d3c-967a-6b27651bc88e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92c85c09-86f5-415f-9e48-46d14594c7dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed485cd3-8704-49ce-a450-a1d62bc2a811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97a73d42-43f5-4102-9879-0bfb2733a0a3",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "939e2f70-22ff-4a01-88da-59c675df6723",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "036a83bd-3a25-4878-bea3-0dad9c222b33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01d134ad-67d0-4e91-930e-67a7e38b70d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6dce848-cccd-40d2-8c28-44c9695f4e1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f12cefd3-b924-4112-bcca-095285d75a5f",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83241a57-97df-4fa6-98f0-81ba3484d462",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "381d488b-0194-46fe-b717-0bff9f35c01f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "254faffb-a672-4aa7-bad4-cc36367e3f47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5d1bb99-ec55-48a5-9a9f-ed51b7c4fb0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c07234f7-65b0-4125-b79f-2a2307dc0638",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "472b1bce-e662-45de-9b69-084a9728e171",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20e8f7f7-3ceb-4914-805a-c59ac89c5b8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b062e95b-90ba-4afc-8da6-69ee5d8b5045",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07707678-fe62-48ae-86eb-320d8a7835eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebd5a672-2944-4b6e-9287-538099809f0f",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efca77b3-8443-4195-90fa-5176050f7fab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c530629e-1278-4629-82cb-3433ef62e2ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2097bc93-7e03-49d0-a5ad-5683f4f2d699",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1ce1905-1273-499b-8c11-eb46801af159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6bf8ae7-1fb5-4f53-97cc-202cc942daa8",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a12c205b-baa1-4152-b5e3-803ec076ac25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7cbb745-deb5-4345-b183-14c210fcbcc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "268f6d72-6035-44d9-bd06-85aed6446def",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea811ab4-bf0c-415e-bb9a-678261c72147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba7402d-6b43-4891-97d7-ce9e35472311",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c06e2c04-4b6c-43e2-a774-2250cc2cea84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "059f9b79-9541-4010-af81-968dfe05b0dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7728a42c-79fe-45c2-adec-eab97c66a623",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9701cdc-7fc8-46b8-9ae2-2f98d9da5f2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35eeead7-b0c9-4c29-ab9d-d83512189f48",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c238e0f-4a54-4b09-9811-958a686a05af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11a65051-ef22-4188-9b04-cb8f6445c11b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81a00717-8139-44c7-880c-c58120cbbcfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "588f3e35-bb0e-43b0-9643-9a0b0911091e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89a1998c-4bf1-4775-946c-f6a68beb47a1",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91f56b97-9bf9-4a8b-b4c7-67b6ae50bc22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e4f345e-884a-4ee8-ab7d-b307841ccae0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b60531e-9bbd-45a3-ae8c-083e68bad711",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca2503f2-510a-437c-bc1e-4fe2fa434575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a57b28c0-d8d9-486d-b376-0f3f4e7d0fcc",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f08f4bef-5808-4c23-8517-46dbc4cd46ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f9980c5-b21a-4e3f-bf47-5f53e813e1c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bd07aee-c2db-4b3b-acf3-0ecf01bd1711",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afd65522-83de-4b1b-a433-4d0cf185675f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88c3ad03-fe28-4ab0-8833-616d6d79a302",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3303a5f5-c364-43e8-9ce3-32c6fc559e8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7968c930-3fda-441e-945f-9e9b9b2ff0db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d93e558-f558-4313-9ef0-64a6e8c54190",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31378402-37d5-4388-8491-1247ca4212ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "078cc90d-a085-457b-aae9-c0081b839c44",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17fcdeae-7182-4d51-9b73-175f5ed21198",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31ed173e-8aa5-4d2a-88b9-7aaa0ab3bc62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d8769c9-af85-41f3-8613-339bb4ee152e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5157ea95-efa4-4d59-be81-bb7398104c9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddb79703-6015-486c-a8a1-ebe462abeca5",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75889d1d-f30d-4359-b4e3-dc05bed7f865",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3a831e9-8067-4e7c-8c93-02169c52f233"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "504403ea-7439-45ce-bf7b-a246438de73c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cafd7e8-c57e-483f-b878-78efa4b69f33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb63c334-8762-45f7-aeb4-cbffbaf8d5e5",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c17ddc5-355a-4ed8-abbb-8ce67b80cab8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98069035-62ad-47f7-a677-7172964cca14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46523c37-8464-4e61-8b9c-8adb570e6b7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89c93576-fb2e-4036-a2a9-39eb0e700e1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4feeb4c5-4363-42e0-ae8f-dc341c11524a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fae1b0f-82fc-4367-ba0c-a7b36056c462",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8eb92855-b263-468b-9226-42e578992683"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52d89885-3ad9-470b-bc6d-911d5b0ab2a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a7ec992-4cb3-4478-a2df-845b408690c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "129f02cd-4376-4db9-b303-2ed25b693cee",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f446c8d1-10af-4e69-970a-a9e91aa22fc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "766bd64c-a90a-408d-8c34-63c5d4315f65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fa8d931-c010-45cd-a42c-ca057d8152c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60e3af82-3dfe-40ca-b683-e7caee8d1100"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16dc03e6-a85b-4811-9751-aa663e42b14a",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55091866-b412-4db2-a5c5-39b21cb51444",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48c3267c-4ae5-4f3a-a2b1-ea82da36eaa3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59923354-c02a-4769-8ca3-9681b317b32f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "118c4943-bb7b-4ba9-be45-5f2e59b99a83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb8129a1-4ae5-46a6-8f9b-6b25323b9a6a",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2529d580-6886-46b5-9d14-db2608937360",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e642fc8-89bb-4b33-96b7-338b30ee20fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "184395d0-208f-4e58-9bfb-b86bb0a33c59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6789335-6510-489b-82cf-af78d0296925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79ce5f19-a022-4e60-b5e3-1a9086e40e3a",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bf13914-012b-4665-b315-d8576a341ba4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83c0c048-8094-4428-9d1e-409eae975136"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21c1ac88-f400-4bd9-8abe-aea53546ba90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dcc8d80-1ef5-4dfa-839d-6c763dc127d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66f889ba-e606-49bd-873d-735f654ca9a6",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "395e8bd4-ac5f-451f-97a8-4856a4da75ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d77cc782-a003-4877-b850-42ce68807ab0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "073eabc9-2063-4de8-a007-2f24e3edf72b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d3e4e36-6f56-4c1c-ab3a-837ca1b389b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5061f013-fd96-4c54-b5aa-71121cdb0284",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b47983-6573-40e5-a31a-5f7f9f06e627",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8980c605-a7a7-477f-b96c-92c7f16ed8cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd8bf7ec-da1a-4443-95e4-e9d81d693471",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "459a105f-6c41-4e02-ac89-4ecfece79adc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae2fbd8a-0437-48bf-aa70-a8224a2b0ed1",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4b42a97-c370-40e6-b3f9-9535007f2b48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ba1c50b-ccef-42e8-b7b3-b30609272b74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bd93347-87e4-4201-b246-f8c7166f2a8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "936f6c02-2031-43b2-ba4e-198feaf21590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "923f6241-d6e7-43e1-938b-d4f74be39619",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c54ea131-8f6f-4d5f-be43-1190307e2d1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1864f5f4-b148-406a-a33a-8be80a569221"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c849e77-9279-4023-9d9d-ae9771301946",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfe9d3a1-abc5-48b1-a648-72347cdd654f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c70c0dd4-a9f6-479c-bc59-8d609fc940a2",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "240794d8-d6ac-4b7e-8e98-a5f2dcf26565",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a18ed592-1797-4127-88a6-6737cf8cee03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57c55a8f-7db2-44ad-96df-32c82b017bbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58438fd9-8378-47eb-a850-28c995c2e1d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e8866ad-ffbf-4a21-9adc-9d98414c5e42",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21cde3d1-1d90-4a09-9111-abac54efb52c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b84397c4-75a7-457d-9171-6d6a91f6cc25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca17d039-2099-43f9-a5e8-09718e9e1568",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0043b207-cdd4-4525-9108-6e802a37b3e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cf0dcfc-401c-48ba-b471-2c500e92b791",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49ec0991-d3e8-4c2f-946e-8bac1d171b28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c281049c-3cff-42b2-8af2-9fc06db6c7b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8da30f4b-4a88-4773-a84a-8be38d6b5a32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6566d782-0325-4260-aaee-f8715f9adf76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9a18235-00ff-4909-b363-a87b4b5b8fe8",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "160cd998-9355-41b2-8a5c-ad56043cb71f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e0c7bf9-bd29-4de3-8f8b-448d6d355652"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b027c689-7b55-4fbb-840b-fe8645250da9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9a61114-e9d6-4726-b234-60b579202131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1955ecdf-6533-40e2-9d11-4b611569c270",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bcc7ed7-50af-4e71-9ea3-7b5e1b8c1d4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9387d2e6-3a59-4fd1-95c1-29e759097eae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64dcde57-829b-49b5-8934-ea5596ab4f73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7fdc42c-74ee-472b-9259-58ef787aec24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5b8e046-b098-4f0d-8e85-8c07d397daf2",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78258d31-546f-48d7-a729-f78df783c72a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6afc36b-360d-4ce1-ac86-30cc89b059e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3629bbb-de99-486a-88e0-68eefbe8dfcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0a5a03c-df51-43d4-a92a-7484034d7244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f517a655-c7e6-4b60-9b13-a7091c6ca90c",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65fb982b-690c-4245-ac6b-48493605f7f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1668de4-559b-4ce1-bdc3-c77bc428fb7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "657d4fba-c651-4de5-89fc-f2059823ef5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49fe728c-0c19-49a4-bb1a-bbecd3a06e91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4321db7-73c3-463b-8676-66ef72ff14a1",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b068546-92ef-4f8a-9ad5-65b79f09e6fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f33770db-532f-481c-af7f-87c6f4673879"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8536dc77-48ec-4d72-9d8c-bfe389b21607",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a2564ef-d9d9-4145-84b2-6bbdacb915bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c72533d-ef14-4571-b5f8-b42db1ac0e1b",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1ed01c2-f1dd-418e-a096-8728b3768892",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3fe2c09-870f-4fde-ab41-07d499783cec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb3e4ae8-5643-4c1f-994b-a90bf4364075",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6591289-85bc-4642-8520-6b30b878097b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64cf8af0-0667-44c4-8d4f-722a23339819",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce00dfe2-3990-4ae7-a45b-dbef340776c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "015aa66a-f899-446e-a2a1-f772e16567a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fd916d6-51c9-4eb4-9142-7f9add41d0f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fd23958-dc5b-4d14-b0e7-f0144b9a6697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91bdfc93-b1ee-4371-a198-30593c876bdd",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1df5ae97-5454-4adf-bcbb-a80474de4a88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "700913cf-6066-4838-9a5a-7ea3dcf3befe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83ad0847-b4f3-4205-979e-6b1004df8aaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c836896-1775-430d-82c5-78e432cbab14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6179bc20-6177-45f8-8837-ed3d55a82a46",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53118e0f-51be-4f4a-8f5a-33b8341e6121",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cee28ba4-cad0-4f4f-a10f-e03f22b40bae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "070379bf-7b90-43a4-bdaf-b52537f1170d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a0a047b-04ef-40e8-ae56-806737877cf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a56eece3-6874-4bb6-bdbe-5e75d85f9676",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d5a8bc3-d018-401b-b636-8af49ce66a18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7056a324-906b-4898-8025-76a255978897"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51a1a437-9bfa-4551-a7e7-57ee91f65b4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aae5349-167c-475f-9ab2-7598b2ef2ab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3344dc2b-80e2-4cda-9ef0-703ac1b714db",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a36f8e3-7e5c-47db-8336-738713a84879",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36d2778a-1e7d-4254-b4ed-ec9a7cba6171"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56c75c2d-6a56-4f66-8ca4-18485edf9c0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e1ccc67-4704-45d3-8225-e434becf10b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e518280-c66e-4c85-9d46-46c555553c1a",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e364d1a-6ba5-4cdf-b3f1-40b36118f555",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0dd5d182-93f1-41d7-a2f2-cb527791259a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c922141-7892-447f-b5e4-d13946814e7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50a8e305-951d-4cc2-b5fc-c32a81a3fa80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ef258f6-afe6-4283-bb0a-7a93224f4615",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b557dead-370b-49cd-b39c-29ef423c6ca7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "376693ca-1189-48cf-9846-69ac925b74e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6328a3fd-3f60-4100-a325-6c212a0ca080",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "209ebac6-c0e1-4623-bae6-c8b0d5b5817c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57425f4c-df87-4a07-838b-0d5e8a51f99b",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7d1a598-373a-4cde-bf43-895b2889c110",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4f128b8-1020-4600-a9d3-8de737a9b872"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e6d73f2-ebda-4913-89fe-1b55990a7f6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b779fff-b51b-48e9-8ae4-cc6302c93b60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6c0a505-2694-44eb-9906-7e6665be81fb",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa11336b-ec2a-423c-b419-5fba73b0fedd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e79f411-550f-47f8-9050-018515e984a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ce25f2d-e560-40cb-9044-d3e895e927fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "526b38f1-e658-4bed-88f5-ee6483918f29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfdf0049-ff6e-4388-bd3d-8244e7d60f32",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96de92e9-da7a-478e-9f0a-3450af2e656b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b78774c6-df84-4218-b6d9-660cbb219edd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e37c7f5a-4e01-4f41-9517-c2b41f333bd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a57143c-1ab4-4381-87ab-51ecdd9ecf2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21eab9ea-21e2-4a69-8c9a-39d87ab6584c",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b9916e1-fd9b-499f-ab2e-aea3eef82589",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6667a8e9-4b8a-4d34-9c58-d8839a242913"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3406184c-d2f7-41d0-9f40-ce6a1ff23787",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "500b3736-6313-41ef-b2e2-4e767c628758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2340deb-b182-4ae5-a6a2-e93de461a0bd",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa303de8-a5f6-4d88-9b8b-f81616aa5518",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5fbbdb0c-db8f-404b-8f6a-ec35b9a1e74e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe7f9830-b4ce-41bf-a16b-f9a68d3c0003",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ef659ca-3bed-4c36-a613-a43dc5ed654f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d6af91a-6c1d-4aa4-9204-58af327a143e",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "273b6346-8de9-4824-9839-c25a2d974ad1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44263965-dcc1-4662-baa9-263c8beec82e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a7508da-abc0-42de-9822-2fafbc09dc7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8820fc1-9696-49fd-b0b3-634ee1f4bc98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4b494fa-3bfa-4f4c-8635-6d96ba5704b4",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d864633-9e55-4f08-9576-7588b3d51918",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f88009d-3f8f-4d7b-8028-ef9bcdaa927d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7190d1c-eb2d-46ed-9205-42ee383603bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdfc7ecb-c9d6-4a16-8395-c9f859b595ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d354dcc9-83e7-492a-b95c-9a0767bcf196",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d93e7bd-6ac9-4e14-a684-58e2ee6b3aad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a648eac-db8f-4088-a9f8-3676d6638fbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bd62ddb-aecf-4cfb-bdb9-c6d8ab4360e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef4fc488-970b-4d64-9640-48b8c88bd45e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc73f3f-773f-4dbb-9038-a15bccd8a630",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31da8960-7deb-47be-94c7-d6f13f6e7847",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29c3786d-93ee-4936-8208-eb47656945ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea1b0836-44ad-4c42-b880-c4f212d7e3d3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c049dc43-6f06-449e-a25c-daacbe46ca82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddfab42b-30d5-446c-a6c9-920b9f1c4563",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d476a003-4ed3-494b-b76b-199671ce67b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a35387f-29dc-4705-bb16-188a76e05c2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "562d35b1-deab-4136-bb0d-785088a31f1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84381b50-5cd5-4484-9461-3b3ebc9b90f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de2a2cdb-c9b3-4c80-b3fa-2a017facfe44",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17f9af42-4040-40f0-bef3-bad8c8cb580d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3463a88-aa4a-43cd-87ad-15d1a1290d93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39689619-4c41-4ab8-8ea9-5c0911ede229",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f9b832d-190b-4c74-9ef5-952cce2a6ab7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a9b8c20-72da-4fc4-825f-db38183daa58",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8751910e-dfd0-4e10-be2e-70040ae91169",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9aec3b8-7795-41d3-a942-322e56d30d51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a35fff85-2b90-4a40-b960-89dbd46ff62a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f522ce9-43d9-4a84-b013-e5bca21f3a7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf37ab02-167a-4019-9e9f-6b1e745b8303",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "773dde7a-905c-4f81-a186-8f2f32391355",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8c2885d-3c2f-4bcc-9010-75d3fa7086cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c9df54c-5a6e-4a7a-a776-f04362305b82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e1464c0-afae-4ee4-b008-58328c544b45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a675a48e-df3d-4560-b352-71298c60b497",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef34b992-1104-4466-98fb-189c41521d33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2d0be1d-feab-45cd-8714-31b1b1e92e17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb2efd74-7a7d-41c6-9b16-870b98831fa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53a7b2de-5514-40ba-ab4b-d07aea49b122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4430914-c5a1-4749-8df3-4193d901d951",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46855591-cd68-4a34-8e08-980b59ad78aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb265edb-a392-435e-86f3-37e566a55524"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15992981-0f74-4a8d-b9c2-584093238aa8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "233b6c82-b00e-4e24-bd2c-eb45ddeac809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac8535be-e01a-4671-9db1-5e3547d96fe4",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a636463-3fd4-42c9-aa95-10cb0755d499",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2834b74b-4ce2-45b1-a51a-e5b7658b6be0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32513d20-3853-49cd-8976-4cd11300a60a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5061aaa-686c-4818-addd-683c3b8dd9e0"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "646047ce-f81d-4b49-bac1-3ecf0436bcef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fe57e853-4cec-48e0-a4ed-995dd475fb5a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "529c06ee-0c42-4b14-9aaf-3ecda77a6775",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4da8577d-f5f1-483d-a1f2-ae3bf4494c25"
                    }
                  }
                ]
              },
              {
                "id": "6267abe1-d9ca-444c-a40c-0df7591548d8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "79e8c2a9-ea57-4e93-8cc2-46ea9912c66e",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e219b01d-f0e8-4d22-8ba8-450db31f3b06",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "d761cb51-8b5c-4327-835f-4abc23a5b3c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3727433b-b6f5-4b9d-80f4-16fbba545330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "faff28eb-948f-47cc-ba56-8c4a3908e0e7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c9ce1805-7646-4c15-8baa-284a81d3db34",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a2b9794f-8fd0-452e-84b0-3453070b0566"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb751214-00c9-4959-9b36-19d94750754b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b2af4d5-5657-4870-8046-d0f3b2eb3404"
                    }
                  }
                ]
              },
              {
                "id": "4a32a6b6-c2df-4749-a31f-640f338c580e",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "b51f071d-f189-4447-87c1-1420edf25e3a",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9795a9d3-811e-4061-b136-6c61622e6594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "6a733f13-39ab-408d-85b9-87dcbebee702"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8b31202-b221-4137-a342-487870097e4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d6d432f-d610-49b7-a538-6b27a57a4a24"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "117a4120-6f04-4b4d-b394-0313f4a43ba7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a6aa4f75-8df1-4275-9f03-cd0232e08cc4",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "227a9fdb-ae18-44ba-a41a-31180aeb6bda",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9c11723a-cc3a-4fb9-807b-3cfd98851e0d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5402eedc-bb5c-4d82-8363-d19a0544559a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0f72f288-6a17-4760-9899-14edff453b27"
                    }
                  }
                ]
              },
              {
                "id": "3c2d66fc-8b09-4239-b8bd-453928a713ca",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ec33b70-acf4-4c1c-8c2c-813889ab029a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c0b0c5c0-ddb8-4d9b-80bf-f5e32c988e9d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cfbf146d-7985-4c15-8df4-18feca391586",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a99966c1-c335-462b-8728-37e5607615ff"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0d8e033a-ad0d-42bf-8787-b700b02c40c5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "1d7ddc23-6810-4f6a-97a1-9bdab7ed88d6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9d05bd0f-ea33-4aa3-9d42-c5d6f00550be",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a1fea6ab-eec3-4809-88ea-8c403ba42212"
            }
          }
        ]
      },
      {
        "id": "cae238a5-5a1a-4b7d-841a-6234872427ce",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "c806ebbd-80bf-484a-8fb4-0aca5340bc04",
            "name": "Negative Testing",
            "item": [
              {
                "id": "efa3f217-90bc-4293-ba3c-07fe4433bca2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2ebaa0fd-9aab-4ce9-97fd-d52d7263daea",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19af981f-e148-4940-a381-224e5500e2df",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f7ad52f3-7fe1-4813-802a-ee8c1009a1bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1a6a219-5e5b-4370-8cf9-91e8d2943b30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8d6800ef-edbd-4787-b465-5cd519857027"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bced8666-6f56-4b48-ba66-fd565f534cb1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4f8e3cdc-ea6b-4cd2-a6c3-c736b2f17286"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "af64cfc4-dbea-4fb8-8578-51a867660909",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b692fa57-c224-4b0d-ac55-6053ad213852"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e3297ad5-f1b3-4525-ac7f-2738d23a5318",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "73d691f1-cf81-4229-a0ac-68f878d9880f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ffca87d9-501b-42ec-bdd2-6ca98347922e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "442f409e-3cc1-4097-bbec-96c0d78bc8ea"
            }
          }
        ]
      },
      {
        "id": "6e0db496-26ef-49d6-a634-c44b0f31adb0",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "d2ec26ae-abd3-44ff-92c4-0621daa17f15",
            "name": "Negative Testing",
            "item": [
              {
                "id": "374b1503-f98b-484e-a4fc-c2098a01eb08",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2b1136e2-2d79-4779-a87d-e92c3e0db6b4",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7950668d-d367-4be5-9bb6-841334211464",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2dc17303-b214-4016-8591-b27b0798dcff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5246a47c-682d-4374-93e0-4b2798d88fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0ac38370-3025-48d8-91dd-bc8f8d35a4a0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e61d3da2-2de1-4a4d-8279-66df4c9f6e21",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a7fe0504-dc4a-467c-9e5d-93669573e258"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ec7d2db-3d84-4e2a-9fbd-fac545f39c58",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a3b3d43c-f0b6-4f70-b445-a83e6d22aa1a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "55af94e1-d878-4248-ab03-90188b2171f8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5bc3e271-6b4b-4b3a-95ad-f74df87879b6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f7f6fb8e-5fcb-43e7-b39e-add5a729d9aa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "73c0ec89-02cb-4488-8785-2fcaf4b57015"
            }
          }
        ]
      },
      {
        "id": "c91b81b3-f889-411a-94fc-30b48acff87d",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "11dad685-e9d3-47ab-8e09-29ca2b1c7c92",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ddf02031-525b-4bcd-a81d-e998b812e03e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b46abb21-62bf-4981-bac8-1e4b474e2861",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d65be195-49c3-4ee6-89e3-475dcc8b90a9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2b9d78db-7e8a-4b32-b1c4-8234bde6af43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c588d47-2733-4c9b-a12e-78a9f1062989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ecb57102-9eb4-4ffd-970f-790ccda949ad"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c3e8c73d-d65a-4779-bafb-eac00fc22127",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "00a459ae-9d33-41e9-b622-12bdd8665e77"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c04afd5d-c9fd-448e-ad45-97edcb7ab45d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "abd343d1-8638-4f0d-928c-89f4ff7e7a9a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a636f627-9952-45d9-a98c-39db2e4f9709",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "33e28d14-4800-4d59-8711-653922875e31"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4e4f3617-2847-429c-842f-17d1a66e5646",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6f3536a8-4f03-49e0-83d0-168a4d6e057f"
            }
          }
        ]
      },
      {
        "id": "00b821d8-206d-4701-b817-b055137cc7b5",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b898fd25-5410-4741-a2f1-918a2a1a3322",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3c789b59-edcc-4eb1-a887-7ff918a7c574",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "082b18fa-73a3-4bbd-acbe-f29b57310596",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "10009e85-aecb-41f3-8ee2-5df0acecfcc5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4ddf149d-7440-4195-afdf-60037219d22c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 45
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 112.97535211267596,
      "responseMin": 15,
      "responseMax": 1921,
      "responseSd": 220.1313374567776,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1692145885247,
      "completed": 1692145930399
    },
    "executions": [
      {
        "id": "c9a28f9c-4b2f-48fe-9329-57eb5c3554a2",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "957e49a2-e97b-4675-8b75-71f595940075",
          "httpRequestId": "6ca67607-92ac-418d-859d-e54856d9c807"
        },
        "item": {
          "id": "c9a28f9c-4b2f-48fe-9329-57eb5c3554a2",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "51d0c625-341a-4447-851e-1f8c9ee8e55b",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 0
        }
      },
      {
        "id": "a0e467dc-f63d-49cc-845e-c53753d1ee7b",
        "cursor": {
          "ref": "0e91bdd7-5b4b-4fe5-a8fd-21027a412dd0",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e8cd4d3d-0856-440a-84b8-cf3e71104588"
        },
        "item": {
          "id": "a0e467dc-f63d-49cc-845e-c53753d1ee7b",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "4388f8e7-e54c-453a-96d4-6ff0dcdef017",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 0
        }
      },
      {
        "id": "b8f66377-38c4-4f60-a428-07fbcb405978",
        "cursor": {
          "ref": "7e653465-dfd3-4e08-9d26-fc995fc040e7",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6914a2e6-2ebc-42a6-8f85-3cfd44b63921"
        },
        "item": {
          "id": "b8f66377-38c4-4f60-a428-07fbcb405978",
          "name": "did_json"
        },
        "response": {
          "id": "fd107521-477d-4e24-a22c-fa79deb9c015",
          "status": "OK",
          "code": 200,
          "responseTime": 230,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98b721e6-446e-4a3b-aca4-77aa2f764f38",
        "cursor": {
          "ref": "37a94b22-a872-4365-a21b-62d2a609ac0d",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "87ef3b72-d080-4403-9317-a18c5d94b16f"
        },
        "item": {
          "id": "98b721e6-446e-4a3b-aca4-77aa2f764f38",
          "name": "did:invalid"
        },
        "response": {
          "id": "2fe2b8e0-ec46-43c6-90cd-594e1fbacdb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98b721e6-446e-4a3b-aca4-77aa2f764f38",
        "cursor": {
          "ref": "37a94b22-a872-4365-a21b-62d2a609ac0d",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "87ef3b72-d080-4403-9317-a18c5d94b16f"
        },
        "item": {
          "id": "98b721e6-446e-4a3b-aca4-77aa2f764f38",
          "name": "did:invalid"
        },
        "response": {
          "id": "2fe2b8e0-ec46-43c6-90cd-594e1fbacdb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08e9ae84-09b3-4b51-8440-3981454941e5",
        "cursor": {
          "ref": "75c508c9-f42f-4d80-bb13-fffd653a10ec",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e20ef7b1-62c7-4b74-8eec-9623cdddab37"
        },
        "item": {
          "id": "08e9ae84-09b3-4b51-8440-3981454941e5",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "211905ae-3392-4972-932d-5e4b1815f2f7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 118,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fab6248-b78e-4243-b0aa-85285fbc302e",
        "cursor": {
          "ref": "d9a6953c-7ea7-4d10-9584-756e35163c57",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "424740ba-afe3-40ee-8daa-fc00a31ba0b1"
        },
        "item": {
          "id": "3fab6248-b78e-4243-b0aa-85285fbc302e",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "ebea7b5d-809f-416e-8a09-49a0ff3d2eaa",
          "status": "Not Found",
          "code": 404,
          "responseTime": 66,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a8dcfc1-18ec-4ebe-88a6-324f010e5daa",
        "cursor": {
          "ref": "be1f32f0-c281-4681-b9ad-4c80cddb9d9b",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "fb07f760-f6c6-4b61-8ada-f75185b7f985"
        },
        "item": {
          "id": "8a8dcfc1-18ec-4ebe-88a6-324f010e5daa",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "3a0857db-0af9-46a1-b809-c0c3df6f7829",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d71771d0-2d94-49ca-b818-6ba6ed97a1b6",
        "cursor": {
          "ref": "ce825069-3959-4469-95e1-5c6e2994ed58",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "63ebf601-5bba-4895-854d-63de3d6a09b4"
        },
        "item": {
          "id": "d71771d0-2d94-49ca-b818-6ba6ed97a1b6",
          "name": "identifiers"
        },
        "response": {
          "id": "52b2f3b2-dd67-4ada-83dc-7adaaece4cdb",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "498807d9-6872-43ef-bbfb-e381528f5b0d",
        "cursor": {
          "ref": "50a58be1-3c42-4832-80ad-e7679be8a24b",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "02197dd0-0583-4f11-9f2c-62f7e45b3771"
        },
        "item": {
          "id": "498807d9-6872-43ef-bbfb-e381528f5b0d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "23c2a5b3-0d67-46a8-8163-fc9cebaefafd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97c9345a-5aa6-4431-be82-25f43bd4a475",
        "cursor": {
          "ref": "7aefc067-459d-47b0-a6a9-9761ab6c2698",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "eb5d02c0-0514-4cd5-9fbe-5827b6dcda84"
        },
        "item": {
          "id": "97c9345a-5aa6-4431-be82-25f43bd4a475",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "79d92cf9-bf00-4c1e-bde0-4786da33df4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "444812dc-3246-40da-b928-8dc31d88f337",
        "cursor": {
          "ref": "19deb6ed-50b2-4ff7-83e3-8ccd7956b1d3",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e161b9b0-d539-4110-959b-8c539afab5e2"
        },
        "item": {
          "id": "444812dc-3246-40da-b928-8dc31d88f337",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "1b7503fe-6c24-43aa-b515-f4d9c014be84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7be4e39-5f15-4b8c-abc5-ba166189a155",
        "cursor": {
          "ref": "3bca4bfe-0242-403a-b7f2-f2a540e5c211",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "31b8a4f1-56b5-437c-a51b-c29682843632"
        },
        "item": {
          "id": "c7be4e39-5f15-4b8c-abc5-ba166189a155",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "0f9816f4-9bd6-41c0-b35f-84ccd4c3ceb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab6bcf4c-d7c2-4b74-9947-f254ba2a95c5",
        "cursor": {
          "ref": "0cb6daae-45aa-4acd-93b9-1a27f00ab921",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "dd92b448-23dc-46f2-9619-c9b947a72308"
        },
        "item": {
          "id": "ab6bcf4c-d7c2-4b74-9947-f254ba2a95c5",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "03c07066-acc3-44cc-a17e-58c654da9c05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc86e303-d0fb-4af4-acd9-7260e79216c8",
        "cursor": {
          "ref": "2f5e9509-bcdb-45aa-8f67-e140378ebed5",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "825e96b2-7985-4830-a2e5-9662bacd62f2"
        },
        "item": {
          "id": "bc86e303-d0fb-4af4-acd9-7260e79216c8",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "233873a3-4c37-4eda-bec0-fcc799644ce2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f1cacf6-69ca-452c-84ba-19f7cc2778df",
        "cursor": {
          "ref": "efb8774f-7649-4857-bcde-d5718977b1a6",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "5c887881-7d77-44be-8c98-c557c0dfa404"
        },
        "item": {
          "id": "2f1cacf6-69ca-452c-84ba-19f7cc2778df",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "bf3f99e1-fa93-4a5a-8d1c-fc83f6fa6b48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dc95949-953e-4210-b28d-5dfd31ec450e",
        "cursor": {
          "ref": "da08aa7c-394a-4428-a314-1bd5c31339e9",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "0566979f-49bf-4553-bf6f-4d1d44c87fc7"
        },
        "item": {
          "id": "8dc95949-953e-4210-b28d-5dfd31ec450e",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "a048dba0-d7fc-452f-b085-b71e5beb571a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86b9a499-cb5c-4d0d-9b61-3724c68ba503",
        "cursor": {
          "ref": "a5a5d3ff-bbb0-4092-91b9-983fd1f44a8b",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "f233724f-dffc-49e9-a0f6-7d2fe5921d48"
        },
        "item": {
          "id": "86b9a499-cb5c-4d0d-9b61-3724c68ba503",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "ac0ca88f-3f9f-4337-8057-af5db538a4e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03e3d584-d55e-4791-bfff-a303678a950a",
        "cursor": {
          "ref": "19b22207-de0c-44a7-a055-7d4660f5ee91",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "e0eeb958-be49-45c0-9359-b68df6b5ee4e"
        },
        "item": {
          "id": "03e3d584-d55e-4791-bfff-a303678a950a",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "2d5c3537-725a-431c-a32b-dd420b484a25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7a588f6-4c45-443b-8b73-0883ace9a4a9",
        "cursor": {
          "ref": "51792f86-fe44-4243-82db-ab66224812ff",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "40405220-5237-4ed9-9df8-cd6577067783"
        },
        "item": {
          "id": "c7a588f6-4c45-443b-8b73-0883ace9a4a9",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "0bee5941-12c7-44d4-aa5c-814a766232df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c11bd55-6c5f-4736-ac3e-584c2ff85bd3",
        "cursor": {
          "ref": "e4b19d88-d98d-4303-b0a3-638d2ec71f6b",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "fd2a05be-247e-4dda-a065-e7e921c8547a"
        },
        "item": {
          "id": "6c11bd55-6c5f-4736-ac3e-584c2ff85bd3",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "aec80e7f-6b78-42f7-9a76-fbf9ab05bc4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea51998d-f383-4c40-969e-9de9c0107d7e",
        "cursor": {
          "ref": "a626dc6c-141a-4f45-9a12-69090023d034",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "8733048e-aed4-4bb5-a6ac-ca393470b37a"
        },
        "item": {
          "id": "ea51998d-f383-4c40-969e-9de9c0107d7e",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "7274d718-33c5-4fcd-83f8-14a1e51a8e0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28f04504-c6f5-4799-aa4a-6d242d5f901d",
        "cursor": {
          "ref": "85606bad-2cfc-425b-8253-cbc025c8edfb",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "2ba497e4-8588-467c-baf9-d79ce0b93b86"
        },
        "item": {
          "id": "28f04504-c6f5-4799-aa4a-6d242d5f901d",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "0e297caa-8bae-4616-ab8c-e73e2d369a57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4bad8b0-e495-49b1-8997-07aac5663fa2",
        "cursor": {
          "ref": "e15bfd14-e987-4ea2-a26b-de403ce29080",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "83887333-6f62-4c33-a9d7-f760f0083df3"
        },
        "item": {
          "id": "e4bad8b0-e495-49b1-8997-07aac5663fa2",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "c7367162-4df7-4c9f-8406-2742ea59f4a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0caa280b-bfd2-429e-8205-3b9740182279",
        "cursor": {
          "ref": "4cd98921-18e5-4572-8f0b-f28d9f19e8a9",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "b33259e5-74d9-4e68-a174-3034fa0d78d7"
        },
        "item": {
          "id": "0caa280b-bfd2-429e-8205-3b9740182279",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "c1bf4620-ebed-4943-b2d7-67681ceb05eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47fa3acf-fdab-4c5d-b06e-42586354e6d3",
        "cursor": {
          "ref": "6ca06d58-f084-47cb-8393-2c05ead57ee2",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "58addafb-6012-46bf-98eb-5430a95857e6"
        },
        "item": {
          "id": "47fa3acf-fdab-4c5d-b06e-42586354e6d3",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "232091e4-070e-470c-865d-da8468e7b131",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90185b86-79ea-414e-b7aa-41aacf0df116",
        "cursor": {
          "ref": "e36e6b45-6f21-4fab-b385-94efdc4167fb",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "487641a6-1ede-4155-be87-4c4017afbe89"
        },
        "item": {
          "id": "90185b86-79ea-414e-b7aa-41aacf0df116",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "028072a9-6c62-4f6d-b065-ce30246f43c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "797c2056-7b34-489c-b306-400c1a97f7bc",
        "cursor": {
          "ref": "d4e1f234-5a25-498c-8fc3-2cb87e625c0a",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "dfc97ae6-e9b5-486b-8143-02f44f7c1158"
        },
        "item": {
          "id": "797c2056-7b34-489c-b306-400c1a97f7bc",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "c33c75d1-354d-42a4-b349-88ff372d90d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad8ddc94-1f1c-4bc0-b10d-f9713a25337c",
        "cursor": {
          "ref": "57c4f1f4-a633-468f-ab4c-0bdee23e99fa",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "95d9ccd8-c042-4c3b-9c82-60851645c3a9"
        },
        "item": {
          "id": "ad8ddc94-1f1c-4bc0-b10d-f9713a25337c",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "5b90179a-7e74-41f4-b731-a16dec35b775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b71dbcb0-dc93-463b-8c80-f21f0f71bdff",
        "cursor": {
          "ref": "8927b89f-ce6f-4a3e-ab97-cdddfe404f86",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "03163db4-05cf-4405-b42a-346ca9d4eff6"
        },
        "item": {
          "id": "b71dbcb0-dc93-463b-8c80-f21f0f71bdff",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "405490d6-7504-4c31-8703-909c0a78d99d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3d5b035-c5ce-4087-b397-56e2968524f4",
        "cursor": {
          "ref": "cae4abab-4244-4408-a40d-d32cdc621b63",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "664b6179-ccd4-401c-8193-7718ca7d8993"
        },
        "item": {
          "id": "f3d5b035-c5ce-4087-b397-56e2968524f4",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "1597363c-3b9d-4b16-bf67-dfaf9208f820",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "103abbb2-f112-406b-9f4b-5c910362b945",
        "cursor": {
          "ref": "10fa2f18-9fff-45ac-af32-57ce0cc89e87",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "9076d48d-537f-4252-8ace-fe43a436f3a1"
        },
        "item": {
          "id": "103abbb2-f112-406b-9f4b-5c910362b945",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "1df10894-e3aa-46b2-afb6-dfb9a3212d71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cde91d69-dd89-4a2d-b356-9cf8290b7c2f",
        "cursor": {
          "ref": "d653e6dd-a27d-4602-970b-e9a0d96017b5",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "901bd7f9-036a-4a7b-8d9e-febe130de37a"
        },
        "item": {
          "id": "cde91d69-dd89-4a2d-b356-9cf8290b7c2f",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "737e8b96-4f83-4c2f-9843-e1ef6221b8b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "028fa665-f8d2-4a53-844f-1a819491ada7",
        "cursor": {
          "ref": "1f1c9efa-e31d-4a91-8981-5ccd8fc19388",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "3cb34174-4113-48fa-99ee-4796c36d4c55"
        },
        "item": {
          "id": "028fa665-f8d2-4a53-844f-1a819491ada7",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "a3a6c592-9333-4b26-9304-377fec1d315b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03d0b9bb-328d-4e6b-9114-fab0a36a6502",
        "cursor": {
          "ref": "23ba9234-2bad-4e2c-8c42-2e5fdbd4c9e6",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "34dd5e4d-a0d3-4b5c-95a7-e79d49213f52"
        },
        "item": {
          "id": "03d0b9bb-328d-4e6b-9114-fab0a36a6502",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "1af23f1a-daa2-4402-baa4-4ae0ca5d5ea4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25cba7e6-7d5c-4647-bed9-2db8f6b890e0",
        "cursor": {
          "ref": "9a2a2f7d-cf66-459c-b0ab-eb8a16162b73",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "a03c5ed7-5736-4cd6-9e7e-7d5a56d829c3"
        },
        "item": {
          "id": "25cba7e6-7d5c-4647-bed9-2db8f6b890e0",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "1dddcdb7-c00a-4275-87ff-28f813146e6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5590e73-b609-42ec-a967-bd4990a583e3",
        "cursor": {
          "ref": "5e337a45-1216-42cc-8931-888ec5a164c0",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "1c633e3d-5154-4455-8703-1d767c7b2749"
        },
        "item": {
          "id": "f5590e73-b609-42ec-a967-bd4990a583e3",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "213246d4-bf4c-41ec-98a0-3a9ab5d9116c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aebfaff-19f2-4ff2-84a7-f652b8a2623a",
        "cursor": {
          "ref": "74f20ba8-fcb4-47f0-830a-238f55235ffc",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "9ec03c21-b709-4a74-889b-4699b4fa7536"
        },
        "item": {
          "id": "0aebfaff-19f2-4ff2-84a7-f652b8a2623a",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "e746a31d-c4b0-405f-ad06-5ef91202bfd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79ede5ca-e2c7-4f54-bc31-2af91768a194",
        "cursor": {
          "ref": "182c129a-bbcc-4cd0-bee0-c9aed59a79d0",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "c6499286-5674-49e5-9be9-4e59e392319e"
        },
        "item": {
          "id": "79ede5ca-e2c7-4f54-bc31-2af91768a194",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "6e6373e5-53f5-4c98-8099-fc7e972a2d8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e479f2d0-ae14-4322-b46d-4c8feb59f63a",
        "cursor": {
          "ref": "cf02acb9-62ac-48cc-8380-2824a118dc86",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "f7dbe596-6b65-4e09-b8c6-d4a558b468d4"
        },
        "item": {
          "id": "e479f2d0-ae14-4322-b46d-4c8feb59f63a",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "21e85e6d-e66d-4cd6-92dd-2b662c7b3492",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 229,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "a3ca5da4-7358-45f0-aa1d-1c804cda347c",
        "cursor": {
          "ref": "808d2fb0-0d36-4851-a21e-68bd6b1076dd",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "7e9567b8-64cb-4b16-92ae-0372250caf1f"
        },
        "item": {
          "id": "a3ca5da4-7358-45f0-aa1d-1c804cda347c",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "a92c3b59-f376-4689-b1ce-5311f7085312",
          "status": "Created",
          "code": 201,
          "responseTime": 1921,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "e31e1c06-5a7f-4696-b3f6-af606aa2406b",
        "cursor": {
          "ref": "ac02e5ed-bb09-46c4-8c42-4cf7047da013",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "f94b55ee-f10e-492d-aaea-40af23624093"
        },
        "item": {
          "id": "e31e1c06-5a7f-4696-b3f6-af606aa2406b",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "5b302ab3-4b51-4318-a1da-20d053c8675e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 150,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "9b7e81ae-2b98-492b-b08a-33ac4eb789c3",
        "cursor": {
          "ref": "9428781f-6459-4092-a205-08aa374f5f85",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "e27c1015-380a-47e3-8708-0e22d4a364f1"
        },
        "item": {
          "id": "9b7e81ae-2b98-492b-b08a-33ac4eb789c3",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "59411685-0e84-47b7-bc37-af70e3588fa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08d8671d-8a9a-45ca-815c-a400acd8d0b0",
        "cursor": {
          "ref": "8edb1e51-9576-4d81-abd9-c641d000c2f5",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "22ac89d5-2ce8-4856-998b-0c8bb2be36bc"
        },
        "item": {
          "id": "08d8671d-8a9a-45ca-815c-a400acd8d0b0",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "8ec6f681-bb46-4774-bb21-ec29c4b77977",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 150,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "bd36a4c0-e416-40de-87f3-4e2a29f70630",
        "cursor": {
          "ref": "4c87cac9-d706-4fa2-bc20-155560b9cd04",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "d686defc-a012-4713-80e9-434af94c349f"
        },
        "item": {
          "id": "bd36a4c0-e416-40de-87f3-4e2a29f70630",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "c27079cf-d4c0-47a3-a83a-72aa497e84fc",
          "status": "Created",
          "code": 201,
          "responseTime": 1263,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "8e44e0b1-5cfe-49c1-8da8-28532c10648f",
        "cursor": {
          "ref": "836b04bf-1aff-4983-b7c3-48bb61d5dcf8",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "6b0b2f2d-6294-4097-bdf8-16087a0e2484"
        },
        "item": {
          "id": "8e44e0b1-5cfe-49c1-8da8-28532c10648f",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "8d0e9177-403b-4905-a9b3-433aaa16cf48",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 152,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "1460eb73-8d18-4636-976d-bc07536f8afd",
        "cursor": {
          "ref": "2550d839-258f-4b22-bbfc-1d9e51064bc3",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "c54f729b-c76b-4b29-98ed-b549c89e498f"
        },
        "item": {
          "id": "1460eb73-8d18-4636-976d-bc07536f8afd",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "f604c0f6-6970-4cc2-82c0-ca5c4b3ce191",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 866,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "4fc72cf8-8541-44ae-a70e-04bc733bef51",
        "cursor": {
          "ref": "27cba622-ee6d-4f56-9c81-fcb7ccc46eed",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "a16aac71-b563-41e0-970c-a9eded998582"
        },
        "item": {
          "id": "4fc72cf8-8541-44ae-a70e-04bc733bef51",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "c8671464-307f-48cc-8fcc-cef0084c693c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 134,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "085a4644-5362-460a-a261-3a8d0cf65db4",
        "cursor": {
          "ref": "c3651d4d-832b-454c-b5f6-e0bb4288553a",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3d7dae4d-10d6-4fac-b02c-02e0faf754b9"
        },
        "item": {
          "id": "085a4644-5362-460a-a261-3a8d0cf65db4",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "2fa01ade-07ff-4f21-b87c-684ea525b410",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 205,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "2dd36082-5dcf-49a8-aa32-adfc3c9411db",
        "cursor": {
          "ref": "ee4d9e33-6225-4940-b0db-5b82e6a00ef4",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "07b07413-b70c-49e0-aca1-7b7c8a62760b"
        },
        "item": {
          "id": "2dd36082-5dcf-49a8-aa32-adfc3c9411db",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "f0bc8027-3ceb-47d1-9e84-4b32b86fc033",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 148,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "71108f97-2a96-4d24-9448-20c15656f188",
        "cursor": {
          "ref": "c0a52c33-2fef-4a2a-8843-d711f9bf308b",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "9920ff09-b970-46a6-8948-8a545d6f0a1c"
        },
        "item": {
          "id": "71108f97-2a96-4d24-9448-20c15656f188",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "81810269-f487-4b45-9b89-1b7219815487",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 144,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "5622ba99-4feb-4bb5-ae17-279d8b70866f",
        "cursor": {
          "ref": "c1fc1c06-e552-405f-823f-ed00fa975f28",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "5d871490-3918-499c-a0f4-801e28fe614d"
        },
        "item": {
          "id": "5622ba99-4feb-4bb5-ae17-279d8b70866f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "3df25382-65ae-43f9-bc89-55698bc1f9ec",
          "status": "Created",
          "code": 201,
          "responseTime": 997,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "ea8794de-cddb-47db-8263-b907e79c7072",
        "cursor": {
          "ref": "9aed3696-7750-4dc8-ad9d-4eee8de20182",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "666ce4c5-6ab0-43de-ae26-a4c4cceb655f"
        },
        "item": {
          "id": "ea8794de-cddb-47db-8263-b907e79c7072",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "fc8c79d3-af13-482e-872b-b9dd34b7066e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "328c7422-28a9-45a2-b8c5-cc3f0d40f577",
        "cursor": {
          "ref": "d620a117-5ddc-490a-b791-afa9f79b5473",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "28f69f0f-0bb2-48e0-8243-8dcc5107ad33"
        },
        "item": {
          "id": "328c7422-28a9-45a2-b8c5-cc3f0d40f577",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "5037ab31-3483-4205-a7a9-8893580376dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f312ca66-a1d5-4a12-8fec-e6785fb349bf",
        "cursor": {
          "ref": "2cedeee8-f22a-4a45-8864-008f85bfdd9a",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "c9a73c40-a3ac-4645-94a9-0c09c7c8e320"
        },
        "item": {
          "id": "f312ca66-a1d5-4a12-8fec-e6785fb349bf",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "df9191d7-20b6-406e-a54e-9a4686a0a40b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53d3083f-8ec1-44fe-84e3-0f9307377dcb",
        "cursor": {
          "ref": "e6f72d2c-7a1b-4177-b4fd-a4b92d29d8de",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a4910a1d-e82c-4218-bfc2-44456b2b242d"
        },
        "item": {
          "id": "53d3083f-8ec1-44fe-84e3-0f9307377dcb",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "37f15472-0e8d-4ff3-b6b4-afae4b87002c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1067967-d5d7-40c2-8a8a-fe5b52635d64",
        "cursor": {
          "ref": "3207b7f6-9953-4a6c-a7b6-0412a5090e48",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "0c58504b-604b-4d20-9935-75ab55971ac2"
        },
        "item": {
          "id": "c1067967-d5d7-40c2-8a8a-fe5b52635d64",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "d1b3128f-eb5b-4f1c-b5b9-f01dd34a572a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3601f44-c5ce-4f40-8567-3f2f8d97a8d7",
        "cursor": {
          "ref": "f289b02b-7950-40d9-968e-b60c1135b0d3",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "a83d9fdd-12fd-4c13-9dee-41b402d173fc"
        },
        "item": {
          "id": "d3601f44-c5ce-4f40-8567-3f2f8d97a8d7",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "fbe7626f-bbc5-4b53-8325-bb31eb8d3074",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46c99e11-efce-4d12-bfeb-38f3b9162c98",
        "cursor": {
          "ref": "6bcba5d7-9c09-4ba2-a8ef-de5016d7b4fa",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "14ba2b9e-65dd-4256-88f2-7d8ff09f2f69"
        },
        "item": {
          "id": "46c99e11-efce-4d12-bfeb-38f3b9162c98",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "ac894b84-1936-4988-b4fe-f47664cb4d85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fb44911-a4ea-41bc-ad1f-5c990c223c3b",
        "cursor": {
          "ref": "76356582-ac32-4fba-b86a-dd6448f10ebb",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "007e4222-75e1-4aaa-a7ba-fddab241a2ca"
        },
        "item": {
          "id": "9fb44911-a4ea-41bc-ad1f-5c990c223c3b",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "59c92463-f39d-45be-93be-6b3aff03128e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8be1d5c9-1634-41e0-81ca-5fbed3e2ff24",
        "cursor": {
          "ref": "8ffa7266-facf-4a60-a786-00e66e5d6dea",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "3405005f-758c-4e54-8dd1-d5623addcfae"
        },
        "item": {
          "id": "8be1d5c9-1634-41e0-81ca-5fbed3e2ff24",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "02264591-7cdd-4e0a-9eb0-703700796406",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dc3a03a-bfd5-45c6-bee0-632d5d60d269",
        "cursor": {
          "ref": "72926b1d-04f0-475e-82a3-b7f9a55bd782",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "9dd70ff2-9b16-4201-8f34-dfb7b654f2bd"
        },
        "item": {
          "id": "7dc3a03a-bfd5-45c6-bee0-632d5d60d269",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "5cdf12d4-bc23-4a19-b108-f0983b2f7d87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a866f13-e9d1-4966-bd78-fe814e7989dd",
        "cursor": {
          "ref": "9e7c75c1-72e0-4a67-a391-927bbf6d6486",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "efac633f-6d36-4cd3-bb5b-251728e4d76c"
        },
        "item": {
          "id": "1a866f13-e9d1-4966-bd78-fe814e7989dd",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "239cc1b3-d308-44dc-9d27-2af6986b09b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0725e571-3b24-47a2-9a97-76839ec66c0d",
        "cursor": {
          "ref": "cf17475f-1894-4b63-a004-ae6def13316d",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "e21711e6-dace-4587-835f-1ba54c59e60d"
        },
        "item": {
          "id": "0725e571-3b24-47a2-9a97-76839ec66c0d",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "4040f5e5-da67-4159-b833-bd2ed3910911",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "221bcab4-aca0-476c-84e2-36ac4192d79b",
        "cursor": {
          "ref": "06245ae9-8389-4195-8cbe-10f95bd0e10d",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "e3e483e2-3fed-41ac-8501-980091200b0b"
        },
        "item": {
          "id": "221bcab4-aca0-476c-84e2-36ac4192d79b",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "09331fde-c252-4f41-bc75-d44ad7d29b20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8eac716-65f2-45cb-9f0f-c3e032109633",
        "cursor": {
          "ref": "ef489e4b-e383-453a-abf1-046c6cf66ec9",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "c0cf6d18-4303-4cc9-97f8-6265fd199a6f"
        },
        "item": {
          "id": "e8eac716-65f2-45cb-9f0f-c3e032109633",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "a938d8ae-9973-4f65-9bd1-4c66b861d7ee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 763,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "f799a9b0-b538-4af3-8b9b-f9685033d60c",
        "cursor": {
          "ref": "316519fd-74ba-4f02-9a22-fbe52fab4c56",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "99d31edf-4549-46d6-9779-ea64af427540"
        },
        "item": {
          "id": "f799a9b0-b538-4af3-8b9b-f9685033d60c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "d5854ac5-2dca-4fd5-8ba8-4f17e74a4189",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 831,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "55663854-31a6-4239-996f-4f02605b2a21",
        "cursor": {
          "ref": "70d4e30c-6c1d-4837-9cc8-88a7c6bc65d6",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "113d335c-df62-4317-85f1-dc85b0f9db37"
        },
        "item": {
          "id": "55663854-31a6-4239-996f-4f02605b2a21",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "df383b87-1a1a-4bfb-af6c-ae63ca88b1ec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 141,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "c3bd5f70-2b4a-4e66-9a02-5031950d7a34",
        "cursor": {
          "ref": "a037ddc9-c0ed-467e-9557-6f4c87f38a03",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "dde9f639-c929-4907-96b4-c2f21e2fa5d7"
        },
        "item": {
          "id": "c3bd5f70-2b4a-4e66-9a02-5031950d7a34",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "75d1fe31-be2c-4bbe-b971-2b6d10536ed7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1184,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "a330a46a-cfad-4699-8c7b-296d45fddc72",
        "cursor": {
          "ref": "26c20b8d-404e-4182-9e35-02388677825e",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "8a09c5f6-10e1-4e1d-8cae-fd8cabee6af4"
        },
        "item": {
          "id": "a330a46a-cfad-4699-8c7b-296d45fddc72",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "5755acba-314f-430e-9d74-d86963d00a2c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 138,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "75cd56a5-ad14-451f-85fb-18bfc26d7b16",
        "cursor": {
          "ref": "2bb08011-26b6-4326-be57-63e81081fc0e",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "c3c29ae8-d4ab-4718-b886-d0362a03cf78"
        },
        "item": {
          "id": "75cd56a5-ad14-451f-85fb-18bfc26d7b16",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "06f5b57c-b7b9-40e2-b9e2-380f83bd863a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39fce648-580a-40bd-8c84-0240b991ee04",
        "cursor": {
          "ref": "f9bf4ca0-f48c-4bc8-9c34-58637c169923",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "cff89cde-7593-479e-ac66-1350351009db"
        },
        "item": {
          "id": "39fce648-580a-40bd-8c84-0240b991ee04",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "b263d8d5-0553-4681-8126-79402fae0734",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed093fe7-49b7-4d64-9377-a5179428026f",
        "cursor": {
          "ref": "439a1d67-7579-4a0d-9b18-0878a9b00204",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "ab3716b9-c854-4e42-a768-72561b1c05e7"
        },
        "item": {
          "id": "ed093fe7-49b7-4d64-9377-a5179428026f",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "639433f4-cf56-4eb5-a83e-6896da042980",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69abdde1-f4eb-4c91-a192-94fbd93d4dcc",
        "cursor": {
          "ref": "eac27c9e-5ef4-4cac-8950-61a5908485ad",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "6e902e52-2612-420e-a957-098fb2c752c8"
        },
        "item": {
          "id": "69abdde1-f4eb-4c91-a192-94fbd93d4dcc",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "082edaec-35bb-42ea-8dbb-62598f49a73c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e08437e-bc06-42e1-8075-d2dd9ea51268",
        "cursor": {
          "ref": "9d5f5fcc-7370-411f-aa9a-54d083d77966",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "d93e8b5d-f4e3-41a4-a1ef-a255ada879fe"
        },
        "item": {
          "id": "4e08437e-bc06-42e1-8075-d2dd9ea51268",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "24719c0c-56ee-4fab-b2fb-01d898eac375",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afe01ad6-ef7b-4750-ab0a-a8f402a1aed3",
        "cursor": {
          "ref": "d923dc15-454d-468d-97fd-d93e873ef649",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "66115b6f-810f-417d-93d9-61e6033f1917"
        },
        "item": {
          "id": "afe01ad6-ef7b-4750-ab0a-a8f402a1aed3",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "fa2cad4b-03dc-4f23-b33e-4b5728ab2bff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d4735fe-4a68-4878-9651-5ac41fa7f0ef",
        "cursor": {
          "ref": "223ffbbb-5fc9-4a2b-92e7-aa5bf8d085c0",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "0fc1437b-1701-4727-9b0d-f0e79278e0b9"
        },
        "item": {
          "id": "6d4735fe-4a68-4878-9651-5ac41fa7f0ef",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "c1eb1726-fa7b-41f6-a7a0-8986de770b58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "055816a7-c8e5-4ce9-80b2-ea58e746cc92",
        "cursor": {
          "ref": "c39c0f8d-aec9-4a72-bdbd-c8a29237dd05",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "65b57d9f-ed4f-4e62-90f6-540f5cef420f"
        },
        "item": {
          "id": "055816a7-c8e5-4ce9-80b2-ea58e746cc92",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "73cb0fa1-6309-4625-83e2-6e3e3512177c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebbdeb80-0152-4b5a-b4d0-2cea4a06c5c3",
        "cursor": {
          "ref": "ace81beb-5a03-4728-9d6f-930491a66958",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "0a54b62d-44a7-4dff-9be2-96501f302d48"
        },
        "item": {
          "id": "ebbdeb80-0152-4b5a-b4d0-2cea4a06c5c3",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "b717beae-1a27-499c-8053-2ffd4ecd228f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4ed8e5b-321f-4706-ba62-838155bca52d",
        "cursor": {
          "ref": "0ef6623f-ef2e-4ccd-a1c9-c7b1220c1038",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "0467b158-e9b4-45fd-b36c-63d6fefc910e"
        },
        "item": {
          "id": "f4ed8e5b-321f-4706-ba62-838155bca52d",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "d57fcae3-23e7-40d0-be34-542470d7c6e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b919d8dc-2f45-4be3-868b-62adf895c4ad",
        "cursor": {
          "ref": "ed8f3dc2-6db6-4186-aff1-b773890b9948",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "ad4f3f49-893f-4063-a903-c750ef548287"
        },
        "item": {
          "id": "b919d8dc-2f45-4be3-868b-62adf895c4ad",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "09447b6f-ac38-4b20-aa4b-d5b4e8a57811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c2c51a5-b940-4f10-83fe-b12fbd14523c",
        "cursor": {
          "ref": "e3ab2627-00da-4ece-a59a-05f26c3370bc",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "a0f8472f-d272-4bc1-81ff-6a5b7ac9052a"
        },
        "item": {
          "id": "4c2c51a5-b940-4f10-83fe-b12fbd14523c",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "36b06923-bd4b-4133-b4f5-9619c66f9e28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fdb873e-711d-4fbb-8f39-b00df24daba6",
        "cursor": {
          "ref": "fd2a4361-293e-4eee-ac56-a74011b40b83",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "5febbf51-49f4-4659-8518-351d96a93826"
        },
        "item": {
          "id": "2fdb873e-711d-4fbb-8f39-b00df24daba6",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "5190793b-9e32-491d-8e43-5de863482f75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1302c9be-6f18-4c7c-9f0e-41f46c9913fc",
        "cursor": {
          "ref": "7354340d-ac3f-4734-bdbb-b30e815c51a6",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "f4c4c506-bac9-40d9-99c1-b5e02726b8f0"
        },
        "item": {
          "id": "1302c9be-6f18-4c7c-9f0e-41f46c9913fc",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "ad2ff856-f051-49d3-bc60-3c2b7a1eacd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15e9df89-98ce-4719-a785-b71c33d24705",
        "cursor": {
          "ref": "b44cced6-0bfe-4d7f-94df-46471e45809e",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "f9731f52-8d7f-476f-b411-6caeb07d1845"
        },
        "item": {
          "id": "15e9df89-98ce-4719-a785-b71c33d24705",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "c2f488a5-d067-4dfc-bac9-f611bf79cb12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9486d025-dbd2-4c3b-a911-c1667222ce52",
        "cursor": {
          "ref": "130d2328-a82d-49bd-ba66-aede007e62eb",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "9f12f14a-f06b-47bd-84c8-9f6f790f3d8b"
        },
        "item": {
          "id": "9486d025-dbd2-4c3b-a911-c1667222ce52",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "ddda057b-15fb-4449-b266-d23ce75ed840",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fceefd02-7218-464d-8e39-7a70b6e53be8",
        "cursor": {
          "ref": "1c042f28-6729-4906-bc27-e7fe14a1ff4c",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "466bb350-2e70-4f85-9830-5f9865be5633"
        },
        "item": {
          "id": "fceefd02-7218-464d-8e39-7a70b6e53be8",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "154555db-9e87-4401-a1bb-3f4b10bf27c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7145134-fecd-4760-a48c-3c1bb74f5893",
        "cursor": {
          "ref": "be3709ba-a80c-48ef-9cb0-4a9cf521d97c",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "c059fc50-5354-40cc-a794-78db84957971"
        },
        "item": {
          "id": "f7145134-fecd-4760-a48c-3c1bb74f5893",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "1990199f-c952-41d1-ae07-08734395608d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a290fd8-62f4-462a-9e69-afeb86b35c49",
        "cursor": {
          "ref": "a2511991-f019-46f8-975b-80e2162af449",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "b591545d-6054-4dd0-8061-e633f8ff01c6"
        },
        "item": {
          "id": "6a290fd8-62f4-462a-9e69-afeb86b35c49",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "3f8c87d2-828f-4d35-9430-50feffb14910",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "616d4553-9834-490a-8666-e3369ccca3ec",
        "cursor": {
          "ref": "951b35f4-66bc-4faf-ac75-f19b0d306aed",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "9bac1fad-c8ba-4797-a767-d12d16b1cf2b"
        },
        "item": {
          "id": "616d4553-9834-490a-8666-e3369ccca3ec",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "af78dc61-3478-496b-9d84-ebf22c2aada7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfa911e7-c978-48d1-9be9-42f54ca521b7",
        "cursor": {
          "ref": "ecc20449-c0db-4274-8ab4-dc7d782016cf",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "9095431a-9de7-41d5-b4f4-2857e15dd5c5"
        },
        "item": {
          "id": "dfa911e7-c978-48d1-9be9-42f54ca521b7",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "57b31b89-945e-4638-81e2-28b5a9a8bf92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "103b1e55-2988-4f93-b952-7a10e0672adf",
        "cursor": {
          "ref": "e22d2996-be11-4147-bebe-7079e628dba8",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "a67e86f0-6c3a-4617-9546-aecdb7c0979c"
        },
        "item": {
          "id": "103b1e55-2988-4f93-b952-7a10e0672adf",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "30fbde25-3828-468f-bf69-f5e4c96937ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67d7ccb2-dba2-4629-b175-97bb5d2e733f",
        "cursor": {
          "ref": "8fe1afa5-25d6-4df3-8901-f5d05d2190ff",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "5daf4b76-29ca-49b7-993b-5c4f3c264d91"
        },
        "item": {
          "id": "67d7ccb2-dba2-4629-b175-97bb5d2e733f",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "76a2b607-f311-465c-9c65-3cca0494ea13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d025f509-6614-41ea-8e80-d1b961206c4c",
        "cursor": {
          "ref": "f77f7c5f-11e8-46fd-98b8-89e2ddee0895",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "53353cab-4581-42c2-9c71-ad3a973e74ba"
        },
        "item": {
          "id": "d025f509-6614-41ea-8e80-d1b961206c4c",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "b07cf223-a9e9-4c52-95ee-cd79a6612118",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00a87260-7292-4110-ab3e-c073640b0e8a",
        "cursor": {
          "ref": "a9cc6866-5705-4f9a-b4fa-b0489e21f19b",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "d6e4cc7f-c791-4cc4-85a1-c99ca645ec70"
        },
        "item": {
          "id": "00a87260-7292-4110-ab3e-c073640b0e8a",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "55961e5e-b882-4fc6-b05a-61b161c864e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9efbdf2a-8cfb-484f-8581-421369e9b2f8",
        "cursor": {
          "ref": "aa69bb2c-5854-4ab0-b6fa-5ecc5349e75e",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f2a6dcc0-d1c5-457d-bb4a-04e049e7466f"
        },
        "item": {
          "id": "9efbdf2a-8cfb-484f-8581-421369e9b2f8",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "64627361-253d-42a3-94ac-8530d6072493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e990f5b-7dfc-4c19-a5f7-b8e075fbd430",
        "cursor": {
          "ref": "b05e9462-cf10-491e-8f01-66be07118eb6",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "73298b3b-75bb-4a6c-adb6-5fccb198f747"
        },
        "item": {
          "id": "0e990f5b-7dfc-4c19-a5f7-b8e075fbd430",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "3a9b28e3-1fdb-44a0-84f1-cde57ad79b61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c9b772b-091e-4c49-a30e-6701ea321cc4",
        "cursor": {
          "ref": "b03c04fc-a76a-4532-8799-7363c74c23b9",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "5cbac52f-b9aa-4f6c-bb42-d9c47c8194b7"
        },
        "item": {
          "id": "3c9b772b-091e-4c49-a30e-6701ea321cc4",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "86560019-9fd6-48d1-8211-cc6023dd49a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01519d39-63e8-481a-a106-d5859f149291",
        "cursor": {
          "ref": "f8c38a7f-b910-4df5-8f2f-f3e914fdfbbf",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "a37fd76b-a1aa-426d-9de7-fdc248a2e0d4"
        },
        "item": {
          "id": "01519d39-63e8-481a-a106-d5859f149291",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "c2ca8176-875b-4eb4-9089-edbe52d32168",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dfff3ad-5a94-4260-85ab-c194f00adfed",
        "cursor": {
          "ref": "2cbb9bc3-c688-4f6a-9cf0-79ce26a0216c",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "ebfd1c82-b6e1-4449-8ad6-1c6730d65b75"
        },
        "item": {
          "id": "2dfff3ad-5a94-4260-85ab-c194f00adfed",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "9ae41acb-f42d-452c-bcbe-3932737c1ca9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5f30af8-7f4b-4e7d-a3ed-94034907ac46",
        "cursor": {
          "ref": "954e082d-b711-45f3-b8bd-98bf125f8fae",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "1484623d-b84e-4a9c-9104-91abdd7a586d"
        },
        "item": {
          "id": "f5f30af8-7f4b-4e7d-a3ed-94034907ac46",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "a03dcce0-1b7c-40f5-adb7-140b7cb08561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e9b5878-c66f-4dfe-98f8-956adfa7149e",
        "cursor": {
          "ref": "255c8fa5-2c3d-4afc-b1c3-05a0457ba4cf",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "b04e42af-37ec-4c52-ac60-eb32b3c6e850"
        },
        "item": {
          "id": "5e9b5878-c66f-4dfe-98f8-956adfa7149e",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "5ff75daa-7ae5-49e7-a65f-f633f1392ffd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aa9804b-50c5-4d21-a3ef-5bf911e7a962",
        "cursor": {
          "ref": "bcd59aec-dcb9-4814-bafa-90d0906e90dd",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "cc4b03da-875e-4f52-9a3f-c5df5f57bcf3"
        },
        "item": {
          "id": "6aa9804b-50c5-4d21-a3ef-5bf911e7a962",
          "name": "credentials_issue"
        },
        "response": {
          "id": "902b7e16-e0f0-48c9-b816-739a64d30535",
          "status": "Created",
          "code": 201,
          "responseTime": 1048,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaa79ae9-7f1f-41f2-acaa-55a1cfff01b4",
        "cursor": {
          "ref": "5ad582d6-eabb-4280-9e22-b02d53395218",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "12b60b5d-5828-4628-8f80-d28c00e2ce7a"
        },
        "item": {
          "id": "aaa79ae9-7f1f-41f2-acaa-55a1cfff01b4",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "62b47e39-b1fd-4598-a90b-3c64becbe808",
          "status": "Created",
          "code": 201,
          "responseTime": 969,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb52ad4f-00a4-464e-9458-898bc2877e30",
        "cursor": {
          "ref": "140042d0-d16f-4cd7-9c81-3d22c4324f9d",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "520727c2-62b0-49b9-afc6-b7dbb1b7707c"
        },
        "item": {
          "id": "eb52ad4f-00a4-464e-9458-898bc2877e30",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "ef98bb82-df13-45de-9ffa-a78056f32e0c",
          "status": "Created",
          "code": 201,
          "responseTime": 966,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d1ad1f1-5345-4d9e-8c0d-c4beb426b190",
        "cursor": {
          "ref": "b671a9b6-3c2c-4197-a3e6-08de97d8282a",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "a07e80e3-aee3-4102-b3d1-dddce1c5165f"
        },
        "item": {
          "id": "0d1ad1f1-5345-4d9e-8c0d-c4beb426b190",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "213ab90e-53d2-4337-806b-8b1da75910a4",
          "status": "Created",
          "code": 201,
          "responseTime": 1010,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "75c88cee-1ecb-46c7-97fa-065b5cca12a8",
        "cursor": {
          "ref": "cda3340d-cf9c-408a-85ce-84f6e08768bd",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "7b60abe2-328c-4b69-9fc8-687ebe5836e9"
        },
        "item": {
          "id": "75c88cee-1ecb-46c7-97fa-065b5cca12a8",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "e6bb9b1c-125e-4535-8156-bacb0212b3f1",
          "status": "Created",
          "code": 201,
          "responseTime": 1180,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ccb4d5d-d54f-45ad-bc0f-067e1c1cc971",
        "cursor": {
          "ref": "96d02790-d5d6-48c9-95bc-af05a5cc5d7e",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "b5e119ba-12b0-404f-8469-21997f894625"
        },
        "item": {
          "id": "4ccb4d5d-d54f-45ad-bc0f-067e1c1cc971",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "ca4fadb0-466f-4eed-b944-f0ebfdef6fe9",
          "status": "Created",
          "code": 201,
          "responseTime": 956,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "708259bc-f739-4491-b1f2-e47b596e8c3c",
        "cursor": {
          "ref": "7112ec78-b9cb-40b7-860a-ed48e0854ccb",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "9a5d6dcc-f76a-4878-b48c-7a36b89d5642"
        },
        "item": {
          "id": "708259bc-f739-4491-b1f2-e47b596e8c3c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "cf2e2c0e-d61f-4b57-86c1-c78ce1d1c665",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab9d7f0c-5635-4669-92f8-b65085182e57",
        "cursor": {
          "ref": "0e880438-b9c6-413b-9a15-b310c6ecf35c",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "e00143c8-c324-46fa-86e0-014c2268df97"
        },
        "item": {
          "id": "ab9d7f0c-5635-4669-92f8-b65085182e57",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "201bfc1b-67f6-4795-a66e-10cdd42d9271",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c512da0-2815-4dde-990d-077d05965d38",
        "cursor": {
          "ref": "6126d1fa-0ce4-4c6f-a430-38ddb993444e",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "45ede488-ddfc-4fbd-8110-83e69702072d"
        },
        "item": {
          "id": "3c512da0-2815-4dde-990d-077d05965d38",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "139983b3-622e-46b6-9b9c-2425447ad6b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bea0cef0-44a0-4ea5-bbe1-9b7c0729809f",
        "cursor": {
          "ref": "32f3ce12-3317-4220-8da2-588a251f62de",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "13cbdca7-65a3-4dc8-9f5f-9021e3ca6c61"
        },
        "item": {
          "id": "bea0cef0-44a0-4ea5-bbe1-9b7c0729809f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "62afe6ff-7b26-4ec2-a496-4a4ac4cd2656",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a4084c9-8db7-43cc-8b11-a7d5520509ad",
        "cursor": {
          "ref": "21c629ba-c42a-4726-9aec-7ea35c64f6a9",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "8072a940-ea1d-4df6-885f-8365abc4602b"
        },
        "item": {
          "id": "0a4084c9-8db7-43cc-8b11-a7d5520509ad",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "3497dfda-7088-425d-9387-e8d8a3986927",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "709bc7b6-dd60-4817-a9d3-73f85aa4f7d4",
        "cursor": {
          "ref": "cee33e9a-8359-442f-bbdd-3540d2ee9fa5",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "b351ead7-6d86-4771-ac3a-c88474b2e62b"
        },
        "item": {
          "id": "709bc7b6-dd60-4817-a9d3-73f85aa4f7d4",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c5aabc4b-bc49-4822-b903-2bc2118bc445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96fab29e-2632-4c6d-8457-93ffef8a4f33",
        "cursor": {
          "ref": "51209065-82e6-4728-9f04-3dc84aeaeb65",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "7f7ac1a8-e52c-46b5-93de-83d9551dd217"
        },
        "item": {
          "id": "96fab29e-2632-4c6d-8457-93ffef8a4f33",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "8e14c870-da59-4770-b675-2b493f36ebfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d40900b3-9303-451e-929a-33d67b4cac9c",
        "cursor": {
          "ref": "f7dac738-c225-446f-b757-4d5310e6f003",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "9ce9fe93-5741-4032-a2bf-9e6469fe4837"
        },
        "item": {
          "id": "d40900b3-9303-451e-929a-33d67b4cac9c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "3be27098-470f-4da3-9e9f-4062e794bfbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc5d9e6a-81a0-4cb2-8b66-4afbe98c93d7",
        "cursor": {
          "ref": "e7fbc5a0-c95e-4545-a500-0db8cb6ea954",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "01e82288-6c30-4740-ab3a-067a293e8f44"
        },
        "item": {
          "id": "fc5d9e6a-81a0-4cb2-8b66-4afbe98c93d7",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "eaead414-c697-4d6b-a292-12d5233fd06f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ee53574-c23c-4d5d-84b8-a0f9fde034be",
        "cursor": {
          "ref": "a41caebf-22f7-4333-b496-f4dee2940d86",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "0cef99b5-5dc1-4d1d-8507-e62389cf672d"
        },
        "item": {
          "id": "8ee53574-c23c-4d5d-84b8-a0f9fde034be",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "d3c73ca9-0ac6-4442-a0ac-e2a11d03acc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee730a31-cc4f-4208-9b15-e9b83f2b8cc2",
        "cursor": {
          "ref": "dfe9292a-f06f-44ed-b37b-54c01c1c00d1",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "5cb7d9be-6543-4643-93be-298d34a83f01"
        },
        "item": {
          "id": "ee730a31-cc4f-4208-9b15-e9b83f2b8cc2",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1bb834de-7226-4e0f-b994-3bdae4470238",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6af2e8a-9af4-45f4-8202-8507fa97b960",
        "cursor": {
          "ref": "9b1d95ba-0220-43ed-a710-8ebeead94f86",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "03e3b381-32d8-4c52-9c8f-43c6c1a4639e"
        },
        "item": {
          "id": "d6af2e8a-9af4-45f4-8202-8507fa97b960",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "baca6659-cd9e-48cc-bcc8-a7b2c4dfb748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d80dcc0a-95f5-4ebd-b9b9-bb79044e5c67",
        "cursor": {
          "ref": "b50fc96c-72eb-4938-8d46-c65310bd47ed",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "7bde3898-9a12-4814-bbae-e4aad3aadff6"
        },
        "item": {
          "id": "d80dcc0a-95f5-4ebd-b9b9-bb79044e5c67",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "62899e88-bad9-4dcf-9953-6b8c5f7723f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bd434c8-9181-4f66-b7bf-20f21148737e",
        "cursor": {
          "ref": "5bbfd1f7-9867-49d3-9848-d8b46177069a",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "8b88a5c9-83e5-435f-9e9b-355d901be2c7"
        },
        "item": {
          "id": "3bd434c8-9181-4f66-b7bf-20f21148737e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "b12a9c3b-f8fd-40f4-9180-c6dccba34079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a26a8ebb-ada9-4b70-9a28-8c27ac2faa5b",
        "cursor": {
          "ref": "40f1cbb5-ef2e-447e-ad8a-4b0c695eeded",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "9bf6a0c6-2c1d-4a59-88e2-7a9306ecac1d"
        },
        "item": {
          "id": "a26a8ebb-ada9-4b70-9a28-8c27ac2faa5b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f9ba145b-4529-40eb-b1d5-e100eb9a3ba6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34dac691-9211-4ce4-b76c-423e9f2a5554",
        "cursor": {
          "ref": "218e4971-7948-47eb-bf80-a5a36fd945a6",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "ec7dfff0-ec82-498a-9302-0fa832a4e2b4"
        },
        "item": {
          "id": "34dac691-9211-4ce4-b76c-423e9f2a5554",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "4964c0e6-7969-47d7-95f7-a4de81f639c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36a9b825-ffee-46da-816a-05df8210242a",
        "cursor": {
          "ref": "42de3af9-0fb0-4cac-83f7-dcfcbd067d1f",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "ceb5324a-8297-498b-8a98-5dfd334ad266"
        },
        "item": {
          "id": "36a9b825-ffee-46da-816a-05df8210242a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ac76b2b9-37e9-4518-915b-2c5cefb9d934",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecaab518-6d99-40fb-9061-a21cac5c1858",
        "cursor": {
          "ref": "17c2d6ba-bf42-4610-8b5c-ea631b0ba97a",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "391eb46f-22b1-4be6-b24a-8310937d7a2a"
        },
        "item": {
          "id": "ecaab518-6d99-40fb-9061-a21cac5c1858",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "64a6786b-af90-434e-8e3b-29ec87603912",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8819f00f-588b-48a0-9af6-bb7880497e34",
        "cursor": {
          "ref": "81f9341a-069f-4683-a65e-7e81cdb99242",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "7f827cac-a0c1-4f7c-9755-98df7f2ddbde"
        },
        "item": {
          "id": "8819f00f-588b-48a0-9af6-bb7880497e34",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d444af1c-a1ba-43f5-b487-70ab206206d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c99b67ef-f8c1-4b9b-bffc-a25ae8b1c60e",
        "cursor": {
          "ref": "8150900a-675b-487d-834b-f0d594f00df5",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "95b335dc-aca4-4141-a00e-3ed930ca684e"
        },
        "item": {
          "id": "c99b67ef-f8c1-4b9b-bffc-a25ae8b1c60e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e05b9a27-cb2c-429f-adb3-25b88279a64b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "743bbea2-d6e4-4ca3-a38b-62a074a7427b",
        "cursor": {
          "ref": "9035f63c-7cc8-44f8-be04-1c78f0f12d61",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "4f8a17a2-ccc6-4e67-b3e5-9ec941577bfb"
        },
        "item": {
          "id": "743bbea2-d6e4-4ca3-a38b-62a074a7427b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "fd59ffb8-acc7-45d6-8aaf-112eee200265",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "929750c4-7e5b-430d-81bc-0f26f55bea12",
        "cursor": {
          "ref": "9ba61715-44b5-4c09-89eb-b4881d965c2d",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "0af2fcd3-4fd4-4d7c-b3ca-486e52e29b75"
        },
        "item": {
          "id": "929750c4-7e5b-430d-81bc-0f26f55bea12",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "a08e1bb9-64c3-4a5d-a59f-a880b73e823b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cf7878b-95e5-4dba-8097-20f122cf9533",
        "cursor": {
          "ref": "717b4505-eaed-4845-a3d8-7bd8ac0a33ff",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "d53332ff-f1d3-4380-9088-e6942d8f134c"
        },
        "item": {
          "id": "7cf7878b-95e5-4dba-8097-20f122cf9533",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "ec932147-00c0-41fc-aed1-0c0f904b0658",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b6c4a93-46d8-47db-92dc-7f0cce8bc730",
        "cursor": {
          "ref": "5853cf6e-2788-42d8-a9dd-1ae19ec257bf",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "d7cd322e-4c55-4983-931f-532b584681ea"
        },
        "item": {
          "id": "5b6c4a93-46d8-47db-92dc-7f0cce8bc730",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "520b63e9-0b1a-4fb6-84e5-72b1116a21cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eed0eac7-50a5-433c-86f3-4f24d06ffcc5",
        "cursor": {
          "ref": "c74f378f-2010-4621-9274-6659ec1c7f05",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "d79260d1-2c97-4662-90bf-0ddb643ac642"
        },
        "item": {
          "id": "eed0eac7-50a5-433c-86f3-4f24d06ffcc5",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a5e3fcbd-aa79-4bcc-8fe5-0e9ea4c8a902",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6115c08-2c01-442d-ab34-fc0ad6e3c419",
        "cursor": {
          "ref": "8bfb9821-4e94-4780-b51a-865857317c4a",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "cb33463b-4b4d-4c95-bf91-8770517ced25"
        },
        "item": {
          "id": "d6115c08-2c01-442d-ab34-fc0ad6e3c419",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "2289ebf8-a2e0-4bdb-844a-162862c29ef3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a84336fd-777f-4373-b72e-327923bbcec1",
        "cursor": {
          "ref": "571d6e4f-fd86-485d-a2ad-4d9fa020a72f",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "60476321-105e-4411-a33f-cc88bcf9b945"
        },
        "item": {
          "id": "a84336fd-777f-4373-b72e-327923bbcec1",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "389b7bb3-571d-46bd-b9fb-1ed81a6d0074",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c770236c-c914-43f0-975c-afbb43f25a06",
        "cursor": {
          "ref": "73b16a07-8e0b-4e43-aa50-42c677d6cb64",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "716fe19e-dbbc-412d-a9e4-60b9b512b36a"
        },
        "item": {
          "id": "c770236c-c914-43f0-975c-afbb43f25a06",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a9d09446-d42d-427a-a11b-1c9cb9b031b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "273f8b33-c644-4bda-8552-ecaed6558db9",
        "cursor": {
          "ref": "f423ef76-bdd2-433f-9baf-79b9486a1001",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "2d1b608d-b972-4a42-a59b-d33b311f8906"
        },
        "item": {
          "id": "273f8b33-c644-4bda-8552-ecaed6558db9",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f8628b19-574c-4a17-bba2-bf0d50cbfd32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35c66323-e836-42af-883f-53e7e73bf99f",
        "cursor": {
          "ref": "80aa6e15-5248-4ac6-b65d-d529c20a2db0",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "66f0aadd-d0c0-4ef4-b148-90aec8c6c25b"
        },
        "item": {
          "id": "35c66323-e836-42af-883f-53e7e73bf99f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "ba161018-997f-4146-9329-22d8a1268ec9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4099c6d-b766-433d-ab9a-509bb8808f66",
        "cursor": {
          "ref": "d454d191-3e0b-40db-b344-c34563253847",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "27c3db78-e2d8-4b14-8331-815b8dbe07df"
        },
        "item": {
          "id": "c4099c6d-b766-433d-ab9a-509bb8808f66",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "7682ff7c-58fe-4b06-881b-5d5c21de3f67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "007c0ccc-b8de-4627-ad70-720858ba3cf1",
        "cursor": {
          "ref": "ba40726d-9edd-43a4-9ea7-32aa10189c82",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "3adea10c-a0f6-4cdf-aee0-104c6e1ae74c"
        },
        "item": {
          "id": "007c0ccc-b8de-4627-ad70-720858ba3cf1",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "a19f3910-fc8f-4ee8-ac15-d7a8ee8a0660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b698afa-e41d-4c61-aca3-db7791107bb2",
        "cursor": {
          "ref": "22f5a717-afc0-46e6-94c1-7a98e3d7d074",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "79f4d77c-cda3-4274-bbc6-8a1f31988c07"
        },
        "item": {
          "id": "5b698afa-e41d-4c61-aca3-db7791107bb2",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f2b4ad0c-64f3-4fac-968e-d780c43bae6f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "677af6fb-a57b-4352-81ee-29fc5731e179",
        "cursor": {
          "ref": "0f10949e-aa83-46ad-b277-dd8f806276ac",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "2514aed6-9caa-4e8d-94b2-285a3d71ca28"
        },
        "item": {
          "id": "677af6fb-a57b-4352-81ee-29fc5731e179",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "567fef1d-0486-42ca-b423-8148bb4dadf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8c090c0-15a0-464b-a3cc-1117feb6de15",
        "cursor": {
          "ref": "ee4b2bfd-44be-40cc-95fe-7a4d46714484",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "11f51148-6d15-4185-a6ad-f0fa9082e9d4"
        },
        "item": {
          "id": "b8c090c0-15a0-464b-a3cc-1117feb6de15",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "cba1d03f-c267-41f2-b712-3ffedb05896a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df7c91dc-13cc-4d19-9453-d408f10a5258",
        "cursor": {
          "ref": "5be525bc-f134-4d7a-bb2c-d690ffa772ba",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "4c516e9f-35d8-4345-abd8-856a643a8614"
        },
        "item": {
          "id": "df7c91dc-13cc-4d19-9453-d408f10a5258",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ff268e92-5171-4a21-9a40-a96c5e54d05c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eacfca5e-b4cc-4d8f-be84-23d093e457d0",
        "cursor": {
          "ref": "739c55da-8d57-4f60-9013-e6c07f9df400",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ff65f7c9-3375-4bae-b0ba-9514075c718e"
        },
        "item": {
          "id": "eacfca5e-b4cc-4d8f-be84-23d093e457d0",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "cb9f8585-a5e9-4e34-9932-815df6d940af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6503e53e-5314-443a-bc9a-62aed3478d27",
        "cursor": {
          "ref": "5a1a0730-fdaa-41da-947c-f29c54c36cab",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "b14b539f-d61b-4cac-846a-c9becc620166"
        },
        "item": {
          "id": "6503e53e-5314-443a-bc9a-62aed3478d27",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5e3aafd7-81f3-430e-adc0-f9ce949d529e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b864b2c8-b40d-49df-89d0-0173cf0afd52",
        "cursor": {
          "ref": "daad89f1-39da-4f33-9eb0-3c6a0caa14be",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "9854a812-d256-4cfa-9f5d-c3b69c24c4d6"
        },
        "item": {
          "id": "b864b2c8-b40d-49df-89d0-0173cf0afd52",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e75e68e8-8565-4be2-80df-04ccaa3f74a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d812efaa-b515-4f17-84ab-322f34936f2d",
        "cursor": {
          "ref": "3554a2ab-b437-47a1-96b4-f80d18afa59c",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "edd82b19-c859-40d7-82bb-4967e42b5349"
        },
        "item": {
          "id": "d812efaa-b515-4f17-84ab-322f34936f2d",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "b0e027ba-17ef-4ff0-b157-0aced6147fe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf43da55-3b51-4b9c-9d5f-9e7a08cd6ea4",
        "cursor": {
          "ref": "ddc89c60-9c81-45f0-95f9-af6b8f99cbcf",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "4db0f30d-e57b-4849-b1ae-7a662eee43c8"
        },
        "item": {
          "id": "bf43da55-3b51-4b9c-9d5f-9e7a08cd6ea4",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "88da4810-5fe2-4c34-8c0f-626c94bdf547",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cfaebbd-9ea4-422c-aae2-840a369586e5",
        "cursor": {
          "ref": "f26527e8-c833-4c2c-b931-e8ee0e08a4b2",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "b5358612-682f-44e8-9750-80c879c4ea01"
        },
        "item": {
          "id": "3cfaebbd-9ea4-422c-aae2-840a369586e5",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "0684e0b4-ddf5-4c34-9e06-70721c760327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fba9f3fe-5925-481e-b714-5e55caf21ca1",
        "cursor": {
          "ref": "d5c8992c-fc0e-4931-a28a-07b14e136d5c",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "dd4af881-5d79-4d8c-809c-d089d6bb1148"
        },
        "item": {
          "id": "fba9f3fe-5925-481e-b714-5e55caf21ca1",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e5386c22-02d6-4802-9086-30dd5062376c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f463c076-04ab-4fad-ac79-2ba886d98fa3",
        "cursor": {
          "ref": "93852bef-dd51-4f8c-ae18-8e463906b6fc",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "f5b0069d-ae39-439a-93e3-e746136627c1"
        },
        "item": {
          "id": "f463c076-04ab-4fad-ac79-2ba886d98fa3",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a77b324a-9a77-4bbb-8314-d950fa543389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2e723be-0687-4b27-abd6-5a60e512c68b",
        "cursor": {
          "ref": "68bd5ff7-9575-4de6-ae1a-6e1ccb778487",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "6ae5ff1c-2841-4eb8-935d-2a9dd536f9f3"
        },
        "item": {
          "id": "e2e723be-0687-4b27-abd6-5a60e512c68b",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "360cc063-013a-4ddd-9a39-600c044e128c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0f0c3da-eb6f-4b2b-b9ed-8616f8e3afd8",
        "cursor": {
          "ref": "0b2004b3-b94f-4889-8894-be26265c6d21",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "762d913c-f8c6-4e9c-8724-c5fb104a87d7"
        },
        "item": {
          "id": "a0f0c3da-eb6f-4b2b-b9ed-8616f8e3afd8",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ee1d6369-6583-42e8-8172-8294ba597494",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a145757-dd58-4872-aadf-d1875723cf16",
        "cursor": {
          "ref": "0a68e166-56f0-4259-9495-5a6547be492e",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "10e368ef-dfd9-4289-9a0b-04c5d27b8268"
        },
        "item": {
          "id": "7a145757-dd58-4872-aadf-d1875723cf16",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "7adff900-0269-4120-9bbc-d6adfde03607",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d101431-5b2a-401f-864d-84b988bd10bd",
        "cursor": {
          "ref": "e37e0c92-c1ac-4668-920f-77adb07c3c63",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "24f078b2-2227-4697-ac8b-f206da604b39"
        },
        "item": {
          "id": "1d101431-5b2a-401f-864d-84b988bd10bd",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "3c46067f-e417-432f-aa66-cbb5067f599f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e506d40-9519-496f-a57f-e2d78616043e",
        "cursor": {
          "ref": "353bff80-9fde-445f-a24f-4c736af54e82",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "7ece8790-3ff8-49d7-8939-35c4f8009e8f"
        },
        "item": {
          "id": "9e506d40-9519-496f-a57f-e2d78616043e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e643af04-19cd-4ce5-9960-4be3fd25f148",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b68da8b1-88bb-4901-a134-705e922fa5fe",
        "cursor": {
          "ref": "06bb5612-c8e4-42ca-a0da-2e160c7348aa",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "c3e958ef-e9b4-4633-ba6b-61cbf5230556"
        },
        "item": {
          "id": "b68da8b1-88bb-4901-a134-705e922fa5fe",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "77497689-6637-4e53-aa15-ae5f22a1c8c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a778b980-57a0-4aee-9275-085ed6c89ed0",
        "cursor": {
          "ref": "d67a3333-94ee-4cb2-9527-3e515084a082",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "ad446009-dbca-413f-bbfb-e25f3f607028"
        },
        "item": {
          "id": "a778b980-57a0-4aee-9275-085ed6c89ed0",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "4d79b285-7593-4ccb-8624-636314f2199a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e9c159c-4e2d-4ece-9be3-7e646d65d991",
        "cursor": {
          "ref": "7f23d607-3249-4428-b5ea-7e17ac920f61",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "988a8063-1265-4671-8586-b668975864c2"
        },
        "item": {
          "id": "0e9c159c-4e2d-4ece-9be3-7e646d65d991",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "0087822f-0c38-4a45-811c-bbfb213b9e96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d64de109-4046-46a2-ad97-f9d6706b14be",
        "cursor": {
          "ref": "c2deab12-4ee1-429f-bb59-d8336d2f6fd6",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "1db64fb2-e4a3-4ab0-b098-6f674409c325"
        },
        "item": {
          "id": "d64de109-4046-46a2-ad97-f9d6706b14be",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "6e430a35-ad6a-43f2-bb84-9e81c68f5cff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad313777-17da-478f-b838-6e6888102c91",
        "cursor": {
          "ref": "4b0372aa-1598-482b-a8f5-f8e937e12537",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "74646b50-2d05-4157-a605-93f319eeb024"
        },
        "item": {
          "id": "ad313777-17da-478f-b838-6e6888102c91",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "be9c8a71-8dfc-42f3-8421-ee7555096646",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "347488a1-c3af-480f-8d43-9e99f13c8548",
        "cursor": {
          "ref": "315fb935-2c4e-4490-9bc5-ee63030a69b8",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "a41a0a9b-21e0-42ac-b657-d5d89f79297d"
        },
        "item": {
          "id": "347488a1-c3af-480f-8d43-9e99f13c8548",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "9c7cd784-5ab6-43d8-8bb7-17619b9aee9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e69606d1-3c04-4d79-baaa-23a1f19888a4",
        "cursor": {
          "ref": "c8c58e0a-5420-4099-8a36-3f45d7b6408b",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "7ab2aec1-9c6e-47ee-aeb8-035f9a554018"
        },
        "item": {
          "id": "e69606d1-3c04-4d79-baaa-23a1f19888a4",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "3a89c4e6-df00-42df-b0ec-bcf62f73b51c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7c2831e-930e-40db-b36d-8d4ad4c8cfe2",
        "cursor": {
          "ref": "05ebac47-f694-4d94-8283-0e9851d6db31",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "0123f85d-869a-4f8c-917e-b04fc6f23d44"
        },
        "item": {
          "id": "c7c2831e-930e-40db-b36d-8d4ad4c8cfe2",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "2e2cfa37-e2ce-40b5-ad24-bd9c918cb01c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "283c410f-908b-4952-8b95-3935ae03b6f1",
        "cursor": {
          "ref": "9b5899cb-0952-48a5-8473-23a726323ef5",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "cc811cdb-6fd0-4891-987d-4512e83555ab"
        },
        "item": {
          "id": "283c410f-908b-4952-8b95-3935ae03b6f1",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "2f51f7e1-078f-4e88-8ffc-9e4511f0d396",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65b58caf-8b79-404a-a683-c2a1aaae5123",
        "cursor": {
          "ref": "7b5f2685-8758-4724-affe-db0f1b540f0f",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "73104043-4caa-4854-85ac-8702cec7ebe8"
        },
        "item": {
          "id": "65b58caf-8b79-404a-a683-c2a1aaae5123",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "28a3482e-591b-4310-81aa-9bb02667b5f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d360191-3d92-4ec6-bb0b-6a726f0a8dbf",
        "cursor": {
          "ref": "e66cc6a7-b440-4d65-9184-c8981193a2f8",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "dae3c93c-a1b3-4fe4-bb17-6f836181870f"
        },
        "item": {
          "id": "7d360191-3d92-4ec6-bb0b-6a726f0a8dbf",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "6473f29d-0b33-4085-9a19-f45c51dab223",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4de1108f-d12b-4a1d-b7d1-22a517a65d69",
        "cursor": {
          "ref": "1ffa8bed-d415-47c1-bad8-70e9ee836f05",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "ffd5415e-752e-4953-bf3c-91ddee8065f7"
        },
        "item": {
          "id": "4de1108f-d12b-4a1d-b7d1-22a517a65d69",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0a2bad0c-9ab1-4868-a2bc-6ad94fa6b9bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "034ee324-51e4-4726-a302-30012c0d684e",
        "cursor": {
          "ref": "b3ef8882-77a7-4a44-b61f-0458be1e1eed",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "a089d7af-6cef-4a58-9307-87123efa9d75"
        },
        "item": {
          "id": "034ee324-51e4-4726-a302-30012c0d684e",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e1e6cbd4-839e-4c9e-b70f-17f46f24b95a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf0de8fc-2bb1-41aa-b797-d1adf1551102",
        "cursor": {
          "ref": "6243be14-c2f0-4b75-b8cb-fb5ad74617c9",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "d8b01e10-d00f-4047-8cd8-7639babb1750"
        },
        "item": {
          "id": "bf0de8fc-2bb1-41aa-b797-d1adf1551102",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "780b4791-532e-452a-8dfe-929dd444eca0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a266b953-3f2c-4d3d-8d07-c903cb74e7e7",
        "cursor": {
          "ref": "ab8d871e-40d7-4e1b-9e91-d1dec823e276",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e362bcf6-7615-4e34-8743-7972b6385c3a"
        },
        "item": {
          "id": "a266b953-3f2c-4d3d-8d07-c903cb74e7e7",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "9f546389-de91-4620-aa1b-5c13bb9609de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3a5dec1-297b-4b1d-8c48-b3da6f5f96ff",
        "cursor": {
          "ref": "9c61bb01-1532-4570-8bde-f3f0486b13d9",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "ca0624d5-6793-4c16-99c1-2b7e80d074a9"
        },
        "item": {
          "id": "e3a5dec1-297b-4b1d-8c48-b3da6f5f96ff",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "df236bd1-a3d8-4daf-89e3-c1ebd0ba0fd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c7e5d03-db75-4f5b-97bb-b4d5deb0a72a",
        "cursor": {
          "ref": "15e8dbcc-7bcf-4429-a68c-e4468fdec6e7",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "a39c92bd-b44c-4ef8-b9a4-b235cf1aeb23"
        },
        "item": {
          "id": "7c7e5d03-db75-4f5b-97bb-b4d5deb0a72a",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "cbc18e82-7aea-4241-967c-c2be8bc2a9c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa250239-e794-49b6-b14c-6ae77b10944f",
        "cursor": {
          "ref": "9f7db7e8-b52b-4f8e-99bc-1fa69156aabe",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "9759292f-467a-408e-b63b-874ece1ded23"
        },
        "item": {
          "id": "aa250239-e794-49b6-b14c-6ae77b10944f",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "8b791c5f-e952-44d1-a5b9-98fd6e3b7e65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e62a31ec-ee62-473d-bef2-282d54508ee7",
        "cursor": {
          "ref": "a434787a-9962-474f-8681-6dc26b573634",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "c28d0ad3-007e-4dcf-ac66-9000cdec3259"
        },
        "item": {
          "id": "e62a31ec-ee62-473d-bef2-282d54508ee7",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "0dac5a48-90ec-461c-9e0d-b4cd0fd8bdc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7090a9c8-6fd7-4960-9a71-50ccca81de79",
        "cursor": {
          "ref": "ab534d35-e73c-45ee-8678-034588cacc3e",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "6c29bca5-ea17-4676-b21c-1a57a6aae523"
        },
        "item": {
          "id": "7090a9c8-6fd7-4960-9a71-50ccca81de79",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "f6bf8fc3-7e2f-4042-99f8-bb772d152411",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a23fd4d2-823f-41fd-bc10-0887cd0fd6e4",
        "cursor": {
          "ref": "15559cc2-5c5e-4ed8-a011-70e65a1efcd3",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "2a3dd6cd-1360-4f93-afa7-b18ad06f45ca"
        },
        "item": {
          "id": "a23fd4d2-823f-41fd-bc10-0887cd0fd6e4",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "d3ca97ae-c55a-4f77-ba65-f0f122ec4f27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef339df4-55fc-49a2-9bfa-738b63e6119b",
        "cursor": {
          "ref": "f9b7f5d7-f29b-4603-aab1-49f8a22a3954",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "f76b192e-2be3-486d-a17f-389950502928"
        },
        "item": {
          "id": "ef339df4-55fc-49a2-9bfa-738b63e6119b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f51376a2-3a90-4fb0-b1aa-27f340d690eb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f727cb09-0336-4a2f-a1c0-8ffa719b64f8",
        "cursor": {
          "ref": "6fbc42b7-3ffa-49e6-9b3f-56580cb62f3c",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "90ad6391-a01d-406b-baf5-48865080b2b6"
        },
        "item": {
          "id": "f727cb09-0336-4a2f-a1c0-8ffa719b64f8",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "90d5e4b0-5124-4172-9fe4-f5a9a4a776c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7ca80f1-64a9-4693-932a-f8b3e66c60bf",
        "cursor": {
          "ref": "5fbd338c-ed20-462b-910b-6a3fa16a81bc",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "31ea99c6-df0f-4a6f-b7fe-db0dd7538b66"
        },
        "item": {
          "id": "e7ca80f1-64a9-4693-932a-f8b3e66c60bf",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "7a28fff0-fe63-4f96-ab6b-50bf90e9e6aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "603061dc-c2b9-4329-b49c-239dcdfa8646",
        "cursor": {
          "ref": "8d04e4b2-5e38-45a2-a86b-8db3a68d35b2",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "4e4139ff-5ee7-45fd-a788-a435a8e69328"
        },
        "item": {
          "id": "603061dc-c2b9-4329-b49c-239dcdfa8646",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "49056ff2-dd0e-4251-824f-36983dc2e879",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e87fae50-6668-44c9-bc68-f9824826d9a9",
        "cursor": {
          "ref": "df7f549d-184c-4bba-be07-a75b98df77b2",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "84069d4e-24ea-436d-b058-de9dfee51975"
        },
        "item": {
          "id": "e87fae50-6668-44c9-bc68-f9824826d9a9",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "7236f4d8-ebc9-42ce-a225-f2e0862044a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "098b0827-9c46-4977-a9a8-4d5e9cf6c96d",
        "cursor": {
          "ref": "132c091c-f849-497e-b8e4-36ac2940290a",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "eade6816-1ffb-4f3c-af65-4a44ec89e551"
        },
        "item": {
          "id": "098b0827-9c46-4977-a9a8-4d5e9cf6c96d",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "a8c6a3c0-4f4e-4ac3-9a5a-6f1728abd93b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8875ad03-2a4e-475a-bfda-1a848838fc0f",
        "cursor": {
          "ref": "cd5b3626-1c2d-492a-9f73-2988dc3e05c0",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "a4456fbf-36c1-4329-aa6f-3c955671c512"
        },
        "item": {
          "id": "8875ad03-2a4e-475a-bfda-1a848838fc0f",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "a51ade87-5189-4568-b7aa-6230c15e8e69",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "ca0e42db-32d4-48fd-9ccb-7a9575a4ea87",
        "cursor": {
          "ref": "bb793c12-9daa-4c44-b53b-4550e15755f3",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "ff73f6a1-bd8b-4a1d-a250-1283bbbf0715"
        },
        "item": {
          "id": "ca0e42db-32d4-48fd-9ccb-7a9575a4ea87",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "f1337cb5-8516-4caf-a5a2-2664520b92ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 304
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce24db9f-8047-4b16-a016-ac3e26ff55b2",
        "cursor": {
          "ref": "fee4a33a-b0f2-4973-ba17-856c3877d822",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "641da207-ecfd-43d9-8f7e-8f5c7a3a15c8"
        },
        "item": {
          "id": "ce24db9f-8047-4b16-a016-ac3e26ff55b2",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "cde410f2-5e60-4ce2-9c40-a8bc020f9986",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50b6fca6-e976-42bf-b42e-a3232cccaeba",
        "cursor": {
          "ref": "a308c65d-0a7d-4b36-a11b-3914c3874926",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "4396d21c-4b46-48aa-a4f5-b8e76517e2a0"
        },
        "item": {
          "id": "50b6fca6-e976-42bf-b42e-a3232cccaeba",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "95aedac3-a357-4076-8b47-86d1272aad33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ad7dc09-8f8a-4bf7-ad84-56b0cfeab3d0",
        "cursor": {
          "ref": "27073af5-af63-478f-bd7b-fdc70691160c",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "96ad5b23-f5bf-4c41-ad46-ea0927be1c24"
        },
        "item": {
          "id": "4ad7dc09-8f8a-4bf7-ad84-56b0cfeab3d0",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "67553e48-d594-4659-bff5-0df2e706cde7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daa97510-26a8-4462-ba65-93e34de8ffdd",
        "cursor": {
          "ref": "ae5efce9-8f9a-4a1e-96ec-30bb1cbe26ce",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "d7524a62-1da5-4e58-b20f-0b6e6c9c1746"
        },
        "item": {
          "id": "daa97510-26a8-4462-ba65-93e34de8ffdd",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "6b6c90b8-0de7-4db4-b506-ecb44a4887e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 304
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b761fcd-a47b-46db-97db-4b069951b789",
        "cursor": {
          "ref": "1e3e970b-7e55-4c6a-88da-492d3cdbed1b",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "91e7147c-584d-4836-92a6-875b296c4146"
        },
        "item": {
          "id": "3b761fcd-a47b-46db-97db-4b069951b789",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "e859e9a5-d14e-4e40-a59d-7f022e1547d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86e1f9ca-39bc-4e10-b153-0c163cc95e67",
        "cursor": {
          "ref": "3d06869e-4338-4511-a50c-135aaaba6f68",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "8322c25a-80a3-4065-b3e9-2f08721aa942"
        },
        "item": {
          "id": "86e1f9ca-39bc-4e10-b153-0c163cc95e67",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "19dd6a49-3969-4969-a672-91a5e5e62395",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7fd3744-aed3-4bc8-8dad-e98d8d596a6d",
        "cursor": {
          "ref": "7a6ce32e-b684-42cf-bd82-bfd141ce1424",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f742f33a-882a-4d07-bbf5-fc9b9b9548a9"
        },
        "item": {
          "id": "e7fd3744-aed3-4bc8-8dad-e98d8d596a6d",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "d41deac0-1778-4dba-940c-2ffdba49ca0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fd6dc37-45c8-43c2-bbbd-548e60b6921a",
        "cursor": {
          "ref": "d05bbf70-10bf-4874-beb7-c68f38bd2132",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "1f471784-1ca6-49a9-acb1-8670ac7041c4"
        },
        "item": {
          "id": "2fd6dc37-45c8-43c2-bbbd-548e60b6921a",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "2af73b82-d6c1-43a0-b535-51779e928217",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01bb552e-72ae-44f0-b1b9-1372297d92b3",
        "cursor": {
          "ref": "056f8a66-cade-467f-bbea-04a3bcf3af9d",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "65332efa-98fa-4a88-9928-04a97415dbf2"
        },
        "item": {
          "id": "01bb552e-72ae-44f0-b1b9-1372297d92b3",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "96825172-cadd-4d71-b036-765a5a9b2966",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcdfb75a-899a-4192-940e-41e875152a5d",
        "cursor": {
          "ref": "cbbeb7e2-792e-4315-8844-b41734260b3c",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "9921ce76-b937-44a4-97b1-1fbfcbcb056b"
        },
        "item": {
          "id": "bcdfb75a-899a-4192-940e-41e875152a5d",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "315056e8-bf47-4519-91d4-957b305d210f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 186
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45399740-9a55-4e02-9303-dee8254df61a",
        "cursor": {
          "ref": "7f886e17-be69-4b82-bafe-524de5b6a223",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "8c38ab3b-4b77-41c7-bde4-96e71a716e3a"
        },
        "item": {
          "id": "45399740-9a55-4e02-9303-dee8254df61a",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "f789d346-0d2e-4550-b257-533ac9a6c9a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4010d82a-6372-47cf-a78c-d5ac7e612e95",
        "cursor": {
          "ref": "e3f43b3c-4555-4d90-8efe-5e12065cad6b",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "cda8093d-c45f-45fd-9f19-b138fc6a9fc5"
        },
        "item": {
          "id": "4010d82a-6372-47cf-a78c-d5ac7e612e95",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "7eb7c107-6b71-4a1c-b139-309111c4aba6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39042efe-1eb9-47aa-a381-2d3e916d9031",
        "cursor": {
          "ref": "68990fb7-a548-4f78-881d-44a3da912419",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "a5530b84-6060-4dca-be2e-c81d21dff0d7"
        },
        "item": {
          "id": "39042efe-1eb9-47aa-a381-2d3e916d9031",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "34e3c9da-55ea-4a1c-855a-0f229985aaee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5b4009a-1471-4815-b9c7-81a9de4c8fba",
        "cursor": {
          "ref": "4e93a804-4ead-4688-a9e3-f992adde70b4",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "f880eab6-f1ca-4b73-b6a0-34560883a8fd"
        },
        "item": {
          "id": "d5b4009a-1471-4815-b9c7-81a9de4c8fba",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "f57e50a4-a516-4dcd-b3b5-423add8686f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cee0c87-c27d-48ad-b6e9-e18086ad9bd5",
        "cursor": {
          "ref": "8f25fe01-2071-4ed9-bfff-ab63ee1bc045",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "888854dd-7d1b-45fa-88de-b104bea4a08e"
        },
        "item": {
          "id": "2cee0c87-c27d-48ad-b6e9-e18086ad9bd5",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "03d59c0d-0267-4806-b13d-90ce3fe29b78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80c4f1bb-a934-47b4-8739-d0ef3a25a06d",
        "cursor": {
          "ref": "ec3a2ced-e43f-45e2-ab7a-ae58ad0c252c",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "80586112-aeee-4f42-9099-3866c8243d9f"
        },
        "item": {
          "id": "80c4f1bb-a934-47b4-8739-d0ef3a25a06d",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "0943af15-4e91-40e4-b862-464e273a61ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03c6f8c1-7ca7-469e-8403-9241541eba21",
        "cursor": {
          "ref": "fee519fa-a8e8-4d40-b74d-8899d9ddb8ba",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "f6b6485d-bd75-470d-81a5-65b1eb589717"
        },
        "item": {
          "id": "03c6f8c1-7ca7-469e-8403-9241541eba21",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "405d83cb-3877-42b0-8752-d7885205c8f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba02f583-f01c-4823-b312-b4caf3c24fa3",
        "cursor": {
          "ref": "c466b3b8-0c47-4a6d-8c28-1832a2a93c00",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "7b7b16e1-8414-4fb4-9e48-f966846be428"
        },
        "item": {
          "id": "ba02f583-f01c-4823-b312-b4caf3c24fa3",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "24e28156-3a3b-45d5-be45-0dd9f3cdb45a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a47c21af-c098-4543-ab5d-1b1a4ee230ea",
        "cursor": {
          "ref": "a05eaceb-b4e0-413e-870a-899fc2691c5a",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "2e7e5dd1-06c1-4d3b-a126-fa6ad77dc6e3"
        },
        "item": {
          "id": "a47c21af-c098-4543-ab5d-1b1a4ee230ea",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "1d8022f7-92fd-4741-a1e6-fa14de831701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "453d065e-6472-4312-8ed7-d1c4f61c0b0a",
        "cursor": {
          "ref": "bfd3cb6b-bc3b-42ef-8550-9947023cf340",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "f0c099db-75e5-49a7-99df-562f71b66719"
        },
        "item": {
          "id": "453d065e-6472-4312-8ed7-d1c4f61c0b0a",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "78a80e88-3865-492a-a25f-04e9e2ad0187",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "163cdf84-4eb1-45c0-871c-4b9eb5192a8e",
        "cursor": {
          "ref": "73626ff9-cd0b-465b-9910-82bac6c2f189",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "89a0d4ce-0805-4d99-bf73-f75aef45f642"
        },
        "item": {
          "id": "163cdf84-4eb1-45c0-871c-4b9eb5192a8e",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "d5ddba57-80fc-4d33-a723-2a1b19b8ffc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4df188f-f8d7-4a31-9de2-237cce197efe",
        "cursor": {
          "ref": "0d9b9670-2a80-43cd-83ad-6ded2d373e8f",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "45b475c6-624e-4552-9bb5-f0fefb046ba6"
        },
        "item": {
          "id": "b4df188f-f8d7-4a31-9de2-237cce197efe",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "a926b710-a7de-4822-85cb-5c51c89bd3d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebb9de01-d6ce-4b1d-b10b-ad5d941cc182",
        "cursor": {
          "ref": "c9407ffc-442d-4714-8a16-06752c94fb92",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "3d013826-7ca2-4a0e-9aae-76d114caddd2"
        },
        "item": {
          "id": "ebb9de01-d6ce-4b1d-b10b-ad5d941cc182",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "d5f3bbd5-7531-4233-8efb-c0f520b3eb6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29a15166-d1ff-494c-8ddb-56eac41fc860",
        "cursor": {
          "ref": "67dd9d1e-6b5a-4204-a275-5a5ba7e9611d",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "3dec1fd5-c0e6-4425-9625-104c7f154fc7"
        },
        "item": {
          "id": "29a15166-d1ff-494c-8ddb-56eac41fc860",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "2fc17601-38d6-4ba8-a1e0-280ba687ce59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "666d8fe6-8814-441b-a3fe-938130f9663a",
        "cursor": {
          "ref": "f815ed0c-7370-47de-a066-f0c8f07669d3",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "08669375-df43-472d-9e46-40bb355379d7"
        },
        "item": {
          "id": "666d8fe6-8814-441b-a3fe-938130f9663a",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "c8294ae5-78f7-4447-8f4c-bf299aecfddb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bc7ed2b-15d9-4611-b679-268f1fd3bb7e",
        "cursor": {
          "ref": "9199b526-d8b4-4e01-87bb-647a71c48b0b",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "5c8e177d-f712-4d48-a361-f10ec809d473"
        },
        "item": {
          "id": "6bc7ed2b-15d9-4611-b679-268f1fd3bb7e",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "93ef034d-3e56-4534-a466-2065e45699b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "659e468f-86d9-43ac-9ed6-2b4c4140386d",
        "cursor": {
          "ref": "2b544b1c-c367-4ebf-84a2-42d0356f1aa0",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "38417b6e-73ba-4d6c-91c7-de8553a91f7c"
        },
        "item": {
          "id": "659e468f-86d9-43ac-9ed6-2b4c4140386d",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "b699ec4c-d06b-4ee0-b7a4-eebef8e89183",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd8df60e-cfe6-478f-bf42-c9fb9ad94aee",
        "cursor": {
          "ref": "8a7245d8-1f58-4645-b107-0d5b59682f74",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "c5bd3584-fbf0-45c7-9cb4-80d2c8547e5c"
        },
        "item": {
          "id": "bd8df60e-cfe6-478f-bf42-c9fb9ad94aee",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "25d0c968-92e9-4ee2-b794-36811caaf1a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca034f0a-44c3-41cc-ab15-766016098843",
        "cursor": {
          "ref": "485fff8c-a310-4914-86f1-5bfd93b795cd",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "a3fc6a93-af21-427b-8e37-dd7c74faf966"
        },
        "item": {
          "id": "ca034f0a-44c3-41cc-ab15-766016098843",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "3ba1cabb-4575-4f7f-9228-48c0c8772fa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ca81fa4-e6ad-4b49-ab0a-deac0a4873c6",
        "cursor": {
          "ref": "0f791cbb-7653-4ad9-9447-00459de4f615",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "18c74b05-534d-4659-baea-33757d28824d"
        },
        "item": {
          "id": "5ca81fa4-e6ad-4b49-ab0a-deac0a4873c6",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "8540e880-7893-49cb-b367-351d4ee73e01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44ae1aca-b398-4cc9-b053-552b84ac290a",
        "cursor": {
          "ref": "277e9d24-fe7a-4046-ad8b-31bb97a9b69b",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "7638b717-b2a2-4d1d-9819-012e4f1b3ba3"
        },
        "item": {
          "id": "44ae1aca-b398-4cc9-b053-552b84ac290a",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "91e39dc6-40de-4b8b-93ce-f935606bf976",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ba8f3cb-6f3f-40ec-a112-ab91b1fefd47",
        "cursor": {
          "ref": "80d3154b-10ec-4146-ae03-27fac06c5923",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "c1594f29-e640-4060-ae02-9b984fa27998"
        },
        "item": {
          "id": "0ba8f3cb-6f3f-40ec-a112-ab91b1fefd47",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "e05eee29-ebbf-4503-86fa-f304f5b9b347",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e16354d-413c-4e23-8f94-031929dbfc03",
        "cursor": {
          "ref": "ee965c04-6724-47b3-87e4-6a929e4c0496",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "bdecd49c-712e-44f2-8796-fa793b76af38"
        },
        "item": {
          "id": "9e16354d-413c-4e23-8f94-031929dbfc03",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "0e11d22c-159e-438e-b914-4ea8f7cc2aae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e511d3d0-7722-4bd6-9090-cd660090f209",
        "cursor": {
          "ref": "f1573783-1a87-4c5b-9bda-759991280498",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "9d9dfab1-eed9-4250-848c-5859eb8e5c95"
        },
        "item": {
          "id": "e511d3d0-7722-4bd6-9090-cd660090f209",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "d38a8fff-bdf5-4907-a657-59efb6bb8ee0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5efbef46-aefb-4b10-9031-18a8c2e68bac",
        "cursor": {
          "ref": "bf436298-1f7a-48aa-86f4-379de0f93711",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "8d7b6bba-c095-4361-aa0d-33a8c727c1f8"
        },
        "item": {
          "id": "5efbef46-aefb-4b10-9031-18a8c2e68bac",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "5c151249-2e06-4e67-ae4b-344d752e93bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfaca373-fab0-4aa2-9517-6f0cf0dbb3be",
        "cursor": {
          "ref": "d1053b8b-2343-4e13-ae19-155ec779397c",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "fee3b653-de9b-4cc6-9736-451f5aa2ea67"
        },
        "item": {
          "id": "dfaca373-fab0-4aa2-9517-6f0cf0dbb3be",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "1a7a18a7-d3b9-4bc0-b9a0-0734d326fa09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97a73d42-43f5-4102-9879-0bfb2733a0a3",
        "cursor": {
          "ref": "a27216b8-9d35-46d0-a1c3-237eca7fb54c",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "7ff3068b-ddd4-431d-9dc3-b7ac7c2f8886"
        },
        "item": {
          "id": "97a73d42-43f5-4102-9879-0bfb2733a0a3",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "b090c75c-d988-4cbb-a1f0-c0862c973653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f12cefd3-b924-4112-bcca-095285d75a5f",
        "cursor": {
          "ref": "32b65fc7-be01-4a9f-a75c-1159b26fb426",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "fa614f85-1be4-4951-a465-a65d3008f8be"
        },
        "item": {
          "id": "f12cefd3-b924-4112-bcca-095285d75a5f",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "04f1de72-5748-4ec2-9363-56a70e9ed7e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c07234f7-65b0-4125-b79f-2a2307dc0638",
        "cursor": {
          "ref": "ca3eca98-8fcf-433b-9e3c-23cee6c4b683",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "28ca5c4a-f29c-4daf-b703-d6c50b0c530f"
        },
        "item": {
          "id": "c07234f7-65b0-4125-b79f-2a2307dc0638",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "966a13aa-36cc-4774-9ff2-1c6ff6453b89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebd5a672-2944-4b6e-9287-538099809f0f",
        "cursor": {
          "ref": "eb7b45f0-7f59-430d-9adf-19c61cc00ecc",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "cb77b162-7825-4fd6-8d46-cb10bd6657c8"
        },
        "item": {
          "id": "ebd5a672-2944-4b6e-9287-538099809f0f",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "73008e64-f209-4fec-b863-584c45530403",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6bf8ae7-1fb5-4f53-97cc-202cc942daa8",
        "cursor": {
          "ref": "168e2eee-bf33-4033-929f-95e9c858c561",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "2a3b1508-1d8a-43e7-94cd-03a04863bffc"
        },
        "item": {
          "id": "c6bf8ae7-1fb5-4f53-97cc-202cc942daa8",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "32988b3d-1bd6-4c0e-a014-4ee4a05b5780",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ba7402d-6b43-4891-97d7-ce9e35472311",
        "cursor": {
          "ref": "e7dd6f5d-1312-4e31-9435-88538c857853",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "b9dd97dd-5c3c-44ed-83ac-b6eb2cbca475"
        },
        "item": {
          "id": "1ba7402d-6b43-4891-97d7-ce9e35472311",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "3a4dc57c-c66e-4921-bdf6-c108ce30438d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35eeead7-b0c9-4c29-ab9d-d83512189f48",
        "cursor": {
          "ref": "5a036e6d-d164-4699-85cf-7f67d1eda210",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "63365612-b938-4a2b-aa0e-2b890050f2e7"
        },
        "item": {
          "id": "35eeead7-b0c9-4c29-ab9d-d83512189f48",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "1e5602af-57c5-434c-9f8b-41fb8c1786ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89a1998c-4bf1-4775-946c-f6a68beb47a1",
        "cursor": {
          "ref": "263c13e3-42ef-4b23-ba96-f3a4bf060a40",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "6c889de0-eee5-40d1-ad52-4aa66b5667ab"
        },
        "item": {
          "id": "89a1998c-4bf1-4775-946c-f6a68beb47a1",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "13e08447-6275-4291-a525-360edca3f107",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a57b28c0-d8d9-486d-b376-0f3f4e7d0fcc",
        "cursor": {
          "ref": "80b5b56e-f74e-4feb-955d-98868da65bcb",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "363c451b-a8b5-4efb-ba7c-8a5a63838eb1"
        },
        "item": {
          "id": "a57b28c0-d8d9-486d-b376-0f3f4e7d0fcc",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "b2843329-9f61-40ac-b4f1-77af6dfb1d65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88c3ad03-fe28-4ab0-8833-616d6d79a302",
        "cursor": {
          "ref": "7db46ed3-051f-4867-acdd-2772b47d5dfd",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "c34e59be-a0ff-486c-89aa-8b4810388061"
        },
        "item": {
          "id": "88c3ad03-fe28-4ab0-8833-616d6d79a302",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "a557f666-fc82-4389-807d-62179974a9eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "078cc90d-a085-457b-aae9-c0081b839c44",
        "cursor": {
          "ref": "b1c1a007-7093-43e4-916a-77de5648aaee",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "fa744144-3241-4538-9b81-ee4a9e886962"
        },
        "item": {
          "id": "078cc90d-a085-457b-aae9-c0081b839c44",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "5721ce17-bfd7-4d80-8e4e-b7de35be9ec8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddb79703-6015-486c-a8a1-ebe462abeca5",
        "cursor": {
          "ref": "df885dba-1f05-4bc9-8850-691777e11183",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "b4ece3e0-200a-4844-8fe2-8be0357bce47"
        },
        "item": {
          "id": "ddb79703-6015-486c-a8a1-ebe462abeca5",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "f88c2411-7624-4ec9-a21f-b43f42836d4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb63c334-8762-45f7-aeb4-cbffbaf8d5e5",
        "cursor": {
          "ref": "f0d5a707-a298-4fce-93c2-c967ebc7964f",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "1d6cf507-a9d5-462f-bcdf-2beff95e2c6b"
        },
        "item": {
          "id": "bb63c334-8762-45f7-aeb4-cbffbaf8d5e5",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "3998cf07-99de-4b55-849d-79091e53c0b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4feeb4c5-4363-42e0-ae8f-dc341c11524a",
        "cursor": {
          "ref": "dec608ba-504a-4e37-bbf3-da83566c457f",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "2aff2866-d5a1-4195-9dbe-0ce5bda667af"
        },
        "item": {
          "id": "4feeb4c5-4363-42e0-ae8f-dc341c11524a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "9ace567c-5db2-4d0d-9dcd-9d893c210654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 330
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "129f02cd-4376-4db9-b303-2ed25b693cee",
        "cursor": {
          "ref": "7ed17426-6cb2-4c8c-afe0-f72b2b20f4d4",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "1ce5f94f-37f8-4e0e-9777-91fe75bcfb1f"
        },
        "item": {
          "id": "129f02cd-4376-4db9-b303-2ed25b693cee",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "24305818-87ce-4013-bd2b-db03c577fa3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16dc03e6-a85b-4811-9751-aa663e42b14a",
        "cursor": {
          "ref": "49df9403-48a0-42be-8693-0bee18449f88",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "252fabe3-1ae3-4ad7-bae8-69fbf9d5c49f"
        },
        "item": {
          "id": "16dc03e6-a85b-4811-9751-aa663e42b14a",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "a87046f2-24e2-484e-af01-49d5160e2501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb8129a1-4ae5-46a6-8f9b-6b25323b9a6a",
        "cursor": {
          "ref": "23d6190e-eeb7-42a0-a59a-629d9905ab52",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "6a4fee79-7be9-48c9-af0c-b19a64ed7199"
        },
        "item": {
          "id": "cb8129a1-4ae5-46a6-8f9b-6b25323b9a6a",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "64162368-32cb-4494-ba2f-a1120e094c5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79ce5f19-a022-4e60-b5e3-1a9086e40e3a",
        "cursor": {
          "ref": "a81ee6f2-03ab-4ebc-86d6-ac25c41f86b6",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "759a179e-de48-4734-9fe1-913073d39d38"
        },
        "item": {
          "id": "79ce5f19-a022-4e60-b5e3-1a9086e40e3a",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "1c0ca265-35fa-440e-a73e-23e106d7edbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66f889ba-e606-49bd-873d-735f654ca9a6",
        "cursor": {
          "ref": "be171b93-f095-475f-af0a-c37e5c43bb09",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "317104e2-db3c-4623-9984-d7ab99ac1f82"
        },
        "item": {
          "id": "66f889ba-e606-49bd-873d-735f654ca9a6",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "06f91842-f25b-497b-abd3-93e173c92ede",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5061f013-fd96-4c54-b5aa-71121cdb0284",
        "cursor": {
          "ref": "409f3db4-c502-4875-9b30-075d828e63f8",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "229c765b-9273-4c69-94ea-e787c89d02f5"
        },
        "item": {
          "id": "5061f013-fd96-4c54-b5aa-71121cdb0284",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c1fe4e27-e2cb-433b-876b-0edd689c06b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae2fbd8a-0437-48bf-aa70-a8224a2b0ed1",
        "cursor": {
          "ref": "942d1848-cac7-43da-9415-ea61bf4e92ec",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "62785a5b-25f6-4276-918c-83f7e8da3c54"
        },
        "item": {
          "id": "ae2fbd8a-0437-48bf-aa70-a8224a2b0ed1",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "96442d7a-dace-4d86-a67b-4aca276c0cf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "923f6241-d6e7-43e1-938b-d4f74be39619",
        "cursor": {
          "ref": "18ef90c0-7628-4928-a179-973d876aff29",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "59ae8501-f997-49cc-be25-e25c6be2bb5f"
        },
        "item": {
          "id": "923f6241-d6e7-43e1-938b-d4f74be39619",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "296c345a-29de-4db7-b74b-f35c94cf7b37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c70c0dd4-a9f6-479c-bc59-8d609fc940a2",
        "cursor": {
          "ref": "1c02a216-2118-4ec2-b010-e167d8aebf4b",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "998edef7-7006-423b-9207-e9e435509d4d"
        },
        "item": {
          "id": "c70c0dd4-a9f6-479c-bc59-8d609fc940a2",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "e1600f20-3b59-4b09-85bd-405728a618e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e8866ad-ffbf-4a21-9adc-9d98414c5e42",
        "cursor": {
          "ref": "c222b762-55cd-4740-8d78-d27bad1105f5",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "e3afa88d-0998-4b69-aad5-b3f0647b153e"
        },
        "item": {
          "id": "0e8866ad-ffbf-4a21-9adc-9d98414c5e42",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "3c259ad3-2cf5-43a5-9547-cc3845041296",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cf0dcfc-401c-48ba-b471-2c500e92b791",
        "cursor": {
          "ref": "6ce0651a-90b6-4d63-af1f-502679a534d4",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "6c8bbaa6-5dfa-48a6-b53c-6f1cbc81024e"
        },
        "item": {
          "id": "5cf0dcfc-401c-48ba-b471-2c500e92b791",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "76eb9732-ce7f-4b58-b73d-f6e81e7af31c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9a18235-00ff-4909-b363-a87b4b5b8fe8",
        "cursor": {
          "ref": "54e45dee-13e4-4758-b99c-8da9c65e99cf",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "7d39ee42-f08e-4bf9-9d0b-eb9a267fa20e"
        },
        "item": {
          "id": "e9a18235-00ff-4909-b363-a87b4b5b8fe8",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "aceef21f-55f0-4f02-a9dc-bebaa73cd84e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1955ecdf-6533-40e2-9d11-4b611569c270",
        "cursor": {
          "ref": "401d992e-3f64-41f3-860e-8cb0cef49797",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "56f58748-3557-4cc6-a80c-a09961c200c4"
        },
        "item": {
          "id": "1955ecdf-6533-40e2-9d11-4b611569c270",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "41bc59af-a7fe-4442-b930-b8e577d675bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 717
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5b8e046-b098-4f0d-8e85-8c07d397daf2",
        "cursor": {
          "ref": "e5cbd9c6-f854-4afd-a80a-42b2cbdb9251",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "abe2bf72-e603-4e3f-8809-334b0904fc63"
        },
        "item": {
          "id": "f5b8e046-b098-4f0d-8e85-8c07d397daf2",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "997a6951-4246-475d-8888-d7515348e6c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f517a655-c7e6-4b60-9b13-a7091c6ca90c",
        "cursor": {
          "ref": "b6e86426-552e-47ec-bbcc-ad7b2d6738fd",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "fc2e50bf-efc9-491d-b7bd-25b2bb274dfb"
        },
        "item": {
          "id": "f517a655-c7e6-4b60-9b13-a7091c6ca90c",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "9810658d-245b-439d-9088-8eee4833f2bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4321db7-73c3-463b-8676-66ef72ff14a1",
        "cursor": {
          "ref": "49b752a7-697e-45ae-9c29-6dab4494f407",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "5d9ac1ca-396e-4cf4-b22a-df645038c21d"
        },
        "item": {
          "id": "f4321db7-73c3-463b-8676-66ef72ff14a1",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "1187ecd6-b85c-4eaa-bcf7-237288455a11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c72533d-ef14-4571-b5f8-b42db1ac0e1b",
        "cursor": {
          "ref": "604fad33-517a-4140-8f14-265715843e43",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "8a8fe169-e029-4826-b358-d36377cf8c31"
        },
        "item": {
          "id": "1c72533d-ef14-4571-b5f8-b42db1ac0e1b",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "46d3ae82-2848-4de4-bf14-f2a773355401",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 717
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64cf8af0-0667-44c4-8d4f-722a23339819",
        "cursor": {
          "ref": "59f0a8dd-9175-4fab-a87d-f0a1b574371b",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "4dae8901-da0b-438f-ab98-b08de952bd16"
        },
        "item": {
          "id": "64cf8af0-0667-44c4-8d4f-722a23339819",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "42ccaae1-6c0f-4164-9183-19100c6c08af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91bdfc93-b1ee-4371-a198-30593c876bdd",
        "cursor": {
          "ref": "194cb43f-faa6-40e7-904f-e41dca4dc040",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "53732f04-6564-45b6-b926-a5d29a384679"
        },
        "item": {
          "id": "91bdfc93-b1ee-4371-a198-30593c876bdd",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "7cc6c1cf-f10a-4136-8248-3a354b93054d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6179bc20-6177-45f8-8837-ed3d55a82a46",
        "cursor": {
          "ref": "fd7d04ef-c1b7-430a-9949-46a0cac05d71",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "4626fbe6-f358-4de0-8152-949b29b72eef"
        },
        "item": {
          "id": "6179bc20-6177-45f8-8837-ed3d55a82a46",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "fbf8717e-1370-4863-9c48-1990714e40fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a56eece3-6874-4bb6-bdbe-5e75d85f9676",
        "cursor": {
          "ref": "82a4c311-e966-4880-b6c2-b145ab46825c",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "a2a75590-9afb-4c0e-9d0c-5f0c7ad07791"
        },
        "item": {
          "id": "a56eece3-6874-4bb6-bdbe-5e75d85f9676",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "2123d3ff-d0d2-4c3c-b821-31ff286aa8e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3344dc2b-80e2-4cda-9ef0-703ac1b714db",
        "cursor": {
          "ref": "609a8809-30d9-483e-92be-1ea02a552cd0",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "96a96ae9-ee2a-468a-a6e1-c2ffbcb636a9"
        },
        "item": {
          "id": "3344dc2b-80e2-4cda-9ef0-703ac1b714db",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "64576aa6-48c9-4cfa-857a-8ca85a293d47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e518280-c66e-4c85-9d46-46c555553c1a",
        "cursor": {
          "ref": "00d3722a-1a61-4c59-9d4b-a5c4d16435ab",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "111df4b7-d662-4a43-b7d9-2800e753f71a"
        },
        "item": {
          "id": "0e518280-c66e-4c85-9d46-46c555553c1a",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "9dc5f015-f87f-483f-8f7b-c43b7467be35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 314
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ef258f6-afe6-4283-bb0a-7a93224f4615",
        "cursor": {
          "ref": "0647631f-36c6-4ec6-b29a-e0e04607add5",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "3bbf0a9e-ac55-45ec-aaae-60f3a5f24e30"
        },
        "item": {
          "id": "0ef258f6-afe6-4283-bb0a-7a93224f4615",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "a918fdd4-922c-440d-9600-cdc24ac19bad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57425f4c-df87-4a07-838b-0d5e8a51f99b",
        "cursor": {
          "ref": "23a2d67d-bfe1-4525-9c28-43e83411e675",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "a94bf762-acd8-41b9-8d5f-60023ee04bc5"
        },
        "item": {
          "id": "57425f4c-df87-4a07-838b-0d5e8a51f99b",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "66992619-75c7-4800-987b-8360632ec5bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6c0a505-2694-44eb-9906-7e6665be81fb",
        "cursor": {
          "ref": "c31b75c1-7112-4771-b4a1-338aeeafca0d",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "332ba9f7-9243-40c5-a2c5-d83e03eb814f"
        },
        "item": {
          "id": "b6c0a505-2694-44eb-9906-7e6665be81fb",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "edf40e07-5747-4039-9e50-c89a365390aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfdf0049-ff6e-4388-bd3d-8244e7d60f32",
        "cursor": {
          "ref": "53e7d0f4-eb3b-468b-a313-7e806f34b19b",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "2be3afdc-e141-49f9-b0f3-5cc2553f0aed"
        },
        "item": {
          "id": "bfdf0049-ff6e-4388-bd3d-8244e7d60f32",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "f8d45b58-c129-4635-987b-7a54ef603d85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21eab9ea-21e2-4a69-8c9a-39d87ab6584c",
        "cursor": {
          "ref": "883f808c-7917-428c-9dcb-9d28d7aacce2",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "bcd5f074-4085-4c1e-9347-844b1c3cc0f8"
        },
        "item": {
          "id": "21eab9ea-21e2-4a69-8c9a-39d87ab6584c",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "e16828bb-c522-43ec-8ece-56b884aa9cf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2340deb-b182-4ae5-a6a2-e93de461a0bd",
        "cursor": {
          "ref": "94a2183b-e5a6-4538-bd75-c8f22a2c02f1",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "f0b9ebe8-f670-4e67-aa6f-6e1057dd9264"
        },
        "item": {
          "id": "e2340deb-b182-4ae5-a6a2-e93de461a0bd",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "9d7e30c7-9a50-4966-b58a-9f9db1660eef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d6af91a-6c1d-4aa4-9204-58af327a143e",
        "cursor": {
          "ref": "a7e4a267-8b71-4d62-a112-f266cb34614b",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "32048678-3699-49ff-9e7b-28a5bbc460ae"
        },
        "item": {
          "id": "6d6af91a-6c1d-4aa4-9204-58af327a143e",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "94ecd819-a4bf-4a08-9e94-cb37359e45fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4b494fa-3bfa-4f4c-8635-6d96ba5704b4",
        "cursor": {
          "ref": "9bdf3138-ba7b-416b-8fe6-0cd81418a675",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "bc34edbb-ec4d-42f2-81b0-8ba7a054a7a7"
        },
        "item": {
          "id": "f4b494fa-3bfa-4f4c-8635-6d96ba5704b4",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "54e53c3c-852f-43e3-9847-1ded01ff1f89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d354dcc9-83e7-492a-b95c-9a0767bcf196",
        "cursor": {
          "ref": "81218316-22d5-4002-b735-ca5c30b0b733",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "6f3b7f88-4d09-480c-9d46-420d21c4e921"
        },
        "item": {
          "id": "d354dcc9-83e7-492a-b95c-9a0767bcf196",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "5b472e5a-b5bf-4212-a9bf-fd454bbe32f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fc73f3f-773f-4dbb-9038-a15bccd8a630",
        "cursor": {
          "ref": "0a1b80ed-9500-466b-9f50-19e76b501b72",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "55170774-dd49-4ded-bef9-8b0baee8957c"
        },
        "item": {
          "id": "8fc73f3f-773f-4dbb-9038-a15bccd8a630",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "8257cd20-b543-4e4a-8138-73e8906b513b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddfab42b-30d5-446c-a6c9-920b9f1c4563",
        "cursor": {
          "ref": "5c697a6a-10e7-4c19-97a3-d0b0646ad3f3",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "f6dcdbfd-2b31-44de-8ad9-a6aef399b27d"
        },
        "item": {
          "id": "ddfab42b-30d5-446c-a6c9-920b9f1c4563",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "6ec9e3cc-fa5e-47c1-be4b-7029fb6fb30b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de2a2cdb-c9b3-4c80-b3fa-2a017facfe44",
        "cursor": {
          "ref": "dbe19df9-24b7-44f4-91a0-ff07a30a5a2f",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "8794781b-4633-4f5b-b2af-0353deac5ab2"
        },
        "item": {
          "id": "de2a2cdb-c9b3-4c80-b3fa-2a017facfe44",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "3c8726f6-ceaf-4601-bf74-5d6178883dfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a9b8c20-72da-4fc4-825f-db38183daa58",
        "cursor": {
          "ref": "a7823154-1f60-4c89-97c5-892ddc7dc693",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "a64ad999-16c1-4df1-800e-41b87867fee0"
        },
        "item": {
          "id": "5a9b8c20-72da-4fc4-825f-db38183daa58",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "4e20e38b-c6e9-40d1-a6db-720b0aec8b7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf37ab02-167a-4019-9e9f-6b1e745b8303",
        "cursor": {
          "ref": "8656a320-ec45-46b2-afd9-04a5ad2eff2c",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "524a27f6-aeae-4c3d-a182-8fb11fea2d98"
        },
        "item": {
          "id": "cf37ab02-167a-4019-9e9f-6b1e745b8303",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "0bf31f7c-39dc-408b-a20a-21a23abe81c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a675a48e-df3d-4560-b352-71298c60b497",
        "cursor": {
          "ref": "7d41ad2d-a014-4906-9a9c-381882a8d483",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "47f61cc5-db74-4cee-84ce-66b8a256629b"
        },
        "item": {
          "id": "a675a48e-df3d-4560-b352-71298c60b497",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ee9c50a4-d7bb-4276-966a-968a822893a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4430914-c5a1-4749-8df3-4193d901d951",
        "cursor": {
          "ref": "45d89991-312e-4d50-ae1b-c2f6635da464",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "e5b2e75e-efae-4022-b889-e190dd21b17e"
        },
        "item": {
          "id": "d4430914-c5a1-4749-8df3-4193d901d951",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "ae1b8579-35a2-4383-8d58-8407f0093bb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac8535be-e01a-4671-9db1-5e3547d96fe4",
        "cursor": {
          "ref": "f0956a4a-a4aa-4eba-9354-567a871a6a4c",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "39043d73-f9f6-44d8-b658-c7ba09cce1f0"
        },
        "item": {
          "id": "ac8535be-e01a-4671-9db1-5e3547d96fe4",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d4d3f7d1-2a70-48a7-858d-85050bf7a532",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79e8c2a9-ea57-4e93-8cc2-46ea9912c66e",
        "cursor": {
          "ref": "2041718d-6f00-4650-a074-21026fc6c0bf",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "cd4cea0f-f5d0-445f-ab3f-c08f1a886a72"
        },
        "item": {
          "id": "79e8c2a9-ea57-4e93-8cc2-46ea9912c66e",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "a463ea23-1072-43ef-bcc9-3dd777e929f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b51f071d-f189-4447-87c1-1420edf25e3a",
        "cursor": {
          "ref": "fdebb9a2-954a-40a9-bcd0-b6b3b5af73b1",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "34761072-800a-49fb-a8dd-69c3f3b27366"
        },
        "item": {
          "id": "b51f071d-f189-4447-87c1-1420edf25e3a",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "eeedaa93-257b-432d-bb14-cee1b459d4bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:277)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:277)"
            }
          }
        ]
      },
      {
        "id": "a6aa4f75-8df1-4275-9f03-cd0232e08cc4",
        "cursor": {
          "ref": "a09475dc-66b0-4330-9fbc-147bd6ac033b",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "0af3d2d2-2c66-4509-8f82-0cc62a9fd940"
        },
        "item": {
          "id": "a6aa4f75-8df1-4275-9f03-cd0232e08cc4",
          "name": "credentials_verify"
        },
        "response": {
          "id": "1c597cab-7251-4eb9-ae22-90d9553018d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "3c2d66fc-8b09-4239-b8bd-453928a713ca",
        "cursor": {
          "ref": "160692fa-a74b-4950-84d4-d2158019595e",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "780b4c69-c3c2-484d-94b8-43d3d0351d0c"
        },
        "item": {
          "id": "3c2d66fc-8b09-4239-b8bd-453928a713ca",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "a6c4f65b-a107-4c08-9b13-4324e1905c72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "2ebaa0fd-9aab-4ce9-97fd-d52d7263daea",
        "cursor": {
          "ref": "f085502e-1ae5-4165-b1a3-c671a015259e",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "ffb8b69e-c1c3-402d-8f2b-a352fc369995"
        },
        "item": {
          "id": "2ebaa0fd-9aab-4ce9-97fd-d52d7263daea",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "08fc5934-6221-4f0a-a846-9e23fa1a856e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ebaa0fd-9aab-4ce9-97fd-d52d7263daea",
        "cursor": {
          "ref": "f085502e-1ae5-4165-b1a3-c671a015259e",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "ffb8b69e-c1c3-402d-8f2b-a352fc369995"
        },
        "item": {
          "id": "2ebaa0fd-9aab-4ce9-97fd-d52d7263daea",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "08fc5934-6221-4f0a-a846-9e23fa1a856e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b1136e2-2d79-4779-a87d-e92c3e0db6b4",
        "cursor": {
          "ref": "3ea66a0d-9fd8-4bdb-8a59-7d42fd1c09ac",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "7dccb6df-8580-4519-95d4-8c3a3cbd2caf"
        },
        "item": {
          "id": "2b1136e2-2d79-4779-a87d-e92c3e0db6b4",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "94a8fc90-140b-4740-ab4a-d3fda62c4b35",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b46abb21-62bf-4981-bac8-1e4b474e2861",
        "cursor": {
          "ref": "acd29359-0a5f-427f-8f01-ec9f90d3d2e3",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "d5b4bfde-b4ef-48b2-984b-6db489ad1074"
        },
        "item": {
          "id": "b46abb21-62bf-4981-bac8-1e4b474e2861",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "f50a0353-3053-426c-bd55-b1867b70a9dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}