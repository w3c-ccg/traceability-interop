{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "506db4b7-c54e-423f-81da-2cb48f83d2d0",
        "name": "Clear Cache",
        "item": [
          {
            "id": "333671bf-5860-4e77-ae6e-fcf418a341d7",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5e7d91b8-3041-4bb5-bca1-2dd4b639f540",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d622e37c-fe27-4c05-bfab-3936719a2e12"
                }
              }
            ]
          },
          {
            "id": "6100dd95-a7dc-45de-a393-6864c1a69a63",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "75fb7d82-d70a-4f96-acda-bdfe2b6fda19",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "201ae1bb-a793-4385-a1b3-1c5fab73a1d8"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "dfa2626b-6de2-47eb-93ca-117c590628c0",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "cd337cf7-31ca-4426-9f44-6b3b65a0651f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7de018e3-4034-438a-b3da-67510584ea57",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9376301a-bef2-4c2d-934f-60a1c44dafd7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5924c6a5-6370-400b-9ed5-76dd8f418bc8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "46d503be-d9fb-489a-bbc8-096c3b61af88",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "adf3c533-bedc-4433-b7ed-40f0c28d3670"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "07c3b777-eaa0-42bb-968d-d65737449536",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c45067e6-c192-48d6-b4ed-3708e432d3ed"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a9b08cb0-a632-4c6c-87f2-7f5e3da5d49d",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "891853cb-4093-46c8-b97d-4a2cdf695584"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8ccff260-cbb6-485f-aa73-ebea74924c5e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "68d29caf-f71f-4817-bacb-8f2a0eb7c871"
            }
          }
        ]
      },
      {
        "id": "561e4aec-6215-469c-aa34-8c91fdd6cb2b",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "9c96430d-9223-45ed-abe6-a30ade77347a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "26fd80d1-3b6c-4f5b-8bf6-165c55fefd5e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "148a77cc-a18b-4c5a-89ba-65d687c37af6",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "422a3ad0-a51a-4793-a2c7-5e93e32ffe18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "62bde6a4-d727-421b-802d-f061f6bee284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91f03278-3164-4b26-9e1f-6d738b39bf3e",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9de32495-1bed-4445-a7ab-c14bf7c0c1c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8b11f377-4abc-4e53-a743-915fa4c89ec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7638fbe7-486f-4e42-9437-1210ea2f12cc",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b148802-58af-4cd6-a5a9-0eed9b70fbdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "afecdfa7-e84b-4cbf-b016-678495440d75"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c32a32e5-7184-47a6-ad44-3671ed60780e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4a3dfdab-e4a2-4769-9d3a-4e96b238e84c",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6754380-dae3-4157-8553-42d21e610add",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2545dfc8-db02-4abe-8a01-f22d1c087f12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be8680ab-4006-404a-8092-a490aa289c00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6df372f0-a5f4-4df9-87d4-3c40edb4c5aa"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f755a99e-2d28-4f50-9f15-41b71f84ea02",
            "name": "Positive Testing",
            "item": [
              {
                "id": "44c04e75-5c29-4ed4-ba89-3cd383931bff",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3733cb8c-fbde-4fb6-8216-c4da01cf68ef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "65031a7d-c323-46c9-ae0e-c660c26a2550"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "efd6894b-4e1e-4bb4-ae0f-66d0d8aa8853",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "04e09180-9128-4770-9302-887fc9338dff"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9cfd8a0e-e17b-4e84-bf57-ee74d7c8bb0f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "57e6df51-b0d9-45b1-850e-91edce98cdf8"
            }
          }
        ]
      },
      {
        "id": "1fcfac7f-2842-4d53-9a9a-48b924c2792a",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "e798c24c-c9ce-44a0-a9d9-35cf11b66ce0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4c349033-1c7a-4d15-819b-ab1be0e380f1",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "66da6f00-11e5-449c-9d18-d21a25954ea3",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff1e8927-3cf6-4f7c-9e6a-7e2ca19d4afb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69a6f934-66f1-4a3d-b378-387567f71c44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d948d2f2-f718-4f93-8c81-24edccd4a7d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "36c853d4-f86a-47ca-acd6-a27b7cb82fc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "509e1c8c-c4c6-4629-8d77-3c74907a5d71",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3221e513-9c25-443a-a428-9070b1492e3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca53c005-d141-4b04-b968-5508d97c734a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5b5aaa1-6ebd-485a-9bc2-3ffd985ad876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "20306d27-7d37-4caf-b1c6-056fed9e736f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5f062d4-e035-480b-a3f1-dced832ed089",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0441ba21-b2ee-4cf2-afbf-e3d1403acf4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61c33370-14fd-4e06-ac7b-8731230d7691"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5d136c8-d8f6-4bc3-b908-d8b615529ea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9b3d1c46-7eeb-4c30-a3dc-6dafafc3c33b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5b1338d-9bd5-42c1-8266-733bc625e140",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65801a91-6310-4d81-a15e-01aac4e70d1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ab655de-1e0b-49ee-a37c-731af105d098"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c993552-d81b-4701-ac6b-05ec9978fc51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0b291fa3-c229-4871-9e72-7bfea6736e97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63343b71-1213-4049-823a-48d8bdab21c9",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1837ca76-5383-4cf4-b95b-74c2e8e601e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d16f7658-54ef-4f00-ae12-21c1d3272cbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b26e402-1532-48e7-8c15-6bd06888dc54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "028a51d3-139d-4ab4-978f-734911f171cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4876f5e7-6734-40aa-9b28-eecdb2fe9080",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "748883df-24d1-4058-9a17-2dab33200625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c525a624-f43c-48bb-a053-d403fe3a8d6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c27ddabd-aaa5-463a-b6c6-58abd37c6d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a9e9f86c-af41-4fe2-b4da-b1f87e5d8d87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8abaf6a-4345-4872-8e46-1b952829bd17",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42276c93-f93e-4c41-a7f3-029078f513b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f61d4876-7958-4c21-8d84-afbef3a76212"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e30b1d45-b44d-454a-8771-7fa90aaa59d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ffcaf7a4-821b-442d-8fe3-da22e40aed66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dec2799d-d45d-49d0-9c8a-c885b2b67790",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8df9266-e3ac-4c23-8f8e-794cc7c5d511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f7ea8c6-e809-4529-acd5-295040cf7805"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b3aa661-7e7b-431d-9635-7b528e494613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "37db6d22-1ded-4bf7-ab02-7b3198a3b01b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0405e041-519d-4298-b5e4-d9bec4cba245",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08ee0067-f276-440d-8a42-ad3f4e691c3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71c6b496-aace-4a51-b26a-880ddfcd1c0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59159a9d-9709-4919-a485-81b46916727b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fafba980-0fb0-45fa-8a73-711ef5617c2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5c271ab-b545-4d9d-a6ab-0514ae97d398",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8525d44d-478e-47f7-95b3-37200f9ece0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c4a4367-eb92-4b16-9fd5-266a332ffd51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea7f1a86-f839-43c4-b402-cdd014ca70ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7eb7166b-d7cf-4f2a-beae-32a3719ce479"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3649c802-e4dc-41f3-97c6-efdbd38e5eb8",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32344d9f-1f72-44fe-9a6d-2832bf30239e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee6328e8-7407-46e7-ac5d-9db52d1fe480"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ea36279-43a7-4fdb-82b2-020f286fc88a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ee98e735-9ae9-45ed-8fd3-b9ad0ad00505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6baef02-6706-4615-ab27-405ae7bb77d9",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77008d83-f74b-469c-82b4-86c62c0dece2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8db0cf8e-571c-4d4a-bd2d-208424ae175b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9b459a3-99a0-4fef-8602-68961a901dd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bc96167d-7b82-45f6-8006-bbdf4a1f49e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c76ac1aa-3df1-4058-b8a7-4ead6d2eebe1",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a12e4a27-6e26-4e71-8e96-e0d8b3aadd30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5def3fda-866d-4287-aeae-d9b0a625918b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2ebff49-373e-44b7-b7a6-54793654c553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "33766208-d7e7-447f-a075-e0c74e15a7da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a8ca361-8b7c-4bd2-ab3c-e4c8ec295c03",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ea5bc09-2354-410c-960b-428d70b3bd8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e585afb-d341-4de2-a21b-7b317f609c42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ba6f920-bcfe-4556-9fee-0e604cf9a8d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b28b0579-6f7d-4259-b48c-511afe6c9bc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07c049ec-a778-48fe-8d3a-aaac87e10fa6",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4d89e1c-73a5-458d-9ba3-705e15cc69fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad9171f5-944b-4939-a3c6-90da73e910f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22c85209-c7ba-46b8-aa5e-724aa5840e06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1c67d8c1-7406-4d17-90c5-9ec7d745dd09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9e5a8db-19db-46c1-97a0-3cec17d8b8ea",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77793e6f-df27-4cd1-afe2-0be7521b9f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c076a039-c671-443f-bfd7-a0ede38959a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f1a7ae3-4b7c-494d-9fa3-0887f6077e6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7ee4e953-33c8-4206-84e9-633ed32f9472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80464d3a-cc0b-41ad-ac5b-5fe185df68d9",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b41e064-f9ba-4366-9a35-6198b87f703f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e410c1c-3267-45d6-8226-e2aced9d8a7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01593a8c-6a83-4fb3-98e3-29d8c191418c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b787e822-6850-40da-a2a0-301e6cf9c40b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0fb5230-1264-42c1-a548-5f1fd8cd6aee",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec86df7a-1a59-4d34-a751-789b36e78d75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24f23fe4-74d1-413a-b875-8e441e12ffd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8cee685-e560-42f6-b1be-e486e538fc50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "794d2ecf-e945-4c09-852f-b222411869a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "332b809f-bd21-44a2-9300-1fbb6426d4f4",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d74a5803-f554-47b3-8753-2d122e04f341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50fd00c0-ca71-4b35-bf69-3288bca29297"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee8e6f27-cb2c-4400-8322-ddde886ceb9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4ead907-3c5f-4aa1-9993-f4a8db43ac82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c79f5753-6395-411e-8072-9486e9c20354",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b358796-6d31-41c6-8c57-eb375b7547ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "225e17a6-a337-44dd-b273-429a0a832ac0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "509df7ef-66cb-4dd0-a5bb-1411a0b36cd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6d62bfa-b4a1-4c5f-9e32-2c8e246d23b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8684323-efe1-48cd-9c19-f80f3c1d4cd3",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaede527-359d-4892-969e-5cfb03410ca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e17db8be-ea77-426a-8672-dbd8d815fa9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4ab9287-a735-41be-bda6-6ccf27ccfa6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7944d8af-3a10-4f70-bee0-fdb9819201a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92702563-473a-4763-a6b1-3c3ff462cc30",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b09aae0-7ac2-41dc-8a59-36ed34d7564d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "947ea2d2-8a30-4fe2-ad85-6851db2ec613"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "960b52a7-6d0a-44d8-b819-c9813c775ec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ece897bb-2380-4ebd-a18e-d8d87fe2569d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0e14f63-d0de-44c2-b3a1-0cadf050f00e",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f1205af-f733-460d-9559-bd1a5222feef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc15fb9a-d16e-4ea8-a6fb-91b4cbdc36be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54fb9bdc-6a52-4734-864b-15fc87b9ab11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d38190dc-c6bf-425a-8156-3f7baab021e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d894a0f2-d6bc-41ce-92d3-5d5d2a1fddad",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3059db9-4148-4210-8642-a4f0ec30a184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0182315-8db6-43da-a8bf-b743b4947552"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26184b67-f050-49f9-8b53-0bde6032c4c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3ae8175-7502-4cc2-a85c-63265893ec0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f3e05c0-105e-4b9c-a641-48526ed6a941",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54656936-9273-47ad-a21f-3f4a5819942c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4986b233-7653-4d17-8a37-b754269039f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4508e5d7-7752-4414-80cc-071dad84e243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6dc086c1-5ada-4a12-b407-c441e544f055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a9fef0e-ebe2-406f-9d2f-9993b36c7796",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f8024eb-dc6e-407b-8b3a-b859b61c69e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67715708-8e01-4404-b94a-a367be2b48c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2da9d8cd-a872-4b2b-9196-50bf89c13cda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4804ba2-9bbc-47ef-88bf-65c49cfaf83b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6034c407-462a-4c3a-b66f-60ee97382173",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40f13040-e37d-48d4-af24-2cb32b72ca13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3ffe3c9-5124-4899-9f86-b8336a8e1029"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecee825b-eb8f-4fc8-9a34-f86173f8988a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ead3177-ec4f-496e-b857-c860a5a9b227"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f57c930-a6f2-46a1-9320-bb7838bb0dce",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb7c4ca5-8964-4078-9291-efd83ba9008b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "842c4a4a-3667-498b-8201-103ec44487fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c06c60c-3e8f-45a8-82ab-0f340b65df08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "818a7d1c-b2d2-458b-96e3-d30d93086aaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dfbf9c0-7561-4e11-b682-5db1034a85dd",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9799407-c645-4129-a4bb-7908619d0d58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e85b5be0-5dbf-4e5c-a17c-1f3a61fe19a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f4e6453-77cf-4b5d-bf3d-7eec88a02238",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad5e17a9-e40d-4a8f-89bc-e2978e364811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c036c085-bbce-485a-a47a-401f2aa3cdf8",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87313493-b92d-42de-b7db-39c35162a4cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d703052-0414-4d0d-97b6-ae0ef8c70139"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b9175e2-97b2-4324-b58c-c17c2d449934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "23324dc3-2ddf-4a76-9378-bbfcc3684a2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1cc7441-9ff0-46ab-95f1-2e5f24f8ca37",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86095896-8cac-4bf5-92f8-9e0595833f1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c2f14e8-37a1-4e80-9d26-a49cbdcf06dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "623f82e0-278e-4840-ba95-29170380ea65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2db11e94-0ddc-40f7-8cad-6ad41ec4e84f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f495987-bdd1-4388-bf8e-add906be3c58",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee0bd08f-c62a-40d4-ac78-6bdfabb77976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "775a91b3-d31d-4fde-b49f-394202d6b594"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e413814-4563-4171-b8ef-2a259a44b74b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b94dd3c-5e86-42e2-a5dd-e94c074de72a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04a74441-3d53-4c48-b203-a06a026fea3d",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6a2bd4c-55bc-4046-b2c5-9f36b729b184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6935cd1b-24ad-47f7-ae50-d4f32987541d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8efcac3f-9225-4840-8e41-70671cf419ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "711c7f95-7df2-4b58-8006-2d27db5471a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdad3b11-ff67-47cb-bf11-f462a0c3006b",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08c02ee8-8822-4992-8222-534bd4e49670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5ebd817-9f1d-459a-b930-744334139df1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fac7da0-a0be-4089-be56-e55f75437d54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "541f1d37-55bc-4b3e-a317-af4e04ccd452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7697281-a94d-493a-abc7-7b47bfb152eb",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9a73ec5-f7a4-47bb-93f8-d5464d000314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b704e44-e913-496f-b8cc-7300e3d5fc15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05309540-ab51-4dde-ac7d-8d3404e4793d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "fecce79d-133b-4c8c-9d89-4af840953dc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3760644-b897-44d0-8460-c293badab982",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfc7d5c6-50d8-4492-92ce-b8c8f6806a65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "234d6fc9-9255-46dc-ab07-00913f242c20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44ad005a-55e5-49b7-9d7e-05c1d580fc30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0e61ac8b-b0fa-49e8-9490-828657046cb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98c63733-9a9e-4b57-8dda-fff151243890",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dabd923-8f8a-4b65-bc66-8de3534ef6a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cab9406-ac0b-4722-bdb1-6f2e6a75528c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbe42bc9-9e9c-447c-a8ed-c43045a9d89b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e966b7ed-4af5-4d89-8e98-c2688af808b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33438b58-d9ed-4d47-a587-348398e1aeae",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1903662-b6c0-49d7-ad44-8b2f1fd580e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4becb445-6f06-4dbd-a01c-59279dff02a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e5fb8bd-8605-4124-9b60-18c975f2009d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e6079bbd-286a-4c34-ab15-8875c63c3954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4970cde3-0d7e-4787-a842-5d2305cbb9b7",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dacfc8f-94d9-46be-b8d2-b0b5725758b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccf6d774-cd57-49eb-9d88-b9acfbb35e8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d897e5d2-e3fd-4294-bac3-a8b54fcda817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "75969f50-d476-4d10-a061-2df9ca0fea8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5fd7f6c-9576-4967-bfb9-303b484c3840",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e295d51a-c479-4449-b24a-b7a34df66fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4062190-9747-42d8-af23-fc249b968e21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9a19045-9071-4c39-b90e-3231552fb3ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7f4d68e-7d39-49a0-b094-6b60e29f3400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd3564ed-fb90-41a2-a0f0-9d44390b0d7b",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52e39af3-ccae-43d0-b4dd-055f84ccf869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aebbe4c5-eb65-46d7-8a31-a24734d77c89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50dab9c8-14e1-409e-82e9-581b0d412a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "93799a3b-0769-4dd9-ba36-1aa2481cbf57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eb5de4d-68cb-4263-bf12-e28eff332665",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "410f71ae-6497-4cfc-ab32-bc3b602ef3bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8ae6091-96b3-4959-b242-c6bc16677cc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2fca4a7-667e-4060-adfb-40408a48682d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "2441e07f-d0d3-4ebd-a7ab-e9f4b415ad58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0048b556-4ca9-48e6-a7a2-ed68a374e5db",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a51ebf3a-fc66-4eeb-b3a5-c5ae9ff3c122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "381a1a46-3248-4f92-acd2-7703e031ecf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65296ae5-08a3-4d31-b666-e6b227e9b624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "030ab0e3-4b77-475d-aebb-e13fa1b5f6a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd619fea-661f-4acd-a823-9f9fee384315",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3170c02f-bff0-4e6e-8304-865ed92cae1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca960d80-17d1-4fd8-83a2-9bab9efa13bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcef1ebf-cc73-4bb7-81c3-75cd6f4ac309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf2e9d47-a29f-4eb1-97e6-c5d9245ae19a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e43f9798-4d8c-4b1a-9223-513cb220413a",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b28ff8a-72cb-4435-898b-f28ce0596500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b85e7b0-92f2-40fa-9945-ccd26555c170"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "790cdcb8-9217-4fbf-b4e4-82fd0779d418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ff4c5d5-bd87-4019-aff8-813e111038d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abc67d4a-6a8a-48d0-af40-f502f72f64e4",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "180c02cd-dc9d-4c1a-8262-9d952274e539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb92b024-d7d5-42cf-b10e-6c0f5822feee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c165a87-0ac5-4a59-a5f0-c167d1e30170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5d9bf49-09ed-4c43-a373-9a10828caba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbc1c696-a097-4b34-9246-4d5dff442e26",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b670327-173c-46c8-83db-eb6008ca7939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ce64df8-6be7-40b7-a471-cf51ebaab66f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6833850-a3a8-4c0b-ae99-6079eb5ce4d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4460d90-6f2d-44eb-beb5-2654b28e1d86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9c88c60-977b-4df5-8577-96c57ea22704",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a0f4e15-ecec-4f35-99e2-f5b2fa2b03d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baa79b6e-5dc7-4a74-b1c4-49184b32e717"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "281d794e-b9d1-453f-870c-2403f091ada5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a57e64c8-c253-46cf-9ee8-11e95ba1272a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "960ce1a8-3a62-4850-b27b-24c0b6a8291b",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e965ba6-d539-43eb-9ea0-4c3d71a7b4c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ff52397-3972-4462-9f31-e929c5de4e9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d838936-0c4a-4ed2-ac4c-d86949c48863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a924b00c-6066-4912-a6a0-040956265768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75d19b51-bb9a-4e2f-851c-3d04019d4553",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "970e8907-5e8b-4a22-ab46-42e05ae62fcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5200ba9-9b79-45cb-8572-ddbe59d08ff4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c11d1a4d-d88c-4714-8eb5-9174598a9ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e2d8ced1-791f-4c5a-a12e-47f1cf587282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d019fe39-efa7-4887-b92a-e4f3c8cdd605",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f440b92b-a30f-4aef-bf46-c632999e5099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fc4fae3-943b-4230-a242-a65494fdf4d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a16ec82-a795-4219-bb3b-5cdc954ca717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "2464e7ee-dc20-4db1-ac07-f4a65bc389ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af6b8f30-4a1b-4068-8ae4-2cc7c7a1d567",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af32db52-83d5-47bb-8447-57f6f393a3dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c72e3ef2-d33f-463a-859e-830bcd0bd075"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "778f5451-ce04-47e2-bfd7-cb39ea9498d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "114570fc-2c23-4dbc-a106-e7238c49e1b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0065bef-ad22-4f5a-a7ab-ef1f48d287c4",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "098a3598-2639-45fe-9e6e-bfe7d5421cc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "706cf9d9-988f-4fa3-8583-d71bd67f33d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18a05fdd-75bc-40b1-b941-6da297ab9b7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e642d1e4-ed1a-4d91-b228-9ef0bb939985"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1be1d192-1703-4e1c-ad3a-06e01739ed41",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2956cd5d-90f0-487c-8fb9-f05d5021ef87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "651a563a-d372-48cb-a776-acd2c891caf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df6eb83c-7e9a-45fe-b34d-a371aabde37b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "faeb4db2-f8d5-4335-87cf-79d353ffef47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37e64aeb-62d3-47a6-8854-93759e9894e2",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbe79155-2f56-460a-91d8-4b02cea62e7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4118e0c-2843-4984-8051-e45188a1d16d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91aea1c0-3125-475d-a8a9-996a6ca0896a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "420e3812-7e3b-4637-95d7-66f81a6ffdae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "579363f4-a4bb-4dff-a392-9becf61aa61d",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50a6f8e0-256f-44d7-9410-15e5663c786d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5fa9a4f-d27c-4e8d-855b-8c7c19d6bfb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "173e4f62-cec2-43c4-bcfa-09538450ee89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "53ce719d-27de-4def-8acd-943fbc83702c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cffb1641-e637-4772-b375-30e790672ae6",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa17d65a-dd98-441c-9934-47d704e7ad15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfa8f01c-2910-4cf5-b409-5fc43b79ea4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec4ea8a9-df62-44f7-bde0-7ecf8b166098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b3662ed1-d15c-4642-81bf-f1e288370d1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b294339-7984-4d09-b00c-e3f4bb45a703",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ea4ae98-1139-4e26-879c-f23be24c8e5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60193196-5619-4505-a338-070d5ff4e2b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e2b9fc2-d655-4c04-a2d3-08676754a270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7b670d52-1da2-4edc-93af-2f21dc89a2ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d818a392-b8c8-4cc7-a09a-c25d63ba139d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67ef1abd-0d17-4240-8522-6b2cc9452286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ba6b25e-2c0d-4254-b1a8-eac8f782ba64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c99175b5-396d-413b-b3dd-fa8d1d3a55fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d551d845-862f-4e09-b6a9-c7f455878ee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6717d1be-2589-446c-b695-2dcdf2333448",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbe67def-0628-4139-bc60-4678e2a65fe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "338e3136-fa8d-4ab1-bdc5-ba5cb2133b29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0a12538-0438-474b-98cb-1ec43ca104fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "04794167-8e60-4083-894f-c3f643b35f09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd53f05c-b3eb-4735-8596-972024cfed22",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35bb8957-7a7e-4dac-a8c1-b6497870aeff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e579a5e-f876-4c08-89db-9a51761deb2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44096123-2a66-4664-8de9-b91894517ff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4172f201-8416-44fe-974f-42d07b16ff82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed53b2d5-f541-4e44-8885-546ecdd241cb",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cd75956-a05a-4c2c-aa6b-a37b6bfd7f7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "745d8dc9-6237-4f47-9684-0ffbc8640b2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa70c0e1-70c9-4e4e-8088-39f0048a0c69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "4815ba67-e445-40a6-8d90-99ef9dea2c5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c959eec4-d70d-454a-a4b4-9a3b4e422b1c",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ccb994a-e4a2-4883-aa30-32f2dbbd73c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f7f60c2-2637-4665-a011-62772d8d870e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b155257-2ac1-42e9-878e-cdb9cb8223f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "2dd1adac-2304-4b72-8c1b-d1bb7bcb4bef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "793e7a29-9b0e-489e-bcb4-b6698b87f65c",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffc23e4b-172e-4d40-8924-2910bfade690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2a79df3-2186-407d-8818-511ce618d3d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1836189a-b4c8-496f-bfe2-e01c8905630a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "522b1f3b-2eb4-4507-ae45-33b1d8919257"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf2de949-0578-4b1a-a220-ff6c187e2795",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b293bb1-62c9-4474-8266-daeb0431f27b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ed84460-3de7-433e-a154-a62eefe4055e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11c07218-2631-49ac-a337-f6ef9c8c9f99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7cd6719f-0cd2-4dca-93c3-f01565c2bed4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3c9237f-32f6-482c-a89d-c3ebf46f7c5b",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b655077-84ad-4523-945e-b1ca8443c550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2313b57a-8f57-4bb1-89cc-828c16911c34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdec89b7-5cd5-4a7e-8e4a-c41e698cf888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "77757e01-ccc6-4c8f-9a52-207c44415fcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "708daabd-68f4-4cca-bc3b-86f5c63ce496",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94a1036e-4df4-4be3-a1dc-caca5f7cfc8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d99193f1-3137-41d0-9a5f-e2261bc2a1d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1cbb694-93a9-48f2-90fd-de49d3a39ffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "69d03a7a-400a-4581-81d8-8c2acf539525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbe95b51-61e5-4a9f-b116-10599683bc47",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "193af9b6-dd20-457f-9541-cdfb3911c4e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77ac19c9-9a23-4378-9fae-b834c7dcdbab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1cd4a7e-e3e5-4916-9125-03dd96af8954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "085385b0-bbdc-40a4-b202-cdcb1cd36031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a8272b7-6fc3-47aa-b144-b8149a9c05d1",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82c281f9-a60b-4be9-9f40-a9ef575941c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7301016c-64ea-458a-a677-a228b9c9c113"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1965c02b-8c64-4d6d-b4df-03b89e854481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "740b784a-b746-444a-bf48-5da113d81ce0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "905f1d04-383e-4630-8dc4-d244a420b966",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "059a16a7-0726-401a-831f-6a9713e09dc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b789337e-c832-4b2f-9ce7-bd2d157591a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72519259-692b-4027-be11-d6ca8903fa81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b421ab8e-5660-4a2f-96b8-9f54e4034d67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec7dfc09-bbf1-4511-b7ac-becb62d4ca9e",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b52caba-f372-49d1-b220-33d3f8bca4a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "604a9371-eab5-4091-83c4-64d2d5d647e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec9bb581-42f3-4652-9327-35821e96ce58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c1eca5d-26d2-40dd-bf97-011caf356af1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "227c448c-6b2a-40fe-8a0d-afeff7a24046",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62248fe0-4731-425b-88f8-2d13e4f82223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3d47cd2-f0df-4bf8-a7e4-083cc9a7f681"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2539f87-5880-4e31-beb0-b590c2c4f79a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "449ec064-e9d9-48cf-9076-64c1ebaf0b77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c8c8f51-7e3a-4eae-a4ba-c77b253e778a",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78e6533c-dfbc-4a04-9507-1101e4d59bda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3130df79-2368-4e5f-90e3-4bc12fa4bf33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff7922dc-3acc-4388-9528-16710e847f69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fda0ff53-4aa1-4735-81a1-edd19fe9337d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc4f4bb1-d06a-4de6-a176-ce3efbda387a",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6869cf58-89bf-4bac-b00d-f34467a59e14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7ec10a8-e5f3-49ec-8458-3445af348ed2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aad2a408-365d-44b0-b171-4b9d5d7f3bb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f2740aaf-baaa-43e6-a3e0-d8a3dcd49c40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7e354eb-f345-41a2-9d68-9d1971b55a73",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01f9ff4b-24e8-4669-84a0-a5f55b02ebc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdbdf0cf-fd20-482a-a942-2444ad89b64f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50a156c0-52d9-43ae-aad4-c4848e74208b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a58ac0ce-b9cd-467b-be0b-e047d56a558e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "945327a1-1cc6-4e5d-8a6d-4617fa2ee4cd",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3543771-fe22-4e0b-89d3-73576983d3bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "997d3ec7-2933-4d68-89fa-032317a2886b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bbd51d6-d2f1-4e3c-91f5-843864df8e6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8870ee2-c255-45b3-90bd-93ffcae0d043"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cca23a08-91af-4980-a379-3bb22edbd207",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bc95e7d-a9ae-47d1-a09e-ffacaa8b1ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5324ed4-6788-470a-9c6c-6cd1dc4b0501"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a46929b0-ec7f-4428-8d78-2713956df83a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "059e45a2-79db-49a3-abc1-cf8d858d5bb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b98e1698-4632-4b50-9605-479ac451c8ff",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42c0ce7f-4849-4546-8508-977b72964d83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44c98ef4-ac75-468d-a503-0260c317d5c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aa82b20-1c5b-4c64-8a55-b3cce433b3ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4978a525-a4a3-4456-8370-e01c59936476"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e360e2ba-1753-454c-95ed-335981802032",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bb04013-afe4-4736-8125-bdf559bd4f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbe2dd1d-e4cf-47b5-a07a-d923b7e4a1d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa91cd18-70c3-41cf-bf22-2aa6f425193b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "07ffb289-dde4-4685-9f8e-86af7aa5977d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a9bd440-bfe0-44f0-80dd-19e0b0402e2c",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "339087de-0c29-4fd2-ac22-0027bbb72ade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "067460a7-600e-4c83-9ce1-e992252cd1d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a3969cc-c2a6-4cc6-9ae1-7522a6354722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cb3bcb93-1dea-4b76-81b4-3ec431757940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4213368a-2d74-44be-bc81-e53aa5e6be23",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e60ab0ca-8f3d-4a28-a29d-ff7599950d4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61cf0127-cc25-4120-ac1e-e912a95fe916"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f96b2524-a615-475e-b784-c9988a54f61a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce3a0a65-69c6-4f08-8c5e-9ceb9da9e9dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a7e011a-a579-49b8-8c98-1d011c0aad79",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9cac76e-eb18-4479-8e3d-83c292fab26c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc7cec26-5d05-473b-9152-277f5fcdf0d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99776dbe-5729-4f74-8a99-e368255855dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ea0127e-2948-4197-a8ee-5505b0a253fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "285809e0-d9c2-4aab-972a-d0d0357a486d",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a79b8f7-536c-404c-aa97-25a619d9b949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6034d8eb-82ff-481b-9cc3-1862ebdc5759"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bbdefd2-db14-4e1f-a272-e94a107062fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fce1bfab-bd40-45e0-b52e-03385c72a8fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad490cbb-c4c1-44b3-a26e-481e04fad4b2",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bb85b85-5ae9-42c0-94b6-c776ae7be211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdfc5fb9-9741-4622-b4e8-9c0e53e62d6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f15b7e3d-3f24-4bdc-868d-10195dafda2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "30f9ab33-81c1-4e20-9adc-eb1180c516f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "066fe603-b17f-4498-9f75-f1a8d70b0a17",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaba9a30-61cc-480a-8bfb-1ff0d4dcd2d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2114bb1e-831b-4b00-a41e-a95d9772da71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff287c94-f85f-4ab2-a33f-67db42a9e74b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "022eafb6-ab80-4f4f-8d7e-20f12a2a1d83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14627468-c8f6-46e8-a6cc-c86ae6662454",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d39b90a0-9332-4848-bb50-5799b28789bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a94c0e4-8899-4732-8416-8e680b8e8ae0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "587cc455-3371-42a6-85f8-ee2ce09a2c59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "55f84098-91e9-43a0-9a82-6a8d4ef86eec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bed346a-45ca-46ff-b50f-89d41cde978e",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d89f7d-8ef5-49e1-b26b-98ebb954d407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b493cb8f-4c75-45da-a582-09d389b5f24a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cec86c9e-9752-4b8b-a1f1-36b698004f55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "74aeb200-24f7-460b-955a-f03b6eec04c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6d7490c-c5a8-4189-a3aa-a10d62979e60",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5d09692-ca6a-46ae-a174-92bf64362a37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66c63622-13de-4ec6-9d61-59d96edb09f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c932427a-139f-48b2-8264-82f40f040b58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ebac2d12-bb42-4d56-be33-fbf18859d580"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7fcec96-23d4-4b5b-92a1-fd1caa10852c",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ad2c618-805f-4be0-83f0-23d47c52513b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1834b129-23d2-417a-aa34-951545a1d0fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee8256dc-a624-4e2f-b53d-b440b6c6c6de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc21cc60-c9c3-4169-ad40-170c0d74e41a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef8fac53-083b-4cc7-ad8c-6e49803fc864",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26c0c5e9-7534-41b3-a44c-d914038e7702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e875a2a2-eb05-42ad-aeb7-2b43f2a969a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "439cdd68-58c9-4cba-a5d6-f7a94b4622e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "721d676d-3be6-44c4-bf86-4bc21c371d25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33456bf4-a565-489f-835f-9995b8600a78",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c4a143d-7794-44b6-a63c-ce2d6794017c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "307dbac1-903f-477b-bcbd-1c16bacc0ca5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "514dd9af-60fc-43a7-98eb-fea21b642626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "447c2d9e-ea4c-43a2-8cce-20bc6e9044f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eadbe0d3-9e1b-44b5-9584-cfc51b12a654",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c983e419-2ace-4c9c-8da9-0f3f15b1864d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "cc628a34-f10d-4635-b1e9-73792ed87232"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b18d6059-7c66-4027-bae2-6a6830253109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc1d13e5-389d-4d4a-8099-414995e2c2b3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "48b9733b-4191-4f78-ab14-52d0ab614eb6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "56857251-acc2-43c9-875c-45ca9cc027c1",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc72c9dc-a5b7-42e4-bec2-8936d1ce289e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "870e5a25-bb68-4b7a-925d-4cc7ffa699b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79b3da65-ece5-42ea-a828-0b01e37fbeac",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cef06d89-91ec-40df-b14e-586d5771df6f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b9eda3aa-44cf-4906-a2de-40521e57350a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c4233093-da39-45e2-9c37-cdbb6c2cbae9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "73952383-0e24-4e0f-9336-3330469036cb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7efe1f12-1a21-4da4-adfa-165ea0c8787f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e0b8dd3f-a24f-4f23-8e04-d4405aed6650",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bc0bd1d9-ec12-489a-89e4-be7182eb9a66"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f8f4dd7a-9393-4a69-a8e9-3bfd9d37a4a2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2388fc0c-702b-4b6a-ba3c-9ff5a54112f6"
                }
              }
            ]
          },
          {
            "id": "c3e51f08-b09c-41d0-96ab-42f06bfd01e8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "685903e2-b29d-4f36-b4f1-554e82da0fe2",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "22b7b946-f8af-4a81-ac65-c968befcb4e8",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa2b9e8e-add8-4bb5-a965-9057de02cccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "923afbd3-7a07-4e8e-8e09-1696b5bbc7a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc2d63a3-1640-4bc5-9465-2d0363a2fc05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a222b953-9ecf-4197-bb9d-990eefbfd834"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f4513af9-1386-49b0-9288-f4a04c9b738c",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d9ebb638-888e-4f98-b314-56d07fd159ed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "97a4b5b1-9250-49a3-92f7-75432299ceb3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6c7e70c3-7105-4e2c-98f0-24df2c013027",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "058b68b8-33f3-466b-b4b6-824b1d161d13"
                    }
                  }
                ]
              },
              {
                "id": "672fa951-aa70-4444-9466-7557ea107140",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fc5fe43e-d4ac-4c7e-8a4f-49323be59b9c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ac88481f-404b-43b9-a769-d8595192e3d4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "08ba0d17-956b-44c0-9324-7163764abdb0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9e1c9cb3-e1fd-4d76-bae7-13a0818d22f4"
                    }
                  }
                ]
              },
              {
                "id": "5915bb75-c54e-4517-85cf-9fa048424a97",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa80e017-f285-44dd-b96a-4f9235161fc0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3969ee54-db8f-4084-8137-02c59c14c0e6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c22f49f5-4335-45a3-b87e-935933dfa744",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6578dd6f-3ea8-44fe-b72f-ad056944bc9d"
                    }
                  }
                ]
              },
              {
                "id": "54314dbf-4dc5-4099-bc8e-9d3c7a178443",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5e815059-8118-482c-a035-7080765d23fe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e26f93f5-be62-47bb-81b1-a89aae7076c9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2e0c817d-33f6-4022-9609-94d5d1973508",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "092e8bbb-de57-4802-895f-cbf34814bffd"
                    }
                  }
                ]
              },
              {
                "id": "68e2b560-27fd-4d67-9395-9084b022c5fc",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "29a1bfcd-b103-40e9-863d-013c580b0f67",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a29a9c8d-f89d-446f-9f85-a44346355071"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c23c4649-edc2-43a9-bd24-df7506b2a163",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "dc25cba5-964b-4c05-8282-1b32bcc1c686"
                    }
                  }
                ]
              },
              {
                "id": "c391e2f4-9249-466f-a95a-600eec64101f",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "87b658e6-da46-4712-b061-59d97ef2cbed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fafc7824-c8dd-4395-86ad-dca1881f2afc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3691d9ab-50f1-486f-b9e6-9ead43668cfc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4ac46af3-7a51-4403-bdba-92989de4ef5f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dca8c1e5-fc0b-4a38-b068-c8c9e17a234d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3e885cbb-c4d4-4a44-a6dc-d8ca3f2cab02"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "97a3a658-4806-4f20-8e80-d2d3561cc9d7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7dd24a22-ee07-475b-808c-854746b51f21"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e73ee56e-32b2-46a7-af41-e85750420544",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "a1467936-0738-43c6-ba31-0cd5979b3fd0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ca061e86-f3e2-4d1b-a184-bf428455e6fb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e23f21c2-3387-49da-86c1-a1c711b8de22"
            }
          }
        ]
      },
      {
        "id": "492d192b-704e-47fa-b997-6f826ce5d8d9",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "911fbe87-27a0-430e-a0f4-914893454006",
            "name": "Negative Testing",
            "item": [
              {
                "id": "850e2bc2-014d-409d-8eb2-5371c5c86982",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e95560f5-f0f5-41df-aba9-f5e767ca4a72",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af4a09fa-e9ee-4262-b904-6d78eda70fec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "541f02d4-fd60-4e15-bf84-98ebce744399"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "369d3636-1e30-4ac6-8f65-6cbfab7e7eaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1459e83-5f64-4e75-a669-a2dde9c8949b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2d9b8ee-c2b5-4296-adc6-b9fac0116ae8",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bbadf91-85cc-45bd-8c7d-96f64790f7bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62c3d9d5-355b-4693-ae26-6c0c6baa50bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf59b78b-0173-45e5-894f-033ff93eac38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2cee8a47-6fc8-438e-8466-ef53596ea6d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be29201f-3fa8-4752-b066-c25ec16e9427",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddb68842-7320-4e16-ad0c-90e6f0c1e8af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5afffd64-5f2a-470f-afd9-a54b25ebbbb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66e43901-5335-4e23-9437-92e53c2f09a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad1dd551-7c35-4b42-83c7-cb4ff42bd42b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b10df9b9-580b-4079-9612-c4e2d4fcf656",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edae98f4-c595-4de7-a948-ae2433da5928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7454bfc-cf3a-475e-a315-bd1b0a1d9d2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7439ef1f-386d-44a0-aa41-2db7e6795bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c444a355-e5a0-4d32-b1b8-329f44a776e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9e9a275-f796-4546-b2e5-b05de695d015",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1d1f024-5b29-431d-9b3c-964f8c657f1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "351e06cf-3365-459d-a6df-c793d21eca94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d459e278-d19c-4422-8690-20fb75e75c2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c50ff754-2779-4251-8af1-7140c051b54b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbe8027b-5dff-44fd-9181-99c6171ac35a",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6286933f-5741-4dc3-ad29-36d3674bb5f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4283a0a3-c1a5-4d2f-9fcb-7df7d1cbbf67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0d3fa2f-a47c-4c1d-aab1-9de652a1d87d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "52966028-ae4d-4a02-9ee8-42f654e512d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94f52ef4-4a73-44c5-9d50-3d009874c9ef",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed67099b-753f-4f1a-bcae-ecb218d7cc33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b235704-2652-4bb2-8498-45274d4b044f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d883555-b0ef-4b4b-922e-0408d7febc61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ba2bcf1-ecbe-445f-a046-306c4bad9052"
                        }
                      }
                    ]
                  },
                  {
                    "id": "890c868a-e940-4c54-a9d9-b334b6172b5e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15cf78b3-a35f-4a19-801a-13172b4c36d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd7200c0-9f74-4898-8cc0-0396e97d7d8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0668591a-7f27-4d7a-8d58-1e3d82c873e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7e7deab-347a-4c5b-bad5-958ebdce6624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be2c71ad-1d68-4eb8-9c9e-e610768579cb",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f04393f-bf97-4d28-bf83-8d318a804d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7f1311b-83b0-4c21-9bb6-90c7f0f8a777"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5636b0b3-25db-4bf1-a9ae-76391a7a4d20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f8bffe7-ca45-4f96-8404-1f1bbe832681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3adc920d-3631-495a-9b74-fced2207d68d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "def381d8-52c0-42f0-930d-85d466f27e79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5131075-146e-4d0a-899e-271e41e303da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bec0be6-bbe1-47b6-80e5-54a9030fc92c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f1959ca-187a-421a-97c3-9b47558a6e85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0b7e58d-9b91-45f5-a126-5607d6d03a24",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faac9fb7-61ff-42d9-aab3-b972e473f6f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3f4168e-0e47-451f-8f46-ada4d984d4be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dbe24b5-be32-4b14-ba29-3715fa67695c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "2d8ddb6b-fe80-4003-93bb-82953c221ae3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fa51e05-fe58-4d14-9c5b-cf0eff5e6d82",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d6ae674-3af9-498d-bc4f-e2a0f61643ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeb94de4-1d10-4b5b-9340-6a2b8df3f61d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "208d7d82-b5b9-4d7a-94a2-d106d30b5564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9285597c-0a8f-4bb2-b442-5b239b2a247d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b63c03b3-9ae5-4b9c-87a2-30bba3a228f2",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "addc1d83-b20d-443f-8319-2b0b2af62536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83519417-60cb-476f-a914-070ee4563261"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce0a6aa1-a4e4-4a49-89c9-6b906e9e615e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d5c4ef8-c666-4ea4-8ac1-a577e3ab5e69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da424e2b-a762-4902-adfa-47053b3b46b0",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0df83d11-3757-4fbf-ae96-6f91631ec1b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f46f611a-13e4-40d7-a2b1-7e26d6fc9b6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3d6cc0b-14a5-469f-868a-adf3ba7e6fcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf9ec746-773b-4dec-89a8-ff7ae833325f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e01e0001-b641-4fd7-bb2b-353d05dbfff5",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dd0ef7e-c040-480a-8e5e-4b1ddcb493c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd13cb1c-0e25-408f-ab08-4935121c8786"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "197a0452-5cc9-4716-81e3-b7ecfb2b4c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad07f249-caec-4434-928f-27fae82c6658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "493dfbe7-8367-4802-8605-a39e053e93bc",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93f2d2e6-262e-452c-bb9c-662f5af60683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d12e47b-d561-40c8-8f52-8abfe1753b4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14b47aff-22d1-42a8-a559-fbf89b7d727d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe2d6481-a997-41dd-a43f-3bb91686a2da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b58114e6-77c1-42fa-8f3d-63991a823562",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0941735-2c20-4f88-9380-a42b32e616e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "babefd7a-a90a-4830-aee6-8625b5476f24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1104c001-769e-4085-83ff-1da99195c75f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "8947559a-bb0a-46b1-8e59-63ce8ba89925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0959d9f-d9c5-4689-83a6-2641483b7989",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3ab9d9d-b62c-498d-8550-f5b9ea8c8f16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67ca1867-cef5-4b9d-ab6f-d6b2a9f7811d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15e85b76-8e0e-40ad-9996-2c4752dfd3bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "eca29e3d-cd5e-4db3-8547-27ccf6a45707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "789ef155-fccc-4e9b-a3dd-4c6220a410e9",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b508c3b-31c4-4f48-a421-bf8e2efde998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd21c382-8366-4cdf-ac88-d5747949ee13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d31c5472-bd0b-4be8-bc0e-68d49cef87eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc3f14c1-7e34-4ced-835d-200ceb5c71e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec4aeb32-0cbd-4cfa-8600-e789b81b721e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "096d5d6a-3bc3-4910-bb28-0cf5b1233c27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05836e1f-92a2-48cc-b9c6-21757c89f330"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cacd42a-5d2f-427d-a5f3-b66929548be7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1865c060-d229-4eb7-bca8-0e2efa023fee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9974ad2-a3f8-41b9-8d97-b21d382ec042",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47fe8881-0cc5-4c12-b595-aa00d825dbb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc7df237-648c-4c9f-bbc9-8777648f1fe0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3491b8b-2d97-4307-99e2-b59da91373af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d82a0f9b-6b05-4ebd-9e09-449e02996d04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "806ba357-bd3f-49d3-8013-25a560506ccd",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c520288-9594-48f3-a90f-70ecafea2a8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "661a81b4-069c-406b-8605-c5a2a6d50136"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa002172-9c3f-46cb-90e7-dbcf85a63752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "00d00b35-70a2-419c-ab5c-5f94565f189b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a72c63a3-6a8c-4811-8985-4d40e6f9a905",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79cfd13f-d97c-40d2-af15-9216b77d8eab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "404543cc-2087-46e0-8f3a-dc2420c4cfed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d34dc131-0f1c-4c5a-80ed-e6ab35706324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a956891-2c62-41c5-b130-ac7119f4326a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4302d52-2078-4e10-b0cf-2c09e6e90a49",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42844228-8d8f-4412-9905-56ea240ab1da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f700305-4b3b-4f3a-a005-1553a9e9ccc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3d40ee8-b4b9-47d9-a20e-06478dfea32b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "befe18f7-6b1b-4877-a02e-147db0be83e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad22b327-2898-4ba1-beb3-c380d5aa5acc",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b3f6220-d6a8-493d-a0bb-8a27ba4dd123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0325f047-ec92-4745-9052-cd0c5dcada2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f522dee-5e29-4308-8f73-87909836e670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "440ec0d9-daf5-4248-8132-ce84fc8644b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82e0c4e7-5186-4441-a110-a4468be5fae8",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b50ab8d9-c5db-4e5a-bf08-a45a4320844c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aad2bcac-d8e6-457d-8337-dceac3d7376c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8981af64-d5aa-4b03-ad1b-0d480f781019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e10a52f-34b4-406d-8267-a189caf4878c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f936ace-b532-4bdc-bb91-e6efd293f8bb",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23a0d6fc-ed47-4e70-9986-5a3dd790fff1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83bcb6cd-158f-436e-a2de-35eaabfd07e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea977d85-5547-4f7e-a66b-2d2440c3d89d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1e074c7-e840-45a7-8473-3f6bb006f9cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4238f1a1-7135-40d5-b358-b25bfa572069",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf061337-76d6-4388-a26d-a7d1a163d41c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1ed049d-42ae-4092-91ae-0fdb403f8a59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f0c799c-11f0-416b-9555-9152e701207c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0547047-abf4-4dc9-bcfd-406f126b4746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9fcdc82-ab13-4067-b0fc-cf1541686a43",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1eaae4f-b014-47f8-9c6a-dafa4b75ad84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0125e542-90f1-4194-be18-1aa281687415"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b7363eb-e6ab-41bf-91d6-c7e024803c7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40fe611d-fe0e-410c-9d1f-2473c3f48026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d358f8cb-4d50-4d20-8045-469c9b6b2f14",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35e9d04f-6d15-4db2-a376-b58e9e148bd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33840733-d428-41d5-960f-b1b8c93b6a69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8e932b3-e0d9-4ae6-8e75-9dc83f5c01d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "13ddbfc7-be44-497f-851b-b4ffdd4911d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f4202a9-b76c-49e9-aee5-801ffd90ab5d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ea3868a-3111-4083-ab33-6bdf96059801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3ac7b1b-acde-46e5-ae03-e1f0cc54b31d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98273192-2c58-4bc4-a039-fceb95bc423e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6acc70ec-63bb-48ba-a593-3e6018a50397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "527a1cdb-4877-480d-b6fd-1fae8ea62b67",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcfc0342-06a1-4ad4-b1a6-8dc8e5474e0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00e670cd-b358-480c-b233-819945edbb64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b69a205-d9f5-4a0d-8d8e-de650b32644a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4070bbd2-f93d-416f-ba2d-7a382941a4d2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6bddde09-9a10-4528-82e4-371dcf8239b0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b7f8bc61-f511-41c0-8fbe-6b1936218e2c",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f138206-c57f-4913-bc5c-cbb46ac145b2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "5327ffdc-d1ab-41b2-8c18-71fb90777ec9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cc66c2c-9376-4bf2-970b-edf57f43cf22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8a807d82-0a10-45cb-a326-e7823c8fb26c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6e1f9bb1-98d0-4ceb-942d-7756258c5f2f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "569494b0-7d9b-4a77-a3ee-4a9c73440523"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b572920c-78df-49e8-a2c1-ea448441f6a6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cc12fbce-87fb-4a1a-b7bc-de1d215861b4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "caf8c07b-91df-43b3-807c-808605fa48cd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9738183f-a0e9-476e-9e41-3fc5ab7e729e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "737c6782-6418-4dba-ad25-3134cb29b90a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "85d84fdd-263f-4b4f-89c6-6b4de0018472"
            }
          }
        ]
      },
      {
        "id": "4fc1fb2e-8d7a-4692-a559-0cf628fd656f",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "1b78d34a-a576-4006-9b4e-d3a27196b701",
            "name": "Negative Testing",
            "item": [
              {
                "id": "02e68f0b-f819-47d4-b05d-d350ff9a9c78",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c5a9ba5b-d992-4fa6-a8d0-a32f41831dae",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9a846a4-15a0-4b0f-816b-aedec4dfc49c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d939a2f-a9b0-4f53-b507-1df7fa147aef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dc32f63-d8fd-475e-8876-a0721fac2d8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c98b156c-52a8-481b-ad92-00751ed67597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79585df5-2702-4410-b971-79adf55dbea4",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d13b856-2177-4863-8b02-1850c1b5c4fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "785cc05e-5011-4345-8c94-d56d5cff913c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9abfa93a-824c-47ae-ba51-b9b360a1517a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0da3bb6-114b-498f-9d58-c39becfc104c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "111197b0-6327-4fcf-a125-831fc9c7d248",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48b2019b-7f51-4894-8d57-3ab36957d058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f5d4ccb-ffc1-453a-9427-1ddf720878a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "323ec6c1-5d96-4435-a771-9307a0ab698e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a7bce85-64ad-42d4-897f-308dbc4ae53d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20a7ef9c-d432-47de-8e98-def4f38f127c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf5e2a1c-a83f-4210-887d-4dffb7114d7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6472f7a-174f-4404-9246-6b7067482472"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "268a2d91-151d-496d-9106-540e259cc909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "79058194-4829-4897-811d-537ccaa6ddff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d443546-9430-456d-b6a7-19c8eabfb727",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58a617c5-0f9f-4c86-bdc0-6d40f7ce9317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e10c32c6-cb7c-466d-9027-0ce851dbb36c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca2a8960-a813-49b1-bd77-651f182995c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd11736f-e7d0-46e9-9771-42e455692ecd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02125117-a095-4c8d-b23f-8b2e1eb18925",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efb7168a-4756-424b-a256-597942794441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35371c4a-4dfd-4a44-b998-f3953573175e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41a98f2f-6391-4dc2-85cb-e046fef6b14d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0a1fa77-91a5-44cd-9b32-97cd11750e28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df994deb-a8bf-4e6a-b1ed-247a8458a8fc",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aebc6299-515d-4ed0-baee-5f2ecfc1fd42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b710dfa-bdeb-462b-98ea-46a155ca14e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61e41be1-cdc8-4729-8eed-0391e8837926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d30f8aa0-3aa6-4e63-9ecb-09009e61e56c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81d9d74a-9c8c-4dea-a681-50c82a52c038",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6174c8ab-01ac-4e04-b6d5-42e8434af854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca6685ad-ff09-4002-998a-b4f5aaf41ad4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db21737e-e711-4623-b326-f2c6dc57fcb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "12e5760e-b26d-4ace-bb90-f19b96b8a1c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b71d0885-58f0-416f-8bdf-7daf99d316f0",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "582e40bc-53a8-4a5f-bc20-45ade080c49a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78952a9f-2e5d-4ff8-a98a-61128339e852"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b213fbe-24fc-4136-885e-83cad56644d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2e95949-bdbe-4f22-a79b-4fb8fec6c453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "206b2ef0-0c6b-4c85-92d5-44b4af48b670",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce36eb5e-773e-4a0e-a055-e05c932e8dd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57664ea1-8ba1-4748-bdfe-07b27925561e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48382a4a-e8e5-41c3-83ed-9ea68b7a4226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff7072b4-7a96-4337-823d-9708564b7831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3ca942d-c1d8-496b-a55b-54570d0aadf0",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c0296cf-6507-4dae-b3d1-f9ff6f86a98c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "339426de-8978-4b25-b5d6-c799acd9303a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7d2bc44-58c3-4230-819e-65523d24f7ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c1f460bf-08bf-4b45-ab1e-c1fcb277a43a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d386fd48-ead6-410d-b519-df27ead49075",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b5ffcc7-20bd-4af6-a96c-3d310d0cad3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22dab94f-17b8-4aa6-9884-2bd0ac89a782"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a02fac3-4bd2-4df4-83b9-1f28f0a907bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d107f457-0b48-4770-8500-7122f2b9bf03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12f2ed04-dfd6-4ebb-8097-33ae4deef19a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86e22bcb-add8-4623-9b4c-31a1ec4d9045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ed71a96-f835-4bb8-8ed3-acd90c685faf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f97d7dd-4fa1-4364-9d0f-7a62798cf87b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5efdaa8-4eac-4897-83ce-86ac3d6ab79e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe70817c-ad94-479f-b004-74329e58d473",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecb10e91-bd24-45be-bea8-91b12225a1b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daaa7d94-287e-4c33-9443-1cede2deaa1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d593a54-cf8f-456f-b4e7-0483b5917be2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "2cc89cfa-2392-48e7-92c1-c3188da40445"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67d5ec97-a1c2-4dbe-9253-b81745505a88",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c26011d-8ecf-4341-85db-d0db85b58f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5147ec4-339f-4f3a-b43a-681f1cc5a217"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "704d79e3-8f51-4731-a58e-dffb036f91fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "6697e725-7103-4efd-b39e-0ccc0d356129"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a8deb2e-d21f-48b5-96c5-715480cb4be0",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc2935d9-bd58-4201-a8a9-7642bb7ee0b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ce4749c-2a5a-455e-85e0-4a8c9559ee63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf209521-850c-4af5-ace5-b70a7ec45ed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "91f5f8a4-4321-439c-9cb4-395bd12f7304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5110c05d-2596-4aec-ad98-cbb91c235855",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e1392d9-2aef-4c90-80d9-25258351603f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2430f90a-9aad-4f75-9e55-1bfe7f7c43c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0458091-51b9-44a7-82b0-c5b07cd79ce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f52441f5-2419-4f61-b4f0-9aede5e66503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f54e7fea-6301-4017-b286-1e9ac59f8e97",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f1fa5ec-b02a-483c-8ba4-b80e21feeacc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeb0bf7e-2308-43b3-8bf0-f9b71fc38492"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcf5f0a8-6fe7-4bde-aa16-c34e48d3b0ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "943579a5-e3fe-4ac2-b85a-0037a819d080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5be313ed-a3fb-413e-8a4f-6d14c1102525",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a228d46-3adb-4171-9d0c-617e19392fc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe31f440-ef41-43c5-9034-59749497efd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd5f36b4-a34a-49e7-9a14-a671d5360803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9fccca9d-c984-46ff-8744-c64ff2ad537e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "203288b0-1ad9-41b3-b25c-c5fe5d054917",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1833e913-48db-48b9-aca7-51b82f953aee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fac0bdb5-98ac-4eb1-b24c-dc96dc3281a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7477d2c-8126-4fe3-b9af-f9a12dc94b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2538ff35-926b-4850-b3c0-b30cea1a2adb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "923d5230-cd92-4225-a1b5-c47dc3dc840d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b32e7f5-1d62-4cb3-8c28-792c11ea0f29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b7a775c-f09c-4062-8855-e89091684009"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bd951eb-f905-494d-9328-21033f89fc73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "72bcb164-9d66-4700-ac45-ac8a1ede1d9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebd97e6d-70dc-49b4-8f27-7c29ebda4de4",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a658d76-4028-40f0-bfe2-6572dd927434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08dbe65d-a3e6-458c-81f4-40c4dd74e714"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0236df6-73bb-4c58-923a-4125923388fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "61d4d051-eeaa-491c-ad75-faad26d47b76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6be2e5c-3384-406e-8c3b-84ffa881725b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f982518-4d9c-46e6-9dd7-c05dd0508979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1577be92-fdae-40cc-94a1-69c052050650"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d45fe81-1b9d-483a-81f2-7f9405ce485f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7fbb5495-4a6b-41da-89ba-d14950dbc218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34ca7045-4ec3-4085-9766-c58487bb67a8",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b3dbcdf-78b8-472d-bc6d-b455c76b3886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1d3021d-c50b-4afa-a96e-d3b6a42056d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34951571-d8ab-4e23-ad25-8a500ce4881a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5fcde0e6-f7b7-4037-b810-8e34a2595778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ab8959-f3d8-41b7-8a42-f05e0ab7386c",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28c1e50d-96cb-4238-8b81-339b9e249029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2b77a7c-db41-4a48-9db4-07aa0079bae0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "391872d0-9849-4953-b48d-ec08d6f7fb2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c361a025-67e4-486a-a2fd-7df59507318b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7f5417a-3f0b-4da8-8f4c-967eb56cc284",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f92117bf-a4f9-48ac-8d5f-5e065e6ef266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e068e131-8449-4b2f-9837-0530de2746b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81c10dfa-d36a-478e-992e-1a47907d2537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bac60d05-b401-4826-9eab-5a3070203143"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2378b7ae-e354-44dc-ae80-d420d1553416",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3e456ac-fa67-40be-be28-6f8b12338012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5742b6a4-95b1-46a2-84d5-4b74d569e29e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba211304-756d-4aff-a6ff-7ebd664bffea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a24bcc19-882d-4b04-a6d2-2f8bfe831304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c511295-18c7-4851-9ac0-57d3673dd5e6",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18cc0123-ec32-486b-95f1-9fefeaf1c554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d601cc0a-3d4b-4eb2-b929-f0fb7d065ae7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35dd42cd-a346-4271-aa4f-2fb52561a926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "007a6162-f53a-404c-8ec9-38c2f3e68eff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e10dc76b-7a39-42d8-acec-081b2a0f2b57",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7db91d65-8b65-4841-9142-32066527c8b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ec6a182-402b-4c8b-b06e-70eaf6d4ee8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d86b7a1-b9e4-4542-bf1b-1a3f61c0df46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c89c3bc-2335-490d-b0eb-c179270b5ce7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06edfd81-e7c7-4f14-b34e-12af006a41bd",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eff90c78-44c3-43ac-8526-aeb06ce4d538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12ff81d2-20c8-46db-b7da-391952de2e74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11441d55-adcb-479e-ba20-0be063a60e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8f07833-1971-492c-ba58-cf53302458a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cef28be-0c94-4e53-8e94-3813663bf9de",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "706c3f26-4c1f-4d96-87ad-68cc1c527eed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10788cfe-7058-4ec9-9307-2b02c12da2a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f5eb9c0-5e79-45dc-bc71-0450a4917dd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a35fc3cb-a617-41bb-8d36-87dd68aed048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53f558c9-23b9-4e2f-a5bd-b9e2bd5aff55",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c73ee2d-2321-4bc9-adbd-ff1a2bf39993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f37905ff-9a6c-4cce-ad58-d2343ab8d86c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c1cf365-e2fd-4cfd-a518-a3bca8ad1239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b211ce50-c911-4241-b9b2-2d4f543e711f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6c12b61-1577-4d20-8ddd-7c47f4a7b437",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28e042f6-454a-422d-8746-99bf5182c2d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8423a3bf-5bba-472f-88da-363f9f0c27f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "748da3c6-05d2-4d08-9171-79ad50539850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "810975e6-f85f-423d-8821-ee1fa26e924e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6eb25e0-ecb6-4cc0-9975-3c0046d83826",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9816d04f-b3f8-4eed-86ba-9c120a6b77da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8279e160-e5b2-4d27-9127-0924664c20b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4cec166-50b5-423d-b536-8f5b74adfd9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6552c53-8ef9-45d0-8e1d-2f6eed8532a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c215dadf-dec2-4571-9586-8319410ee5ec",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a80e43-12a5-4afe-82f5-523a7e288895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0f0769b-400b-4fba-aead-b0c973f701ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97b3660b-9434-4cd7-a0e1-cdc3e251b62c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "354fea58-63d6-484b-a825-32c8778a3919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fb2271e-5f1a-472b-9dc8-7405ba035258",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6418be13-b9e5-4e5f-820f-bea1417ee636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15473f34-f0ec-48b2-97bd-2bc372e606f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42c4eefe-536f-4ef5-9538-1e2b6367a243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "feac3323-0311-4ebb-a670-66f1b7f76a8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bf20d9f-502a-4d55-9d99-ca9c86aa077d",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0fa91a1-33e5-4f7f-be83-76d76bcd25cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b1a3b82-88d4-4713-a34b-cbe20923a09a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af88cf7e-8100-482f-ac51-8be3a1f47a08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c8d8bee-7a77-4a69-9ae0-bd9711fab508"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d762c8bb-decc-46c5-85fa-3f2fc30cb1b0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "23fc0f4b-a8e3-4aa7-8987-c592c27a9f58",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4643b158-7604-40b9-bd86-60ab5ab4cca0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e818eb24-7bac-4b00-8d47-74e6f48a2c54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b189b1a-be9a-43d3-8501-dd106873dca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d5b3ffc1-e7cf-44f3-a669-6fc375a9446a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d1801f21-3d17-4bdf-b304-d9a1feb60f37",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8b0cba13-dcbb-4841-9da0-5c25b7b8668d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "57d771bb-9181-4ed9-b000-9b3ed545af23",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4de93088-caa1-4aca-acc6-ed35a8edcf54"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fe78e484-2a9a-4ba8-bec9-a7196bd9cebd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d5ed3474-9146-4ca9-bd25-97e865a8989f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1b21cb57-3b7d-4028-a57f-b76ba6713f0f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3240d0d8-8e45-4803-8320-7cd3c495028e"
            }
          }
        ]
      },
      {
        "id": "69742602-46be-4dae-a789-c14993233e9e",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "2ce3fd78-b464-4e22-9b75-40b123804127",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fcf05d0f-fb0f-4cb6-92b8-e7f9738be5f1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "55549350-4704-4b01-9399-5f841c83461b",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc15f3e5-7d0b-4958-ba53-147692e45589",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82468428-593f-42bd-9046-8196ee5aff53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25256f10-9ba9-49d0-bd35-0c477eabbf6f",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79b3f2b2-b260-4323-a372-cd520cc52192",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1804c86a-f2ae-4a60-b82c-49205f6877e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbdf59a2-3ea2-4bc9-bd0b-cc4afe846b11",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a1cbc5e-effd-4b4c-aee5-0875a7e749f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee9e7562-01e7-4a23-8d7d-1a149de3be3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbf593fd-eecd-486a-b7ee-2355b97e8cc4",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b44ec970-1036-493b-9a26-45c071d37098",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0085916-2a60-4395-904a-ac34bbfdbd37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f6b4719-789b-4ee2-aeae-fb9322b50bbb",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b1012fa-885d-42b2-9857-0e26c6d185d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a685d40f-ebd6-4670-b5d2-8724ca63a07f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "568d329a-5923-4fdc-b2ee-1539f0301e68",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7430cdb-f05f-4f90-b6da-0bae841db1e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a74f3b2-a295-420a-a6c9-d428f2e5b5c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "861982fa-fb99-41a5-a7be-d57a5ce86794",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ac31c72-23f6-4d8c-aca2-2ae1bf3fcfa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed340ea9-da98-4d09-b627-f5f5dfb2f115"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55481ebe-a54e-4883-87b7-35a1f15a54a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9501d641-5c88-46bd-920e-81d3c874e41b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bed09784-cbf3-497e-8305-130a9c9e6447",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3156f57-caa2-4a3b-9952-e508c30d32a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bcc4c308-a248-4534-9483-156eea9e6bcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fd1723f-fe98-4072-bc51-b85be0e75b5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6796eaae-8d75-4f67-9777-f5014f8b11d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b073dd0-7848-46b8-bd81-fd55996b0f64",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "def67379-15a6-4280-97a0-285d1ed610df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e34d51b-5bd8-4082-b7e3-1ea8612e12f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cbc52d9-c575-4ad9-9905-c7cd3bbc1906",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d7adc17-0a5f-4291-a4c0-eba8f92ca78b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7132d9b2-dcce-49b6-b2b4-4b973d287284",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52c8e6f4-daa6-446a-bbbd-f20be4de1a72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f81b55c-16aa-4de3-a164-b8f1a548116b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6d44a20-085c-483f-89a9-81764a0a3935",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "770b0e8e-482d-4862-9bc7-a29d1651ac93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee88744d-5016-44c3-bc0b-4937d24b5f27",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cca16f6d-32f1-4fa0-b1fc-0203c74dd9c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dd57e9b-d161-48d6-bbe1-2be586aede8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0202e286-95c2-4ad3-a76c-ce954ed8c80d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "207fc6c6-538b-4497-be05-913ffaae644e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38ba3795-bf85-42c2-a53b-b3a7f9525676",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "069e79f2-762a-4fd0-a911-02518235279f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f840038-b526-408d-a265-6a2b6ca554c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaba59af-aaa7-4afd-9bda-8b0820934892",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e156c2be-a8cd-43d4-a8c4-2b0d9418608f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc63e58-8063-4547-8d39-4a702b897c1a",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90e013e5-7af6-4461-842d-f816a029726f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e843b4c9-0299-4424-a4d5-1bc6ccade45c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61a1a26d-f9af-4648-973b-0d2c3f4dc4b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25d9c999-7657-45cc-85cd-c74034f1ff4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eb67736-4f8b-4368-a426-ba8fabd99186",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bb010cd-549f-4da1-8343-98b4fd281c13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3831f797-c561-4b7d-b75f-f424efd82739"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3087aa57-2275-4bb9-a97b-747225ea7e33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32728ad1-1d62-4198-b9c1-c23b654983f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e3173f4-a164-432b-8484-6c1cce162c80",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b42bd431-c032-41a4-b645-44fde68e5f4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1a005b5-e5e7-4ca0-b136-36a90792e76b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bf4de30-0b12-452d-a145-5bfa49978551",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd72a6b4-04fc-47b7-ab3b-a8fe3424a3b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa1d80e8-9e18-49d8-83b0-8a95f1e66ed8",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5462d98-b08a-40fa-9141-6f851a7f37d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9a2d3f9-fd64-42e5-accb-07f2f491e904"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b9baffd-9607-4c01-9b4f-830451a4e9ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac0f8c9d-1a59-42d9-98e7-6435c26febbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36e5be71-5605-4dc6-be53-f0b2978bfa38",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ad0c62e-1898-4d0c-8bad-36769401cbb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36989033-243b-499f-862f-3051ab2edda2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5208885a-0e6e-4acb-a160-9ab0a8a998f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2379cd33-6279-4834-9b93-d9925a7cff1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7150de96-ae88-4cb8-bf61-ad54626bca05",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "740a2070-967c-469b-ad85-28861713d26f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84b65f3c-f3ea-474b-a996-0e7a00581020"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d90a8a59-2da7-47cf-aa00-7c8b196a9958",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01bd5667-2f39-475e-8885-7fdf462f760a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec814939-68e1-4771-b99d-d63398b19ecc",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b64c0b8-eb16-48f2-9e14-7f52811d9595",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "446be8dd-c584-4ed7-b96f-11b138b5766e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a67d6e9c-d0be-46a6-aab7-dfa01d16706a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd685acf-b8df-4c1f-8d5f-6ea702783476"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a97d4898-2019-43b3-aa5a-6995cdb74a7e",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dffd1f3-d651-4f28-9fc9-045baf2a8517",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "800e6f71-b666-41e9-9bdf-cc6cf14100d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9763348-cb8f-48ed-8db5-5aae6d883b27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2c15ec4-d607-4c53-8cb3-6df9482cc33f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "815e5ace-8b1a-4261-afe7-2d1af95144d4",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a44ac61a-fb80-4887-8274-dd17814fa99c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "257770b3-951f-4d88-b8ee-b6ebcb55c2a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c71c9af6-c956-46a2-acd6-8161b45b8dbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "241fc878-4e3f-4539-97c7-1f3a2786314c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7a105e4-34e7-47c2-bd16-694db4727128",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21c9f8a5-f918-4a24-b7d0-99f2c7c62c72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2840476-26af-49b6-bb1b-517223dffb46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb198400-cae0-4a47-b213-5698715c6e04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32b160eb-b4f4-4ef5-a83c-0a3b6af61843"
                        }
                      }
                    ]
                  },
                  {
                    "id": "766cc8b5-1a05-4ed2-b7ea-4d3f40e476dc",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a86b417-d054-41a8-8437-e117bed41990",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1157d64b-423a-4798-a175-2d492fae2fad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3178905-2ad6-4837-a875-2e8e39171334",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e2df59b-5cda-4cb4-9f16-22511a0a0de8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9615fe8e-a01c-48f2-adf9-a668708ef3e3",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd51fba5-e520-46ec-b94c-67cdd4f608ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a2cced1-b72f-46fa-829c-1817c8dfaf95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4d68255-2a7b-4b8d-9673-cb377738ee56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afe6f25b-c776-488f-a244-22e3bf5a128e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f47a3cea-904a-4b28-866c-d42de00a948d",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6975da2c-14ed-4af5-9696-30982325c1bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "336633b8-5fc7-42d7-aee0-091be91aa0d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bee4aaea-0dc6-46eb-9453-2c0f8e17570b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7a2e3e4-ff64-4234-acd2-261002efd4aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1702f4d-1316-40ed-9ba4-d8d3b0e8e757",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54ef0a5a-4f0b-401b-98ba-30bf6a683fc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c1bc2bc-384b-4a8c-a54b-0ab8023bd72d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3d71dbb-30ac-44a3-8b33-a996a81aaca4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e081ff3-d60d-4c08-a18c-0b0fd314e91b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a2080e7-afb1-421f-8d24-1ff0857917f3",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc1dcb8d-cb60-4601-a43d-76c1aacce954",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bad89ec-3ece-440d-b0be-9497c96baa5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b771fd2-5ca0-460f-893b-22efb62256d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fdb4a63-535f-401a-8990-cfcd612e9a15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53bf0d01-b356-4453-bd34-1c78c21f5c2f",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0600a43-2c4d-4125-9d14-e64684227395",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fc460d2-c2e6-418b-b476-62d8f60135b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf2fcda3-3c45-45de-af9d-7700d43319e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92eda9d3-dce1-419b-82c3-f95a5060c2fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a98ca97-0471-4bbf-98ae-37060f457227",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9961a631-df18-49b4-97e6-779db0c49991",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae9467e1-6747-4ebe-9344-69d960cca4c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbd86eef-5657-4989-bb83-12335ca48a5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d867fefa-d1e5-4f02-84b0-211039891a49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0384d0c7-4ba2-4b5c-ad93-56d3236a8f34",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9167dd9c-5950-4b5d-9767-03bc9e393993",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aaebf148-e6d6-4218-9da1-e83c017d553f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5346ad06-1cd3-4309-b3a8-3c2949cac628",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89557913-4c4e-43d7-84ae-43b7cee8ace7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2f64eef-05d8-4833-83d3-8473bbfbb26d",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77c0b60c-c94b-44d9-a07f-1d2180a968ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf359f96-ee94-4509-bf64-fade2f786269"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ba1d998-f005-4034-a85f-abbb5711a77e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6146a8c-32e8-4b4d-830c-f42a08284419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1a8c72d-e585-4494-a498-82e92712b94a",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4a09a15-4fb9-4aef-b10a-e6c5c85c7879",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e820a4e5-4223-4a66-95dc-f3a0eb8dd5eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8f03f8f-b359-4f99-bc83-77e5a21ceb0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51200610-2310-4a15-90fd-18de3bbb64cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b35b7540-a13f-4a13-a6b0-883d838e56eb",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07a13698-bc74-4a0c-bebd-fb181c448588",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50ffdb90-6a1e-4232-8fe1-3c1a3860bf6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57ae6092-d85e-47ca-a04f-da8f48991165",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7ecc23b-9111-473b-a36f-cd520f5540fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12f78441-15a9-4d63-bf62-c651f0851c7f",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "811e905c-c355-49b7-90ee-2289d849cefa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "905daa7e-5b64-4d35-a127-5750323381ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45959187-427b-4554-a271-ebecafe4a893",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3040462-3d6b-45cc-be8f-6112dad6e2d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cc8a5b2-0ca6-4010-bb69-57225b1888a0",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e29422ad-183f-48b1-aff4-012cdbf0e949",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c488b2e7-5b94-47aa-864e-509ce06f8019"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a948a8f4-a945-476f-9374-332d2a32b278",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f709cbc-77de-4e3d-ac1d-f2f3637b8077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45d9fa8a-5d59-4000-9874-94d0649f2903",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfbe99e5-55c1-47d8-a4a9-66b0a061b340",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c9acd50-9022-4715-8443-c6abdc4865eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41f057b9-f078-429d-ad9e-e0cc46fe08c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92ee338f-95b4-41a3-b356-c670fbceb6ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9ff26bb-f8bb-44a6-b6c0-479373df6294",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "661ea0b4-674b-4ad3-9676-8ce72faea0eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06422ccc-1b26-4985-97c2-0fe9e7251e80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bfa7bb7-37a5-43fc-9b09-4feb182fa651",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11b306e9-46b2-4e37-ab05-508c75c7d0ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d3924c3-a2ab-4e9a-9296-8eff7f44cf95",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b696a4f-c572-4d56-a4e1-da3e8aaeb21c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "807e584d-405a-4ade-aceb-b7d369a9b78c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3a570ae-65bf-48ab-88af-46c02969f1a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a03e7e22-55b1-430f-9a5b-5654cbed8ac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28aa6206-3019-4683-9ceb-099e73124b8b",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a283d96-0faa-47bd-8af8-87e93265d180",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97cf266a-35db-470b-85fc-76c555e16d8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a6c91bf-ba71-4c66-b82c-8e50968eb53c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8603d030-5e5f-4c39-842a-5f9cc6e4c136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98b54fbb-b6ce-402a-82a8-19edbad07794",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ac585d6-b867-407b-8854-68b7ae8d0f97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50aec771-dc85-4134-938b-78dc2a4bb2ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "115af2aa-e258-4592-ac48-5ab3eef4d062",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8279997d-a753-466b-8dd7-a854b67e87fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63b168bc-830b-491c-b377-dc2390612f70",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc11367d-f22d-48b4-af01-8db332922692",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c00c1217-9fa4-4f6c-9cf0-7cb1af631e82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "206e5bd7-4cba-49b0-8085-950ca9bbf579",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4f12bbb-51d3-4fe3-930d-889fd8162d85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4741ea2d-bca9-4946-ac27-9941dbc18fec",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8065362-a86a-4f31-95c5-1aa51c762aed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbd9a3e2-0532-4c5d-b758-3e9e9170cb21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c10d4ea-8670-4a57-8827-d7b01ac7a98f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5de0f307-44db-4180-ab01-bdc0588eccbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75152881-5263-4046-a7ac-9bbcee69a68d",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7ee1770-000d-4b48-8c4c-0b29a29577d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9713aedc-7310-446d-ba35-061d30420caa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20988e28-c211-4239-931a-d2fd835a84a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61e1ede7-8385-48d5-862b-b53c07e569ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07a3e36e-a266-4e0b-8c1f-29a1877480b9",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bfd7eef-3425-48c0-8254-e56af098fda8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b9ee0e3-6fd7-4616-8b15-aec5f42017f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a63916f5-165e-4ff9-9917-cb9fa6b586b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76fec14f-f2ce-4fbc-90ed-65bb6c78c80c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8603704-fa13-4853-83b4-eb6954459c4f",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed33a6c1-9268-454c-a6a0-93357b1078bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f522d6b6-c5eb-4dd4-9a6f-a9f3dcf0b6ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45eb7422-3b04-4a93-8994-3ba06e82bff3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77e22e8b-d0e6-480d-ac5c-c70126f0e451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f21ad55-230e-4759-93d0-dfeadbde6a83",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c9deb96-bb86-4a45-b0ab-aa5c40aedfb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "319b31ac-5c7b-450f-a778-636704b2c871"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0032c409-0d93-4c60-aaea-bb938caf5faf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d13c78a-e5c7-41af-82a3-e906c5ac9301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfea5bff-80e0-41a4-ada5-6c48366f1cb1",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99fb4985-ee91-42aa-9d09-3fe0537a6ecf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13a8e082-95c2-434c-af14-0429f6933a5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0125a1ad-d1ab-4e48-95e5-cf6c901a2681",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "864bfa85-5b4b-4aeb-ba8a-618b0897492f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e004f478-8814-4d90-bbf7-56344fd2c91c",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d49e5ce-e6fc-4055-9a91-852915c03d7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3701b0c5-b40b-4abd-b406-98de2e596245"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9d1bf88-ea55-4298-80ca-7622118d7a7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d25a22e9-f3d8-409f-b181-c8c5942c869e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fceba7b9-5f55-4ab5-bde6-7ccc1764dbba",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0af818f-0160-4226-b6a6-5a38e5356f9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b1eaf25-b63d-4451-877b-076063c26c16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7de29781-4ff9-4e2e-b7e8-d32672e7d81a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a08cdb0-830c-469b-a904-d79401fd54fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79209b6c-8a24-4f6f-8937-9829bdcc455f",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac8ea804-6789-43bd-8c8f-50ed2e261a53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6da9191-0b9b-4327-adfc-979c1be43007"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27cfafe8-cbd6-475c-8673-7324cb533606",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "279df8c4-88ae-43b8-b7fe-f497aa1eebe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b88ba52-525d-4877-977d-d4e5547f5877",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e448540f-8b63-4752-92c2-0b6da248153c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e82defc7-51ed-4aaa-8242-5df782151b72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "779a7567-2c70-47ca-b83a-ad73d7b4103f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1f4f26e-555f-41ce-9e2d-0fea408e0590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e4eda53-4b4f-406b-a285-75c477c5d7de",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "780a2ed4-1452-4f95-b17c-f1f46910158c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a57d57b7-1037-4da6-8407-7cac6d973b02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a1d52a2-7725-4274-a8f4-b05612b3dc1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c367d53-3428-4546-a6c5-60ca0ffa33bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b642b142-67a9-45a5-b4aa-5763aea08359",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f27adb1-85e0-4554-a665-dbe2b751ad4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "110a9088-e617-4ec0-b021-b06977b9ad72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af21318a-693d-4bd8-9f49-ce19843f6904",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e23e8ac2-acc0-47a8-bd6f-524306077587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "620bffe4-acd3-45d9-8c62-902d66abfee5",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6d0dd68-66b5-4270-98c0-889afd12c024",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c5480e9-4f98-42e3-a32b-eb5b1a4a9c8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c5910dd-2fad-4b21-b224-3ff2d92b126f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "115add37-3c95-45c5-887d-c86d26a8e4d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "731ed13c-6fda-4167-b668-d1847ab349bf",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b57aad1e-638a-4b85-a269-5f7cff4e43e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18efa152-dcd9-4d0c-b7d2-60b2944f7ce9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "797afe65-22ff-4419-a633-121b94a795f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86cb8cab-126f-4452-ae41-25de6ea19b6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "030d178e-34bf-4ab6-9b9f-84d39b2cb06b",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9004c32b-4ee4-4de3-90e6-81310fcddefe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a677e295-cc3a-4b79-a71b-73d41c78cbec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7d53afc-6ffe-4df9-adce-f01fcc71820a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "706420cb-8c9a-41ce-9d79-789cda566f65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c849b9d7-9f53-41cf-86cb-228f8ae3cf13",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b03c63e-12d3-42f8-a45a-7a8afa5c4fd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43df8d61-e9ff-4f09-ba34-d5868bba01d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ece24cef-c965-47ab-95b8-7374a79ba249",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77d353c9-04ed-41c2-aa68-04f04d2a4ef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af234cd2-433b-4bc6-b395-448a08234997",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a96739dc-8628-4e1c-82b4-b86b981d1d24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3ba6d63-33bf-43f2-8363-926fd101b197"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ac5d474-a287-4e39-a939-114ffcd03b9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e0877cc-a8c6-4cef-8c4d-5e84979c2e7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dbe2a70-a5ad-429e-a2bf-d47c540c25fc",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55e1bb32-04b7-473a-8527-cd837d74ebad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fa56eaa-1fb6-42ef-a6be-01f9c3031632"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e14f61d9-e1cf-43b6-b5b3-bcccfb62be09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ca02bd4-989a-4982-aa1c-a6680073a016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8d35759-3cf5-444f-8be7-376bb3e3474f",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5030f76d-05cf-43a4-b5bf-7e2eebe7baa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f65ecd4-4f60-49ed-b2ee-83dfaab5e138"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c63b915b-96a7-419e-aaa6-e2f5d84203b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4ad02e4-5321-4fae-91b2-723d44cf12aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34261de1-8256-4769-a60b-4dbe4cd22730",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5adcb28-4ec6-4e0b-b29e-3d201a640762",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2529c19a-db4d-4757-bf6d-6bbd1e25a6be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d82c1a6-a87b-4124-bec6-415b2c3f14bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26cb333a-b6bf-4e2c-ab8c-36ee3a0409be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9870cb8c-cae3-4130-b5a5-45e4b6ce6b1b",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10f5ca84-3d97-4d62-a289-bd14d6939f63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5554fbe3-d738-4286-bc13-60baaa925db0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5521223-4239-4792-a58b-a4798809bdb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04f58015-fcc9-4512-b599-6aad97fa3a4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eb8996d-1d00-4803-bcfb-f169025f980f",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f71a5a15-b2d2-410d-9b4a-a82ac07b8d5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83b303ca-2e40-4bff-beed-28c03d2e515b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "403cf8b0-c925-4bd0-ae61-979c683f3cb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ab5bcae-b95d-4109-94da-1b606241e601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "859baaef-9772-4c10-9985-f76389574495",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3d0fd07-46ca-4447-a98d-0319df9c4e57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3982e2d2-5a1c-4754-8f9b-82778501bb43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c5835f3-3141-47cd-8727-ea8db31c277e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ee20932-4d11-45c8-87a6-244d2d041bf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0a973f7-ca2e-4349-add4-173fbc505ced",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db5efc35-8259-49f5-9a1a-d5aff5b8a1bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77f5248a-3b82-4919-b274-dec618fbc33a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1620c89-2f5e-4ef8-b145-10e4543483de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "365d00b7-c9e0-454d-9c60-064b3bda31c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "336d0ff7-481e-4645-89de-348a2c3aa11b",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e50d1c01-3b0a-4d68-904e-b89b9d2881f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40963af2-19d9-48a9-affb-ef9f444bc7ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb672d85-f541-431e-81b0-fd1603a33bce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a7c4db9-d126-475c-8850-e49f24fd8fdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "085af748-4842-4de2-90dc-bfb81275d6ed",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8bbc65c-5803-46f8-a13a-dea90c9bc075",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0214bc2-13fc-43c9-a5d8-26b2c11fcb44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "141cdbdc-1dd6-4df3-935a-c3a0b0863641",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e079efcf-03a5-4317-92d2-1da90a5f8262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c05951e7-8cb8-4ba5-ab5f-0ed8003b0242",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ddb4f2e-e7e4-4ac1-9f19-1c529a0de610",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7eee7963-99b6-4e5a-aada-d27e123fd69c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c41e6d3d-fba3-4eab-acca-712790313524",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78a8851b-f3b9-41af-bc66-e3d7af4ce2ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5360b131-eaee-43c7-b738-d0e28b0efc0b",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6649ef1a-411c-4d13-bedf-15a8ab153730",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab49874c-2c7c-4b91-9cdc-b81d9a6cc182"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "334581e4-0b36-4b43-8694-14ad0aff39d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c4d57a4-1806-490a-bb16-d21ed218085b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4e83d87-ec5c-49e4-860a-1566c6eec054",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d82b0f8-b46e-40f3-a87e-e815ea74c648",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2e99f31-4a8f-4d36-9f91-30aaaf79fdef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bde9fd2-0bd2-45f5-977c-2c6f24e8c2d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7331df08-dc37-4ba6-9fb3-de21558aed91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13ca86c9-bf00-46bb-b2f2-acb689944fe0",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "810b4d9a-e979-45fa-82ae-0bc81b835eef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa1fbb88-dcbe-4742-bb35-c51a4bb48241"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12bb31bf-c10b-4051-831c-3b99404f4246",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dd4619a-c3b1-4558-b2f6-52c59d385d8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fd10710-5d39-419d-aaac-95c91724f532",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "566d2b87-b620-4c61-97cd-1d0016686299",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c1c150f-f098-4d75-a377-513fb270eb2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ac883e1-4154-400f-a8a0-ba78ab9d6081",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc8ecd63-117b-4aaa-8741-48ed368919b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f4b0da0-aa19-4a4e-86ba-0fede9d7ae5f",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b553674f-2cce-4e4e-ba08-71f3af0d5539",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "503ee2c8-b509-494f-9bc2-ef58d7c208a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "849abd9e-1241-4c81-94db-94b3434339c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9546cdc1-fa58-4bde-81df-3f22566716d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adc632de-53fd-494d-a153-1605ded90f9b",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "300abd41-1748-4a13-984e-58e71e8fa2d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1d5a64b-9d65-466d-ac89-92c5193984d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b059faef-0b79-4a07-85cf-31799e649239",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2647c3a7-8ff2-4b22-8cc3-ddc8de41e322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3e53fa9-9f43-49f3-971b-7cb2bd1450b4",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c735af6-7bf5-417e-bf3b-335e791bdae9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5e0da8a-6e53-4d5a-a320-daa3759861ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c876e5f-b7c3-4ecc-82cb-b166526153b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a910df4-d1ab-433e-a32e-a235f22fe708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0fedd1d-dd0d-4815-91e3-8ec49b6fee06",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2154a4a8-3429-4ceb-b229-e90fea777c6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c502d34-aee7-4c15-8849-3d74abffcfae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3151b50-d996-4016-860f-c8cf252521b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5efa57be-84f3-4a08-8ac1-c6ef9e0e9e1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d907b9c-4bae-49df-b66a-a3ee6acda031",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd76c427-695a-4f9c-99da-d4d1a8a30400",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf2dab09-6c0a-412b-bfe6-e9c7a8a10202"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "281390b4-2d4b-415b-bc2d-3a958f3345ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "487b33fd-2747-4ef5-a159-59ab344bdfae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ef3997d-cd6e-4458-ac45-9b5921a8fbe4",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27ae0b61-0778-4312-93bb-35db243fc85c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57449839-b90a-4afb-9d3c-3507bb9f2a92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e326f2c-59f5-4f57-8a8e-b6eb63cb9348",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b67ecabc-c7a6-4367-be16-04241c3b5120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66468e95-ceeb-48e0-b6b1-64e43d8d0ebf",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "873717e6-8c26-49aa-800e-eabf20cfc8c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "789f9c97-97de-4560-b48d-6b640c462ca2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b44fe782-c716-463c-af47-fcb62f89d915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c64d913a-cbd0-4e95-abbf-549d8db735a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da6b55fe-d84c-431b-b326-93d2edacbd3f",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6414e88b-8041-4f76-96b0-07e083430c9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c19ef2e1-7db6-40a1-92f7-dad50b97ac70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d244c965-0cca-4f82-a57b-3eee42390e85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a51b0d28-1b21-4745-acb0-ae4988b456af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4e52fd8-911c-42d9-acc5-1bfb15d80ee9",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8524fb0a-984e-4713-b87c-3af892c77c4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45363211-aef8-4c3c-b55f-6c52adbce6f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28cc2bf4-6879-4c76-bbb7-01119e76ff39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff266f1b-f874-4a7a-ad69-08e75c97a5e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "030c7c58-b295-42f5-9357-b8ca1f55f3a8",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "860b3d76-fb89-4ab8-be02-268eaf6abad5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6136776f-a599-4715-b5bb-c3d7e8d7b8eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d55eef3d-ac8c-40a0-8aef-bfec6fda1b70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf1f270a-5d49-409f-a445-95b6b34a4d85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14c7ca6f-6210-4054-853a-8bedf4568794",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb56faee-b203-434d-b4a0-074d44023f2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93d1bde5-df58-463a-b26a-954635ac326f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e69f0e95-a244-414a-a9fe-d6c5f1bd8003",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a87db961-f171-4189-b2d1-6a04540faf6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c78ba973-cb21-4bc3-9bc1-10e09156bdea",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9dc8788-9ee5-4205-bfab-1b7e49b1cf72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dd5559b-2efe-40c5-b742-e33e379c4b81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cda5404-da90-4ca3-9ebc-03f29b3cd89b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f67647fb-c2a6-4c5d-978b-9fb8a98ef4bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ecc183a-cb77-4c2b-9c30-541d448c2ba1",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1c76025-0d6f-4be3-a854-e0747a95df8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0eb12d82-aedb-4ce6-8b51-c29a3b77cb32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96ae1090-6777-4a2b-ab03-b5a353f4291a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da2a687f-3565-474f-bd21-5402c4d5be0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0884bf0-4e0d-46ec-8671-c8913dd541a6",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "866bf044-3d6e-46e7-8b71-92211068cc52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d21c1826-a62e-4494-be72-585b8381ab11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ab248d5-780c-4fed-9200-adb7d275e86d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "211f8ace-d345-4ebd-81eb-e0f1fc33eb0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c3e176e-8c55-466f-80e6-4fea5aabf603",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91df6d22-0db9-4c10-8530-cf90ebf3100f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf251ff6-5a36-471b-83d1-696cf1fd1ef4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36f14987-fca1-47af-bc44-340981288bbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5538af7-c6f2-4569-9eac-fab10d068f3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea7cd876-c635-4290-b0ea-b9791faaa866",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11f93db3-8607-4054-b25f-7b614cee42ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d569fba-b543-4cba-ab97-ba93eb545c5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91481267-a170-4806-84a3-b9100049bdf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba55cef5-6197-4d27-8c6a-9ecc176f6a19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcf4d807-30da-4eb6-a53e-b7f1214b417f",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a7e786f-e3d0-4163-b5bf-affaef8c67f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7598be9d-4766-4a94-93f0-eb22c1d80947"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66d6b88f-0ea0-447c-ac94-863ae7466c92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22fdf594-b822-44a0-8ea8-ed60a3ebbfc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "292e9117-6298-44bb-bb7d-1d450fc16357",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ce9bb97-c5d4-4cc4-8ae5-62d9abdae8ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c07d51c5-c05d-4d79-85ce-2e3e3014b3ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec9796cb-14e3-4d81-8eae-e84baa208024",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "651c0a5b-7b36-4fbc-9f6b-14f5f043766f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7179bb87-8687-42c9-b164-651e4f54885c",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf08e75f-fb5e-45ef-8b53-d6f766e804b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a394da1-fd77-42ff-8301-48ec7ad604fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdd7f97c-dcfb-47d1-a9db-04593badf8ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6acaa9de-efe6-46cd-8fce-993da6e59d32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7a3aacf-3680-471c-9ca3-d290fa0b68c0",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "587c15ef-cc89-4f68-9975-0386cdfaad44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10517400-110b-40be-b4ae-a6c7f3e357bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94b573ea-bfa4-4d8e-a4dd-fa8a99c3faae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6a36f91-8205-4b22-8063-85af5d1e70e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17a6cf1f-6ae0-4672-ab2f-02352c810773",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da34ef25-98a7-4255-8f16-2c18f6a2168a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc2fea20-67aa-4e5a-9654-3640c19519b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aba6e5ce-603a-4535-91bf-1522677e6152",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57714d04-4ae9-4e12-8d42-a21edbc1fa15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e5a2df2-b704-4f0e-9c51-a72c314af4f8",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "312f9936-cd10-44c3-8d1b-659c0eb4e62b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a351ab5-6941-40a2-bd34-2150e25c7990"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78480e3c-063d-4646-8719-5ec9c2d643cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5efc07f-e338-47e4-aea9-d337af7cf076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9a67c13-a93b-47fb-994d-87a84a582bac",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d897465-c3b5-4230-b042-0b2944374124",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4bb1be55-0575-49d8-88d4-047b8f4ed2bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65bae6d0-fc56-4531-a910-050a98ee9db9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a7612c2-d749-476d-a8c1-68d97850d48a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cc5db10-5e2c-4cf7-a78c-d01f25b5eccb",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ce427d9-4958-421b-aa4a-98eb6fcd32a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "faa3847c-3391-46dc-b779-9758aec3ef74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfa4b0d2-411b-48d6-b890-a65c52633018",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7d8d9ce-4dc7-439a-a397-db127f33245c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "815ad4e5-6705-47bf-87b7-54bd839c0c7e",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e3e9dcb-9094-4ff5-9192-fbb10cfb120f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8de13ab5-3a65-4aa9-99c7-7767618dc932"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16284600-2c0f-4a73-89ba-1010cc4a6e76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "702335c7-3101-4056-bfeb-eb4c3295b0f2"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d5949583-f343-41a5-b6a2-15deef449eb0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "82e70232-3f22-4a9e-830c-bfa5c8790f19"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8912e762-7294-4eec-ad6d-f8c6714ccefe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f61626cf-f089-43cb-a15e-67e5d7e52bc6"
                    }
                  }
                ]
              },
              {
                "id": "e2266582-0296-426a-a65d-5c4b0365fb86",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "66e7e0d5-6802-49b3-9de2-556b60efcddf",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63404d5a-aff7-41e4-baa8-c93df8aa81f3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "1f92ac8d-9b08-4d70-9bf4-945141868d60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99535343-6330-4c3f-8962-37d39df88d94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6bb4abf4-9dcd-447f-818b-9d2c26aeb9e2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "47eb17a0-d916-4338-be2f-5d8173b9c3a2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ae38830c-4512-41d0-beab-45059c1addea"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "53909ba4-9971-46d5-8ec1-ad6e9b662438",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6b084a7a-f921-481e-a021-32db8a0f2ef0"
                    }
                  }
                ]
              },
              {
                "id": "55c85a5b-0824-4c53-b84e-b835d51a7e17",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "f28cf3cc-68fa-4ab8-bcbd-24004d4a0089",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4223f9ca-6ecb-4b9d-9569-3bafa341dc49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "135efe7a-f37d-4bb7-9df4-fbf6c838f1ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fc95237-744f-4b31-93b7-b0ad0c6255f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f7b4809-b4fc-435f-98f7-ee27e4450ca4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7c0013ae-5a32-49f2-9265-545ca6390fd5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3c3f3d5e-1a94-452e-8e53-1facf98b7766",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c87df3ae-d708-459a-b0cf-2bd98928d044",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "5a25c7f4-32af-4e5d-b1fe-6c2e9037a67c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cc5b64a9-0768-45a3-b7aa-b6525390e643",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d94928c6-9640-4afd-a3d9-e07d626c864c"
                    }
                  }
                ]
              },
              {
                "id": "84e99559-5f57-4cd8-b012-a16556c91156",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "489f51bb-b30d-46e1-86bd-9c4a3fe07c6f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f6c88984-ba0d-41ca-90c4-78aa0f4b0152"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ae6089f3-e1b2-4716-a1ac-2f35992eeb1d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1aeb3b11-5403-4807-9bea-21a10414875e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "784806b6-1acc-4b39-93c3-e00aff198905",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "2cfb0f19-eade-4707-a25b-d93ad6dada2e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c41e5d40-c504-4058-8f2f-cc0c26fff65c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5a040fc6-5b04-4e44-82f8-0ee3424b00db"
            }
          }
        ]
      },
      {
        "id": "1a2830ed-2eef-4e12-9e31-5757c396657d",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "b0ae7e58-508b-474f-b292-d8c88fbf85f7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2106e109-a860-447c-af18-ee4f7c66cb6a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d8a43a3b-e9d6-498d-9a7b-c49cb3e6ab2c",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a286938a-6281-4e3a-9392-bfcb94427ac7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5aff3f01-b825-4aa9-a9bc-e5ccd1234eee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8c50e36-854d-460d-bf71-72bd316b051b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "473cc699-bcad-43cc-884f-c15a9998b757"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2e8d7627-50fb-40b1-a582-f86c42b7c776",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2139bed3-34c1-4a74-9693-a6bdabadf08b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "adaab65f-ae29-496e-95c6-66cfb689576b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ef5d7d3-7e1f-44e4-bc15-b1afeea51c5d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fe559990-5c3b-49ea-b83f-257a0ca1eb59",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "684a7edb-6428-412e-b5e3-6c0267c47c5d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f1a6cf7b-8623-411e-9d05-0065d7d87e20",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "502a9594-362c-4642-b2bc-48322e03fb32"
            }
          }
        ]
      },
      {
        "id": "681fdc71-7056-428f-8d30-388bc355fd55",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "1c0c84c4-368c-48ec-aafe-e8edbc713e68",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bccf275f-edd9-443f-aabf-493a958c0e87",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5e513681-23f1-4e13-a795-7e0a42069a98",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1798c974-8fd1-475c-ac16-eed0d411f529",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "773405e8-5aed-4a52-9705-6006e40d5c87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbdee069-22a2-44ab-b218-36119e87d405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "62156f69-3a9f-4529-927c-7b9f1092d2b7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "25acbee0-16d6-4c39-9372-5b5ddc5b647a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "04871df1-dc18-4cef-a154-b4e781088dd1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7981122d-939f-4906-9df4-4820fa97a9fc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ea83126e-9562-4fb6-90f4-7691491bed3c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bb42e202-c886-495e-b8ed-560eeeea0d4b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bb03b530-84b5-4368-9c82-c9c59fd42c5c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "09877783-0e0a-448e-8983-2cac5a79e8f9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6465ab57-edd9-4101-9ae6-09d5d9c3f7df"
            }
          }
        ]
      },
      {
        "id": "6a7eb440-a7d0-47d0-a0f0-90a78f897261",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "8f33702c-7bd1-4133-bd35-ad504801dc6d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "85d1720b-240e-4f05-a454-5a0c504218e4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d9a1a9ae-0061-451e-8c46-c807da22784f",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f35c3004-74d1-433a-ad09-84a5224e0eb7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cc68dfd3-01e7-4b6b-af3f-e2796adecbf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40c90890-3361-4056-a4f4-0fc714b8fb48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dfff5e82-916b-4cae-963d-d21ac5423a62"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "40fc9756-27ab-476a-9500-7ed2cbc344b3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "400738e0-9953-4098-8550-697b35461360"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "66bea1a3-3847-42d0-bf41-93e901accabc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "de69aead-d80d-44d9-b9ee-270205c4e9a9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "52c43fba-a4f2-4699-b4a3-91fd5a6f95a1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "55e756ed-8c26-4f71-b592-5a3a758e163a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e4731f69-dcbc-4d1c-8651-f452b1e7d913",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0df889eb-1a1a-43dd-8df0-36c67e35dc4e"
            }
          }
        ]
      },
      {
        "id": "b4baabd3-a900-47be-947c-38d8cd35f274",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b1050bc6-2bb6-43ab-9bca-d455e7337e0f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e8e0ff3c-55ea-40a6-a7d7-cfea02207bdb",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "83fafe1a-64af-46bd-99df-6f7d790066e4",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1db1c31f-4f55-4c5a-b2e1-2d07c41ad1e9",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2411bcbf-836a-4634-94b7-1eaa5ab15c51",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 116.92631578947369,
      "responseMin": 5,
      "responseMax": 538,
      "responseSd": 64.6349927665763,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1702514133840,
      "completed": 1702514176682
    },
    "executions": [
      {
        "id": "333671bf-5860-4e77-ae6e-fcf418a341d7",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b750e922-bc36-4c07-bdd6-2687fbd1291f",
          "httpRequestId": "472fa2bd-c506-4a56-b82f-849584b21941"
        },
        "item": {
          "id": "333671bf-5860-4e77-ae6e-fcf418a341d7",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "247e704a-6ba4-421c-a515-fe97cd45d35c",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 0
        }
      },
      {
        "id": "6100dd95-a7dc-45de-a393-6864c1a69a63",
        "cursor": {
          "ref": "a973ab38-3c82-4fce-88cc-7fb9904ef8b5",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "2f852ea0-dcde-4763-a36a-2a47fbf2baa2"
        },
        "item": {
          "id": "6100dd95-a7dc-45de-a393-6864c1a69a63",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "94add7c5-90cb-4f59-8f20-8dcd903e052b",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "7de018e3-4034-438a-b3da-67510584ea57",
        "cursor": {
          "ref": "19fa4a72-529c-4c0d-a36b-c6fd9823d8b0",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "2853585e-19cc-46b7-9c2d-3483e855af6d"
        },
        "item": {
          "id": "7de018e3-4034-438a-b3da-67510584ea57",
          "name": "did_json"
        },
        "response": {
          "id": "a54e7fbf-64cf-473d-9a06-726b64bbf524",
          "status": "OK",
          "code": 200,
          "responseTime": 538,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "148a77cc-a18b-4c5a-89ba-65d687c37af6",
        "cursor": {
          "ref": "530da2ec-aa82-4216-82c0-53138709013d",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9bb09cc5-3234-4231-9ad3-d04e711db925"
        },
        "item": {
          "id": "148a77cc-a18b-4c5a-89ba-65d687c37af6",
          "name": "did:invalid"
        },
        "response": {
          "id": "7438aa91-fe28-4a6d-8545-3828681e5f70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "148a77cc-a18b-4c5a-89ba-65d687c37af6",
        "cursor": {
          "ref": "530da2ec-aa82-4216-82c0-53138709013d",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9bb09cc5-3234-4231-9ad3-d04e711db925"
        },
        "item": {
          "id": "148a77cc-a18b-4c5a-89ba-65d687c37af6",
          "name": "did:invalid"
        },
        "response": {
          "id": "7438aa91-fe28-4a6d-8545-3828681e5f70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91f03278-3164-4b26-9e1f-6d738b39bf3e",
        "cursor": {
          "ref": "7ac4dc63-e243-4ad4-8f9f-643474f3b554",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ca604e5e-3a97-4aa4-9722-e4eb7a34f8d2"
        },
        "item": {
          "id": "91f03278-3164-4b26-9e1f-6d738b39bf3e",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "dcd47ebb-baec-46a1-a76c-47beffad3a89",
          "status": "Not Found",
          "code": 404,
          "responseTime": 155,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7638fbe7-486f-4e42-9437-1210ea2f12cc",
        "cursor": {
          "ref": "18062705-5122-4317-8a36-96a27a6c1c5f",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "0a559233-f670-4521-892c-faf1d8524b9c"
        },
        "item": {
          "id": "7638fbe7-486f-4e42-9437-1210ea2f12cc",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "84dab6af-8b9a-484d-8b85-84f4f6c878a2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 98,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a3dfdab-e4a2-4769-9d3a-4e96b238e84c",
        "cursor": {
          "ref": "166489c9-2f58-420f-b620-459adf8040c2",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e7342595-925b-41e9-b034-42cc96266475"
        },
        "item": {
          "id": "4a3dfdab-e4a2-4769-9d3a-4e96b238e84c",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "a886e44c-cd00-4149-b016-37db902fa67e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44c04e75-5c29-4ed4-ba89-3cd383931bff",
        "cursor": {
          "ref": "80a67934-a2f8-46c8-abfc-d561bbc18339",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9ee7313d-564b-45d5-9c28-c28f97082c85"
        },
        "item": {
          "id": "44c04e75-5c29-4ed4-ba89-3cd383931bff",
          "name": "identifiers"
        },
        "response": {
          "id": "7439f6f2-946d-4cf6-9626-f3cf749161f9",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66da6f00-11e5-449c-9d18-d21a25954ea3",
        "cursor": {
          "ref": "b3da7f64-d900-4cf2-88b8-ad0cdabb7a3e",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b77f7ae9-d201-4ffe-a2c1-9f8ffd8d30a7"
        },
        "item": {
          "id": "66da6f00-11e5-449c-9d18-d21a25954ea3",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e1115ded-2ac9-4d0d-b2c5-00abea6aba0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "509e1c8c-c4c6-4629-8d77-3c74907a5d71",
        "cursor": {
          "ref": "cfb3168a-33bd-4f2c-85ff-da1534eaf81c",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1683c6fd-7113-4f7a-aeef-db94df70a6d6"
        },
        "item": {
          "id": "509e1c8c-c4c6-4629-8d77-3c74907a5d71",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "9acf4837-da34-4949-80cd-30f07bbd706e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5f062d4-e035-480b-a3f1-dced832ed089",
        "cursor": {
          "ref": "d250359b-375e-45cf-8629-7e6af6394042",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3f216c68-199f-4030-9774-42de5919563a"
        },
        "item": {
          "id": "b5f062d4-e035-480b-a3f1-dced832ed089",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "656ef05a-c64c-4268-b260-4e670722cc26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5b1338d-9bd5-42c1-8266-733bc625e140",
        "cursor": {
          "ref": "b5e34f68-cab3-42b4-8e87-e58dee3124b8",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c3ccb5fd-b76c-4e86-902a-1b8baa8f61d7"
        },
        "item": {
          "id": "b5b1338d-9bd5-42c1-8266-733bc625e140",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "824ea4b0-1aa8-4847-98ce-cb5a61957100",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63343b71-1213-4049-823a-48d8bdab21c9",
        "cursor": {
          "ref": "0ab23748-8ff7-478d-bf92-3f3bc98e2bbe",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "19c05493-cca2-4494-b8bc-85c4e3aca25a"
        },
        "item": {
          "id": "63343b71-1213-4049-823a-48d8bdab21c9",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "5cdb60de-47de-47a0-95ac-6a33f1307a5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4876f5e7-6734-40aa-9b28-eecdb2fe9080",
        "cursor": {
          "ref": "257bb595-41f4-4521-b041-2b462ef0bed1",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "ff1a84e0-2e94-4e56-8349-72a52ac5a8b2"
        },
        "item": {
          "id": "4876f5e7-6734-40aa-9b28-eecdb2fe9080",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "d8509a95-2f64-4506-bd6c-e09d9b8c679a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8abaf6a-4345-4872-8e46-1b952829bd17",
        "cursor": {
          "ref": "bb0e5743-6bc1-4252-ad9c-48a873d787d9",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "bbcf7e1e-8d69-41a4-949f-b0bc0fb5a5dc"
        },
        "item": {
          "id": "f8abaf6a-4345-4872-8e46-1b952829bd17",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "13560b5d-8722-4646-bb72-12470cf656d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dec2799d-d45d-49d0-9c8a-c885b2b67790",
        "cursor": {
          "ref": "13904403-5a7f-4408-a5f0-7a95c7d2a6c0",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d9d65236-0da6-4698-9bd2-14786c7d0dba"
        },
        "item": {
          "id": "dec2799d-d45d-49d0-9c8a-c885b2b67790",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "4cc362ba-ee40-48a7-9d98-f2b842d2f978",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0405e041-519d-4298-b5e4-d9bec4cba245",
        "cursor": {
          "ref": "4c053b4f-b078-4c73-a5c5-1831cf3f2d39",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "e10598d3-6257-4cc8-8795-85339f32cef0"
        },
        "item": {
          "id": "0405e041-519d-4298-b5e4-d9bec4cba245",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "3b6c744b-3d1f-41d6-ab56-fa342ace4542",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5c271ab-b545-4d9d-a6ab-0514ae97d398",
        "cursor": {
          "ref": "94919256-9f3f-433b-a441-9cee9518ccbf",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "2891b19e-40fe-4d0b-a25d-854010cb41ca"
        },
        "item": {
          "id": "e5c271ab-b545-4d9d-a6ab-0514ae97d398",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "17e432ec-e6c2-4f17-bcdb-711395f221eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3649c802-e4dc-41f3-97c6-efdbd38e5eb8",
        "cursor": {
          "ref": "f2dca886-4c52-4131-8b7a-f3a18e9c7771",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "980794a1-ca41-4222-9fe3-61da1be972cc"
        },
        "item": {
          "id": "3649c802-e4dc-41f3-97c6-efdbd38e5eb8",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "c31c209b-eaba-487d-8a4f-3969e467fbcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6baef02-6706-4615-ab27-405ae7bb77d9",
        "cursor": {
          "ref": "aa6e6b26-552d-43e7-a203-4a174adbe234",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "a5d8a648-6c85-4a53-9d55-d9fa93658043"
        },
        "item": {
          "id": "b6baef02-6706-4615-ab27-405ae7bb77d9",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "b4dedda7-be2a-4cdd-b569-d06cbeecce9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c76ac1aa-3df1-4058-b8a7-4ead6d2eebe1",
        "cursor": {
          "ref": "f153fa46-bc25-4c9b-bb2a-e3c8f8f91faf",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "08ec9c35-15e7-4dbe-b605-316919c78437"
        },
        "item": {
          "id": "c76ac1aa-3df1-4058-b8a7-4ead6d2eebe1",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "acc18071-bde3-4af2-9978-aef7a978f541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a8ca361-8b7c-4bd2-ab3c-e4c8ec295c03",
        "cursor": {
          "ref": "39fec3c8-30af-4362-9c26-fd2b8cc72046",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f807a03b-2d80-4f3e-b9be-9de66e1fdfb8"
        },
        "item": {
          "id": "9a8ca361-8b7c-4bd2-ab3c-e4c8ec295c03",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "ae22141a-e095-467d-bebb-f4180a33a97b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07c049ec-a778-48fe-8d3a-aaac87e10fa6",
        "cursor": {
          "ref": "1b8fe3ae-96a6-4bde-9a79-f6a66234368a",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c4b25989-8623-4aca-9521-1f2675243dbf"
        },
        "item": {
          "id": "07c049ec-a778-48fe-8d3a-aaac87e10fa6",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "79f0d703-3a1c-4a05-9d8e-d02d618ae101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 136,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9e5a8db-19db-46c1-97a0-3cec17d8b8ea",
        "cursor": {
          "ref": "eb13f5c6-27c8-41fc-a353-f1ed8eee63dc",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "c3ace28e-5b43-4d32-b05d-875c1ee6d229"
        },
        "item": {
          "id": "b9e5a8db-19db-46c1-97a0-3cec17d8b8ea",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "30113f32-bdf1-418c-8764-35952993add0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80464d3a-cc0b-41ad-ac5b-5fe185df68d9",
        "cursor": {
          "ref": "d9039014-7e2c-4f28-a2fc-c25e1d747ff4",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "98f64121-8e3f-4f1f-97e2-e1877c364881"
        },
        "item": {
          "id": "80464d3a-cc0b-41ad-ac5b-5fe185df68d9",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "ec159a88-38a7-4339-b78c-b1059aab6251",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0fb5230-1264-42c1-a548-5f1fd8cd6aee",
        "cursor": {
          "ref": "b9d3a509-0cf1-478d-b2d5-e0c762de9d63",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "afb20d1f-e5e6-41d4-b994-2096594f9ab1"
        },
        "item": {
          "id": "a0fb5230-1264-42c1-a548-5f1fd8cd6aee",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "94f3726b-7c87-499d-af19-324755948e96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "332b809f-bd21-44a2-9300-1fbb6426d4f4",
        "cursor": {
          "ref": "888cbb03-f710-44f2-a649-fe9e285f08ab",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "36e1fb43-b9e7-4590-acd7-46572cd70be2"
        },
        "item": {
          "id": "332b809f-bd21-44a2-9300-1fbb6426d4f4",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "443f7011-396c-4f8c-98d4-f4e1450bafd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c79f5753-6395-411e-8072-9486e9c20354",
        "cursor": {
          "ref": "654c195f-d801-4836-be86-a18a35b2b2fb",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "3873e788-7f66-40c3-9c39-3656b084d1d9"
        },
        "item": {
          "id": "c79f5753-6395-411e-8072-9486e9c20354",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "a33257ad-23e8-4df0-939e-7f50a241ed2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8684323-efe1-48cd-9c19-f80f3c1d4cd3",
        "cursor": {
          "ref": "25e16cb1-63c1-4fc9-8842-7f53788c5e00",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "f11fea48-5c03-4565-9b82-bd2bb0488c1e"
        },
        "item": {
          "id": "c8684323-efe1-48cd-9c19-f80f3c1d4cd3",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "eb6b1bf5-27ae-43ee-8ecf-b07ddd807ef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92702563-473a-4763-a6b1-3c3ff462cc30",
        "cursor": {
          "ref": "ac9c015b-fb59-4e03-a01b-ebaf8b7c6b3b",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e117dcf8-6c26-41ed-9b6a-7e3cf5a140c6"
        },
        "item": {
          "id": "92702563-473a-4763-a6b1-3c3ff462cc30",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "2bebf8ec-ba02-42a4-a754-d8f319c2191a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0e14f63-d0de-44c2-b3a1-0cadf050f00e",
        "cursor": {
          "ref": "1e2b9b3f-9cb7-4973-b2a8-138a5282d24d",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "9e957a42-fc5f-4852-a7a4-0b675ca00277"
        },
        "item": {
          "id": "c0e14f63-d0de-44c2-b3a1-0cadf050f00e",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "8e4798af-2b35-401b-9a8e-74458f90954a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d894a0f2-d6bc-41ce-92d3-5d5d2a1fddad",
        "cursor": {
          "ref": "7715f436-1b74-4b44-b366-3760fcb0ced4",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "c46ca127-7087-4f4d-86cc-c9036f0fe9cc"
        },
        "item": {
          "id": "d894a0f2-d6bc-41ce-92d3-5d5d2a1fddad",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "c7a86f3c-db3f-48c0-b03f-64d0e8331807",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f3e05c0-105e-4b9c-a641-48526ed6a941",
        "cursor": {
          "ref": "202147ba-ec47-4b48-aa33-7c81a55a8094",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "6035da8d-652e-4116-808e-31a9bdc12961"
        },
        "item": {
          "id": "7f3e05c0-105e-4b9c-a641-48526ed6a941",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "f3ed73c8-384a-40b9-a722-8d181938ce64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a9fef0e-ebe2-406f-9d2f-9993b36c7796",
        "cursor": {
          "ref": "18a67a91-c155-44e1-87cb-0b487f04c791",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "af14bbae-9588-4e60-bc55-1dc4d75d6da1"
        },
        "item": {
          "id": "3a9fef0e-ebe2-406f-9d2f-9993b36c7796",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "24075b24-f85e-4f9d-b0bd-c77186771f85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6034c407-462a-4c3a-b66f-60ee97382173",
        "cursor": {
          "ref": "7704b5e5-76b5-4a25-8193-5ebfedf943c3",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "4462dca1-588e-4900-a6a5-5cc7237777a7"
        },
        "item": {
          "id": "6034c407-462a-4c3a-b66f-60ee97382173",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "f8ff3751-763a-4a25-9d62-759e3c45f6db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f57c930-a6f2-46a1-9320-bb7838bb0dce",
        "cursor": {
          "ref": "fcc185f6-79df-47f6-b01e-20323720ff27",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "01b55656-a832-4dac-bd57-6a9698c71968"
        },
        "item": {
          "id": "1f57c930-a6f2-46a1-9320-bb7838bb0dce",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "c4549da0-b47b-47ab-bbc5-f5bbab4881aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dfbf9c0-7561-4e11-b682-5db1034a85dd",
        "cursor": {
          "ref": "c6b667c5-6e4b-489f-a71b-714a89a39c9d",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "28c99e95-5e66-4939-9e59-5da35ddaf6f2"
        },
        "item": {
          "id": "2dfbf9c0-7561-4e11-b682-5db1034a85dd",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "aeb471c4-f25f-4076-9e43-91ce86ced3b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c036c085-bbce-485a-a47a-401f2aa3cdf8",
        "cursor": {
          "ref": "004515e9-9181-4506-9a98-e207ff8a0b1c",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "7d693f74-b643-4ac6-86ce-7823b9fa2276"
        },
        "item": {
          "id": "c036c085-bbce-485a-a47a-401f2aa3cdf8",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "d1f6f4bd-40b6-4ba4-84d6-4301f387b616",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1cc7441-9ff0-46ab-95f1-2e5f24f8ca37",
        "cursor": {
          "ref": "35b8d531-96c9-49e2-8906-d673f0a79554",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "c5a05aac-e596-467c-b2b5-a9cb1a4a30c5"
        },
        "item": {
          "id": "e1cc7441-9ff0-46ab-95f1-2e5f24f8ca37",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "68227b33-ef00-4952-851e-3e95275cd462",
          "status": "Created",
          "code": 201,
          "responseTime": 536,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "0f495987-bdd1-4388-bf8e-add906be3c58",
        "cursor": {
          "ref": "b2964cc7-7f75-4046-bcf6-531f3225534b",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "8e834c1e-920a-48a5-8ab9-c8902684f8bc"
        },
        "item": {
          "id": "0f495987-bdd1-4388-bf8e-add906be3c58",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "7f9f28f8-6d70-4ed4-ae88-0548978f7427",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "04a74441-3d53-4c48-b203-a06a026fea3d",
        "cursor": {
          "ref": "b6bb9395-a2c2-4fc5-9d94-27f000df5047",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "f2379e8c-1240-4f2a-8f09-afc157be8de4"
        },
        "item": {
          "id": "04a74441-3d53-4c48-b203-a06a026fea3d",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "9cc91fbb-d1ca-4aea-98d1-86ef2d96a9b9",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "bdad3b11-ff67-47cb-bf11-f462a0c3006b",
        "cursor": {
          "ref": "8b46f325-4d3e-44cf-82eb-fe7c26421a31",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "e766729b-198a-49a8-b23f-3b1752a3eede"
        },
        "item": {
          "id": "bdad3b11-ff67-47cb-bf11-f462a0c3006b",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "1bf14a84-f9a0-473f-a971-a693c9e31d14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7697281-a94d-493a-abc7-7b47bfb152eb",
        "cursor": {
          "ref": "992d773b-9ef4-4f80-87d8-101eb55addae",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b18941e1-648f-44dc-98f0-c996b4af016c"
        },
        "item": {
          "id": "b7697281-a94d-493a-abc7-7b47bfb152eb",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "dd4f991b-37cd-4ff1-82be-fe4feca26d07",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "d3760644-b897-44d0-8460-c293badab982",
        "cursor": {
          "ref": "8a4a4e3e-2481-4834-9bc7-79921de37256",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "e0ea25d7-6397-4617-9cc4-65068c25872c"
        },
        "item": {
          "id": "d3760644-b897-44d0-8460-c293badab982",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "68ae2637-ef40-44ba-9101-cdb4aa1d3e44",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "98c63733-9a9e-4b57-8dda-fff151243890",
        "cursor": {
          "ref": "d0931bb7-da57-480e-b44d-56de81d9e276",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "3b2bbeac-8fbe-4378-b774-287ec2de934f"
        },
        "item": {
          "id": "98c63733-9a9e-4b57-8dda-fff151243890",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "cb725428-0ecd-4daf-9455-3a1dfb4ee1ba",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "33438b58-d9ed-4d47-a587-348398e1aeae",
        "cursor": {
          "ref": "a1e10e04-8fbf-48d7-81d6-2abf04308507",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "df1fdc24-7e2c-4693-b9c4-9febfbcaa6b9"
        },
        "item": {
          "id": "33438b58-d9ed-4d47-a587-348398e1aeae",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "d1d70a6e-98ae-4d4d-9732-f4c76aad2f0a",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "4970cde3-0d7e-4787-a842-5d2305cbb9b7",
        "cursor": {
          "ref": "7af2a502-705e-4429-b950-0b799a50249b",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "1399ae54-a5d4-4f01-be13-24167be18ac2"
        },
        "item": {
          "id": "4970cde3-0d7e-4787-a842-5d2305cbb9b7",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "5d3793be-790d-4eb5-82ed-1dc27eb5d4ce",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "b5fd7f6c-9576-4967-bfb9-303b484c3840",
        "cursor": {
          "ref": "f94df912-f18d-4cea-aad2-aeb2583df241",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d69ef085-f931-4dd9-a2c4-5a3f3ab48ac9"
        },
        "item": {
          "id": "b5fd7f6c-9576-4967-bfb9-303b484c3840",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "037b9060-6837-4c72-8a51-804d44569032",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "fd3564ed-fb90-41a2-a0f0-9d44390b0d7b",
        "cursor": {
          "ref": "6d326682-bab2-45c8-b55a-5fe9b53bdb7e",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "810be0ab-c95a-4417-806f-5bfab9dd1dfd"
        },
        "item": {
          "id": "fd3564ed-fb90-41a2-a0f0-9d44390b0d7b",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "fc604735-4956-4d23-ba77-937a75169201",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "8eb5de4d-68cb-4263-bf12-e28eff332665",
        "cursor": {
          "ref": "58193e2c-ff0c-4d20-9042-c5ce68d06f3e",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "3281a0c9-4e7a-448b-b679-39e5ef0d0845"
        },
        "item": {
          "id": "8eb5de4d-68cb-4263-bf12-e28eff332665",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "04c843e9-7776-482b-a915-284802601fa5",
          "status": "Created",
          "code": 201,
          "responseTime": 434,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "0048b556-4ca9-48e6-a7a2-ed68a374e5db",
        "cursor": {
          "ref": "061e191c-507c-4c98-8074-5b063f4d618e",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "fd0349dd-7e69-4960-8d1a-5f3c13cd54b1"
        },
        "item": {
          "id": "0048b556-4ca9-48e6-a7a2-ed68a374e5db",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "9d42d381-7943-40fe-8a0b-821da93e9616",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "bd619fea-661f-4acd-a823-9f9fee384315",
        "cursor": {
          "ref": "652643db-91be-4657-bd2c-5265190af943",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "57d525b3-bd74-4f30-af5f-a7addc6d13a2"
        },
        "item": {
          "id": "bd619fea-661f-4acd-a823-9f9fee384315",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "982491b2-666c-4591-9366-e1f71397e2bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e43f9798-4d8c-4b1a-9223-513cb220413a",
        "cursor": {
          "ref": "d434c931-22ab-4e72-832c-8b283644fb99",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "1a6f9902-4447-45f0-afa1-4f87625c4f70"
        },
        "item": {
          "id": "e43f9798-4d8c-4b1a-9223-513cb220413a",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "93c84f55-1fd5-4645-b7da-039fa42d487a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abc67d4a-6a8a-48d0-af40-f502f72f64e4",
        "cursor": {
          "ref": "d47e269b-0abe-41a2-bc81-d40b048457ea",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "0035cb85-dfaf-4495-9f5f-a4830220d7cb"
        },
        "item": {
          "id": "abc67d4a-6a8a-48d0-af40-f502f72f64e4",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "7cf044d9-db69-4d5a-b719-c09d8e66b7bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbc1c696-a097-4b34-9246-4d5dff442e26",
        "cursor": {
          "ref": "dbf8e923-59ae-4b4c-945b-329dbb435f04",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "29103690-629d-4c8e-9d6f-12bf9515845d"
        },
        "item": {
          "id": "dbc1c696-a097-4b34-9246-4d5dff442e26",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "2bda0749-2715-4636-95c2-98660496a318",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9c88c60-977b-4df5-8577-96c57ea22704",
        "cursor": {
          "ref": "21aa2d84-817c-471a-aa6d-51bc6498f5dc",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "ce1e361e-e7e6-4e4f-a82c-a15997c2e9d9"
        },
        "item": {
          "id": "f9c88c60-977b-4df5-8577-96c57ea22704",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "2b71d9c3-3532-427c-b205-6ac17df5c775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "960ce1a8-3a62-4850-b27b-24c0b6a8291b",
        "cursor": {
          "ref": "3595b678-1f98-4d25-a9e7-7a156f3e23d6",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "aa5d169c-633d-4996-a8c7-c0a422016090"
        },
        "item": {
          "id": "960ce1a8-3a62-4850-b27b-24c0b6a8291b",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "565da91e-d9c4-494a-bec6-c0d3628aab90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75d19b51-bb9a-4e2f-851c-3d04019d4553",
        "cursor": {
          "ref": "042c5239-b5ba-4ace-8d35-8f9a13f0ada9",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "0dded2f1-cd7c-4e12-ba01-e788662c02e9"
        },
        "item": {
          "id": "75d19b51-bb9a-4e2f-851c-3d04019d4553",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "994c9ee0-2b9b-49b8-839c-2afc37bf835f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d019fe39-efa7-4887-b92a-e4f3c8cdd605",
        "cursor": {
          "ref": "8b66e737-660d-499b-9941-0fa86749257c",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "b6a3cd59-a493-48ac-910f-7ee06608c2f7"
        },
        "item": {
          "id": "d019fe39-efa7-4887-b92a-e4f3c8cdd605",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "18f81c51-e719-4d0e-a781-8ce1a93c1d56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af6b8f30-4a1b-4068-8ae4-2cc7c7a1d567",
        "cursor": {
          "ref": "0cdf49cc-4f18-4103-9867-bf6b8d7ce83f",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "c0ab7140-ad11-4ebb-96a0-a50f9c48c5c2"
        },
        "item": {
          "id": "af6b8f30-4a1b-4068-8ae4-2cc7c7a1d567",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "31e6b9bb-1ea0-4b2d-8cc5-2d5061272387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0065bef-ad22-4f5a-a7ab-ef1f48d287c4",
        "cursor": {
          "ref": "3d46aff2-ee53-4045-a457-30d38da861e6",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "cad19692-f584-4408-b4a7-71d2dfff7d5d"
        },
        "item": {
          "id": "a0065bef-ad22-4f5a-a7ab-ef1f48d287c4",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "2985d93d-72d7-4de2-a014-b8beead72928",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1be1d192-1703-4e1c-ad3a-06e01739ed41",
        "cursor": {
          "ref": "d8384ad5-bfb8-4254-b428-e0261dbe5d79",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "b98a18b6-4173-4668-8b4c-a62f3cef777a"
        },
        "item": {
          "id": "1be1d192-1703-4e1c-ad3a-06e01739ed41",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "65b41261-45e3-4ca8-8ff1-58bc687047e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37e64aeb-62d3-47a6-8854-93759e9894e2",
        "cursor": {
          "ref": "78bf1456-47bf-4557-b60e-2bfbf4a903b0",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "f945d1a3-06c6-43f2-9fcf-05217663c1a3"
        },
        "item": {
          "id": "37e64aeb-62d3-47a6-8854-93759e9894e2",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "036bb492-4395-45b5-8f39-fc747d53bfdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "579363f4-a4bb-4dff-a392-9becf61aa61d",
        "cursor": {
          "ref": "ffbd0eb5-cee9-462e-ad1c-8852496716d8",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "5ebbb800-baf7-4de4-ad93-dcd8da701e91"
        },
        "item": {
          "id": "579363f4-a4bb-4dff-a392-9becf61aa61d",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "49727316-c205-4d32-a3c7-66305c4a6689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cffb1641-e637-4772-b375-30e790672ae6",
        "cursor": {
          "ref": "e8282eda-abc7-4b6c-9877-12ff85dcf440",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "0b0106b1-d23d-4a90-a80f-dd5dc5661d42"
        },
        "item": {
          "id": "cffb1641-e637-4772-b375-30e790672ae6",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "bbd683d1-a627-4f41-8213-6d4be338cf45",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "0b294339-7984-4d09-b00c-e3f4bb45a703",
        "cursor": {
          "ref": "8dc81e4e-3300-4856-af76-3d75c1c7213a",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "9ec5d48e-6102-4b60-ac38-aa6fd859fc03"
        },
        "item": {
          "id": "0b294339-7984-4d09-b00c-e3f4bb45a703",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "8964da0b-392f-44cd-80bc-f2b2a6a86ade",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "d818a392-b8c8-4cc7-a09a-c25d63ba139d",
        "cursor": {
          "ref": "7d0f2153-e778-4b97-a71f-99a880a19555",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "740179c6-1319-4d8e-a3ce-158d540e7fb2"
        },
        "item": {
          "id": "d818a392-b8c8-4cc7-a09a-c25d63ba139d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "e452e3c8-af28-4e43-908f-6287557f5038",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "6717d1be-2589-446c-b695-2dcdf2333448",
        "cursor": {
          "ref": "829c3701-0c73-41d0-84f8-b0157e31b090",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "28ede0c4-8769-4f4c-97e1-6238bd16d875"
        },
        "item": {
          "id": "6717d1be-2589-446c-b695-2dcdf2333448",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "78fafea4-d314-4512-b023-7d3366bcafbd",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "fd53f05c-b3eb-4735-8596-972024cfed22",
        "cursor": {
          "ref": "d96f1a0e-0ec4-402a-95c7-38fc44a79e30",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "460511b4-dd19-453d-bacf-06fdf6f8611e"
        },
        "item": {
          "id": "fd53f05c-b3eb-4735-8596-972024cfed22",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "f2219999-952e-417e-bcd6-b447e3ce2b89",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "ed53b2d5-f541-4e44-8885-546ecdd241cb",
        "cursor": {
          "ref": "af4e57fd-2c4c-45a7-b6df-10cde393156f",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "eeb1c568-8ed6-44ec-8a7b-c248e91997bb"
        },
        "item": {
          "id": "ed53b2d5-f541-4e44-8885-546ecdd241cb",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "d9d84fb8-4eee-4fb0-84dd-d931b15c4b13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c959eec4-d70d-454a-a4b4-9a3b4e422b1c",
        "cursor": {
          "ref": "2b07b8e5-6ea8-43aa-b2a8-b39505fd913e",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "46da7153-68a2-426a-9d1e-8fa1f715a48f"
        },
        "item": {
          "id": "c959eec4-d70d-454a-a4b4-9a3b4e422b1c",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "5ab56260-3947-4dee-8ecd-398f37d008f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "793e7a29-9b0e-489e-bcb4-b6698b87f65c",
        "cursor": {
          "ref": "c7c26d33-f147-4ac3-9c30-5a7bf22c66ce",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "6e4d3dcf-7ae7-4045-81d7-a53f6ea7619f"
        },
        "item": {
          "id": "793e7a29-9b0e-489e-bcb4-b6698b87f65c",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "9b3f7195-c6de-4963-ae5e-af5ded295c06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf2de949-0578-4b1a-a220-ff6c187e2795",
        "cursor": {
          "ref": "d47b6ecc-1c9e-4d11-bc4e-2851898ee527",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "4fccbfb5-0322-4681-b3e1-746bfbe6ce87"
        },
        "item": {
          "id": "bf2de949-0578-4b1a-a220-ff6c187e2795",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "55dbe006-14c2-4ce4-bcd5-96de5f0b1d39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3c9237f-32f6-482c-a89d-c3ebf46f7c5b",
        "cursor": {
          "ref": "438fb3b5-dfac-4fe6-96f2-7df9bcc96e49",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "3089e019-c590-487f-a78c-d7af4350732d"
        },
        "item": {
          "id": "e3c9237f-32f6-482c-a89d-c3ebf46f7c5b",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "1b2d8b3a-a761-4a01-8cd8-12ef98f7b6f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "708daabd-68f4-4cca-bc3b-86f5c63ce496",
        "cursor": {
          "ref": "dbd45baa-00c3-4198-bbd9-d2c1675fe3f5",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "6ce44be4-98e7-4db6-8c4c-ced20256b251"
        },
        "item": {
          "id": "708daabd-68f4-4cca-bc3b-86f5c63ce496",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "d2c4ac22-3089-4e99-b8b5-e5a3d922b875",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbe95b51-61e5-4a9f-b116-10599683bc47",
        "cursor": {
          "ref": "726dee8c-c3ca-46cd-9aff-6fb1f93d84dd",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "7d5e4785-28d1-432c-a0a6-0cbe4c4ba93c"
        },
        "item": {
          "id": "cbe95b51-61e5-4a9f-b116-10599683bc47",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "6312921e-d752-42ec-b467-2e092174751c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a8272b7-6fc3-47aa-b144-b8149a9c05d1",
        "cursor": {
          "ref": "820d09df-52be-4244-9f20-3ab9ce0e36ee",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "51a7c15d-f40d-4203-82c6-33a533fbfe97"
        },
        "item": {
          "id": "9a8272b7-6fc3-47aa-b144-b8149a9c05d1",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "d86d57cb-d199-448c-b266-ba38fed97463",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "905f1d04-383e-4630-8dc4-d244a420b966",
        "cursor": {
          "ref": "a910d983-95f1-4734-9140-d1796bda2892",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "5058783b-f88a-4955-9a35-97746841cdc5"
        },
        "item": {
          "id": "905f1d04-383e-4630-8dc4-d244a420b966",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "89d1145d-7f98-4177-a33c-05b925245e55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec7dfc09-bbf1-4511-b7ac-becb62d4ca9e",
        "cursor": {
          "ref": "d7c4ea44-554b-478d-b21f-6d80f2e7911c",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "d47c5df8-3c8b-46ef-bc6e-ce95f728ab4a"
        },
        "item": {
          "id": "ec7dfc09-bbf1-4511-b7ac-becb62d4ca9e",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "db9ec60c-8322-4e53-9867-0c1cd8d877ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "227c448c-6b2a-40fe-8a0d-afeff7a24046",
        "cursor": {
          "ref": "03811795-e4ac-4d51-a154-4bfbc86ad00f",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "8f2102c0-b7c1-4407-90ca-1e6d1943bd69"
        },
        "item": {
          "id": "227c448c-6b2a-40fe-8a0d-afeff7a24046",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "83cb9654-4aaf-4f78-ad19-a35578085499",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c8c8f51-7e3a-4eae-a4ba-c77b253e778a",
        "cursor": {
          "ref": "73041429-8ebb-4ff3-af25-df7f9b4abb01",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "3dc57290-c2c0-4c59-8fdb-3b2bf8619e5c"
        },
        "item": {
          "id": "9c8c8f51-7e3a-4eae-a4ba-c77b253e778a",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "45e58762-209d-4ff2-b09f-cf7212296660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc4f4bb1-d06a-4de6-a176-ce3efbda387a",
        "cursor": {
          "ref": "6a015353-5cbf-42c3-8ba7-b21eecefde5b",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "531acb7b-6a94-4dc0-ac86-21b1d4a729e1"
        },
        "item": {
          "id": "cc4f4bb1-d06a-4de6-a176-ce3efbda387a",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "081a9da1-c286-4226-91f6-36bf55106ea3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 204,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7e354eb-f345-41a2-9d68-9d1971b55a73",
        "cursor": {
          "ref": "3a77c744-5a1e-4a53-b58e-ff011dc67aa4",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "da41f6bf-d60b-45f8-8a45-39fda4f956ba"
        },
        "item": {
          "id": "a7e354eb-f345-41a2-9d68-9d1971b55a73",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "08a329a9-0e8b-4d1d-bb4d-1b21e30f5d79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "945327a1-1cc6-4e5d-8a6d-4617fa2ee4cd",
        "cursor": {
          "ref": "742e94d2-af4d-4242-867b-0fe62188cf03",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "5a05a60d-cc2c-4b2f-9ccf-9831c17dce0a"
        },
        "item": {
          "id": "945327a1-1cc6-4e5d-8a6d-4617fa2ee4cd",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "4fc4fc6b-ac84-40d8-877e-251cfa82fc81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cca23a08-91af-4980-a379-3bb22edbd207",
        "cursor": {
          "ref": "3b668a60-e860-443f-a066-5c24c0f81ba0",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "cdfe6c55-cbad-4968-b589-304fed51e768"
        },
        "item": {
          "id": "cca23a08-91af-4980-a379-3bb22edbd207",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "56d53400-b65c-4f1a-8c0f-f00f40637e82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b98e1698-4632-4b50-9605-479ac451c8ff",
        "cursor": {
          "ref": "e6854178-0ac6-4416-9045-0cb216888945",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "0a074f01-5b70-4282-ad21-1c236bf7f31c"
        },
        "item": {
          "id": "b98e1698-4632-4b50-9605-479ac451c8ff",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "6842be6f-6e0f-48e8-9ad0-9d5a8b48bfd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e360e2ba-1753-454c-95ed-335981802032",
        "cursor": {
          "ref": "de7b8f8b-2267-486a-a101-be61e5bfcf3d",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "0b1a0fc7-d3b0-47ae-994b-089883bdfeae"
        },
        "item": {
          "id": "e360e2ba-1753-454c-95ed-335981802032",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "acfceb7e-afbd-4cfa-85be-bbbabcaae261",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a9bd440-bfe0-44f0-80dd-19e0b0402e2c",
        "cursor": {
          "ref": "79e418ac-7ef3-4696-ae23-161395d6050c",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "6e92d93f-50cc-4be6-9899-ede025561bb3"
        },
        "item": {
          "id": "0a9bd440-bfe0-44f0-80dd-19e0b0402e2c",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "8362943c-4b0e-4cdc-83a3-bac45d3a8c43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4213368a-2d74-44be-bc81-e53aa5e6be23",
        "cursor": {
          "ref": "7e70506e-28c1-4454-baf9-420263e089d9",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "3fcd1c04-6a40-4828-8da3-149ae253bb1b"
        },
        "item": {
          "id": "4213368a-2d74-44be-bc81-e53aa5e6be23",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "880e4d55-3204-433f-86b7-6efffdd4a890",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a7e011a-a579-49b8-8c98-1d011c0aad79",
        "cursor": {
          "ref": "ce771dbd-7929-4835-a7f2-aa1c4f308b44",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "8537afaa-2411-43e5-860b-f918d66b1f81"
        },
        "item": {
          "id": "3a7e011a-a579-49b8-8c98-1d011c0aad79",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "e10dbfce-4918-4f33-83b6-91da0fde36f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "285809e0-d9c2-4aab-972a-d0d0357a486d",
        "cursor": {
          "ref": "948ef38b-f9d0-4660-8939-45b3910323c5",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "bf51fa13-e810-4304-b5ba-df99c97c8ba3"
        },
        "item": {
          "id": "285809e0-d9c2-4aab-972a-d0d0357a486d",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "9ff90f6b-a80b-4dc7-8997-f5859f9f4f50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad490cbb-c4c1-44b3-a26e-481e04fad4b2",
        "cursor": {
          "ref": "c2c7be74-90a1-44fb-8d36-108eb23f8ef9",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "48c4bd2f-1b48-46f6-91cb-40ad303ca1e2"
        },
        "item": {
          "id": "ad490cbb-c4c1-44b3-a26e-481e04fad4b2",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "c8a4b5dd-456f-4135-9882-adc76723f249",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "066fe603-b17f-4498-9f75-f1a8d70b0a17",
        "cursor": {
          "ref": "32841861-7d82-4a41-bd1f-f572c3d7c8cc",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "0ce37288-0fca-434c-b188-caf6ca89e01d"
        },
        "item": {
          "id": "066fe603-b17f-4498-9f75-f1a8d70b0a17",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "62867eb7-72b9-4685-aece-aff9fba7d8a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14627468-c8f6-46e8-a6cc-c86ae6662454",
        "cursor": {
          "ref": "39ed9a65-dc17-45e2-ae52-2707be18a3d1",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "1df14947-8cf1-4c7a-afab-c7aad47fecad"
        },
        "item": {
          "id": "14627468-c8f6-46e8-a6cc-c86ae6662454",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "183cd7bb-f2b4-41cd-bb42-28d0a62a3213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bed346a-45ca-46ff-b50f-89d41cde978e",
        "cursor": {
          "ref": "81b29f72-0c30-43f7-9d5a-85d5710ce060",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "fb4f0ed6-a211-4b63-a879-a2f353e2b3f4"
        },
        "item": {
          "id": "7bed346a-45ca-46ff-b50f-89d41cde978e",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "a5af3865-1904-401e-b03d-2ab056670f40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6d7490c-c5a8-4189-a3aa-a10d62979e60",
        "cursor": {
          "ref": "a9cc62a8-f0d9-4c4d-b909-ecf1ddbf930c",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "b682f35f-15ee-44ac-8918-5efb469a515c"
        },
        "item": {
          "id": "d6d7490c-c5a8-4189-a3aa-a10d62979e60",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "efe19421-3d22-4a2d-867a-b7a6e0bf400b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7fcec96-23d4-4b5b-92a1-fd1caa10852c",
        "cursor": {
          "ref": "7c958108-627f-4b47-ba45-ca6824f8036e",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "2494eccc-7655-49e7-b771-7e5e747ac1bd"
        },
        "item": {
          "id": "e7fcec96-23d4-4b5b-92a1-fd1caa10852c",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "8e85e12a-1006-46e4-b41f-3f5f64fc80f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef8fac53-083b-4cc7-ad8c-6e49803fc864",
        "cursor": {
          "ref": "aced50f1-691b-4920-9d23-b7ca729f3214",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "f0b4cf95-50ac-4eea-8712-8ccf165059a1"
        },
        "item": {
          "id": "ef8fac53-083b-4cc7-ad8c-6e49803fc864",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "07510bca-fed3-4a72-b8f1-0be8aa73cb52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33456bf4-a565-489f-835f-9995b8600a78",
        "cursor": {
          "ref": "e1fd1dfb-afa7-4e07-8946-bbf5a3590e6e",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "f5c37f02-c446-4815-9f7f-fbf82bf7654f"
        },
        "item": {
          "id": "33456bf4-a565-489f-835f-9995b8600a78",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "36929fac-5c4e-4b8d-859e-4d92c7d17057",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eadbe0d3-9e1b-44b5-9584-cfc51b12a654",
        "cursor": {
          "ref": "3f22f699-8e3d-4bd4-b6c3-b7a823e853d5",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "3c4cf1d3-ebb2-44ac-ad2f-0a0a74d4f1a9"
        },
        "item": {
          "id": "eadbe0d3-9e1b-44b5-9584-cfc51b12a654",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "f93cf09c-c37c-40f7-8d4d-2108cdcb7ef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56857251-acc2-43c9-875c-45ca9cc027c1",
        "cursor": {
          "ref": "d06bbfa9-9312-4640-8f05-8763baf7c4ab",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "2923d050-1f00-41c2-a473-ddf4e73c2353"
        },
        "item": {
          "id": "56857251-acc2-43c9-875c-45ca9cc027c1",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d56b46f7-243e-4341-ab17-6a3df9efb75f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22b7b946-f8af-4a81-ac65-c968befcb4e8",
        "cursor": {
          "ref": "01d3f974-8ff5-4885-aa88-48d28a6cb20e",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "de7c093e-e4b8-4e70-b53f-f8a35d3abc5f"
        },
        "item": {
          "id": "22b7b946-f8af-4a81-ac65-c968befcb4e8",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "1fce9906-ce71-4bea-acd9-be9b309128a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "f4513af9-1386-49b0-9288-f4a04c9b738c",
        "cursor": {
          "ref": "a357b7c1-52cb-4fea-b9ae-6e6897dec123",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "b573c1ec-689a-4ad8-b7df-c71e3bf78eef"
        },
        "item": {
          "id": "f4513af9-1386-49b0-9288-f4a04c9b738c",
          "name": "credentials_issue"
        },
        "response": {
          "id": "ac88b7f4-bb3e-43b7-befb-8b31a49a956d",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "672fa951-aa70-4444-9466-7557ea107140",
        "cursor": {
          "ref": "5e71b241-4905-47a2-b7ad-6d9cddcacd2d",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "ce6cb348-930f-4234-ad72-9a38e229e534"
        },
        "item": {
          "id": "672fa951-aa70-4444-9466-7557ea107140",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "4ffecc1b-e233-484c-beb3-72f43cde7a4f",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5915bb75-c54e-4517-85cf-9fa048424a97",
        "cursor": {
          "ref": "127e3f3a-afca-4f26-b40b-1dad782352f7",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "5a7387fe-c0f6-43bf-aadd-47ec6bafec26"
        },
        "item": {
          "id": "5915bb75-c54e-4517-85cf-9fa048424a97",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "bad379ae-cd1f-4b95-a5be-d56d5086348d",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "54314dbf-4dc5-4099-bc8e-9d3c7a178443",
        "cursor": {
          "ref": "05d96318-797a-4e55-b339-3ef17987ffa9",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "e68b357a-e83b-4e40-a626-20286b19d244"
        },
        "item": {
          "id": "54314dbf-4dc5-4099-bc8e-9d3c7a178443",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "d189585e-c841-46a7-91d2-9d3b9244375c",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "68e2b560-27fd-4d67-9395-9084b022c5fc",
        "cursor": {
          "ref": "bbfdb401-d1e8-4041-84b9-b6b8260c4160",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "62e124b7-17cc-49c6-8e91-0b42d9a06860"
        },
        "item": {
          "id": "68e2b560-27fd-4d67-9395-9084b022c5fc",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "e979d7a2-d808-4d39-9553-b7c9ae285461",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-12-14T00:35:53.114Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-12-14T00:35:53.114Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "c391e2f4-9249-466f-a95a-600eec64101f",
        "cursor": {
          "ref": "59c17195-fa06-404f-abdb-a86bca305b82",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "ea1111dd-aa53-4d15-96f2-9eb0ee93bbe2"
        },
        "item": {
          "id": "c391e2f4-9249-466f-a95a-600eec64101f",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "9c271e5b-94a6-41ed-baaf-bb2e42ec5b95",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e95560f5-f0f5-41df-aba9-f5e767ca4a72",
        "cursor": {
          "ref": "acf7a754-a416-4eb8-974f-f33a2f46d0bb",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "f01ee05f-24f7-49ce-aa2f-206ca25cc638"
        },
        "item": {
          "id": "e95560f5-f0f5-41df-aba9-f5e767ca4a72",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "2906842b-34cf-46d2-8940-2d4ddf8f3737",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2d9b8ee-c2b5-4296-adc6-b9fac0116ae8",
        "cursor": {
          "ref": "5160b191-5691-49b6-b78f-cfc1a0876479",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "be86bc11-b00d-460f-ad87-cfa2d4192994"
        },
        "item": {
          "id": "d2d9b8ee-c2b5-4296-adc6-b9fac0116ae8",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "16520d71-e1ac-4658-91ae-6c06e276582c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be29201f-3fa8-4752-b066-c25ec16e9427",
        "cursor": {
          "ref": "c8bbcb3a-9729-4f0d-b690-0c0d79fc515a",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "cf1afa78-03e4-45b1-804f-42579a450dfa"
        },
        "item": {
          "id": "be29201f-3fa8-4752-b066-c25ec16e9427",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "936bab0e-8ffd-4709-8b8f-6349490ec062",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b10df9b9-580b-4079-9612-c4e2d4fcf656",
        "cursor": {
          "ref": "f3bc9b0d-7539-45c4-9019-12a3ee9c9bf4",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "3b519883-4b63-4314-871a-84085bb310c0"
        },
        "item": {
          "id": "b10df9b9-580b-4079-9612-c4e2d4fcf656",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "9dd997b7-e2c1-49d3-9fb4-0a057707f25b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9e9a275-f796-4546-b2e5-b05de695d015",
        "cursor": {
          "ref": "9875fb9d-9b53-4c3d-8f28-e42a2d72063a",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "7679a683-299d-47a0-b048-3fc58026d839"
        },
        "item": {
          "id": "d9e9a275-f796-4546-b2e5-b05de695d015",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a2673d94-5668-4a39-99ab-7e88a06762a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbe8027b-5dff-44fd-9181-99c6171ac35a",
        "cursor": {
          "ref": "b9ea308a-8dee-4bc9-afd6-de1761d76a02",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "508214be-d2d8-47f1-b877-e8e476507470"
        },
        "item": {
          "id": "dbe8027b-5dff-44fd-9181-99c6171ac35a",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "70c09eb4-79c6-439f-9d18-42fe0ec86929",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94f52ef4-4a73-44c5-9d50-3d009874c9ef",
        "cursor": {
          "ref": "4e128307-ab7d-4b20-8be8-b25105a5f4de",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "b932b7aa-9ed9-45fe-84b2-cb631fbafaea"
        },
        "item": {
          "id": "94f52ef4-4a73-44c5-9d50-3d009874c9ef",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "9940c6be-3172-4aad-b394-2673624d209b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "890c868a-e940-4c54-a9d9-b334b6172b5e",
        "cursor": {
          "ref": "3117100a-6496-4664-8d48-b2aa224a793f",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "bbbe3ec5-1eca-42cc-be09-e7d396682791"
        },
        "item": {
          "id": "890c868a-e940-4c54-a9d9-b334b6172b5e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "6278ef75-f530-4d64-94bd-9b447b1e4a11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be2c71ad-1d68-4eb8-9c9e-e610768579cb",
        "cursor": {
          "ref": "0a1d06a4-b865-4fe7-8f1c-560a20012355",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "2f97c7cc-72b4-4b8a-a558-6426a3e95bf3"
        },
        "item": {
          "id": "be2c71ad-1d68-4eb8-9c9e-e610768579cb",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "888cc8b4-fa68-42f5-b5dc-02f7d811a5ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3adc920d-3631-495a-9b74-fced2207d68d",
        "cursor": {
          "ref": "f5e490a0-0558-4cb0-972a-0fcc647deaef",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "20db2723-6c83-4a77-b2d0-cd95502f8120"
        },
        "item": {
          "id": "3adc920d-3631-495a-9b74-fced2207d68d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "be6395fa-e32c-4efd-abb2-ccf82d6f930a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0b7e58d-9b91-45f5-a126-5607d6d03a24",
        "cursor": {
          "ref": "55f430b1-034e-4425-bf48-183227a53e8f",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "5177cd44-872c-41ad-8e35-b96d3d132912"
        },
        "item": {
          "id": "e0b7e58d-9b91-45f5-a126-5607d6d03a24",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "cadec54a-c0aa-4006-9325-baf6f83bc106",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fa51e05-fe58-4d14-9c5b-cf0eff5e6d82",
        "cursor": {
          "ref": "bade78c2-05d1-4ae1-8215-c8a5c9ed5636",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "0f86d348-a1b6-43d9-afcb-9087682342ca"
        },
        "item": {
          "id": "0fa51e05-fe58-4d14-9c5b-cf0eff5e6d82",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "208e770a-632f-449e-8e95-08c54204df60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b63c03b3-9ae5-4b9c-87a2-30bba3a228f2",
        "cursor": {
          "ref": "85bc1c56-0cce-4b6b-91dd-4f9342d45c54",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "313aed8b-d0b9-44f6-bb20-0693f868e8f8"
        },
        "item": {
          "id": "b63c03b3-9ae5-4b9c-87a2-30bba3a228f2",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e754b131-3843-4955-bf45-b636480233f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da424e2b-a762-4902-adfa-47053b3b46b0",
        "cursor": {
          "ref": "a62d45fd-ebd7-467b-be6f-1365e380fd3b",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "ac76f8d1-7b0b-45c7-b3c6-74c66cff55a7"
        },
        "item": {
          "id": "da424e2b-a762-4902-adfa-47053b3b46b0",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "12e586d4-07d9-4bea-8712-c2b8f0d1b1b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e01e0001-b641-4fd7-bb2b-353d05dbfff5",
        "cursor": {
          "ref": "8aaad572-15d2-4d14-beb5-64946a78f3a8",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "ac0a7d1e-09c1-48a8-a6a4-00962b3bc255"
        },
        "item": {
          "id": "e01e0001-b641-4fd7-bb2b-353d05dbfff5",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "d38cc09d-42ca-4a30-9503-b875cdb385f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "493dfbe7-8367-4802-8605-a39e053e93bc",
        "cursor": {
          "ref": "47be538b-a214-4632-b02a-001d286997f8",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "9eed5768-0d09-4cbc-a609-b77640a864e2"
        },
        "item": {
          "id": "493dfbe7-8367-4802-8605-a39e053e93bc",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a26b87ce-0a15-41bd-b5ea-44f9c1789273",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b58114e6-77c1-42fa-8f3d-63991a823562",
        "cursor": {
          "ref": "e899b729-9e07-4be6-badc-7a5ef0e8966c",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "10fa697b-e22d-456f-831f-c25a30806c93"
        },
        "item": {
          "id": "b58114e6-77c1-42fa-8f3d-63991a823562",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "4ac58e47-213b-4544-bc1e-7cf988717681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0959d9f-d9c5-4689-83a6-2641483b7989",
        "cursor": {
          "ref": "99989593-7865-4198-9bd8-03e8251d86a6",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c724b8e4-2d43-4e77-81be-0f2f534fc34f"
        },
        "item": {
          "id": "a0959d9f-d9c5-4689-83a6-2641483b7989",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c6fd3541-4c5d-4ceb-b278-c38c449c8b38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "789ef155-fccc-4e9b-a3dd-4c6220a410e9",
        "cursor": {
          "ref": "23018b2f-40d1-4b3b-89f0-a04ad26ee524",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "2e6761a2-6da6-48f2-aeaf-7e76a07749bc"
        },
        "item": {
          "id": "789ef155-fccc-4e9b-a3dd-4c6220a410e9",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "c1302beb-e6fb-44bc-8f94-87deae666d73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec4aeb32-0cbd-4cfa-8600-e789b81b721e",
        "cursor": {
          "ref": "0445bb6d-4eed-4b60-9e41-fed6dab42761",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "26800b25-e98f-44de-bf53-006ace9ee78c"
        },
        "item": {
          "id": "ec4aeb32-0cbd-4cfa-8600-e789b81b721e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "853c00ee-14d8-4bc8-a834-38fd0286519d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9974ad2-a3f8-41b9-8d97-b21d382ec042",
        "cursor": {
          "ref": "a6c23015-8c5d-4ee6-a578-fcfb76e780e9",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "f9cb2c0f-1da9-47cc-a8fd-33d4627f0da5"
        },
        "item": {
          "id": "a9974ad2-a3f8-41b9-8d97-b21d382ec042",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f7d34d97-bde2-4582-af68-562ad6562b43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "806ba357-bd3f-49d3-8013-25a560506ccd",
        "cursor": {
          "ref": "ce014150-42ba-4cda-8aac-5333ff32aa22",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "dd91b0ad-36c5-47a1-8751-483132f8ec68"
        },
        "item": {
          "id": "806ba357-bd3f-49d3-8013-25a560506ccd",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "be215552-9314-4430-b47c-b1e359d64553",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a72c63a3-6a8c-4811-8985-4d40e6f9a905",
        "cursor": {
          "ref": "61a119d3-ac95-499e-b9a3-782ec6f86d14",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "f5f2a13d-120f-4daf-ae94-c19b2ae35524"
        },
        "item": {
          "id": "a72c63a3-6a8c-4811-8985-4d40e6f9a905",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "f3f1255b-6570-4433-9876-d31bb52ed762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4302d52-2078-4e10-b0cf-2c09e6e90a49",
        "cursor": {
          "ref": "e9472cea-16fb-4a7a-9f54-7a17a1f956ed",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "63e2544c-fe9f-4856-a2a9-46d8d381a834"
        },
        "item": {
          "id": "c4302d52-2078-4e10-b0cf-2c09e6e90a49",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "9e2dc711-e56a-4438-8632-ae8a053dae82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad22b327-2898-4ba1-beb3-c380d5aa5acc",
        "cursor": {
          "ref": "b4190055-04fa-48a7-93b3-b4fec4cb00d0",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "d9fe2c39-1c47-4379-b116-a24b7222668f"
        },
        "item": {
          "id": "ad22b327-2898-4ba1-beb3-c380d5aa5acc",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "722e3987-783f-40a9-8475-23bb59fb7dc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82e0c4e7-5186-4441-a110-a4468be5fae8",
        "cursor": {
          "ref": "49b7647a-ae07-4c9b-ba34-151c10b532ee",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "e9207322-bfde-406c-a842-5ae83e0fdd03"
        },
        "item": {
          "id": "82e0c4e7-5186-4441-a110-a4468be5fae8",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "c2f25233-9da6-426f-a80c-7e2c35c35e06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f936ace-b532-4bdc-bb91-e6efd293f8bb",
        "cursor": {
          "ref": "7633d7fe-535d-4a48-a06e-d1acc98ecd79",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "d5eeefb3-974d-45eb-a48f-18805c15603e"
        },
        "item": {
          "id": "0f936ace-b532-4bdc-bb91-e6efd293f8bb",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "3071efee-37da-4c82-a9a2-1adabff03365",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4238f1a1-7135-40d5-b358-b25bfa572069",
        "cursor": {
          "ref": "9272a734-fd26-49ff-86aa-c3b442da26e0",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "4387d553-6ddb-4847-a227-a9a302d2186b"
        },
        "item": {
          "id": "4238f1a1-7135-40d5-b358-b25bfa572069",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "03c77f2c-33b0-453c-9c35-b0f1e82b4c62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9fcdc82-ab13-4067-b0fc-cf1541686a43",
        "cursor": {
          "ref": "1d7dddc0-3881-47a4-89db-5d7d641499fd",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "be27d6e8-3e64-4029-88a8-338f9b36c9e3"
        },
        "item": {
          "id": "e9fcdc82-ab13-4067-b0fc-cf1541686a43",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e3c604e1-8ca1-4a81-9470-44f881267877",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d358f8cb-4d50-4d20-8045-469c9b6b2f14",
        "cursor": {
          "ref": "70137573-37ed-4f46-bded-e3ceaea7f77a",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "85596aef-b54f-42a7-9ef4-d7778777ec86"
        },
        "item": {
          "id": "d358f8cb-4d50-4d20-8045-469c9b6b2f14",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "00d4ab53-ecda-427b-a3d6-34e32fffdc18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f4202a9-b76c-49e9-aee5-801ffd90ab5d",
        "cursor": {
          "ref": "84313232-ff38-4d69-8419-1547c7f08c58",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "dfd83480-aab2-4f00-86d7-698444d1eefb"
        },
        "item": {
          "id": "8f4202a9-b76c-49e9-aee5-801ffd90ab5d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "21135d26-85a7-466a-8248-22b69b563f79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "527a1cdb-4877-480d-b6fd-1fae8ea62b67",
        "cursor": {
          "ref": "868c4efe-0fee-4f6b-a052-a1836a904e04",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "11c074f2-548e-4a9b-b1b8-78fabf7f65b5"
        },
        "item": {
          "id": "527a1cdb-4877-480d-b6fd-1fae8ea62b67",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "94e41b01-c69c-4c1c-8487-c3b398032ad4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7f8bc61-f511-41c0-8fbe-6b1936218e2c",
        "cursor": {
          "ref": "1b4ba2eb-b1f9-41e2-981a-86f134157405",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "ba5c76b3-d862-4557-add5-25f21542aca4"
        },
        "item": {
          "id": "b7f8bc61-f511-41c0-8fbe-6b1936218e2c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "040d3163-151b-41ef-8262-62d03e1b2308",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5a9ba5b-d992-4fa6-a8d0-a32f41831dae",
        "cursor": {
          "ref": "a71e8246-7768-414d-9f92-3bfbbe8e0149",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "ee95b99c-16b7-45d1-87a8-2be946054867"
        },
        "item": {
          "id": "c5a9ba5b-d992-4fa6-a8d0-a32f41831dae",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b738d081-c28c-4a45-a66b-47185a759bf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79585df5-2702-4410-b971-79adf55dbea4",
        "cursor": {
          "ref": "9f9ec786-3433-4b71-8f5c-6cf189f30c08",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "0b4a5ecf-e45a-4770-b66a-9f0416617524"
        },
        "item": {
          "id": "79585df5-2702-4410-b971-79adf55dbea4",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "cece9e72-e571-4eb6-a9a7-cf669d4d4dbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "111197b0-6327-4fcf-a125-831fc9c7d248",
        "cursor": {
          "ref": "e3cf0e8d-c743-4878-912e-5dd00d26b0b1",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "1d895328-241e-4a3d-8b5a-4c5bb01e77f2"
        },
        "item": {
          "id": "111197b0-6327-4fcf-a125-831fc9c7d248",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "da856923-5aaf-4ca7-b308-9d4f56be842c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20a7ef9c-d432-47de-8e98-def4f38f127c",
        "cursor": {
          "ref": "d7628893-4730-4bcc-b14d-62dc257695c7",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "cfe0e722-adf0-4c70-ba2e-ec2cef206b54"
        },
        "item": {
          "id": "20a7ef9c-d432-47de-8e98-def4f38f127c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d17e0b58-7a17-498f-90aa-95e036adf5d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d443546-9430-456d-b6a7-19c8eabfb727",
        "cursor": {
          "ref": "bb71d39f-09ce-4285-a75b-1a3cf3e83f3e",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "9f05afbb-2cf4-43a2-b83f-a3a78df417f7"
        },
        "item": {
          "id": "6d443546-9430-456d-b6a7-19c8eabfb727",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "933ad72d-b14b-4fa5-9e7c-88fe7afc8d27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02125117-a095-4c8d-b23f-8b2e1eb18925",
        "cursor": {
          "ref": "1302e491-8162-42ae-9ee4-78da9ed7efc8",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "4e2a1c65-b49a-4b2c-83d9-cad7f3ce7fec"
        },
        "item": {
          "id": "02125117-a095-4c8d-b23f-8b2e1eb18925",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "dc32bcec-93d6-4525-a463-f8445c1eebb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df994deb-a8bf-4e6a-b1ed-247a8458a8fc",
        "cursor": {
          "ref": "7139b4a9-814f-4cf8-a0da-3c43f5fcb1b9",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "f8e8c00e-f6b9-454d-b75a-b5af0aee4f83"
        },
        "item": {
          "id": "df994deb-a8bf-4e6a-b1ed-247a8458a8fc",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "7888a17c-f42e-4065-8c21-bd6613dd382b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81d9d74a-9c8c-4dea-a681-50c82a52c038",
        "cursor": {
          "ref": "f9c2ebb3-b6be-4afa-9d30-ed552ad4d1fc",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "8d1c8edf-7897-4bdc-a784-42af786d2572"
        },
        "item": {
          "id": "81d9d74a-9c8c-4dea-a681-50c82a52c038",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "33a786e8-5bc1-40e3-bf70-6299edea47a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b71d0885-58f0-416f-8bdf-7daf99d316f0",
        "cursor": {
          "ref": "b1c85389-3979-4e97-b8d9-1e2e0b887d29",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "3c14b804-1665-430b-9d83-57160f430689"
        },
        "item": {
          "id": "b71d0885-58f0-416f-8bdf-7daf99d316f0",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "2f551b08-0e7c-42c8-80f8-30e57ae2dd2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "206b2ef0-0c6b-4c85-92d5-44b4af48b670",
        "cursor": {
          "ref": "8a9594b3-50f8-4b16-a17d-d0fc94bf2ba0",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "cd30986c-2da6-43d3-8fd1-f50ac145a763"
        },
        "item": {
          "id": "206b2ef0-0c6b-4c85-92d5-44b4af48b670",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "393a70a1-ece2-4ba7-bf69-0f90cb5fdc99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3ca942d-c1d8-496b-a55b-54570d0aadf0",
        "cursor": {
          "ref": "5a894021-3945-40ab-b3ac-c2ba963487c6",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "d28c8a1b-8dc2-439f-8587-e149ac68275a"
        },
        "item": {
          "id": "e3ca942d-c1d8-496b-a55b-54570d0aadf0",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "74062660-b19c-4a84-8ad9-595d7dcd80f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d386fd48-ead6-410d-b519-df27ead49075",
        "cursor": {
          "ref": "c58a4590-e388-4d23-ad80-6f7a121ac661",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "96df4f31-1b24-4eb5-a235-b06d15623aa6"
        },
        "item": {
          "id": "d386fd48-ead6-410d-b519-df27ead49075",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "cabb810e-f30c-419b-9407-16f048038e88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12f2ed04-dfd6-4ebb-8097-33ae4deef19a",
        "cursor": {
          "ref": "9c212a08-b30e-465a-bbae-66efbd8a2be0",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "ba13d8e3-e85e-422e-a2f5-da8881cfc716"
        },
        "item": {
          "id": "12f2ed04-dfd6-4ebb-8097-33ae4deef19a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "507784aa-86e0-4d1c-b8c9-7b80d20a17f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe70817c-ad94-479f-b004-74329e58d473",
        "cursor": {
          "ref": "33bf0d31-c2b3-45b1-b92f-8e2b7097ef5e",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "ba1aa6ab-059b-415c-981f-515162e4bb2a"
        },
        "item": {
          "id": "fe70817c-ad94-479f-b004-74329e58d473",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "dbcea80a-802a-4f6f-bb31-4c6173f3a30b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67d5ec97-a1c2-4dbe-9253-b81745505a88",
        "cursor": {
          "ref": "512c0cd0-349d-4414-98fc-dc2550e96074",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "3f4e32bb-2bda-4486-a7b2-fb0e9ffd15d6"
        },
        "item": {
          "id": "67d5ec97-a1c2-4dbe-9253-b81745505a88",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f307969f-ef74-41d0-bc34-4467946c5aa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a8deb2e-d21f-48b5-96c5-715480cb4be0",
        "cursor": {
          "ref": "c5e7f9cb-9c50-498a-81cf-b5d6d70884de",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "5eedbc61-5a55-4af8-8eea-9809e2777f5b"
        },
        "item": {
          "id": "0a8deb2e-d21f-48b5-96c5-715480cb4be0",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ab1c8679-aa22-49aa-973a-ed04e3302ceb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5110c05d-2596-4aec-ad98-cbb91c235855",
        "cursor": {
          "ref": "c51f999f-8809-4151-93b3-d67ab4f35024",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "32bfc782-bf26-4cbf-8409-da845f245263"
        },
        "item": {
          "id": "5110c05d-2596-4aec-ad98-cbb91c235855",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "f8191be8-95ad-4497-8eb5-17e4a97831f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f54e7fea-6301-4017-b286-1e9ac59f8e97",
        "cursor": {
          "ref": "a470dc13-103e-4afe-b3b7-9fa465b582c4",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "e2e4fef0-4cc2-46f3-81dc-12fdbddded7f"
        },
        "item": {
          "id": "f54e7fea-6301-4017-b286-1e9ac59f8e97",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "91174d5c-2802-4260-b254-e5d9a7b4b26e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5be313ed-a3fb-413e-8a4f-6d14c1102525",
        "cursor": {
          "ref": "18f43fb5-0454-48da-af01-da0f6264c8de",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "c75a562e-ff66-40a0-bcaf-e6091a22e0c7"
        },
        "item": {
          "id": "5be313ed-a3fb-413e-8a4f-6d14c1102525",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "2753fd39-d24f-4653-963e-de95f62c0b4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "203288b0-1ad9-41b3-b25c-c5fe5d054917",
        "cursor": {
          "ref": "f52579a6-7db1-4892-bd8b-6bb6719273c0",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "e0989f4a-5552-43cf-a159-3745f28b48be"
        },
        "item": {
          "id": "203288b0-1ad9-41b3-b25c-c5fe5d054917",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "7b03beb8-d27e-43a3-8d07-5bb396d27922",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "923d5230-cd92-4225-a1b5-c47dc3dc840d",
        "cursor": {
          "ref": "44c4e98c-c07d-46eb-8c60-5b0a492c6293",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "e37e7a2c-b754-4c8a-a2a4-e3aa8f3b0f34"
        },
        "item": {
          "id": "923d5230-cd92-4225-a1b5-c47dc3dc840d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "3cf64ca8-f42c-4f84-8aad-2ceebd058ed1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebd97e6d-70dc-49b4-8f27-7c29ebda4de4",
        "cursor": {
          "ref": "0ea265e9-51e1-4124-a6d5-790a0c305014",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "fc2bc5d5-7a39-43df-8edd-0a9e84205c73"
        },
        "item": {
          "id": "ebd97e6d-70dc-49b4-8f27-7c29ebda4de4",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "8b8e868c-4b95-4f21-9198-b23d88bec50d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6be2e5c-3384-406e-8c3b-84ffa881725b",
        "cursor": {
          "ref": "27133d2b-9f15-4523-b72d-54fb550eebdd",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "7d4353a4-f34f-4848-abcd-eee0f31a3bfe"
        },
        "item": {
          "id": "c6be2e5c-3384-406e-8c3b-84ffa881725b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "feff348f-240d-439b-be5b-72649f7ffe02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34ca7045-4ec3-4085-9766-c58487bb67a8",
        "cursor": {
          "ref": "3a553146-936b-44aa-935c-80b73613ab5a",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "128ef3eb-d8b4-404c-a59d-e416b0dac60c"
        },
        "item": {
          "id": "34ca7045-4ec3-4085-9766-c58487bb67a8",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "77f2bfc9-a077-46ed-8716-d2ffe7bf8ab5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42ab8959-f3d8-41b7-8a42-f05e0ab7386c",
        "cursor": {
          "ref": "9b52184d-9d14-48d6-a9ce-a4855820566e",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "2414dee0-f4d9-408b-bf1b-dfce430c93f6"
        },
        "item": {
          "id": "42ab8959-f3d8-41b7-8a42-f05e0ab7386c",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a45be1dc-19d7-4e79-8510-98ceab114dbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7f5417a-3f0b-4da8-8f4c-967eb56cc284",
        "cursor": {
          "ref": "b5abc8e2-d3f5-4212-bc66-e2c3a95e9994",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "6c4b099b-306f-453f-bc55-d8ec782d60d7"
        },
        "item": {
          "id": "f7f5417a-3f0b-4da8-8f4c-967eb56cc284",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ef9482c0-e8c7-4fa3-b14c-612d60b1faa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2378b7ae-e354-44dc-ae80-d420d1553416",
        "cursor": {
          "ref": "3129c439-ff5f-4260-8e74-fc95394fb608",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "8d66ebe7-9bbe-44d5-b418-8b99f2942a9f"
        },
        "item": {
          "id": "2378b7ae-e354-44dc-ae80-d420d1553416",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "33a2d1c7-5466-414b-8072-8dcc5e479007",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c511295-18c7-4851-9ac0-57d3673dd5e6",
        "cursor": {
          "ref": "ac1f9ece-880d-4781-a3b2-55ab78af254c",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "ba123167-686b-4077-b2ca-a95a4d461395"
        },
        "item": {
          "id": "2c511295-18c7-4851-9ac0-57d3673dd5e6",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "29baa6de-0a04-4b4e-9d04-6d4ba1ac0a9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e10dc76b-7a39-42d8-acec-081b2a0f2b57",
        "cursor": {
          "ref": "86e54e24-fb3c-4544-8084-eebf1f17460a",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "c6d38f99-b84f-422d-a9ee-c91f02d115be"
        },
        "item": {
          "id": "e10dc76b-7a39-42d8-acec-081b2a0f2b57",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "fd248edc-a139-4bb1-8846-bb22f2fd07d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06edfd81-e7c7-4f14-b34e-12af006a41bd",
        "cursor": {
          "ref": "494b0e86-928e-4650-9a02-50146930ee37",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "05ed59da-bdf3-4730-8e7f-10a344e09249"
        },
        "item": {
          "id": "06edfd81-e7c7-4f14-b34e-12af006a41bd",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d79d8e35-15ad-4103-abfe-aac30a0ca805",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cef28be-0c94-4e53-8e94-3813663bf9de",
        "cursor": {
          "ref": "e8463828-92e6-4e46-a340-3273091bc69b",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "72acd4d0-7ec1-4e00-9f21-f9c5e2c9a56c"
        },
        "item": {
          "id": "0cef28be-0c94-4e53-8e94-3813663bf9de",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "d8a2f22d-56b4-433d-b44a-1c8d1ce3c4a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53f558c9-23b9-4e2f-a5bd-b9e2bd5aff55",
        "cursor": {
          "ref": "e8e0a526-2bb4-4dab-921b-a3ba9cbc592c",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "48643d49-88c0-4d08-80b7-7d91317dbd52"
        },
        "item": {
          "id": "53f558c9-23b9-4e2f-a5bd-b9e2bd5aff55",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "df782bef-0cc5-412f-8ce5-678acf0087ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6c12b61-1577-4d20-8ddd-7c47f4a7b437",
        "cursor": {
          "ref": "5b6d00ea-b08b-4291-b5ff-bb3ff25b2930",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "5816f732-215a-48ae-abd8-0cc061ab9de0"
        },
        "item": {
          "id": "e6c12b61-1577-4d20-8ddd-7c47f4a7b437",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "1bbbdb08-8ccc-4fe2-a297-a8e52436c3d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6eb25e0-ecb6-4cc0-9975-3c0046d83826",
        "cursor": {
          "ref": "b9665580-cb5a-4b21-bfd9-dcb8d0e0ec19",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "e30d41e9-f94d-4835-a499-db10b11dd803"
        },
        "item": {
          "id": "f6eb25e0-ecb6-4cc0-9975-3c0046d83826",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "7297ef0c-18e2-4113-a9b8-5658a569cec9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c215dadf-dec2-4571-9586-8319410ee5ec",
        "cursor": {
          "ref": "b644bbad-d375-43ef-b7e9-0c0e3fa3e61d",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "8b3109b9-232b-43dc-9524-4ee26c65d490"
        },
        "item": {
          "id": "c215dadf-dec2-4571-9586-8319410ee5ec",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "7a90733b-a0d7-44ec-86e8-b6c020e6bb39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fb2271e-5f1a-472b-9dc8-7405ba035258",
        "cursor": {
          "ref": "ee0d2eb7-2a36-497f-b6ca-6e14304c474a",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "afac7a28-cda4-4cf4-a941-ad5cc6630d4c"
        },
        "item": {
          "id": "5fb2271e-5f1a-472b-9dc8-7405ba035258",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "5d944c82-08ac-499d-91e6-b65168f90b0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bf20d9f-502a-4d55-9d99-ca9c86aa077d",
        "cursor": {
          "ref": "d6a75605-86cd-44ae-ab4e-4fede8df82ab",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "437d296f-286b-4f72-9120-6297cc2028b4"
        },
        "item": {
          "id": "5bf20d9f-502a-4d55-9d99-ca9c86aa077d",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "2ceb79d9-30f6-41f3-9554-31ac8baab0c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23fc0f4b-a8e3-4aa7-8987-c592c27a9f58",
        "cursor": {
          "ref": "f3209c5c-41e3-40ed-8cc4-62ab307b63da",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "a79f6e1b-1605-497d-808d-3293bed17401"
        },
        "item": {
          "id": "23fc0f4b-a8e3-4aa7-8987-c592c27a9f58",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3f430daf-4524-493c-80a3-fafa7127b658",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55549350-4704-4b01-9399-5f841c83461b",
        "cursor": {
          "ref": "bb49b94a-c856-401b-9de1-5b68b2250dda",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "3c7d062e-5c37-4b0b-a517-07b518aea541"
        },
        "item": {
          "id": "55549350-4704-4b01-9399-5f841c83461b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "2ece378a-639a-4e65-9f33-3341785d9bdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25256f10-9ba9-49d0-bd35-0c477eabbf6f",
        "cursor": {
          "ref": "e553d1f2-d480-4136-8775-155acec6dd85",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "43b82c0b-e55d-47d8-8aa1-2bddf3564f74"
        },
        "item": {
          "id": "25256f10-9ba9-49d0-bd35-0c477eabbf6f",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "db4699fb-0849-401c-b194-8995f1c93a25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbdf59a2-3ea2-4bc9-bd0b-cc4afe846b11",
        "cursor": {
          "ref": "bc62e3df-5604-4e47-bfd7-a16ab9450673",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "b9329473-0381-4fc2-9b7f-5cd3f76356b8"
        },
        "item": {
          "id": "cbdf59a2-3ea2-4bc9-bd0b-cc4afe846b11",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "441c6460-45e3-40b8-992e-403888546562",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbf593fd-eecd-486a-b7ee-2355b97e8cc4",
        "cursor": {
          "ref": "a84bd4b2-5eea-4c67-bf4c-8c949a4072bf",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "ad062f3a-3887-4df6-add8-256f051cd50c"
        },
        "item": {
          "id": "fbf593fd-eecd-486a-b7ee-2355b97e8cc4",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "8e0af182-76c8-4c95-91e1-6298e3b0db35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f6b4719-789b-4ee2-aeae-fb9322b50bbb",
        "cursor": {
          "ref": "a9a067e2-63e3-450e-9383-9e6efbbd7b45",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "2619bad0-482c-41ac-b0ba-0e838bfb29e6"
        },
        "item": {
          "id": "6f6b4719-789b-4ee2-aeae-fb9322b50bbb",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "63717830-f7b4-4ae3-8e75-26a4422024e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "568d329a-5923-4fdc-b2ee-1539f0301e68",
        "cursor": {
          "ref": "9232f166-81cf-459b-a7c4-3917d686731d",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "6b77fb4d-0585-42fa-a358-ebad175927ea"
        },
        "item": {
          "id": "568d329a-5923-4fdc-b2ee-1539f0301e68",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "dabe43f1-d602-4390-8dd2-d65658510e3c",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "861982fa-fb99-41a5-a7be-d57a5ce86794",
        "cursor": {
          "ref": "2f2af9c5-dec3-45e4-8fbf-e0444298a256",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "4fdd66a9-bf5d-4db6-bcb6-9002a1dd6436"
        },
        "item": {
          "id": "861982fa-fb99-41a5-a7be-d57a5ce86794",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "9e35ff98-113e-4fc8-b9ff-f0f3ed98fc85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bed09784-cbf3-497e-8305-130a9c9e6447",
        "cursor": {
          "ref": "a5db5231-82a0-4a24-a413-aece9f299baa",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "f19090bf-3ce7-424b-ad36-8024f576ca2e"
        },
        "item": {
          "id": "bed09784-cbf3-497e-8305-130a9c9e6447",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "e1163d44-cf58-4b89-a966-44ba24054c22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b073dd0-7848-46b8-bd81-fd55996b0f64",
        "cursor": {
          "ref": "ec101aa9-0b04-4102-aa11-09cda2bd96fc",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "7588061e-2d76-4934-8d49-eba1316947ba"
        },
        "item": {
          "id": "3b073dd0-7848-46b8-bd81-fd55996b0f64",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "45bbee94-b1d1-4870-bc46-3f5ae0266c89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7132d9b2-dcce-49b6-b2b4-4b973d287284",
        "cursor": {
          "ref": "9726ae2b-e8ec-461a-98d8-11bfda5629f7",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "0f5d380b-a556-44db-b123-6d60f785374b"
        },
        "item": {
          "id": "7132d9b2-dcce-49b6-b2b4-4b973d287284",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "e1e69033-c5b7-47b6-88ba-7e77a4874f73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee88744d-5016-44c3-bc0b-4937d24b5f27",
        "cursor": {
          "ref": "f2820575-f26b-4a68-9823-a737cde03362",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "e1e45a2e-473e-41ed-acc8-b0f52e8ea23d"
        },
        "item": {
          "id": "ee88744d-5016-44c3-bc0b-4937d24b5f27",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "f817b904-83cc-4b45-befd-93afcc89ff86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38ba3795-bf85-42c2-a53b-b3a7f9525676",
        "cursor": {
          "ref": "713d94a9-6e9e-4705-99ea-1b2a9e6aac8d",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "545e0ade-9d2b-4c70-8b73-51c6eb3112c6"
        },
        "item": {
          "id": "38ba3795-bf85-42c2-a53b-b3a7f9525676",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "bf7cfb9e-4c63-4200-9c75-cb1b1da21408",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bc63e58-8063-4547-8d39-4a702b897c1a",
        "cursor": {
          "ref": "2f0e6f30-bbbc-408d-8646-e98e40b71a8e",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "659f1f1b-eee7-4c33-87d0-46835a4a9d63"
        },
        "item": {
          "id": "3bc63e58-8063-4547-8d39-4a702b897c1a",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "cd5ec565-b1cf-4de2-8c3c-a94246061ce5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eb67736-4f8b-4368-a426-ba8fabd99186",
        "cursor": {
          "ref": "a1652af0-8d25-464e-a18c-eb65410de708",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "cab2349a-dd8f-48f2-ba0f-371a261fa18f"
        },
        "item": {
          "id": "6eb67736-4f8b-4368-a426-ba8fabd99186",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "38ca7166-1397-4537-919f-92958a7951c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e3173f4-a164-432b-8484-6c1cce162c80",
        "cursor": {
          "ref": "73b3b84b-c9c1-40d7-97c1-50fdd4ce3e75",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "d3a47ca7-9f0a-4fe2-8c7d-03b8bb35e907"
        },
        "item": {
          "id": "1e3173f4-a164-432b-8484-6c1cce162c80",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "88c1d646-db80-4943-a53f-0336be0a54bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa1d80e8-9e18-49d8-83b0-8a95f1e66ed8",
        "cursor": {
          "ref": "e0b38f88-e1c2-4e6c-adec-9ea494e924fd",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "2828b675-28ee-43af-854b-b63c62d76b84"
        },
        "item": {
          "id": "aa1d80e8-9e18-49d8-83b0-8a95f1e66ed8",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "c4f5dda2-722c-4204-acfb-50a7745290a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36e5be71-5605-4dc6-be53-f0b2978bfa38",
        "cursor": {
          "ref": "3183b7a0-5c85-4ded-9161-d39238745958",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "21c1bc88-af10-4491-afde-bdcca10407f3"
        },
        "item": {
          "id": "36e5be71-5605-4dc6-be53-f0b2978bfa38",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "eedf5905-1e21-40bb-b96a-398301d8939a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7150de96-ae88-4cb8-bf61-ad54626bca05",
        "cursor": {
          "ref": "7fae7199-02aa-4456-8b57-ab26e39dbf3e",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "89a4377b-330a-46ba-bd28-8c444f81a411"
        },
        "item": {
          "id": "7150de96-ae88-4cb8-bf61-ad54626bca05",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "e57ff8b4-e881-46c3-96e0-a13826a210cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec814939-68e1-4771-b99d-d63398b19ecc",
        "cursor": {
          "ref": "910a14df-09b1-41fc-9693-3a71ad87ebb0",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "dc7b17d1-3379-44df-b4ac-fe53f2f49cee"
        },
        "item": {
          "id": "ec814939-68e1-4771-b99d-d63398b19ecc",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "c5224396-3a1e-4e53-b49e-778f50c86741",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a97d4898-2019-43b3-aa5a-6995cdb74a7e",
        "cursor": {
          "ref": "6ebdfa28-dd49-4c1c-997a-f7504848bb04",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "1e3195c4-5179-4553-8eef-9b1c45393067"
        },
        "item": {
          "id": "a97d4898-2019-43b3-aa5a-6995cdb74a7e",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "2e645199-9bf1-47f7-aa37-3abdc19fdeae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "815e5ace-8b1a-4261-afe7-2d1af95144d4",
        "cursor": {
          "ref": "9628367c-b414-4fa6-8cc4-75e8f45677c9",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "7c924b9c-2ff7-43e9-864e-4340f97934a5"
        },
        "item": {
          "id": "815e5ace-8b1a-4261-afe7-2d1af95144d4",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "96fd6a0a-0bca-4313-a8f9-6a3fb4334a44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7a105e4-34e7-47c2-bd16-694db4727128",
        "cursor": {
          "ref": "c0f1249a-0883-4557-8df1-f96e8e20979a",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "f08e4787-8663-41c7-85ae-840a6c1a64fa"
        },
        "item": {
          "id": "b7a105e4-34e7-47c2-bd16-694db4727128",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "b0a95c25-b2aa-425c-b854-1ed73e6c2005",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "766cc8b5-1a05-4ed2-b7ea-4d3f40e476dc",
        "cursor": {
          "ref": "f3181846-5510-47d6-8a3e-82783b0ce712",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "4112493a-39ed-4697-adac-bc5b7538b007"
        },
        "item": {
          "id": "766cc8b5-1a05-4ed2-b7ea-4d3f40e476dc",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "6f325618-a0b0-4917-abf2-b8d6609393be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9615fe8e-a01c-48f2-adf9-a668708ef3e3",
        "cursor": {
          "ref": "99285bac-cdea-4b2a-b1c8-af4b3cc7f56b",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "c3229309-b07b-4b6e-af60-98ebc4b62178"
        },
        "item": {
          "id": "9615fe8e-a01c-48f2-adf9-a668708ef3e3",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "81633cd0-aed9-477e-9c71-65134cdcf55a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f47a3cea-904a-4b28-866c-d42de00a948d",
        "cursor": {
          "ref": "ac8b6fa5-5640-4fdf-a5f4-c1e8c92f9134",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "cd246eed-ef1f-4359-a909-a8d11c89ec44"
        },
        "item": {
          "id": "f47a3cea-904a-4b28-866c-d42de00a948d",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "636eac95-69bf-4328-b95d-01ebac011ca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1702f4d-1316-40ed-9ba4-d8d3b0e8e757",
        "cursor": {
          "ref": "6d43cae5-df61-4626-87a0-7eee5ac47263",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "61e0fa51-ae78-4039-89b1-fce0602407a4"
        },
        "item": {
          "id": "f1702f4d-1316-40ed-9ba4-d8d3b0e8e757",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "80f52ed6-87b7-47dc-b5aa-f6ba7e74c73b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a2080e7-afb1-421f-8d24-1ff0857917f3",
        "cursor": {
          "ref": "03b6c442-afa5-4833-9f92-49a75f6d1709",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "3b860e81-0b88-4e12-801d-11e27d5e6ece"
        },
        "item": {
          "id": "0a2080e7-afb1-421f-8d24-1ff0857917f3",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "09ace627-8365-4576-8402-b0103a115758",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53bf0d01-b356-4453-bd34-1c78c21f5c2f",
        "cursor": {
          "ref": "743a6010-596a-4494-988e-ed1ba016d89b",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "13974a63-5c27-45dc-9991-acf326da8db8"
        },
        "item": {
          "id": "53bf0d01-b356-4453-bd34-1c78c21f5c2f",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "e54036ef-15c8-448f-823e-6928da585a20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a98ca97-0471-4bbf-98ae-37060f457227",
        "cursor": {
          "ref": "2fb6bf1b-14be-4bf7-b16a-8c44f296798a",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "3f686fc5-bb61-48a7-aeab-9053e4328baf"
        },
        "item": {
          "id": "6a98ca97-0471-4bbf-98ae-37060f457227",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "db92c3a4-13fa-4809-948c-62b74160e319",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0384d0c7-4ba2-4b5c-ad93-56d3236a8f34",
        "cursor": {
          "ref": "cd1b7213-a722-4cae-90cf-07849e82be84",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "44f55f42-3d32-444d-8c6b-93b102960e94"
        },
        "item": {
          "id": "0384d0c7-4ba2-4b5c-ad93-56d3236a8f34",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "1c936292-761b-45c8-9392-f1c4455ff9b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2f64eef-05d8-4833-83d3-8473bbfbb26d",
        "cursor": {
          "ref": "6ad489c8-1ddc-47ea-87b5-90704882128e",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "e978d2ff-3322-4105-a856-b29b83b0b34f"
        },
        "item": {
          "id": "c2f64eef-05d8-4833-83d3-8473bbfbb26d",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "6eefb32c-a06f-4427-89a0-37f54ca17771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1a8c72d-e585-4494-a498-82e92712b94a",
        "cursor": {
          "ref": "82bf80d5-287b-4b86-aff0-d01d3617c666",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "70c02b27-ace7-4c60-89f6-c834fe6dae3d"
        },
        "item": {
          "id": "e1a8c72d-e585-4494-a498-82e92712b94a",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "07f76229-ef86-4b3b-a21e-1c06eb344f6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 136,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b35b7540-a13f-4a13-a6b0-883d838e56eb",
        "cursor": {
          "ref": "0b88f3e3-ca0a-443a-8171-b07ce33afaf6",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "c42a1e8f-fb06-4802-963e-8aeaae547cca"
        },
        "item": {
          "id": "b35b7540-a13f-4a13-a6b0-883d838e56eb",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "cb59d972-7cbf-4714-8e8b-2767463104f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 155,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12f78441-15a9-4d63-bf62-c651f0851c7f",
        "cursor": {
          "ref": "04497324-0283-4789-9318-776c013a3263",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "706369ee-e043-4eff-a65c-0341b752c52b"
        },
        "item": {
          "id": "12f78441-15a9-4d63-bf62-c651f0851c7f",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "4471ec62-4097-444e-9821-cc72f8749de3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cc8a5b2-0ca6-4010-bb69-57225b1888a0",
        "cursor": {
          "ref": "6d216229-d4e5-4825-b2e3-6972be05f88a",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "8137985f-fa72-4815-a065-c916f47b7052"
        },
        "item": {
          "id": "9cc8a5b2-0ca6-4010-bb69-57225b1888a0",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "6c0f8ba1-6a3c-43c4-87ab-f51ae1e34462",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45d9fa8a-5d59-4000-9874-94d0649f2903",
        "cursor": {
          "ref": "8462617c-99c9-4a6b-9000-3f9e08fbfdda",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "9c3c05c2-3c9a-4648-b39b-427d21e8a116"
        },
        "item": {
          "id": "45d9fa8a-5d59-4000-9874-94d0649f2903",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "9ca544c1-e6c2-455a-9ce0-a4df90fb34ac",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "f9ff26bb-f8bb-44a6-b6c0-479373df6294",
        "cursor": {
          "ref": "06d2801f-887c-4784-ae90-b94a2f66d50e",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "5c4819a2-32f8-47cd-bc69-56d05316efe9"
        },
        "item": {
          "id": "f9ff26bb-f8bb-44a6-b6c0-479373df6294",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "291b0cae-2e94-4ec7-bbb9-0655fdff872d",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "8d3924c3-a2ab-4e9a-9296-8eff7f44cf95",
        "cursor": {
          "ref": "cbccab94-d5b7-4e11-90c4-793c55e8d4dc",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "80d64475-fb12-4644-85f8-936e571ec314"
        },
        "item": {
          "id": "8d3924c3-a2ab-4e9a-9296-8eff7f44cf95",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "47a42320-23ce-470d-90d5-54ac8dd81306",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "28aa6206-3019-4683-9ceb-099e73124b8b",
        "cursor": {
          "ref": "9e7b95d1-ff8d-45c3-a785-712f00ee3fa1",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "2e143e1a-d6d3-463c-a975-403ba547ef2f"
        },
        "item": {
          "id": "28aa6206-3019-4683-9ceb-099e73124b8b",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "65482288-20dc-4b35-a769-a15705506eaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98b54fbb-b6ce-402a-82a8-19edbad07794",
        "cursor": {
          "ref": "452e6715-b0da-4f9a-b7c2-5f3375dc397a",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "758ac96b-f587-4223-a22d-6c2858eaa0bb"
        },
        "item": {
          "id": "98b54fbb-b6ce-402a-82a8-19edbad07794",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "91947ebe-805e-429a-a983-0dc81055ebf4",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "63b168bc-830b-491c-b377-dc2390612f70",
        "cursor": {
          "ref": "9b44f4fd-c894-4ca6-8aa7-5379705c1402",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "82fe776c-2e41-4716-b02b-f75ea5cf14c1"
        },
        "item": {
          "id": "63b168bc-830b-491c-b377-dc2390612f70",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "7a935135-add0-4bac-8385-060c0ce0fb32",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "4741ea2d-bca9-4946-ac27-9941dbc18fec",
        "cursor": {
          "ref": "67367be4-b565-40db-ac65-023dd8aef45f",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "b27e3cdf-055a-425f-8a64-71c1af518727"
        },
        "item": {
          "id": "4741ea2d-bca9-4946-ac27-9941dbc18fec",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "88d32236-830f-4a0c-9546-3fa0f5125e27",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "75152881-5263-4046-a7ac-9bbcee69a68d",
        "cursor": {
          "ref": "8d2acbba-9cd4-48c4-a676-f1429aeefc83",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "2832914e-5556-4181-90a5-ae70a5d1c6e1"
        },
        "item": {
          "id": "75152881-5263-4046-a7ac-9bbcee69a68d",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "5a52e58b-5660-407a-903b-0617366f6019",
          "status": "OK",
          "code": 200,
          "responseTime": 179,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "07a3e36e-a266-4e0b-8c1f-29a1877480b9",
        "cursor": {
          "ref": "8c5ccb70-3843-4fd3-a8ad-6eac04256e49",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "98ab715d-56d1-453f-a437-c6dd2037a633"
        },
        "item": {
          "id": "07a3e36e-a266-4e0b-8c1f-29a1877480b9",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "21d16526-5f37-4753-a6f2-aabb08beff4d",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "d8603704-fa13-4853-83b4-eb6954459c4f",
        "cursor": {
          "ref": "eb73c626-248b-400f-87ac-e71efcc1dfcb",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "ad90b487-b00e-4ed6-ba75-bf7b49306b16"
        },
        "item": {
          "id": "d8603704-fa13-4853-83b4-eb6954459c4f",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "a4604e4b-76f5-4088-962f-3c9f1921c5cf",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "5f21ad55-230e-4759-93d0-dfeadbde6a83",
        "cursor": {
          "ref": "75828427-554a-4d7c-8220-4e0fff7ee225",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "9b1f18d0-0036-40e3-8289-45eb8650343c"
        },
        "item": {
          "id": "5f21ad55-230e-4759-93d0-dfeadbde6a83",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "f519e00a-388e-411d-b24d-3af3f1ab3f1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfea5bff-80e0-41a4-ada5-6c48366f1cb1",
        "cursor": {
          "ref": "f403586f-fcc0-4982-a245-4ec2a19a34ed",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "16f4f8c8-01f8-45d7-be00-06a1ab2bfb09"
        },
        "item": {
          "id": "dfea5bff-80e0-41a4-ada5-6c48366f1cb1",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "4cdee0b9-64be-4368-a38e-603035e2a0f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e004f478-8814-4d90-bbf7-56344fd2c91c",
        "cursor": {
          "ref": "ca424c7f-e40d-4b46-9e5e-e166d09482b0",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "c2e1df4d-9b6a-4cb8-9703-db9bd8a7481a"
        },
        "item": {
          "id": "e004f478-8814-4d90-bbf7-56344fd2c91c",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "dd14d4f8-db35-42a1-a7d1-7b049015d863",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fceba7b9-5f55-4ab5-bde6-7ccc1764dbba",
        "cursor": {
          "ref": "a219cd01-6f7f-4eea-9016-39b3d156f945",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "7a49da6f-70b7-4be4-ba0f-3e51b2b5e097"
        },
        "item": {
          "id": "fceba7b9-5f55-4ab5-bde6-7ccc1764dbba",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "95fff939-8f9e-4f76-9dc2-9271a0426289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79209b6c-8a24-4f6f-8937-9829bdcc455f",
        "cursor": {
          "ref": "5a4782e0-c452-484f-b4b3-9017e00c5dec",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "e0da6609-55c0-4e04-8315-29859f51ea11"
        },
        "item": {
          "id": "79209b6c-8a24-4f6f-8937-9829bdcc455f",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "a49c4857-e880-4e43-9291-399cc8f9c897",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b88ba52-525d-4877-977d-d4e5547f5877",
        "cursor": {
          "ref": "d1fd4033-085f-4b8a-a2b3-329228e9bbac",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "6eae0ccd-8389-4f35-8870-94d8cbea8b7f"
        },
        "item": {
          "id": "9b88ba52-525d-4877-977d-d4e5547f5877",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "76f24210-3bd8-4977-b637-01a43ff275ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e4eda53-4b4f-406b-a285-75c477c5d7de",
        "cursor": {
          "ref": "3170b21d-afd4-450f-b0f2-30ce325cf392",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "d98806dc-367d-40d3-9ebd-e63204302333"
        },
        "item": {
          "id": "5e4eda53-4b4f-406b-a285-75c477c5d7de",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "1ad32761-6d05-40bf-aaa8-e12d36b6713a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b642b142-67a9-45a5-b4aa-5763aea08359",
        "cursor": {
          "ref": "db9a4168-da4e-4fb1-b7e4-ad83e36816b8",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "3a2d503c-68a6-4151-8eb3-8e3d9313663b"
        },
        "item": {
          "id": "b642b142-67a9-45a5-b4aa-5763aea08359",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "190f7bf1-b2c4-4a87-97ab-96d32203d03e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "620bffe4-acd3-45d9-8c62-902d66abfee5",
        "cursor": {
          "ref": "ad68ace9-8f40-4f66-82c7-fbc511f2667b",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "7c6538ff-08d9-4f76-831e-170ab45d8ee4"
        },
        "item": {
          "id": "620bffe4-acd3-45d9-8c62-902d66abfee5",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "ee2b04a7-4f01-4a8b-a17a-4a56c88923a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "731ed13c-6fda-4167-b668-d1847ab349bf",
        "cursor": {
          "ref": "85e7a910-4a70-4c02-8454-82e8c3823cff",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "ba9136bc-0ffd-4a51-9a77-0c5f4b6ac2c0"
        },
        "item": {
          "id": "731ed13c-6fda-4167-b668-d1847ab349bf",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "adbab4d0-3768-467d-bb40-c1b71d192532",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "030d178e-34bf-4ab6-9b9f-84d39b2cb06b",
        "cursor": {
          "ref": "ff5f65e6-bb7f-4c38-be34-3147851b728d",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "29a34dce-7ebb-4d7e-b500-18176cd68602"
        },
        "item": {
          "id": "030d178e-34bf-4ab6-9b9f-84d39b2cb06b",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "7054b35a-7ea0-48ae-bca8-4a909026c2a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c849b9d7-9f53-41cf-86cb-228f8ae3cf13",
        "cursor": {
          "ref": "28bb3553-717f-44ec-8bad-45eb18b0330f",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "3a1f2076-9160-473b-acce-eba0be1bdc7d"
        },
        "item": {
          "id": "c849b9d7-9f53-41cf-86cb-228f8ae3cf13",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "22a1fe0b-551e-4f44-a1bf-afd5e40ae152",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af234cd2-433b-4bc6-b395-448a08234997",
        "cursor": {
          "ref": "be859f58-d866-4e3b-b5b3-07ba28ed9f7a",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "b596b7fb-f6ee-43b5-a329-a0ea525d5c86"
        },
        "item": {
          "id": "af234cd2-433b-4bc6-b395-448a08234997",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "8c086aa2-cc2a-4aac-af91-813191f1f5b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dbe2a70-a5ad-429e-a2bf-d47c540c25fc",
        "cursor": {
          "ref": "b8d7bf12-fc63-4933-8faf-b2aaec27e42a",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "1a4daa26-3fa7-4569-8f49-0edf54a7482a"
        },
        "item": {
          "id": "0dbe2a70-a5ad-429e-a2bf-d47c540c25fc",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "d08d79d0-5ec1-45a2-9932-9a750964b8c9",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "a8d35759-3cf5-444f-8be7-376bb3e3474f",
        "cursor": {
          "ref": "5f7dc4a0-87fc-4fbe-b629-3d8b77bdd97b",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "9bcf15a3-1dbb-45c5-b3d4-aec78144a47e"
        },
        "item": {
          "id": "a8d35759-3cf5-444f-8be7-376bb3e3474f",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "f2b065d4-5e6f-4940-b3a3-730f2ac0593e",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "34261de1-8256-4769-a60b-4dbe4cd22730",
        "cursor": {
          "ref": "953c2401-6ffa-45f3-8521-9cbf772f855b",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "84698dc0-7775-45fe-83c9-71a1f0073c69"
        },
        "item": {
          "id": "34261de1-8256-4769-a60b-4dbe4cd22730",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "dc428ea5-50a8-421f-9e34-3c67e5f603f8",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "9870cb8c-cae3-4130-b5a5-45e4b6ce6b1b",
        "cursor": {
          "ref": "67308946-9d25-4ffc-b79e-fa76aaa6e714",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "5487bffa-7775-414e-8385-36de5b2fbc14"
        },
        "item": {
          "id": "9870cb8c-cae3-4130-b5a5-45e4b6ce6b1b",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "73030f9f-7299-406b-9f0a-6f89ee3911f9",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "0eb8996d-1d00-4803-bcfb-f169025f980f",
        "cursor": {
          "ref": "e2796fde-2e72-41f0-80e9-ad3bba35bfc1",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "459e46db-7b51-438f-8c53-d10b209b7413"
        },
        "item": {
          "id": "0eb8996d-1d00-4803-bcfb-f169025f980f",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "d3d6d7c7-a99e-436b-b25b-33755710e507",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "859baaef-9772-4c10-9985-f76389574495",
        "cursor": {
          "ref": "fefcd3a5-208f-4474-a10a-801746fce699",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "98266d09-24bf-4253-bdd7-1571260cdda4"
        },
        "item": {
          "id": "859baaef-9772-4c10-9985-f76389574495",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "a340d9a4-cdf0-4f8c-8aec-e8795d1f2f82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0a973f7-ca2e-4349-add4-173fbc505ced",
        "cursor": {
          "ref": "3c24ac5f-5f5d-41fb-8e96-eef3ff62ca2f",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "e4113e1a-916a-4438-8a93-97b839dc9571"
        },
        "item": {
          "id": "d0a973f7-ca2e-4349-add4-173fbc505ced",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "65c97fb9-09f4-4f55-bf11-613f93dad2f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "336d0ff7-481e-4645-89de-348a2c3aa11b",
        "cursor": {
          "ref": "38648730-0a46-4837-be07-b5c8243dfbdc",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "dcfdf836-e4b4-471e-a9b1-38e2cf58df1f"
        },
        "item": {
          "id": "336d0ff7-481e-4645-89de-348a2c3aa11b",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "820658e9-114a-4097-8535-e8063f555da7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "085af748-4842-4de2-90dc-bfb81275d6ed",
        "cursor": {
          "ref": "ed832ad7-ea6c-4775-8b93-7f0498f7df66",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "02c952ff-b686-4d91-9228-4e7043448fc4"
        },
        "item": {
          "id": "085af748-4842-4de2-90dc-bfb81275d6ed",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "6f564c1d-3957-4bf5-b333-54ee79c929b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c05951e7-8cb8-4ba5-ab5f-0ed8003b0242",
        "cursor": {
          "ref": "f6632381-4379-4695-a5cf-5600ad74ceb9",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "33d32ec2-e99e-4002-b9d5-9fff3ad6719b"
        },
        "item": {
          "id": "c05951e7-8cb8-4ba5-ab5f-0ed8003b0242",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "2ee34ca4-0d63-4c6a-a88a-506deae76def",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5360b131-eaee-43c7-b738-d0e28b0efc0b",
        "cursor": {
          "ref": "1caee5d8-ece9-4059-b6e6-37c511f58505",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f3594e9b-1a23-4ae4-a33d-ba55906bca24"
        },
        "item": {
          "id": "5360b131-eaee-43c7-b738-d0e28b0efc0b",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "44bb7d9e-652c-4a04-bf6b-d527d8caa6da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4e83d87-ec5c-49e4-860a-1566c6eec054",
        "cursor": {
          "ref": "5fb8eb46-550a-4daa-b552-bfefc3662d7b",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "303a9e11-97f1-4e96-a655-fb0c27126095"
        },
        "item": {
          "id": "b4e83d87-ec5c-49e4-860a-1566c6eec054",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "0aab95ae-0d46-4213-9293-40a0ef3daea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13ca86c9-bf00-46bb-b2f2-acb689944fe0",
        "cursor": {
          "ref": "a3884887-3f61-44e9-8f77-ab9beb69ce30",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "d6f8cc6d-3ee1-4103-a657-79c32858704b"
        },
        "item": {
          "id": "13ca86c9-bf00-46bb-b2f2-acb689944fe0",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "b16bca31-17ac-454b-9d72-9ec76bb87252",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fd10710-5d39-419d-aaac-95c91724f532",
        "cursor": {
          "ref": "2da32a2b-8553-4255-99b3-6ea70257e8e4",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "843d69e0-a1dc-4c86-af7f-810602e3eaae"
        },
        "item": {
          "id": "5fd10710-5d39-419d-aaac-95c91724f532",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "b5c4d696-facd-4730-9100-b66d4632b1a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f4b0da0-aa19-4a4e-86ba-0fede9d7ae5f",
        "cursor": {
          "ref": "2278e617-e6a7-482e-be77-9ea9a0f41a11",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "4145f813-148d-45de-b122-ad1f9a5454a3"
        },
        "item": {
          "id": "9f4b0da0-aa19-4a4e-86ba-0fede9d7ae5f",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "b9ad4533-7b46-40d3-b4f0-c6100785dc69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adc632de-53fd-494d-a153-1605ded90f9b",
        "cursor": {
          "ref": "b592ebb6-09aa-4566-b726-8aec2e4f9858",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "68e550ac-b25a-4490-a257-329a908d04e6"
        },
        "item": {
          "id": "adc632de-53fd-494d-a153-1605ded90f9b",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "36ffc755-7f4b-453c-ab97-fefb8d90db32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3e53fa9-9f43-49f3-971b-7cb2bd1450b4",
        "cursor": {
          "ref": "5a58f483-0ad4-4c3e-8442-6368018eedf5",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "2a389ade-1507-4565-8543-140630df8d63"
        },
        "item": {
          "id": "e3e53fa9-9f43-49f3-971b-7cb2bd1450b4",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "f6e3396f-3817-4194-88c9-e3e3ae52e187",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0fedd1d-dd0d-4815-91e3-8ec49b6fee06",
        "cursor": {
          "ref": "fc50d282-14ab-4dc6-8c77-7ffa45a748a8",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "35a688e0-b0a2-4866-a89d-062ecdde763b"
        },
        "item": {
          "id": "e0fedd1d-dd0d-4815-91e3-8ec49b6fee06",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "3df46040-f93f-4136-b202-228efad6fe78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d907b9c-4bae-49df-b66a-a3ee6acda031",
        "cursor": {
          "ref": "9cbe16fe-18b1-4b48-9dcb-3e4ad7728a8f",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "920783f7-3e11-4295-ad65-578adb896cbd"
        },
        "item": {
          "id": "8d907b9c-4bae-49df-b66a-a3ee6acda031",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "99e74504-c3a3-4b88-8180-063b7f779063",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ef3997d-cd6e-4458-ac45-9b5921a8fbe4",
        "cursor": {
          "ref": "1677ecf6-1e0d-476c-b0c5-03e775667ad0",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "00a22ed5-5800-4c2b-b42b-91cbe491817d"
        },
        "item": {
          "id": "6ef3997d-cd6e-4458-ac45-9b5921a8fbe4",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "cd6a1c2b-4eff-4047-82b4-f225881196a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66468e95-ceeb-48e0-b6b1-64e43d8d0ebf",
        "cursor": {
          "ref": "3a093885-a874-42b4-99d7-c181278ace99",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "a5b7921b-1e78-4a68-86d6-31d5e847c73e"
        },
        "item": {
          "id": "66468e95-ceeb-48e0-b6b1-64e43d8d0ebf",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "45a60c36-69ad-4314-bd48-1d3ecca05cac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da6b55fe-d84c-431b-b326-93d2edacbd3f",
        "cursor": {
          "ref": "268c54c4-6c22-4525-9092-d5f77744bcb0",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "455a8dfe-eb31-4b94-828c-f35e29d7d827"
        },
        "item": {
          "id": "da6b55fe-d84c-431b-b326-93d2edacbd3f",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "afbcf66e-4804-4d05-81a2-035dfad34b72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4e52fd8-911c-42d9-acc5-1bfb15d80ee9",
        "cursor": {
          "ref": "9c64c1f7-6381-473b-abdc-3014f9de983d",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "29dfc2c2-b92e-436a-87ae-3368d0bb48ca"
        },
        "item": {
          "id": "e4e52fd8-911c-42d9-acc5-1bfb15d80ee9",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "cc444d5b-6216-427d-b356-771e0f46f121",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "030c7c58-b295-42f5-9357-b8ca1f55f3a8",
        "cursor": {
          "ref": "61ab2353-d036-4f50-81af-6e9dc7227bbc",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "24df85a8-f441-4839-829d-8575e51fabab"
        },
        "item": {
          "id": "030c7c58-b295-42f5-9357-b8ca1f55f3a8",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "b4351f4b-1e89-41e4-a535-96a34dbc6065",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14c7ca6f-6210-4054-853a-8bedf4568794",
        "cursor": {
          "ref": "b851ed3c-f53e-46c5-b695-b2d0d16d5609",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "e5d6eccb-acaf-4ede-b5c1-aafec7412cb9"
        },
        "item": {
          "id": "14c7ca6f-6210-4054-853a-8bedf4568794",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "90ab4035-c508-44c2-9cc5-208db7a61980",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c78ba973-cb21-4bc3-9bc1-10e09156bdea",
        "cursor": {
          "ref": "77d92df5-9ebb-498b-a353-f2da2a6f33de",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "a81af648-9182-44f9-b072-b9b764455579"
        },
        "item": {
          "id": "c78ba973-cb21-4bc3-9bc1-10e09156bdea",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "f759e218-ea26-4305-99fb-8aa8a0af632b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ecc183a-cb77-4c2b-9c30-541d448c2ba1",
        "cursor": {
          "ref": "dbd762f7-a98f-4c54-a4bd-8d34aae9f5f0",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "8dd9f11e-5f2b-4e13-99d8-a79cb033392a"
        },
        "item": {
          "id": "2ecc183a-cb77-4c2b-9c30-541d448c2ba1",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "a4f45694-bdb8-4c3a-98c4-4bace4b1d9d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0884bf0-4e0d-46ec-8671-c8913dd541a6",
        "cursor": {
          "ref": "20b9bedd-8ee2-4c86-a1db-676be2692a4a",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "01387205-2d71-4b07-bcaa-1eff9d5fedb3"
        },
        "item": {
          "id": "a0884bf0-4e0d-46ec-8671-c8913dd541a6",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "6508e583-f37c-4902-b21d-4dfc6835dc5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c3e176e-8c55-466f-80e6-4fea5aabf603",
        "cursor": {
          "ref": "ba70a7da-5e46-44c4-8ecd-175f070d45f9",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "b0a60dbd-ee84-417a-8d0c-fd11604ace7a"
        },
        "item": {
          "id": "4c3e176e-8c55-466f-80e6-4fea5aabf603",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "0319a830-e72c-469c-9f2c-fe212d95b377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea7cd876-c635-4290-b0ea-b9791faaa866",
        "cursor": {
          "ref": "79e4c7e2-acbe-4ec3-9dec-8dd3b54a06f1",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "6d252eb8-049a-4bd4-9217-9dd2bc4a11e0"
        },
        "item": {
          "id": "ea7cd876-c635-4290-b0ea-b9791faaa866",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "e96557d9-f460-4a67-9700-8907ef047f0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcf4d807-30da-4eb6-a53e-b7f1214b417f",
        "cursor": {
          "ref": "6cca6076-275c-464f-a493-7f687728adbe",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "c7e81d2f-338c-4903-8deb-08e2cbf38619"
        },
        "item": {
          "id": "fcf4d807-30da-4eb6-a53e-b7f1214b417f",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "75c0be7f-3671-4717-a1a0-1e7f323e9f69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "292e9117-6298-44bb-bb7d-1d450fc16357",
        "cursor": {
          "ref": "5bfec432-7cba-4d0d-b8a2-96c6c50e6324",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "2da78202-c8c2-4ecc-8735-54ea5a15235b"
        },
        "item": {
          "id": "292e9117-6298-44bb-bb7d-1d450fc16357",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "9f203afa-d1d7-4fb8-ad15-33a4641ffcab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7179bb87-8687-42c9-b164-651e4f54885c",
        "cursor": {
          "ref": "48911dfd-925b-4622-a7f6-8a6dfff912f7",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "61b4b0d6-67cf-4b87-a932-f37946d379b5"
        },
        "item": {
          "id": "7179bb87-8687-42c9-b164-651e4f54885c",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "ef6844f9-bf40-4216-b947-4efada800212",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7a3aacf-3680-471c-9ca3-d290fa0b68c0",
        "cursor": {
          "ref": "25447690-8265-4d80-89da-076ac6811e39",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "c8dccb26-34b8-4d26-bee7-8d9e58ee8429"
        },
        "item": {
          "id": "c7a3aacf-3680-471c-9ca3-d290fa0b68c0",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "b120d8d5-161e-45db-8c92-6194d2eac5c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17a6cf1f-6ae0-4672-ab2f-02352c810773",
        "cursor": {
          "ref": "338bbca0-21fa-4065-b81a-3b0fd3ee37a2",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "f57460f3-06bd-4e9e-91b8-b889b1206814"
        },
        "item": {
          "id": "17a6cf1f-6ae0-4672-ab2f-02352c810773",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "48333fc9-697a-453e-90c6-f706032aaa74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e5a2df2-b704-4f0e-9c51-a72c314af4f8",
        "cursor": {
          "ref": "3452d33a-0696-429b-9171-9b010ea02141",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "b30190fc-5a83-4723-a2a5-d1fff7d5be41"
        },
        "item": {
          "id": "9e5a2df2-b704-4f0e-9c51-a72c314af4f8",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "079ea295-e763-451e-b24e-b5586016fcee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9a67c13-a93b-47fb-994d-87a84a582bac",
        "cursor": {
          "ref": "d2ffbccb-8595-4aef-9f04-396fef3eff9c",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "5efa038a-3cb6-4083-98e2-2f2a9b1db2a8"
        },
        "item": {
          "id": "e9a67c13-a93b-47fb-994d-87a84a582bac",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "58ff1177-44c4-4e33-a295-d677ad28ddcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cc5db10-5e2c-4cf7-a78c-d01f25b5eccb",
        "cursor": {
          "ref": "82a57fb9-9174-45b0-95b8-88a51715b09a",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "7a90dd77-bc07-4549-baa9-3a5792ffbb68"
        },
        "item": {
          "id": "5cc5db10-5e2c-4cf7-a78c-d01f25b5eccb",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "7d92bffb-a214-455d-82c2-77c9b43d353c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "815ad4e5-6705-47bf-87b7-54bd839c0c7e",
        "cursor": {
          "ref": "565f7f9a-c8fc-4201-af23-0be0e5814ae1",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "9c43df18-22d4-4687-9a17-027219dcc091"
        },
        "item": {
          "id": "815ad4e5-6705-47bf-87b7-54bd839c0c7e",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "0a5a7520-69b4-4f0c-b07e-2969d353774c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66e7e0d5-6802-49b3-9de2-556b60efcddf",
        "cursor": {
          "ref": "c7e4e8a8-5506-402c-b4e4-7ad920e6ba09",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "9e8a554b-b27a-4c77-9620-c1a34acae518"
        },
        "item": {
          "id": "66e7e0d5-6802-49b3-9de2-556b60efcddf",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "6fa149f0-132c-4f2f-81a2-dacaad6c3bd8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f28cf3cc-68fa-4ab8-bcbd-24004d4a0089",
        "cursor": {
          "ref": "31c407a5-155d-4b81-95b8-db23ec5be100",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "3de7dfe5-428b-4fcc-b35d-6edd8c97894c"
        },
        "item": {
          "id": "f28cf3cc-68fa-4ab8-bcbd-24004d4a0089",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "4f6db9ec-f343-4bf2-868d-1f8da03f2b48",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "3c3f3d5e-1a94-452e-8e53-1facf98b7766",
        "cursor": {
          "ref": "e76834fb-b9f9-4ffb-a140-2cf2f60e5a66",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "3daf5ed6-5e1d-4010-aa53-e11291e43543"
        },
        "item": {
          "id": "3c3f3d5e-1a94-452e-8e53-1facf98b7766",
          "name": "credentials_verify"
        },
        "response": {
          "id": "d89e38ea-b035-419b-8d5f-1af8043a07ce",
          "status": "OK",
          "code": 200,
          "responseTime": 152,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "84e99559-5f57-4cd8-b012-a16556c91156",
        "cursor": {
          "ref": "5df336a6-4549-46e0-8e9e-712b138d194e",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "f376124e-4caf-4792-8f22-4bb579ed8ee2"
        },
        "item": {
          "id": "84e99559-5f57-4cd8-b012-a16556c91156",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "444aac22-9caf-4e1c-8412-d54e3e2d9297",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8a43a3b-e9d6-498d-9a7b-c49cb3e6ab2c",
        "cursor": {
          "ref": "a6334e63-193d-463f-9485-7c30766c935f",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "9d80998c-83d7-4ba0-81a5-8a9192361eee"
        },
        "item": {
          "id": "d8a43a3b-e9d6-498d-9a7b-c49cb3e6ab2c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7eb44638-c824-4bb4-93e6-0e874d3e8375",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8a43a3b-e9d6-498d-9a7b-c49cb3e6ab2c",
        "cursor": {
          "ref": "a6334e63-193d-463f-9485-7c30766c935f",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "9d80998c-83d7-4ba0-81a5-8a9192361eee"
        },
        "item": {
          "id": "d8a43a3b-e9d6-498d-9a7b-c49cb3e6ab2c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7eb44638-c824-4bb4-93e6-0e874d3e8375",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e513681-23f1-4e13-a795-7e0a42069a98",
        "cursor": {
          "ref": "14cac839-56ea-4cd3-9d18-495e1dc0055f",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "624ff3a4-e8c9-43a5-ae56-d81d0d10e600"
        },
        "item": {
          "id": "5e513681-23f1-4e13-a795-7e0a42069a98",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "859c80b8-d055-492c-aaf9-8c7883da9674",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9a1a9ae-0061-451e-8c46-c807da22784f",
        "cursor": {
          "ref": "46cc8496-1eb8-4191-acc8-1c486f5e9c78",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "7b71bb1a-41cd-49ab-a87d-94600d887b11"
        },
        "item": {
          "id": "d9a1a9ae-0061-451e-8c46-c807da22784f",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "db0b4df6-ac2f-4460-bf94-7be8803a2abc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}