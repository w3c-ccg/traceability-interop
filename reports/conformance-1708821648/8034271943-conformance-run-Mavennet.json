{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "02a1306a-7a3b-46df-9dd9-5679a0e01948",
        "name": "Clear Cache",
        "item": [
          {
            "id": "ce615905-094b-440d-a4c2-312b20dfb6d2",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0a7d9835-ee44-453d-b56b-18cf57cefaaa",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "1fbfee61-d710-41f0-aee5-1de181cfd1e7"
                }
              }
            ]
          },
          {
            "id": "8550d1b9-8861-49dd-8eaa-6da4820e715f",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7c034419-1e3a-430e-b486-41fbc87b5564",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "12f2e41b-e75a-4003-994d-5da4e18171e6"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "56153e7d-b91e-404b-82a0-f064c2befa37",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "3c7bfc49-b9b3-4fb5-b72d-bb0333284ac5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0c723d6a-ea92-4038-85e7-cfca005b779d",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d7ca253f-f532-4133-9586-79d6d3431188",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "49be78d6-228f-44ad-bdd7-b5134448ae17"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1ad7a30a-ea33-42f4-a810-39266c7be8d5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ac6d3def-b5d5-4515-84b8-da583e045a72"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1f2f8a51-c2c2-46b8-815a-d96f1139f13f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1f8d021b-b2f6-41f1-9b8c-7874d8a025c7"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5ec7e680-ec81-4fa1-8d44-b2dba0dc29d7",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "ec598161-1f6f-44a0-8941-fc817fe39dc4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a876ab46-497e-4cc9-855a-79364d515dc8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "832167a0-62e4-4dc1-b73a-7ca94c12e9f9"
            }
          }
        ]
      },
      {
        "id": "8f538f5c-33e8-497e-bf5a-7b340727cec3",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "a1725b8d-b10a-4648-8a85-c75efa18dce4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "86a1a1f8-0d26-40be-8ed8-9540e81e1fd8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3ed899ec-3d36-40bd-b6a4-9e094af1c986",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b5244c7-d868-47c3-9a11-0e002f373086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d8584ab9-0c85-4f25-a682-594e7a241214"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21f56252-a649-44a2-8b9d-934a9a969125",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ede40c2-383a-4382-b488-fe3d72c07b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4f9ff4d2-2ee2-442f-969c-5a0d7e2b703e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77c920ad-664a-4518-a051-234273090595",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c8e03c3-3692-4f02-a1d2-67554225fc46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6f05f280-e0ea-4602-986a-07a10e579a13"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cbc31011-52ea-40a4-a1a3-fac0cda9821c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "21640b10-39df-455a-8376-30b095d2c2d9",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4c39fdf-d1f7-4a04-932a-6fc98eea8602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4b13af15-19e2-40e3-97f0-48f9ee25b23b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4af72923-bb7d-4175-ad4c-87cf2424d2e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b51a3bde-3584-4e03-bbab-a781cfaeacb4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "881a06be-97b3-48d4-8b6d-ce77a293d726",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d28b3a34-903b-42ed-985e-96ccd4180870",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a4dc01a5-e70e-43a1-a743-0d824d2b0feb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "529889ef-cb07-47ba-a00a-dd749f5b132e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d47987bf-4650-4275-be7d-de49727e03c9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "1932720b-86dc-42b1-8be6-92cdadbfc526"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "86031496-776c-4ccf-8eaf-ba6a7b42c626",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "302f35b7-dd00-477f-b9bb-67dd2b60b825"
            }
          }
        ]
      },
      {
        "id": "27217ec5-4042-424f-a44f-69dfabc2c38d",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "8aa6788b-534a-45af-a37c-044bc1b5ad27",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cec8f8d5-5faf-4568-b315-b4fcdaba2426",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "ef480f62-4306-4265-8072-a1f870b60838",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c9b5377-4577-4f17-87aa-d8df599809dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15aede01-0eef-4a0b-aa25-dc89b6ddb8e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f049b130-35bf-4354-af56-9c55052b7361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a4d7dd8f-a380-40c4-b398-c84e398a7440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "446e4c25-75da-4cfe-bf09-31198cbb3816",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed962794-6875-461d-8026-53b6f9461329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a1fe795-70f8-410c-a3ab-d55e0ce2b788"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63b86935-b56e-4d1d-a8f9-6f913c98e6e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8de08428-0f6b-45b9-b010-03dbc925d2b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b0ec2d4-22e9-4e6e-8f9c-85de08815c10",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2186f299-0a4d-4828-8586-046a51045e80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bc48905-ab1f-4314-b80e-bd08ed4f587a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acc69859-8e7e-449c-b8bd-b592d23f2197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e7111f46-5a74-44df-a0ea-9570c919c678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2243beb-c073-4f1f-ac4a-c62ac1265ce2",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ad737e4-0d0c-4cd2-a6a4-291fd9623db2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "798f4074-9281-47fe-a3c6-929f7c407db6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52b0750b-dcff-4a2e-8412-a970c10662dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4b365432-81dc-4ebb-a9c8-af784f538991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdf1c9c8-25f7-4fe6-82f0-54f659eb2fb0",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc89c17f-5670-4e5f-b45f-f005fa5a2219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe1f4665-eb0d-45d4-af39-98ed463ac39d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c2b2e17-c34e-4523-ad94-4122d501b9ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "40cc4b91-2ca0-4d7b-b20c-e7b026002b35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eb2292c-0107-4a10-b16a-8e919f205c89",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2f74282-4afd-412a-81f7-1863fdc5cd4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "441daf9e-07fe-4970-85da-c835215932d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec5ce49a-7661-4ba7-820a-04959539e8e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a9497943-5ec3-4982-b3bd-89ddab33f68d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b83d6dd-4a81-48e9-8ca9-9e1ee7732947",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "242bd951-c291-4dbd-b0df-ba1e58e537b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41c4481a-41f6-4140-a071-b56b38650a7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4c1e911-cb4a-4934-af3f-c4b9d30a34e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "81fe3fcf-efcc-407c-aba5-9c0360a5a6e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4290379d-c3bd-4532-9176-ae29e3113fd7",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ad5a1fb-866a-4b9c-adef-463f687812f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e977b53f-bf23-42b1-a4b0-155279e48058"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "300e3314-933d-45f7-8662-d5fd564ad4d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f9ef4a70-4395-4afa-b6bf-3ef71adc534a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e727b53-3dca-4cc6-88e9-2e4bea9a166b",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ecda3a2-31d0-4229-8252-cb44a0113e21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "235f4d55-1459-45ac-871b-e22c8015a5bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b970723-dc0c-4cfe-825a-095ee06b57a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b4c27209-e9fe-41bc-ac6c-dc70c6e1b140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0f8ab59-0fb3-4700-acf7-961f8c33eeb3",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00a7a9b6-a9a7-4919-8eca-c7aa669411b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c311ea38-2d88-42f0-b958-4d6bce527251"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d9b0130-2133-488f-aea2-8cca106c134d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a9a10c62-485c-4826-80de-f965b94a4aa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de7729fd-ffa5-4eca-9538-f321938fa1f5",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c114038f-4114-42e3-852e-750dc97e60cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fe66753-a835-484c-9ff7-b8d52c426ed7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3c6b510-0103-4737-98cf-cfe7b96cb5c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "492aaaf8-feb6-49af-ade9-0f44d1e77fc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb35cb15-4a6e-46bf-9de6-36f72a0b3d45",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "024b0b9c-6ff6-4791-816f-f307a0e5b898",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94677a16-efd4-4caa-80f9-136a391c0ab5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9204f37-a545-4d4b-97b3-7875963b0030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "81e46427-4179-4613-ac1f-94b2d7898415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f59d18e8-c663-4d80-8758-7c7fe465327b",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6d1f692-de99-4722-a7eb-7b55acfc0a47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df9c8c9e-03ed-45ea-92f1-31ba2c9593d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22be4886-999e-43db-bfc6-79a81e7cecf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8088b4e6-694a-4f25-9d8b-197aaf0c2637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a96480b-2acf-4b86-bfde-c5a47e1af191",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40c4c75c-63a2-43d4-9792-d6208195e9f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1cbbc39-7e09-4eaa-9144-7931bbed9c40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6dc1e81-c92e-4eed-ae76-c287ad8503fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8158580b-4446-4ce6-a0a0-d9e97263ecd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd550892-4cc7-4659-8e27-8f6cece05462",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87c12d46-47b4-4892-a31e-7824e75b1b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5db35ff7-8478-4e4d-9344-9be28f3b28a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ed8665e-8a2c-4317-97d1-46f8c60f1672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aff46598-101c-4a29-9f64-e53c21ff1d6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89ebc891-3ad5-4292-9934-4b9bb5714910",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf2e6d44-e2ba-4f58-9341-fbff41268fc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34256cfd-605c-49bd-9843-53732c92132e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d7acfd0-9696-457e-8e69-08d0cac8b405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ea691cd4-cc6e-4a75-b678-db58bb20f7f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b9c7fdc-3ab4-43d7-84ca-fd86c946fc81",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4b85768-28ae-4dfb-b552-aff4b557bd94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10736ec2-58f1-4534-87bf-f97bd66557d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39f0e53f-db1e-4b51-aa3d-b07f99986d67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca1cf2bc-5116-42ba-ae88-47761e0db6ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a632ef7e-27fd-4c4d-9a32-9050ab1334bb",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69165cf0-8743-4f5e-8587-e7f8be2043d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f07bbefa-7477-4b63-be6e-c0418c2f8859"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30df28e1-f729-4f5d-83ea-4f0006a24e2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "966ed8c8-bdc6-4a85-b498-b048cc3004dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfcd9a1d-428b-4ab5-b0d7-51212c7f03fd",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e58d9567-daaf-421f-ad5a-a5eb0e8e50d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3113560-588e-44ef-906c-3d66b3d67a37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b847d9eb-22e5-45e9-9d17-47cb550791cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "afdb4516-5e74-43fd-a6a4-3f883f8777a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "663cc790-17ed-4f91-b559-6f07be25605a",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cc49f07-4e3a-4182-b587-2974324b075e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ddddd55-29d0-4abb-b48f-a22edc61a18b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3de306cc-3f63-4bd8-b202-a13cffd9c6bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fe29292-93a0-4910-8377-9aa63d25a17b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04312e1f-0489-48ae-8d68-82e7657d7ae5",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f3dcc4c-e0f3-43e0-ab49-cc57638d5a2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "954e6e2d-2738-4541-87fa-2767a1290349"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cca1cb33-5c6f-4586-aa21-5e633b05bc31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ef6de7d-aa9f-4c39-a489-f7da48a27db2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0905fcf-72b9-4448-a5e3-d183c0a68cb2",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efaa192a-0f5b-471c-a233-1e09bd3054ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f650a5ad-b2de-49ab-a803-70c7dcf41cf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9399861d-d56f-4bca-8a76-bb6ff949fa2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc59e964-7bc6-4182-9b77-4558c4d9b771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b44197c9-e7b5-4ab3-a8b5-bbff65ebd777",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "809b8f64-9efc-4373-aa62-bfeeb25d3745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d242b7e2-f3e6-4b23-a7ae-83cb43a401ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87010977-b67f-4b58-a7a3-0abc5eb22bd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2b36e565-f384-4b0c-a16f-c63dce8882f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c54dd96d-103c-4313-89f9-5999a2428e70",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ae5845d-21d7-483f-a6fd-5264d0c682b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c1788c4-142f-479e-a68a-0bf41e7be47b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10ec7f34-3b1a-4e8c-a7d9-52cd7677fd8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9be122bf-73b8-4ce0-9026-32312d1b49cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93c1d71c-0067-400a-8f7c-e535c582bbeb",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60fc44ed-3ba3-4d97-89e5-2a6abca46809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99c13c6b-c70c-4b8e-b95a-57daf72dda0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be068180-ee8d-40e5-a290-215488afc7d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a04e7fa4-7bd8-4e86-b371-0b34420dce93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb84bdbd-10a2-42e6-b873-7c7756736d5c",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24422b06-5df5-408e-bfc4-6f079ee50e6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ded377a-88c5-4d94-bcb8-f81b7d4bb55e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0308e70-1ad3-4a7c-8825-7f36b8206d4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "21fe9dac-b33e-47a0-9135-d71ebdfe5a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cf4e415-5969-45a8-ac68-ede067254bec",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3004828-7fda-4b6c-81bb-e33ae49d66ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9221e173-8463-43ec-adf1-bf032f16ef82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8ed25c5-ce7d-42bf-abb6-e9afdb58ca96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd96c50c-768b-4af1-a5eb-b98e7c7b8980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a197fec8-acd5-484a-8fb1-b69ddddde55d",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d12f314e-3ddd-4e1b-9c2a-333ae084ecb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd872a91-64f3-4335-8047-18c57d6458d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9be89309-482e-46c5-ae5a-f7f9ad97c6a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "62b6bac9-6bcd-4890-a705-3aeaaefe4626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b81157bf-e066-4f28-a389-b5987c2738c9",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aeb7413-58dd-4281-8395-e0e1dd407ca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca65082b-7a9d-4c33-82c2-6b451eabd559"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc97949b-eb4d-416a-a7c1-0c7461426164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "43924842-59f8-4bac-b855-cdb31e5eefde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2fb944a-89a5-4491-a55a-080b1f3ed479",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c45605f1-289b-4cdb-91dc-6002ff46b567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec9441e0-9397-4387-a768-94007cbffe71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15939321-800f-46ad-98d6-a9a71faaa339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "9658db49-5c3b-4bce-b6a3-f1943cb558a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b66a2324-3671-4500-87b0-c7bfafb4b77d",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b4210d-efaf-49d9-a41e-d07f134d75a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40e4c176-2797-455e-adc9-b37fe0d405b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3940dc9-abb9-47c4-b5c0-692b23ba03c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "468c153a-ec79-4b10-bdc1-dc37ed9a685f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dd49f4b-39f1-4222-80fe-18d78eff2f30",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e91334d6-5337-49f5-b5b5-f524093780a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92f62e31-66d7-4ce4-855a-7f4a2165c7f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "179c753d-2df8-4f08-beff-49cdf0b6e941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "771af2bf-7e44-46ab-ad7e-ba998a3d5dd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3f4d6e8-a3de-4273-bcca-6ac642215d63",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f7b3a9e-845a-46a7-9801-b941af22237d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4d7e33f-332e-4cdc-94c3-d157c7b3794d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cbe2bb9-165a-4e8f-b2ca-5daa0fbded7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6b4ce65-839a-419f-a933-9241a3b2cef2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "896144af-afdb-4315-8cd5-4c53c0c1aa03",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dad04a3b-c221-4bdc-9583-12db628cbe0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df10d233-96f1-47b3-a0d8-2d9673d2b46b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11fa537f-7d30-4a1f-8e33-aead94773bf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d275e83d-2881-486f-baa7-633ad259e5ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a570cf54-2d9e-41fd-99d0-a371db4c71bf",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f598e38a-af2e-4ba7-9362-2e7aead9ccca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e29b6363-7aef-4938-b3bb-10e6fee8a3e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b06838f-9b68-42fd-b8a5-a65e6fdd14e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "ecb6ac92-1379-4232-85d0-7bf9b9bc6fca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f4744eb-530f-412c-8301-dfaa36762985",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77c9bd25-25a1-47e7-a405-182c866d43e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "42d55236-8b9d-4e96-83a4-bd7688d46ed5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17d788e3-4663-40a8-a1ba-718d11f559e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7c6dfc93-9605-44d3-8702-b92edfee273f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59656a19-d8bd-432e-9442-d2b5be97ede3",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d334b76a-0290-4393-a458-76b53fa46681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93c08f2d-53c1-4c9b-b261-554c77a35c1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5942c55-9d0a-4804-8409-f264c482c39f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6971b6a2-5e13-4ded-aceb-d945a9b4fe29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2c1c2fe-575f-438f-b8d9-5771d2713dba",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db6574b6-0cfc-4799-b848-9fecd2c06e18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eccf4196-f35c-4797-9e32-36a31b0b3e14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8abde8dd-5158-4a4c-9d8e-c9af17011771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "536d2b7e-81f3-4640-ac73-dd2d28bbaa2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85b2a72f-a656-4c9c-a842-3668cdae5bec",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2175946d-3e31-4337-931b-9be7826a9ac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb119280-039c-40ea-9d1e-4cb2b775b08e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb9e7f87-dfe8-4ea2-83a0-4d153c9f13c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a27eac1-c789-4aa9-bf26-9ccce3fe6311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "535c9582-e0bd-463b-a187-cb489b23e18d",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10a0a829-3659-468b-aa4d-facca002c493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6509bc81-858e-4b0e-a55b-78c35b76651f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89a74615-e59c-4b38-bd17-583c01ea1c93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "91b6329d-211e-4afa-a83a-d523e8608d8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10ac923e-cc55-436f-84cf-cc5fbceba3fb",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ce70f0a-dd99-4dcf-8978-899887a30de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "976ad1ed-0215-4ef3-8ab6-dd7507b0f651"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d8af379-e830-409f-8c72-55e28b8615ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "dff2b412-51ed-4c51-89fd-91959aa053f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "615cd679-d052-4c13-b5a4-efc0a2a664fe",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e30c2f75-a61f-4f53-b873-d76221b1874a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "722cc481-d124-4bc7-a15c-2873328c23d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68a4ca4e-804e-4f3f-9e60-febe875c6ea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "74c4403c-b221-43ee-9554-6854dedade02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf1bfd16-837e-4eac-9402-0b03be3825dd",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0b8ff24-5559-4f1b-be29-4abeed8a607f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8083080c-e43c-4d4d-b4ed-6192efa2f1cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "204db3f4-0712-4581-bde1-8c4379586f3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "4333a598-0154-40ca-8589-09c3c1e73b65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c89c0c2b-79be-442f-b1e7-fcc29b861661",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09c89bd7-3440-4f02-a068-509a1008c4e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d198015b-f5b8-4910-bba7-cd28166dcdfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d1807a0-3164-402f-8f92-16e09ba438c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4aab5fc-9bdb-42d0-8029-7cf6ad335f87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ec78dec-f2d5-4a2f-a83f-d77246b13b7c",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5e9022d-e62d-41e8-bf9c-465adfc9a179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f7229e1-8678-4df2-ab3d-ad1d5747425d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e5a1314-a9d3-4cc9-8309-691a98cd13e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d13eafb4-714a-4f73-a6fa-772e20eabb0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1c4f9d7-43c1-4441-be1d-5db7cedabfe0",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0a55f04-139b-4e8c-a59a-47a7b1f4b596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c020ebe-ff75-4c62-a907-d1ef67fe4bea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1e6e518-86ed-4c08-85c4-4c17f66faf5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "28bd823a-019c-4ad9-8aab-bac873e06897"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9d69a7b-8ae5-4ca3-9b6a-b019554aacc5",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f92b958d-71d8-4bf1-b381-164939450caf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ca1672d-d320-44a2-907b-ac6084774199"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7e41534-f5ef-4621-949b-dfc10b85f0cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "263aefd8-c5e6-47df-a704-e66b1d4a79c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03d3cb68-eb76-4658-8c3e-5de184aa41d8",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da4f3326-eb9d-4fcb-81f8-26a44b14120e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "834a2df0-95db-4d76-af30-863c809cbc8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acbb75d0-f866-4560-ae3a-48e02dca04be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "32be8edf-d51e-453d-ac32-3331c52966ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd4db294-de15-4f5f-b0e9-69f14bac3be7",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94c5776f-e332-4c60-8faf-31e7a86ed1ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e2a8583-50b4-466a-a22f-38bc54016bb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d0b141d-74f8-485e-9b24-745e405cde95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5baaf9ed-a19b-4178-90f4-3ef457fc2b1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7b16493-00a7-486d-a6d2-20e3b7568b17",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06e18ab7-9b99-47b1-acdf-7da4894a0eea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3928759-39aa-4754-a77d-de1f31d1a056"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a4a677c-55f1-4b32-8bc0-c56a0bb4745f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7172bf00-a0c3-449e-99e4-f27252d01f60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ba4fd8b-9d3f-4688-9902-5c1919cb3446",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "570687e3-66b2-446a-ad23-f08c813cc320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "272dfee5-f8df-4e7e-bc35-7e1510258224"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e68466be-d0d0-4f1c-ada3-51708f057fd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "d734c26f-ff0b-41c6-b4bb-cd0afb8025fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a0dfaa1-c244-4f7d-915f-2c535607057f",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bc06841-5a4a-4248-8d83-e1fbba9015eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fff16ea9-9145-4f72-9c34-c71efbc6d737"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0db732f7-10e4-4d20-9089-75f148853600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "318f8aad-da30-49ff-9922-57b0845de037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f782125c-918d-463f-b119-3580baf82e5c",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4df07e13-b1e6-4ec2-9ced-ce3943303393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19882a10-7168-4297-a108-c542d69d61e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5056f897-86ff-4aa6-a0f3-27bfe6cba531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "073758bd-6845-4080-a052-e1a910820087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "481eaa69-c046-474e-af75-88761f003602",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d0aa05c-1457-4f04-8f66-61dab2a74861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8e963f2-4b6a-405d-87b6-90401ce3cbd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7c88f8e-49b7-427b-a82a-23e8647cfd10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "77100e8b-3c0b-45f5-a43d-a142483ef746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "769175a7-23bb-45a6-97fe-0172d1bcbd93",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1407981d-3194-4859-9393-860a1b12bce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9e0ecb3-c5f6-47a9-99a9-d95902939791"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eefdce5-b588-42a0-8b56-1eedfb1aa123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "83086a1c-860a-49b3-9929-f0940318a1b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b18daf4e-8ca3-44e4-a3d1-55875bba408d",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a46ebe-2ed2-4c3e-af49-3a5cc56304dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d20227f3-bcdd-4038-9303-7d93c4937f00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6641c07-f294-40e2-9593-1870f8040c0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "0d9f6136-df24-4393-af30-ca3a61b8fd28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b2673b2-2cdc-4810-9495-5aaa2daeafad",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "103b0d55-b19b-41ab-8ee7-b0cadf7c2f73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75025fd6-89eb-4ffa-9240-60ce32d02450"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd00b1e8-cbec-4e25-9794-44461baa32e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c05b314-df1e-4cf5-b43e-aafb6579deda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "513a355c-bf83-47d6-8166-46558cec3b15",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb125f8f-1440-4b48-a4d2-b30b1e941701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "356258fd-b84c-44cf-a911-437b307e620e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a8c97a4-0e02-4af5-bf06-864f47057ac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "011c0169-60a7-43d8-bafb-83ab522a2ee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ec6c819-c641-49ce-9293-510927c84279",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c08e028-4e85-4a74-971e-6290b8525d4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b28b0e6-acfe-4a6a-b2b6-774e8d040187"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0df8d554-49ff-4bc6-8ee0-b3807a6758f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6450bfe8-7b9d-4150-9366-7f5df3316abf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0d1a29a-943c-4716-89f9-2eaf27b3a231",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c19df385-365c-4ad3-b5d2-2968a63acc23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e11fe25-045e-4287-98eb-36efd67249c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6353e779-2c64-4b17-b6d7-dc933abd3b61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b09eaf9-2158-411e-8a62-7f22fb63e746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26557d3a-c108-4e6c-b0d5-37c6fd3ae1c0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d56113a-7567-4781-8b3d-0eb93d2331e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0857fc2-9e99-4d72-b916-b1779b163d12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37736d21-9eaf-457e-8715-8bf6045c2d1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d90fedf0-922e-443a-beb6-c02faf0bc421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af500361-51bc-4c8b-baa1-1221c7c47050",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fd4f6b0-6d4b-46ff-8b6b-5c194964cd49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80b277f9-c573-4433-8af6-73d312c3555a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a9ee095-92ed-49e4-b8b2-570c55f2936c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "72c0013e-5ea3-4868-abd7-e03731456ffd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6ca7a98-1838-4d10-a6d8-783ae5624963",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "028049cf-f5bc-4418-909b-a58ff9be3e6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43b4c697-c524-4e64-bcf9-99c506c72f7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d18f4760-7367-4627-ae0c-4acad3ead4fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e480b60e-9b54-4081-96b8-5cabf71cab73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b906dd79-4c5b-43a2-870f-907a94d75299",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c764dcf-2808-4d3a-961e-d3a4d4c10041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07b945d8-bd06-45e5-aeee-52360143cb58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "717b2520-83a5-4e70-bf83-643aeeab6809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3bb51e1d-0916-4ca5-85b1-bb5c3b87356c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f35034d-6d95-40c9-a19b-19749b1c148c",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b816936-8332-4fee-a133-9b82ca329d57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "806b33c6-4ee6-4b0a-b0f4-73252a393b6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ec44f0d-50aa-4ac2-8f5b-598cd5bca8e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8b42ee5-8d2f-4bb7-9972-864dfda4a90d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cd2d242-adb3-4963-bc10-e576779034f7",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dea7298c-5031-4907-bb49-f0a8e18af16a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2634bf0-27cf-48b9-91a7-3e8de183efbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfaf5ee4-56ba-440e-b28c-c693a6112e85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb128bbe-97fd-4e3c-b49b-8d52249baa88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82d3d154-888e-4d78-8763-a38e3e6104f4",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f16c567a-6dce-4ba9-a0b0-06eb2f73b06f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "382de5e3-3e51-43fc-9e35-46038236f83c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c133337-3ac6-49c7-b766-218f5ed6544c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3910814f-2a14-4428-ac8e-8e818bdd2f39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96c4e084-29b5-496c-a3a1-be3921b0ee2a",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "984996ba-1306-4061-ba3d-94c523010265",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc378c27-078c-44ee-ba8f-7d7ec6223217"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3a29c04-d996-4dc2-bebe-d3fe4bf26707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "be755a20-2982-4bc6-9516-f1b091aa1e91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c066313-6bb3-4ba5-bbfe-d840b84224a6",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47eaa096-5563-45e0-ab28-95274d7ca339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df6dd895-206c-4dbc-acfe-c979b85710ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d69e7de6-7516-47a8-a8d5-e47e97a47f52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "33adf79d-9a85-46eb-aa49-d25d0e298da6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b854e04-cd3f-4433-9b04-6692b7c73898",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a42d2886-422c-407f-87fd-5321021dcb4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13b081f0-40b5-4244-a270-53a25166f012"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beccc336-79e4-4c43-84db-df73d54cb74d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9254d7d-8a8a-4a89-ab7f-3be83a653020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b104d721-a33e-4e84-a9cc-729a071b012f",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9cb0cc0-ba81-4a5f-9e66-360e3280a953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "068a1f83-c6d7-4249-80da-3c1f8272cebf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37964229-2e7f-4494-88ab-925a1724de87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "327ed761-7aef-447a-946a-886b5521a3b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07379dda-71af-4592-a568-bf6d50e953f3",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddc945a8-f4db-4672-97f2-de9ceb7e7d47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5aa622e3-3265-4020-999b-9e28744ac960"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a9b7513-ccb0-4c93-a312-02daa1685c3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6bf6d6a3-306d-4c24-8f76-f2baa1519bdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfa2a037-e43e-4f46-ab44-92c91df67b98",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "549c09b5-e724-44fe-a281-1f254e55102f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc09e864-33f8-407f-ae36-0b237d25b9ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36cfef67-1a73-446c-b2c8-e5295b1dbadb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "720c18a1-27c4-46a5-9762-188ae8358ce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "730df3c1-7adb-43a6-a204-49bf45db3044",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2677b24b-fe46-48a5-8246-74ba5bfd469e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62fe5172-39c6-4b4b-98e5-4d9f5d510065"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc755df2-5408-4ac3-87d4-5fac806cc355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6ce05579-bf8e-4d9c-8988-7377719b77d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c4cfecc-c75c-4853-8d49-4121600bb8fd",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80782dfa-1913-43ea-8124-61ae1265f711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e08d7a7c-bd1d-45cb-a71e-94aad31cc6a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef46989b-3eed-4fda-bc97-b47b4ee683ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2341e928-54a4-4a6b-8b47-9f62ee870bee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45c6f75c-9efe-425b-b9d7-414f514e9888",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b873c50-5a38-45e5-8b00-a6e22f20ec9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50e87bca-8ad0-4a3e-a7d2-0bbccf45b1aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6496206-d009-4d96-a473-1cd85e586ff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c08fc45-1099-488e-b428-3bda73a188cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfed0965-aedc-46b0-a374-48171250229e",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5432b37f-1cec-45bf-973f-bb19af93dece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2abd679e-fc49-4e6a-b4cf-6f130df6b99a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3244b12d-fc07-4d08-8255-f30e5f8bca1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7079a011-52a8-4a71-b6a6-5569ba5d4ce8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85bf0bca-280e-45ec-bb2a-8da300c83a31",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e987d8c-7107-4759-be4d-60ec7b9aee17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d94ed35-a51a-4773-aac9-7c358e2d4a1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d54a7a7a-7560-4c5e-b72e-cd4bba1f84cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d15f4f8b-dbb4-4cb3-9de0-66123498a28a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2bf92d0-1e02-43cf-8969-2daff7fa1da2",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e1f2f36-6511-4065-bafa-6b0d5584a253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cb525b0-06b7-473f-bc26-358d71b0868b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5171cf48-f51f-45c0-9dd9-b83eabf8fbe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b06d8b70-6622-4cec-a632-43552c1e33c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dc9b251-5239-42e4-9e2a-efdffd26a8a3",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30133587-0fc2-44a5-b740-376d48ef4445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7993434a-02a9-44a3-a634-7517b012feba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba135210-9335-461f-ab26-665bad317dfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "15faee8d-c5a0-4eb8-8cd5-c6eb3cc89b68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78d5f036-86af-4cd4-9eef-98758fbdda0a",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b1d9528-756d-494a-8298-b9ed7f1ee3d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa7d0702-12f7-4e02-b672-7fa8fecd4e6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5c5f17a-eea2-4df3-afd5-1ffa592738c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "58d2c6c1-2d3e-476c-beb0-42a70217f6e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a041e7b4-3c25-4eb3-911a-87bc760d5916",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "599b69f6-c7f3-4a39-8ca2-aa3e57c1aaa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c84c427-0048-45da-91b0-a68e0cc11fd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8343a807-b481-4825-abce-3fa982907322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4e04ab0-5b68-4a9a-9872-baa1f8fb3582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55e1629f-89a2-4ba4-ac8f-8d503bd8bebc",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38e2a5d9-dc7e-47de-ac85-a21cd2e00e29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bc6b0cb-a0cf-4c75-ad13-61867ac82354"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c89af82-418b-4f08-9a0b-77714afffeb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5cb63a1e-899c-4ef0-9539-5ecd130720f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a13a1cc-6537-472a-9c5f-dea65ba08101",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26e75ecf-987b-46db-9719-33608446b769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "562c2add-89c8-493f-9431-3d670b2a2e5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed94a8e8-4aed-410d-9066-a8a7c83e6e2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8330ab97-104a-4ee0-89ac-6340e262ab22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bdb5266-1649-4c67-85e7-cc121ef6642c",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "140adbd7-ff7e-4dd4-b6a2-166c92de84ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c8db4dd-7548-4449-9e53-4f9195a942cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57f37a41-1586-4f0b-b7f4-ee57150aac6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a45b2cdc-6a93-47b1-94bd-664674e72caa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "310e9b8d-de2a-4229-9cfd-f4701c093752",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "801d17d7-c90b-4ec9-950d-0861e24aea62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d8175cb-5d6f-45aa-8c1a-b02c63885b20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff8e93a4-ab76-4396-afb5-d0edbac567ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "301a6f90-d570-4c98-adde-ddd90fc0528c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f975254-dc82-4ba6-98ab-f6026b50b2b9",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c7603b2-39ab-495c-b8fa-efd8d4c59509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11503046-a1b6-44ae-bec9-ef3ba47517c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "785d4e6f-aac7-4b8e-97b9-a968261ce3aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e4c7e75-9e94-4ec6-adbd-fa6e5d7b37fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e85b7e3-9b28-450e-8e5e-5673715cdb15",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17ead47b-4da5-45b1-81a4-baf5bca923a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48098698-3286-43d9-b2a0-970ccdabc593"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5c23473-03cd-486a-8fb1-d8ca9014ca23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3771e6bf-5620-4405-865b-a97e9d52e9bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23c49ce5-7aa4-47e2-abf1-c2df05f5d7d6",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d54437a-0428-4e6d-a72a-745265243b83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6ff8d92-68fd-4c4e-9542-17c3659fd459"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8483f60-5c2e-43f9-baf3-fb0edd4e5fe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "26430fac-566d-48ac-a207-12e154375a34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "632c51a6-4181-4cd0-adfd-ed6340b5c680",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "049e8308-225c-4689-999b-03cc9892f0f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe14a71d-5e01-481c-943e-4bd23ed3b783"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6562520a-50ef-415c-8bb2-29022459f34f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "66d9dc24-8ca0-4ae6-b509-49e8db4527e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97b63816-64a3-4668-bbe1-8f2b8175cfe6",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2160684-f897-49f2-9b12-631cbe1df6f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ab30c62-d8bf-4b80-b51c-75861e898fc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c453eebe-c75f-4221-90d2-bc836ff42077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "abba7d02-95cc-4cbb-904b-2d00f73f66a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d92f326-722c-44f3-ab31-233b84bfaeda",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfecf827-9068-4958-b285-cc00ccbca566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "4b117c2b-e54f-4148-8e8b-61e73faaf250"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfb7ff4e-c0eb-4d22-8b86-d57b1e6788fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "79864cd2-af29-4f2b-8dfe-04a151a54e58"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d5b52051-c8e8-4a25-abe8-ff8decd4dc67",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0382ca84-795e-40d4-8467-c72016e017a2",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d201aa9-8f4f-4066-a108-80ee0c4afd67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0494a78c-c904-4acd-93d9-76eb9a99e0bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "519ea5d0-e57b-49e3-a99a-0ae3a2f458f1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e8f8c06b-32ad-4bd5-a3b7-aa4a6d912668"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2c6b924b-8971-46c4-bb1f-c3e1001b1e33",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "28d7edd0-1ce7-4960-8f71-f47900cd6bb0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed8110da-163d-4eb5-a04c-9541ee04478a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "37672be6-730a-4695-914f-02f809f07434"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "89579662-f5d6-497b-9519-4f45ef733151",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2a0482fe-bc47-4e70-bce2-2eb364cb3bba"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "21d95a7a-b2b8-45e0-8944-2ec714fa9862",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e855ff01-af92-46f3-9afd-4e9e0afb723d"
                }
              }
            ]
          },
          {
            "id": "9f299843-3d3a-4ff8-bcb4-31271f75c077",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0eef6e1b-4368-4e2b-959d-c768e2998e0b",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "b5ba7843-231e-4887-9db1-7acad0577430",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0d9b07e-6366-4c6e-b610-f67c84d3ca26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "4cfeae1c-edae-4304-ac6f-c68ebc2a14e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b78d0150-faa5-4c9d-9b97-0960520608b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a80be27-4beb-4685-a501-248418ea0fd2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "29edc540-7891-40af-b878-d56b428fc062",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8f7933d3-4f3c-4659-a413-b810af6f2b26",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "efac89a1-20d8-45c1-9b57-b372f5797cf5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b3cdd47b-b7f4-4056-ae14-ca002bd12da5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "52af2098-de91-4498-b7eb-65c065e815e1"
                    }
                  }
                ]
              },
              {
                "id": "fb0d61d9-308f-4039-b3eb-d8a044ea0daa",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "08953294-51a3-4ac6-97d8-39ddf567b466",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c905ec9d-744a-4ed8-9893-e7ad27044129"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1df09d2c-bf06-4c2f-9e47-1ad689c43eee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "42eb1580-32b8-49d5-a983-e09710d46a65"
                    }
                  }
                ]
              },
              {
                "id": "f14ca8b5-aefa-437e-87fd-52b531c85b5f",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e084a7c6-0057-4c05-8513-ed8c1940bd59",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "28b0eba1-22b3-4158-9bbc-b491b4f6adfe"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f543f8ed-9b0e-453a-a12d-d92fc9d0ba63",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fb105f69-d931-4981-8085-db1de69104c4"
                    }
                  }
                ]
              },
              {
                "id": "722296bf-0a90-494d-a2b7-97acc53e9fc3",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0971b666-e053-48fe-be14-d15580983044",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "da9f9746-49f5-4023-8ecb-264800e793e3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f691a123-65b6-49fd-8065-9313d834ac81",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "fbddef6b-d6e5-42b0-87c5-a05ef0c15947"
                    }
                  }
                ]
              },
              {
                "id": "5276a452-f45d-47dc-ae65-ce00f3b2e859",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "08731645-5b8a-4216-a103-71479d431b42",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e499d84a-eb0c-409d-947e-8e8012e85fa9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8409a24e-b7ef-4cef-808c-966d3656fcc6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "7149eff4-3311-4051-bf4a-08df71134e9a"
                    }
                  }
                ]
              },
              {
                "id": "a1dff383-80a9-4bbf-b0d1-b10aa324775d",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d8c2cd55-7496-4eb4-bbb0-24caf4c18b8c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "eabdf2dd-7c67-4061-bed0-19307f8a1cf0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c635cbb8-13bf-4259-b179-875d7f5f619f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6c9901e1-3788-4684-9f72-388c79d09fbd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ac35ab61-cc9e-4c41-9c46-01d903a3ecd5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d76a855c-8290-46ca-b812-fe1f66b3e5eb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0b270461-e979-426b-b8e2-c93dba830661",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b643d729-618b-467f-bee8-563af77275c8"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "14fa656b-2954-4f58-9b74-6d7adc4df97c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "8c1e04d1-3d75-4755-ad59-d5d921c81936"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "016b12a1-653d-4c32-9940-075511ea2a74",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b6a13796-0f68-45f9-91c4-4852cd2edd4c"
            }
          }
        ]
      },
      {
        "id": "e80dddea-99db-4aee-95b0-f73c98f86f80",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "7ed5ee75-5876-456b-879b-495ce90958d9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "76c36305-a650-4c1e-bc5a-b8d5a1321d03",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6d35d44c-d1aa-4dc2-8322-6c41f484015f",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aabb3942-cc0d-452f-84b6-a9e47f862a49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4de195f3-580b-4b5d-ada5-829760bf3a55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d641acda-b4a4-4218-bb6d-d6a7f51237a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "76625628-84c9-4e63-a10c-771b3b721504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fed65449-805f-4ae2-92b4-57ba95eaa627",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34fc4f81-8802-4c65-9d5b-ed5e2d8a2a6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "561ef492-c89a-4af6-9a4a-3212a802ee01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dccb117-5c4f-4fa3-ab71-02c3aee1e795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d85b36af-a6fb-44b2-85ba-21b318f33e56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "637d1446-a5cb-4611-b418-c6b26dffd6f1",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15cf6e86-a3b2-444d-8ed6-68fdeaf84dcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ebb37ae-e528-428a-8079-07947bb9aff8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daaeac9d-c020-4c66-a40c-0b560785d2b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c5de738-efbb-4057-bf67-935a672aaddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbf0a27c-052f-433f-9cd4-6a416223f4f0",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86c7fb07-4e3c-47aa-94a0-980f0996c661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97738733-fd65-4ada-b9e6-f3ccabf0fae8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "571c6895-d431-45e5-8b30-1447d1d70c6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "57dcf0bc-5dcb-41d7-83ba-8719327d620e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "637ccd79-bd61-49a0-8762-121ca0587d5c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9125ebfe-1c89-46b4-80d1-ad3e27f7602d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "510bf9d0-b444-4297-95b2-bb9d8f9dbd57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "585dc743-224d-4884-9ef9-4698cb2d9503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "78395923-9ad5-4c03-9cd9-51a4e622a805"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d0588f1-2cfb-4fc1-9bec-7802710231d1",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ef7d727-35ee-4436-9dc8-dfc8b80c40a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7f8618b-c6c8-456d-a52c-ccccc3c81754"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "810e9a85-1502-4246-a3d5-f9fe6def228b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8b06397-3f09-4d2a-88da-97468a681e9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9a46b8f-ad53-4171-a34b-21ff2f7fea02",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7466e98-2df6-4982-a684-e9ba13b3158f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5f3842c-185a-4369-b94d-37488be731c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "432f8a38-e954-43d2-98ca-3728b806af30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ebcdffb-015a-4cb7-92e4-9ac5aaaacb09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2669ce9b-5f01-40cb-80c7-20a4c98b12d0",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a1b7878-1f1a-40d0-a265-85100c8fc757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d98556b-9aa2-4fbb-954a-a8d143444723"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7b5dcf3-e310-443b-9fb3-14acbe12e21e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b413fd1-846d-4986-8919-6c0e158892da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d8aab3f-90dd-4c9c-9050-63ef158b38c4",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e0fd338-90a6-44ed-8432-333324ee70e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff076156-8dce-4ab9-a68b-aa4a1af8121b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13fa59f9-9d9f-454a-85e6-5aa5e2830225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c0e4074-afec-49b3-b504-199916aa0e4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f5383de-be23-4145-b713-ee977c3a9c89",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90251aea-4dd4-4e09-9da3-a827536c8877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25369f02-b0f8-4c82-a7bc-a14f182e286e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c35d5f23-55d5-4bf7-a84e-54f37b99ed38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "22e85047-c287-4147-9375-4c4a09b07ae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa63f67b-c0aa-46b7-b2a7-9c18d6bbc91b",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60539688-8ec5-4d73-822c-a56f88ca1230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "118d7a69-8751-46c2-86bb-d24fc12f7105"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd04a9d0-31b4-4357-bcca-106e50203df8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "30cbf712-352a-4315-8e9d-67c3e8c64848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "470e0bf1-c2b6-4af9-9100-13ffbe98c633",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "705026a8-e827-42d7-afe1-fe49a161084b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68c08363-d6ab-4664-b7d9-ad7e8c479462"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f63f9a97-73ac-49c6-85b6-501e584a369f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f38768e8-97c9-48fb-9112-a7dc62d122e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07d9f24a-0cb8-489f-9e6f-ff62493dec47",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e04cb50-eb51-492c-8c9b-c2f70587b1ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d97945e-e4ae-4fe3-b93a-e7c40989a91f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca5605f2-b212-43c5-8d4b-29ba1329706a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "98193bdb-4339-4a31-9d88-0554f92658a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "284ae481-611d-4169-82c9-21ce00295a5d",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb91c21-fc85-4e9c-9150-756284b64617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34e7e851-185b-4ddf-8ca6-f656997b3f19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e47f66a-f4fa-409a-88d8-c1f2b69b2501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2b885c9-5477-4531-bdb3-5b8cfa2cd629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2efa667-6a1a-4c89-9197-d808eae954da",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09a4adc2-bf44-4914-a1ed-c7df9a49c0f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4428147-79b6-43fa-a14e-71edc74fb05f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8530a4e1-f041-49f3-9f66-792f550077ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9902e27-60b1-4d8c-8f3b-1437ddd24119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53c334b3-cf41-45d2-bd28-91f7d5a0a8e7",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7414378-f98f-4730-96dc-76c5cd624965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3490e00e-e0af-48b5-b263-88e0388cd64f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48cde8c0-3d03-4751-828f-3425e288fc9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e00a2ae6-0560-4438-8b2e-face5bf81567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a021fc53-7715-4745-a970-750f721029cf",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85219bc1-d70f-46c4-bdc4-645aafb332ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f01a8c58-3983-4911-b42f-f5a7ec6a0446"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ab8d928-5bda-4a40-bca1-3429effb043e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1cbc9be-45ec-475c-ae11-4e4cc67e3be8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d08b62e-b1be-480b-a775-815a4b570f4e",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95b66c9e-a337-47b8-a0e7-e9a66072e832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64210f2b-43c6-492d-a8fb-ebe782eeafbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "864e7270-3c71-4267-80c3-1407825b794c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2af49edd-6281-4d17-ab03-79795ac77620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cc1e3bc-7359-4654-8d09-75a0dd8aebc0",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2740c021-f4b8-4277-9ef9-2c16a2e8c588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8081ab68-c19c-4c5c-8f1e-6f1996c19f69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3f7295c-e021-4daf-865b-37e5e2e184a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5b2d025-1e47-4fcc-932c-1d56aa2d9f20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f1c4253-3822-4c95-8ca4-7172846f32f0",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0a565e5-0928-432f-b1e3-e255cf449555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d14e5426-1359-42ac-988c-c643d2e8173f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3399aa4-18e7-4b5b-b686-7fc39127099a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af14d7c2-1321-42ca-9976-4ed0b217fb06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "991e389a-4d28-4a7d-a3c2-5d379f41cc19",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e72043f3-0fe5-4e97-b463-563c0a8bab62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27b3b0d7-b467-414a-a07d-73ff79c7f3e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f08a9f6-d3fe-442f-9bcf-1ab00c79803d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5203a5e2-b24d-40b0-91df-dbc229dd79c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a098ac6b-d081-438f-9816-8d156534235b",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56053686-344a-4e74-995a-22364f7d6192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a45786b-1b13-4b6a-8315-2b875c0debbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0661b14-3dbb-4e09-a3c8-5605f2d6100e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "350a75ed-f463-4857-a289-1d83ac279129"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04c1bc45-5b84-4780-8592-95413cfd44d8",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fea8581-b734-4a2b-af72-aa48370a276a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29162896-8477-41e9-97f8-0a62b1a10fa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf3d39c3-a473-47f2-a5f2-361e9de42f7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aab378d3-d308-4063-8b43-62525ea6eefb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad53a060-5212-4b71-8695-568462c39fd4",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87248011-c693-4ba3-ba3d-dbaea0aa12a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8f04164-aca5-4c7d-b764-a5ec789dc888"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f12648c6-bfe8-4f7a-8149-5c7e4f4cf73d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c7a1a7a-84e7-407e-9d24-867af7d171cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a10d20cc-22be-48e7-b509-5744e35b2b2d",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bfeb165-2259-44d4-a247-3b59e6c5fd08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9b82e77-e7ca-463e-b3a5-516ae34a7d55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e18a5738-2300-4c87-a21e-5cbe4e6d66a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "63d0fc2c-ab9c-4fa3-a60f-57324a0337cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b4b7f45-b479-4aa3-9e9c-e66893da8ed8",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7353be5a-4dc1-4371-8ef4-3906c14bc3c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b28e9d51-043f-44d8-8c59-3aadec52c820"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28a1f2dd-2adb-4cd5-adf3-f02fccc269cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d82d33e-f0fd-4cf3-9f02-11b1f1a92170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d94118dc-4170-4bcc-bec4-9a3445d1150a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f72fef9-3f3a-4fd3-becd-8ff9101c88a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42f5dc8c-90cc-4ecc-847d-6248083f2996"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99db9841-400d-41f7-a73f-64b4045421b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fd33625-368e-4991-b346-be22521e0c58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e15bf5f-1f76-4c6f-aca8-77e8cd12d420",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75eb82a2-5dbd-4769-8050-254c75888193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17055900-130b-47e0-bb72-ea85ba84cacc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da6e48ac-5d27-4dae-8f7a-68268b633911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38be0521-6f13-4408-99f6-0eedbb83929c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7033e7a4-3f0a-41fb-9ab9-67250c78cf2d",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ec25dd9-f4e1-45a5-b388-893605ce0535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd0e67e8-1d42-44da-987b-ba64b49ab8a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ad1122d-51b5-417c-8911-1fa61fa2cd93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3d0de27-26f3-428e-9c4f-09f391c4c163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a24a534-5553-4c87-a9ea-3b1a97061160",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b078e7d5-2a37-4c79-b59a-3d07a148b298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6ae0f3f-8b58-4ae4-8445-89ff1701e044"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "484af75b-5894-4b77-96f6-a461f06df8c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "856d9c5a-3edc-4043-9b06-99a717fd56d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00e398aa-3b7f-41e8-bf31-a7fac103eb07",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2df804b-a578-4101-af2e-e13e3097d584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b506a507-44f3-403c-87ad-6bf52f3c892b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1c0ccf9-dcca-4897-ad35-b34362e8ae7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "002aadab-9d5a-4a2d-b065-2c826132ef84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6900f39-4e12-4e50-9cbb-f4705a874e58",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e32bc072-b9de-4634-8bf4-475d5d9c980f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8c2fb94-46fd-4278-90ea-639691ddd67b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0de283e2-8153-4b44-9c35-e6b871ef1cf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "73ddd43c-0b9b-480d-828a-01030406c1a2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "382601e7-57a6-42dc-90ab-6ee41b4b646a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4f51060e-cf14-4051-b4d6-138367830da4",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63218fac-137f-4fb9-af3e-7481425f5f8a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a164fc24-ca6a-4e06-aa1e-7b57e1f79db0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b3b962d-aaf3-4b74-af04-c0769786bc25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c68b879d-dc93-4346-bd83-77f541dde578"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "924dc04f-c2b4-4413-966f-e6385e509c42",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a807c299-a1ea-404d-b208-7f80e5d615f7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "05bca9be-61df-49f1-b481-3bf3d8de89f9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2d32b06f-1bb0-4b3a-af32-5f413595d7d9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5bd7aba5-e5ba-4040-a6da-dab1f1c67f15",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e236b02c-193b-45d3-9ea1-99047c57f623"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6d6ff460-8c57-4176-85d3-45b74a94916e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "54d9e35a-6e61-4c32-bd3a-55863247a680"
            }
          }
        ]
      },
      {
        "id": "7dbd0373-c4fa-4a6f-8f56-1ef75121294b",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "38fbef58-6d0a-42da-8076-afb8545908ea",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1b1dbbe3-9bbe-4188-a8a9-ac3fcdb1e020",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2662bfee-167a-4876-9469-e8cc29cbbfbd",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aef2811f-8ad8-4bf7-be68-d31111ef8a2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70dadaf8-cace-48d9-8da0-4af88a62e60d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0bc2c91-46a6-4cd1-8973-a79e13304a21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1440853-5a4b-4ca2-8943-a7d73db8c996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc0c96a9-200f-4b4b-bfe0-63d55bf3951e",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "978cce72-d862-4e8a-be48-6f4d41c8f9ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2411befe-347c-4c2a-b9c0-bfa2b2b29ae9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1763a3a7-5459-4dc3-9d87-d05c096182e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b8b527a-83d6-4645-b068-58fc3b8ab697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b88562b-1d98-4624-bc19-48bda52a12d0",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8be8673-2be1-40dd-814a-324f811e9e91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b5b8c7d-f9f3-4279-84ff-90f23a097212"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3026fb5-054c-4b97-affd-e7c6c95479f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdb3c0b3-5425-496b-a0e6-1232234381dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "568a4720-f0c0-45e3-8628-049a990d0fa6",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06ac7a3f-fd4b-4c9f-b8d0-9fd1fc5eb7d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6300f45d-62e3-4142-ae07-b08226b8596f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59eb2c0f-7065-4355-9cf8-a8d46b66d59d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac4dd7ac-d6d9-4d5d-98d2-285611a9c411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4d12072-c6a9-498e-bf84-fecac667bb95",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c018f55a-a899-496f-8903-633e46571171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73b770da-2551-4c24-9010-039d871bde65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2b87da4-4478-40dc-9bed-e97b72aad6c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea85eac3-3839-4e36-a240-f502e8ee60be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72f17d32-d540-4210-92ef-67a83d32d6c3",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96d75864-ac2a-44a7-ac9b-999091c2a352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "387c0db8-73ac-4ac0-9a9c-0fe0c6406218"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61160f2a-614d-4d0c-9bb2-d5f81d7c8296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5f4d6169-e29e-4c20-a4c1-19a161568ee6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ad442d4-bf8d-4dfd-97ef-c107c2098298",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4c572c3-e297-42c4-84e8-dac45174a0ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e50c800e-f7bd-45f1-bd56-805adaf2732d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c950e050-30c4-4656-9630-17b57a6487e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "38021a65-90ec-4238-885a-2d6693543fc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22ee610b-0da2-4684-9653-8c478691436b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42b19eb3-e10f-4f9a-b515-2cbe4ff488b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd3838d1-c8ae-484a-a597-15b29369b840"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "370ddb75-115d-40de-a51a-b23d4ff2d50e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5746145e-6d4e-4020-86ef-88f442850192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e6f5e8f-c5f5-438b-9fbf-f2b8e66a228c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82788057-6c7c-4263-909e-e5fe720d4043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df20fbe2-488c-4534-97f6-200030e8cefe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6897a69-c384-44c6-9cbb-e1ac7feca6bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "65d77929-9197-49a2-9570-a54cab8bef51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "880adcdd-51c2-4722-8702-b1bb1ea453b6",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96fe8eba-a61b-4720-a17a-504a175c1921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "122065db-c647-44a2-aa4e-25b39868d1f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdbceb0e-09d4-43fa-8e5a-1fe0f0cb14c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4babdae-65ce-4925-a26f-9310ab5511d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "326ea554-726e-4ce8-9d19-ca5748e2aed8",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56b338d2-2b1d-41db-b312-c72b6714bf09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fd3fcfd-5329-4040-95a0-159a21823ac8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5966af2-1f44-4a31-9e3f-7fc5f9d4a363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "97e30f14-920f-4dd9-baa4-9ab48e35dba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bce4c86-8379-4499-99df-b43ec2e8aa62",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6db679a0-5fe2-44d3-83ce-a5314857c772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dc0d8e0-fa07-4ab0-bbd7-d8512a2e0033"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54352918-f210-4e53-b39e-a11e69361035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d2a41dff-0cd8-4d9e-8739-a378070fc8c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9be06d5d-73a0-4d31-b7a0-c1861c0171ba",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c574524-a6b0-4410-ae62-e0ddf937c7aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec4dd53d-8385-4f0d-92fb-359310c1ddc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e440cc07-49ab-43c4-8138-3121501c309f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1187a728-97a6-422b-bdc9-c23b7650849a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0fe9757-b0e2-40a3-aff6-60698e3cd517",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "281846b1-406f-4b2b-b8ab-6fd6d916ad0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "212069f1-d801-4613-9c08-3af255df7201"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51098463-6c10-4118-b5e7-01429f3f6917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "06222cb5-32aa-4a5c-87bc-65767181115a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc03fc7b-ca43-4f7e-ba25-95f659dd1464",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93615b0d-abbb-43b2-a136-fe302701eb32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f24d579-6af0-4323-af7c-9ee56dcbec53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89e1a2e1-c7e9-4cc1-a83e-d4d9f3fc23d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fa7bf4a-4269-480c-8716-e0dd42b78c9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3d7728b-4916-4daf-a010-2e55869730f5",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8c03a0e-e37e-42f9-b30e-c0fe54966b9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f712de2-2f63-411c-ac30-e56ebed1f8c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa12e892-6781-440b-85fd-872c08df45e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef9caf5a-3de3-4b50-9f1f-37e0af0f1b17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33ce089a-6c0d-4f9d-bd79-d038639dd750",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "744fa8ff-4a22-48a6-befb-154d33a28842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bce73e4-c812-47aa-b49b-521e72acdb6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9482037f-9970-42d6-a9c5-31677d998b85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "817d8c32-291e-4dc1-abdf-7be2135570b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18c39373-b160-457b-953f-0e9efc05e004",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81081cfe-f369-4ed2-91b9-e93f74907c63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f273fa9-420a-40cb-b3e9-671a4eb2eb29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c601276-3950-4383-86fc-2ecc6bc4cc56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f9630ab-1c02-45be-96fd-a81dfce2ef4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e89f109-2b51-472a-b061-a9b626c83ad6",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bce6fa8-4e19-4c14-8b10-e4caf4a6a65f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cf654d9-5a77-4bad-8fe0-0b03969ca89a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d220752-7145-41bf-8802-3346a26c054c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bcc543d2-6ebf-4a39-8fa0-c96441187e99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e92a2db-7ba2-481b-85fc-33927f7c8a6b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83f7bb26-bcdb-461e-9126-40c0290623bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce9f91d0-b6c7-48c3-a96f-05e0f128007e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a00f376-e4b5-434a-8947-a70937750e6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f27210a6-d6e9-454d-910d-cdb6aead014c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffa32161-28b8-4dd4-98aa-83434dd36dd4",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b78a1de9-2ad6-4df0-aef1-4054c3c53e4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1091b124-4c8b-457f-8467-505c2ed8e8d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e588f7af-18e2-413a-a126-835a5e9881cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d31b1283-2609-4e52-875a-f7a24860f91d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "701c3f1e-9643-4a60-89af-fc288352288e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a9e5959-76cc-44e9-8bf9-e7ce37f222ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18156374-f4d7-4b8d-a23c-b361faefb3cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daa8b967-9b59-4004-bcae-204fb35193ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d71c975-be33-4409-b079-8820f7357099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f0542d9-1ffb-46a4-a609-fe935b4b73f3",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cfe4eed-bd19-4f4c-b57c-eee04da1df56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2304def-29f9-41c4-8273-c394314f018d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95e2625f-670f-4cfa-bb44-4f8694e1d0bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "577deb1e-4707-403b-9f6d-3f5e39b2bb44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60c9d110-2328-40f2-8d15-1f440bec542a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d3b9b5f-1902-419a-a196-c2ec1063a378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "074e2d20-ea38-4749-a528-3507621f3ae6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92fd243d-e482-41d7-8a1a-33e206ecb10f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3916f5b-0009-4fde-be2b-a6a8583635dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "217cb7c9-68a0-407b-b9b3-2e1b421cc83f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8114b560-f493-4e97-9671-4d52c08f642c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "355b272e-8808-4abb-a39e-cde99610f201"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b7fcf10-04bc-4552-be2b-0f23f97ed0d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "930008c2-737d-4bf6-918e-a9ca665653d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ed66d34-5b0e-4af9-84fd-16d95ac689e1",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ac06759-d8f3-432e-9407-d1efd91d1e48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37bb93f1-4fc8-4b73-b111-4ba04a4b4656"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7f6447e-2890-4527-82fc-d79c7714b8eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8865c42e-d17f-4fa5-b254-e51acfc36d6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d332d109-2af3-4eda-a7c4-7600704959bb",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "435c17a0-5ec2-471d-baa7-ebc04623d53f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a560618-88ae-42f9-849b-c5fb18bf1c74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06ef03ca-1538-40fa-a259-72a0d7d51cd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f4fee85-92b4-4c1e-a96c-5b11fb79dd63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4221537f-3a8b-4fb1-89fb-4ad722001349",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a006c16-789b-463f-ba19-4af6d6c4c8ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daa38b47-6de5-4f76-afcd-dbc523749ed8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a460f49-dea7-435e-b04e-ff50b831ae48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9f0e7f7-10d1-4423-aaf8-b47ea294fca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85b140d0-b74b-46d4-90f5-9aa694f1e296",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "903714c4-1775-4dfa-aff4-7b87597ae7c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "698e49ae-d646-46fc-bdc3-9b9b3213fe1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95179ac9-e79e-4f6b-a3b6-b2e6885afb30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "48207665-a2bf-435c-82d5-7b5220f5a80c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44bba8cd-6e7b-4e92-9e11-ea797763b1e2",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "500f9e90-ad60-4bc1-b490-f32f1d7dfeb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97bd9c9c-7bcf-4c40-b0d2-8fa5d7674bf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d28c3d9-b3e6-4bf8-af11-de3e16e7bbfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1beb5471-b5a2-416b-87cc-7cf71f98cf7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bb7c39f-5d43-4721-9455-9df39a983193",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5416fe5-1575-4682-b331-75d5a7bb2355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f3cf5ea-62e7-4d22-9316-6bec0e71842f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "865e789f-7ed0-45dd-a29b-6592c044e83d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b74cbe3-8eb6-4631-ab87-18ec8a29099c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fd9667d-ff17-472f-84eb-e9a7ac7f2c7d",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad8a66c5-e42f-4698-85ef-25fcd2f6df3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e02f80b8-d910-4dd3-aa6f-403291e0062e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "352011c2-bc7d-45df-b8a3-c4e56fde18a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "57a5aea7-98b5-4916-9484-88c45517d051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a03b0a1-f66c-4c26-a29f-ce579484b9d6",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb5ad109-891c-47a5-9111-26f93b51fd21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcefbd82-762e-42f8-95c1-700592a62661"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd02546b-83e0-4b2c-b048-536e20238ff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d0e8b51-7eed-46ac-b234-b955b5af1883"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7215f98-2a2b-4efd-b3e9-76bf772ea8fe",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "215c6e9e-0496-4d1e-a535-5ab9e857de08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2c39a33-c420-4592-aaff-842b32ddbed3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42c5f2ec-1536-450b-8bd8-6b0111b7e456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6da55809-13e5-42f2-abeb-3bf4c4123657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ef1a676-fe5d-4c99-821e-0f4ef97bbeb9",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c414ec5a-6e18-47ac-b66e-14001fe713e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "386ec9af-8598-4e5f-8ab7-ffeb4470e133"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ad2ade6-d4bc-4e82-97ab-0bb612987ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "632cfb41-4f07-492d-8680-311ac4bc4287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6100dcf7-9c8a-4a39-b229-bba283d926f8",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d567cbf9-0428-45da-a3eb-f4e75b67f416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2f3ea69-e3ec-4472-ad7d-ffb9ff123627"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30720191-bad2-42aa-9f33-494bdfff87c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d34b1240-3412-4574-82a7-8718f4ddf068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33e2d3cf-2f73-4f31-9b1c-831c6c9b4d53",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9efa82b-51cf-4f60-9d3f-780526eb6e14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fb47ce9-5f17-497d-a528-7d929aa14872"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b2abab8-910c-48d8-9e14-321be8bc69c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "94e53ad4-63ca-4664-b78f-d3d11117f4dc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ff1d8fed-6f69-4e3d-b977-e646ab0a5d80",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "565b6710-3fbc-4b7f-b56d-c6e394db7b6a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78edf29c-8fe7-45e2-acd9-290fc5811dd6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d4644db3-27e9-4f40-b3d3-41b42982936a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67aaad96-151f-41d0-98d0-ee8f1fe631c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "62b3c1ff-5a81-4a28-a6f7-dbb7a3a6a0ad"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7122f803-1cab-4d5c-b613-58cd86e135cd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "54ad0f1d-3f0c-4d18-8abd-9f830386a5de"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b4adf4be-1428-4f37-990a-bd1e6ee18aa1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2864f255-932b-4d5b-9287-f2fdc5da354c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2b1bdb2c-e786-4e74-988a-858e565abc80",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1940633a-7ef6-4043-9d0f-d57a38401caf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d254277e-ec4f-4812-be0e-c59f76b6d39a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4266c630-dff2-4e7d-a32e-6700539dd99c"
            }
          }
        ]
      },
      {
        "id": "2e9991c7-e82d-47a0-9483-9d8d20298fc2",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "36107c97-6c4d-457d-b27a-cc571d667f6e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "305b56ff-a711-4df0-b34e-07b6de69e923",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d8623e91-2976-4003-be8d-638cb3982bff",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1629052a-e17b-4496-8d3e-e3e0619767ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99653da7-8646-42d6-b6bb-861394aa1008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1bd888b-cc1c-406e-a76d-1453e5eac370",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d49e1fe4-e590-4cdb-b95d-2dedb53e08a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2057fe7e-5760-4e5b-8e90-88727f3de046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0bd2694-fb40-4d37-a2f8-89c5a6c446fb",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26f8e5af-4750-409d-9a94-d6d0c5d77a9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "691c91c4-40ed-406a-a4d6-425c20e7b171"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c38af69-a37a-478d-8db4-ad1656bde02e",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0472361f-67a1-416b-9c42-fce2f25ebea5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13c68363-690f-4c6c-93af-62cc77f17c57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e7f4cf3-1047-4127-b015-d2a69f7abedf",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0667ddb6-c3b7-430e-b811-3512f7ba33da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6be1ec0-2005-4a81-98cc-066a89ada706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16e1f608-d9d1-436f-a335-acd91833e15c",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6708855d-ffec-45bd-b60a-37c6562d844e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c38f798-962e-45b9-bf87-7518e3de4853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87cde046-11cf-4d9a-8767-8a85ea5af0b7",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "092cc1d7-aaf3-43ac-9d62-c8cbefdab23d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b8d27f4-2e69-4927-bd82-1e6b32c5761e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f3b2efe-c089-4b21-a03d-f3790502451b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eae2bca4-4d88-47e6-931f-0054f6249633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4ca2388-68cb-4456-a4c3-bad6be8f9cdc",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6729806-0237-441b-bbe0-bacf2a2582ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe8ea888-9785-4e52-9216-9e1bc7f383fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8edf0fde-ac3a-4805-9b77-84b7da580739",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dcb5887-fe1c-47fd-ab7d-f0aebb3dfe2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cada9155-dd88-4e3d-b866-aca1d7885e82",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c10fb25d-9ef6-4f20-bdad-507c35be89e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce1098a8-1594-4baf-8ac2-39b2376e6df3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba53ab64-3697-4227-ac0f-071c739c1c69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ccc7b73-1a86-454f-8d13-156d6ca6ca0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac3cb11-c05f-4e19-ac75-7913e9904c4a",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2ffb7d5-0e9f-42f4-be61-a01d1982096b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e4ea167-c73c-4e6b-aaa9-1a346db74d4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "337643eb-1e44-4a82-b1ed-352a2d3bc67c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e9a3a65-4e8f-4f59-836b-10484bf1899e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32163a68-a592-4a47-82ef-ccef3b3b8c1b",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83cf6f1f-26e4-49cd-9a96-1f3a67bae705",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2320b72-14ef-426b-a1fc-3dc284f2b8c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a5189e2-a0d0-426a-bc5f-09149e00c231",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b3a6d35-bd44-436c-bd93-4b130775f69f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ce947af-ddc1-4211-b410-738a04a734e2",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f31e23f-b569-48eb-8099-69580f8b6ab3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c31ad79-e602-4276-a2ba-1bfc7886dc6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e51df28-8c7f-43aa-905e-2f5f8783d4c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49b1cb70-9276-4aa5-819b-749c255a176d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f74f6e9f-6bf9-42a5-9331-72024b4c49dd",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3c232e6-b229-403f-b2af-ad9d9ae07f28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00cae38b-d1d7-4060-8529-868e92ab943e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afefeb5a-d422-40c3-9a84-a915ae280a55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ce01df7-472a-4a94-ae81-8484547b3dfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17f4df80-3bbc-405c-a973-605a1d3b7ad8",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e360bb5-1a3a-4f2e-9bb1-653eb46ecd80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eaaaf265-703f-4b97-b9ed-123870abfd3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a5a4965-f4d9-4962-96f1-80e27fcf0599",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c8e98cc-2539-4b5e-a03f-7c83e11b4c18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3458acf-f47f-404a-8557-b5193bd42c4e",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "973a86d1-871c-4e14-988f-67c876fbd785",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f88edc8e-ec9e-4a5c-a794-5cfecee24238"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8090b654-6eed-4e22-b61d-73ae728d92b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72d02abd-6f5a-4585-9b00-1b77d29e8b5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b68e6310-253e-41ec-904e-8f944b50e80c",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c495d953-81a4-4024-b944-829fa5d6288e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8df4f91d-8191-4c50-b4bb-eeab44d01dc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9766025b-c3dd-4255-a03e-a9a8b2d0651d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77aedd77-736f-4e03-ae2d-e2ebf460fda6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43eee0d5-5025-4713-95c0-b839ee9e5180",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19d9c7f4-ee6c-46f1-a9ad-7be154dcbd52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbf42a65-a8d4-4c96-9830-2d4dc21209c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "625dd22e-4ed0-401e-a506-d6eefa0bbe85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9df8015d-a5ec-4b0b-b8f8-58e9e59d27d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "855d3183-c966-4930-ae88-0a6c3da041ff",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b10b891-a7b6-4238-934d-8e0be78b8b10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65a0101d-e477-4704-b5d3-c300ef71ce64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8daee0d0-f13d-4f02-a2fe-9c42332544dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0522228-a41c-4c68-ac34-90d5b342afb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03675174-769c-405a-820d-d61ff4909952",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6beabc3a-13a9-4a3f-8f70-dd1c3ccb539a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b827cb03-0058-4f12-a31c-7cde79e476d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88f28989-72f1-4283-ae51-2c32b6733552",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a29eefc-fd93-44f6-ba29-ce7e50ab15de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53c47dc4-ee99-4d95-b56b-df9b63d8356c",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef6bda7c-fdaf-4831-8716-6492c4215ef4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17b40c12-8fcf-4f52-8377-60f79755b31f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20120d0a-dd6e-4e10-9fa2-548a18a17106",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f095623-7de4-4f2f-90f2-382a137a09b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66ae16d0-e5a4-4170-ad2c-e32f04258cb0",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "427a4c26-78d5-4a29-9b08-3e1b61797945",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0371fb0d-b7cf-42a5-9d40-8ccf8596d188"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f5adf0a-02bf-4503-b3aa-c72740388a4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13992fb6-e952-4101-874a-be9d57280725"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1b5f772-79a3-4cd0-afe0-9d9915915eed",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "436b0461-39f5-498f-8c28-0ef34736daf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7638220-286f-44f5-a894-08e5bdc0814c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74f0311e-cd94-4f69-b38b-09c9de1d2d4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1332822-6d01-4355-913d-c1d1a0f857ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3ccba61-8c82-46fc-b05b-339603c24eda",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e18761e-c273-4ef0-be47-6bbede46581c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c893af4-77f9-4f2c-b88c-71b82b427e7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d60571c-a99a-4161-ba23-e75a255fa809",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10b0adf7-30a8-4dc1-a9ff-0b3010ba50ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "509e78aa-bfe2-4f42-90b8-c8a2ea7ea354",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55223b0a-53d5-4adb-8578-06bdaf9a99a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e456d080-ec17-4f32-b5f6-ebf31b342533"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5454f89d-91f0-4d42-bef5-4c4532266600",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fd65c0a-a215-4898-b0eb-2e3b1c00657c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08f9769c-0575-4318-8d97-d48c379355ce",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43eb7fab-407f-49df-abfd-c824ca81f564",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "580f8ccd-0e1c-4374-b7eb-ea3686524fad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c040e825-eaef-4d2e-a69e-76ade4c972ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44745468-1a94-4624-84eb-0df69246de55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b6ea67c-92e9-4a77-8f4b-af650093af2c",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b4a9e89-4bf3-45f0-9ca6-56095e998fde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ad3913d-1f32-4191-b01c-7326045a3517"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e91a5c0-f320-4fb2-b46c-548dfb5e0d3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02b878c6-ddf1-46c1-8f7d-1bbbe3fbf1a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "308445d7-7069-44dc-a136-5a98c567ea65",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aeeb0fe-0a51-44c0-ae5e-6a7c9a18d231",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd786c0e-5eb2-4aba-aa88-f5cc042518dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0273411b-f783-4810-91d2-8dd4d642f21b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9c011bd-5060-4a61-bce7-fcac2dc57dad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4ac3556-38f5-45c7-bebb-407661c09b25",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55c5cfec-d759-4f76-a51b-8e1069c8202d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b99aa9d-b601-49ba-8baa-e4cedb6d0fcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d376c359-2864-49e7-af37-e40ee9b50e40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31c89f0f-55bf-413b-aa93-72b528e154b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae7ab3f6-585b-459c-b478-e9f2d1320c75",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7a867de-4e7b-49a1-aa28-05243fcab372",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "612eeeed-e046-4bbc-902c-eba4e0d3ef02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "380057c6-34b1-4780-beb7-abfd1c4a160b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b3107b8-2fa9-4d79-bf75-a5ab953380af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "463576a0-e3fd-4936-9344-270485346a7c",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fa474f2-3068-4955-bc71-c1ac9fca61f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0eb2a75-5f10-4bcb-9e20-8f67503d5194"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "258a2d40-03de-4bc7-80a3-96d505e229f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a83cdd8-f610-44e6-92a5-4da9f3b8d9b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18f65bb3-d57c-44b3-a29c-f2cfcf3cfbdf",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07b45060-ef05-4690-9f17-6c9ab54e8987",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb51313d-4883-40eb-be71-4c76c599b632"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa8c2947-e072-4314-8031-3bb23e4aacf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a87be27-1a20-457e-bf0b-5e147110191e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9eb9db4-1dca-43ff-9d4f-1274b75ac049",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32a6fb07-682f-43b6-a6e1-4e623dfc0be9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "831ae880-eee8-47b3-8cf4-feb72dbda747"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b56aad59-99ba-45ee-9a0b-9ee555c45e1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c5a4b18-c2bc-469b-a644-f0e0a0f763e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6910a8c2-5e0d-4815-aa7a-90e7db2068c9",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "821b97c9-52b4-4d4e-ae78-69d8c47db370",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1cb45a42-46c4-4a79-9b99-7f2f38a2442b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25744b8e-e201-4042-bd30-142ab108996d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8d8d158-b4fa-4ef2-bbb9-9e6db35b2480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0178a78e-aabd-4206-bd9a-61cf577d1cdf",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11529f15-d9ad-4f9a-9c2a-ce56e29a94c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "393f3852-8d12-49ca-a5d0-9af9fd0a0a33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5eb8020-6858-4244-9716-19eb6813ece8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dbe9cf8-48ff-48d2-9727-e7eab1a28b55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51abbbe0-8bef-4f1e-985a-3a85790a3c26",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82692159-d460-4550-a544-3db21c090fc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1138cbba-31f3-4fdc-98b3-69f85ec6845e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4005082-e05d-42aa-8d1c-f0f2ad23f5bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2784a0f-21cd-4f0d-942b-2b681e32501d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "279c01a7-df0b-4e1f-abd8-9e262de06f7a",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9e4d530-bf3a-4eb5-83de-72e4084d7ecb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12d70c5c-1ac7-4876-88f9-d592401614c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c439a334-8912-45d1-b992-afe79223eb30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "599ec901-7e32-4dc3-a217-31f5696434c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2a00c35-7da0-4915-91ec-40cfa01fe4a5",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbf09da7-52d4-40fb-9cf6-d5e159ea5697",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9b2ad21-cd26-46f2-90a8-6c4855304607"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea756d17-8361-478a-a1d7-e7fa9749717d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bd438bd-c951-4ea4-882c-778e887f6c14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af2a47bc-b5a4-413c-87d6-2d30d9cb8764",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15fcd088-be2a-4b20-be16-6dcbb1cf47aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d8b3bd5-de39-40d8-a4ae-484c1b2c6bb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fada845-87ba-4a4a-880d-3dfe6f71018f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd4f5277-f3c0-45c6-a49e-430f0a8cad89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "725ac221-43be-4df4-9885-3c93e1c1ca97",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe80d2a9-82f4-426a-852e-00cd671422a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba0c2979-50ef-4028-9be0-6aa4ab145870"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8e87962-ab63-4eb0-bd2c-5eb718ceeb80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ce7717b-237f-47e2-ba5a-b447577851fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fd0d7a4-d51a-4125-82be-f002b5da5eaa",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86c5d413-b7ea-4ce0-8f38-2005075160fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f325c409-805c-41a6-80ad-80ab98433283"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e63238af-e2eb-4f60-a039-c6ff727a6a27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e00b1211-7f08-4c0f-b9ed-14990d228a80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5000dba2-93c4-4ce5-9735-cae6a288b944",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ad68a4a-d47c-4fc5-b10e-6d8626b1daa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c20c7d68-f98b-4292-aa38-ab44c004c7a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1437197e-8695-43a0-842f-825f9ab778e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbf51772-0f1e-457f-82fb-4bd5990233af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbabf043-b879-4076-8d80-4f7b950412d5",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f3f484b-8e37-4929-8404-9d5cf273a79c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8468330-1549-41c4-88d6-4fff839de903"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "824533cb-8117-4bf0-aba0-11872fac69fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66fa944c-cff3-46b7-a7e6-47c82cb019de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a40d4f1-3282-42c8-81ba-a919e0e141d5",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54750935-3abf-4a51-b6d3-9b80039ff7e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb5619c3-8876-41f2-9258-f5500310c123"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd1928e5-89b0-4edd-8cb1-8a699015efc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53bde9cd-a0aa-4630-880f-d3559e50d929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35fafdc1-0beb-42e4-bc89-67ff65a52668",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1782951d-3c5a-4c2b-9402-ddd00eb635bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "864ab1b6-c88f-4395-b3d4-2fbead1694a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4e68c7d-df32-48a8-b112-32e9cf76096b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f133250-cf12-498a-91d6-71b3048052e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84d110af-93c1-4987-a7d2-3448dae73387",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "009d52bb-58b1-436a-92fd-0981b4ca6ae9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eb7bd6e-81bb-4b61-9479-02726fc6b584"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcfc22d0-80a0-461d-8e0b-9d9955837f27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd7d340a-b211-46b7-bc4c-7e872bc03358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "224fc4cb-7638-403e-9a5b-d62e3cb29b00",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16c26400-8400-4e63-bee7-bd29c59d1534",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "993167af-dded-4669-a45f-605867915fe4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88d70d9b-c500-4266-9a3c-c4c5aaf331b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dc0edde-3e4d-42e9-8b5e-b771c8ac559f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cff74c6f-dfb5-4844-8d44-f1262342ac96",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "287af49f-40d8-4148-a9bc-1feb6e4aece8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10740fbe-fb22-4404-9727-ed16939a937d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c43e8e3-722d-4f5c-9576-c4775b78f22d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99c6aad7-712e-481a-bc6d-e1865381a8a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ef13072-0783-49fa-be9c-69ecbbe52f3c",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2496fec0-13cc-4302-8a85-923e567c32e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b6a91e1-bae7-4a13-a3dd-3e4d42ec5f66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fecdafc-f7a8-4f37-ac61-9711670f75fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5db1e2e-b71e-4409-b4f3-242951dac847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6b2649f-0d16-45d4-8467-aa71d05c7f18",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc75a013-3a08-45c3-94b4-b6fd1ed37ea8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fc98d6d-f42d-4a23-8e9c-fb6d8c458d82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78072bb4-dcfc-4fa5-aa5b-00fdbae84da7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8de1132e-4ed8-4dbe-98dc-4f2eebd5e0a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c0ebc5d-408b-4914-ae98-1fbcf97ff619",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0f6b500-df38-4a9e-a891-fc9e90c032d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41f21ab0-f081-4df7-a5d5-005a41df2fe2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b2c5c85-0210-4768-bf02-51e8a37fa75e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf4f944e-4340-4da4-bea1-a5fb2d126ee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d79d0fca-e427-45df-9965-f03996aded30",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "177a9bc3-0700-4b43-bbf7-080b42c00b28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34559a0c-dc11-41bf-bd83-79c3d5b2ef85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a33357c7-ce5b-48cf-a160-572d4f8c7f5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f56dcd48-2b6e-467a-91fa-a925a58acf0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e1e7d06-b7ca-4fdf-9d45-6f39f7105cd0",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8c02df4-2e42-4d87-ad00-360e7917be14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efe194de-f06f-48dd-9aff-ad850df5104d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c7137fe-9261-4be4-b130-6af227332a62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74bc7a21-2d17-43f0-9466-badd83ed0832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a518db9-0572-49af-a1b1-9d2e5275373b",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "408a7998-d6f9-4278-981d-528fce4326ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18c2b199-edd3-4ffa-9422-278d87d696cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f587da36-7128-480c-b2ec-3e7876439a41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc35a096-cc78-42bc-b8d5-f21ddeae9a2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3489ac64-7b03-428b-9e9a-3885169b5b5b",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f76a82bc-f792-467b-be69-4567ff0d7630",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e221021c-28d4-482e-820e-2566f5ea6afe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f56445d2-87e7-469e-9122-fbb086c77588",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa097282-1779-48c1-be48-b96467da4afa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dd1a437-dfa7-42be-a61e-cffce793f8d7",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83faf972-79c7-4290-8906-0c1bdabf78bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58d1e513-da37-4754-b8e1-34baa70e09fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a757015b-ebfc-4876-8334-ce5083db3ffc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce36d839-3cb9-489b-a71a-446eb7c6a177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d956c5df-bd61-4497-8a4e-c3d0cb7c35b5",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "990a5945-473e-432a-b541-fcfc647311c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35ca6b97-1bf0-4c2c-90ab-4f900cbac48d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1926545a-6a33-482f-b65f-920c301908ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48e2bd5b-9a5e-4348-984b-329d3a99d191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c677ee80-e216-48aa-b9d7-966255d9fbcc",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33858d4c-1d84-442d-9861-dc74ae7fa773",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfecf6ed-2864-4550-993e-7e5fbaa9d1df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bda4e9c-3721-47d4-bb9f-922bfcd0b68f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73caa621-7f6b-4908-b171-2bfad07f00ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a948d9d1-cc9b-41c1-b542-886124665d65",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e669793e-426a-49de-8dc7-884b6857f13b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aff3745-c94e-4006-bffc-6df5a64d159e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac7123e8-739a-4287-9817-1a47d63bb0bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbe7f91a-6969-4445-994b-6555e698c52d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5320258-1a81-4ab4-b855-26ec6faf2020",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adfd3b80-86ab-4a64-b426-530945021846",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5a04b64-0f1f-4e09-ba7e-ad6241a86c55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "171340a6-ee68-412f-9a70-9007cda3728e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02f4c707-7933-4dfd-b089-3682a7c41cdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a27edee-cf57-40a5-983b-a95bc360a2ef",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9e89f70-0426-4b02-ba0a-63e3b18641a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ef843e7-a7b0-4e65-a93c-2f24c1a0b02e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36ad45c5-7907-4e4f-b151-37bb23b79898",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40440219-473d-4ab6-b876-8a7d0ac9eccf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b90d2769-d7a9-4744-9b6e-f2a1526ff4b8",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea798422-2e67-4222-958b-23665143cb4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a089d23a-e25a-4a9d-b1d5-4c96042a4143"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d8db17c-e5a0-46f2-a5ab-709902603802",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca1d1f86-475c-41ae-82d5-1924abd8c4d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61935b9e-4013-424a-8526-2cd0d67cb313",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c40ea791-50e4-419c-82f9-9c95df0e5914",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6a4b176-f148-488e-9ba3-93dac45ae52d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f3106cb-689b-4037-a5d4-e2bbc2b18943",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56496210-de97-405a-8c32-82af399278de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b59e236d-29ba-46b7-ae44-5430c7e8b048",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4b636c3-ff36-4d1d-9f86-bf46dce5a0e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fdf5129-8953-4aa7-93fb-7a3474b1a041"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f06f43a1-827f-46a7-a562-233329d75f02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4142eb6d-9b96-4710-a8a2-33aa157addb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fca20b29-c552-41da-84e9-ce0251f3fe0b",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de074a2e-c1e0-431b-8002-a9ae4244faab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd14ac6c-0eef-4cd3-ad9b-7ec242e061fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef914a82-6e77-4401-b8c8-96f4c09a236c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46bc2623-7732-4e50-aa84-9d21a142eb59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c670f506-26a9-4815-b1ca-d3dafffbf44d",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c5a1ea7-f787-4e42-8266-2f72d5cd423b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9efdb60-100f-4d68-a507-760eaf2b20dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0924ce30-955f-4bff-92cd-038df6547803",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06474f04-e64b-45d0-b351-21f552746497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33e1da0e-db77-4abb-b07f-27a476b624b3",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4291b31d-2b3d-45ef-8b22-af3fdae6b2b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "108f3eb2-4aec-4bd0-b1d7-3dab306787b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cea864c-0e14-4086-b33d-274135ca1633",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2266cc64-0943-4dc9-927a-28aeb8d002b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60216e98-5c64-49c9-b1bb-c54fbd048948",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3d5b7b6-1058-45b6-b32b-ba3ad8598886",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f292775-b889-43a1-84dc-0f952e75f2b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a99f3c7f-ffaf-4c7e-aaef-fe6e12ad2097",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03422fed-06cb-403e-92b5-cb47939ba647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c5e0fcf-ea03-4cb6-b8ee-73e34d80d7a6",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18cccac1-ff2b-4b01-be3a-1ccc28eb132c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3358d8ae-25dd-4848-bd77-13419dadfb90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4b2bab4-f784-4019-9fdc-c1579d674ad6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0242f24f-ec20-47d1-9c10-0ee61210eb15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a7c0121-b5ed-4abc-a5ee-1067b8fbd199",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb81ec93-cafb-4624-811b-9ba36c37784c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99ff58d1-6133-4c5e-b4ea-85758c74ca3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67712c9d-f91e-401e-b283-3fb3d5dceb9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "989bd87a-1cad-446b-943a-db64624d8993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4339699-7bcc-419e-9a5e-c5a31f630e49",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfbd7010-fc48-47ba-8289-4a0bf30720ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4543caae-8e32-408f-93b5-e987339ca347"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "411b45a5-7a62-47e3-86e0-55f11e41ed93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a99bd1d0-5d6f-4cf4-a8b9-8d03012ee67e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a082320b-b3cd-42df-8081-94f55c7df4f4",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d69a14dd-d6be-462f-8272-8b33f4f25e53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f1821c2-1578-45ac-ac8d-34dc0ef4bac4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8136016e-0711-40bb-b880-0e421bee9f81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9278d6b5-cb68-4002-9324-21aaf6f0f71b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "086cfe7b-e38e-41f1-8a9b-8f94f99e6090",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "205206f3-4078-44c5-bc64-20c6b9e03cbd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d508832-107d-44d2-9023-7dc4af22d781"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b087ffe-12b6-4b8d-a75f-0cf434cc5152",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e73c06c8-663a-49c0-adca-edfca8cbb39d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b08663d-a640-43a1-a4e2-9f9343a133a3",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c83b1993-dc98-45fa-8c3f-2273cae0edeb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3495386-680a-4ffe-b100-54e8188eca95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9844026-f6cc-48f9-a6a1-28a8ce0664dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30dcdf6c-1a4f-49d5-9a2b-d694ca677c67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "470ef353-bbe7-4860-88da-51356f84e4bb",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53af9833-7dac-4c52-a1ae-f361facd8248",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "234c906a-dd8b-487a-ae91-695520a56eed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "166e5a4c-57f6-4a5d-8344-a67e8b06936e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10c2b192-6d34-4099-921f-aca90fe6ee92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5cbf209-c01d-4c19-992f-19f32df3ab2e",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34744df6-59a5-4320-893f-c32db16e9a07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a3fdbd8-7c99-4b8d-adbf-917740aab781"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f0fe8a4-ee43-48b0-9c53-539302ed2570",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4f41c41-a49b-4660-93b2-d2a852d89a74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1342d719-0aa7-4de9-bd6e-aa5f4be60b33",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bd05051-5e3a-4eab-a58b-b35113837ed5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd8162de-0490-41e7-93c6-ef343612cacb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56c927a0-4183-47a5-830c-5eecec03836e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9692016-b690-4112-a3ff-664b4f19bb91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1afc474-4d0a-42e0-b224-6dec8331f3f0",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e391f61-46e6-4085-8d85-79c9c82932e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "870132ff-8074-4216-9554-02a563d5d5d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b379a180-b13a-4776-bd2d-0a2a361133d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bfa56e8-bde7-408e-85f7-e97a25b64842"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4d993c6-72df-4dd0-8c6e-834dbf374a01",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24ddb824-30fd-4b4e-a2af-e886ad798c65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af3418dc-c8bf-43e3-b30d-73742d4e2901"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "213c33cf-01a2-4926-8ef3-2213435229d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb229e4f-37ee-4443-aac1-24ef609431c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cdbeb8a-19c7-467b-818a-57d6da243582",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13749ee4-be90-4eb1-ad84-75a8519388b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da8a0b62-5c8e-4648-8fd8-8b1a83de8f89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c5f9bc5-811e-4ab3-bbde-dad2479679df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ada3454b-37f5-40b0-ae18-e2e244731a90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "301cdfff-821b-44b4-8085-53223a991c13",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c45600f0-ead2-4781-b1d3-ccfbb0773e60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "178aade3-7bb7-48b1-baa8-6749aaeb1e35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa7af59b-9656-4abf-9b88-fffee72317bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a987153c-b0c2-4f69-b2f1-168b51a4ccff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63d4643c-32e7-46a2-bdab-89b9b311e2a5",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0ea9656-db2b-44fb-b38f-2b78bf036618",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c54dfa9c-1530-4149-92b8-05cb211163b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67cc5894-b5d1-48be-9e07-bbc8e3b4d889",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "855b5239-09ae-4ea2-92d0-38b11fb813dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3507333-f4ed-41be-9aa3-c9728f9fdae2",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e9fe936-f121-4b71-987c-de01d74e1ff8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8e3e0fd-a148-43e5-a833-a5937e067c42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1af6f5f-20ff-4019-9531-84844e50fde9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6d10be3-677b-4f8f-b7e1-4b13dbfcc63c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ebda6c7-2134-4556-aa3a-768dbee65c60",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bbc1718-4dfe-4ac7-bdc5-c2d49dfedbeb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ffac17e-22c9-467a-b3f1-5691f689681f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0226f9e-1738-48a0-a38a-d6b12250a21c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25b7d8a5-12e9-4ee5-b196-a64ce389401f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da118c6c-4548-41b9-b511-b4e3d57b6019",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01f8fd93-b672-435c-aa05-90a3097f7ebe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56f6b7ff-d04c-438d-8a14-4c19f1d06c60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a73ed89e-145a-4c6f-a799-f48c90649454",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96a5b5fa-1fca-4400-8231-5733dc9df0d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f863ecd-7b57-4450-bff9-2a0c9a928c20",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dfebdcc-5536-4277-8b84-54b9085059b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "499718d7-4e7c-4432-9a66-31662170cba0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c35e632-7807-465e-907e-9119dd7ae713",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "722b402a-1d59-40d1-99ca-871d55e22421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ab24e08-eac5-4478-b303-30d89a065c7b",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6372467-9f67-465a-9df8-53d804c23acf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cad1267a-2367-4126-81f4-3b8827d48e3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "162dc11a-a287-4f71-bec9-f04ecc2db442",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3343957c-c697-4485-b5b7-39f5e6d7e02e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fddb3d21-3e9e-4345-aa22-5c6c5ad3cca6",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af82cbb-ba37-4bbe-b47e-192e8f2acc98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51be3280-e05e-411e-b161-097c83636067"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd1a20ca-5003-4a4a-b4d4-50c42ba1a72e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fab2d37d-e3b6-4ba5-892d-d9126c9e9e39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f67513e-1f56-4a68-a7e6-3336c20762be",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a3ebb61-e4e7-4b27-b3a9-5ac70ce46484",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66c97c08-70bc-417e-8023-b45491f39115"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53fe4f04-e3e1-442f-bcdb-50efa25791d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0f086aa-b060-4700-b3af-3d38454ea8f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43f349da-b972-4797-ba3e-9dd7fc33ec22",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deb67cde-789f-4fe8-b723-d3179f1a0383",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "599e2022-a02e-4250-b176-3cb3a2efc030"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "608d3497-85d6-4679-aa5b-d0487ba57a31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e902ddf3-cde8-4135-9ee5-8a43c0b128e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c0d43a5-9f9c-420c-8030-314670ac000e",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9816d7dd-01a8-4d57-ae2d-521e29bf02e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c429bd0d-109b-422b-9d52-dd87032e5e8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f9155c3-24f1-48a0-9591-0f0dcd12599b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e2a3917-09a9-42bc-9180-fd4b96a9b16f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2410056-b31c-42f1-b1ae-21851d46c63f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f2be3fb-3e55-4af5-b659-f100ff776f68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31aac473-9e31-409c-b299-e2e0b115148a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "467ef179-821f-4da6-9e60-f3d584dbf7b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3d6a8cd-c812-42ee-852c-bee04d6b4a08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7573234f-6936-4278-b58c-21b72e9f01b2",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d8736b2-5d86-4090-9a94-6b99a7da3ff1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c5dc3d2-b61d-4785-94d1-f51b7e000e0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e6d7f95-322e-429a-bce0-80b2628929a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "febded86-fefc-4e75-a360-0d1e85ca884a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9964bda5-bc1d-4368-8693-f6f849a2bf3e",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddfc81d8-5e0e-44f4-89fa-b7b98db7aa4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a84675ae-5067-478d-a9f1-4f2bf4c96cd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dcdefc8-2f98-4556-9cc0-abc1143cef5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "669798a2-0981-4d1a-b70d-5de8961b20f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8a996ad-8018-42ad-bf1a-b92c74abd1d1",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e8f1d85-b15e-4d41-8d95-c131547089d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "228adf1a-1cb8-400b-a7b4-6d0c83a9330a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6a40e0b-eeca-4dbd-a030-2d444faf8425",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d812067a-703a-41c1-a2f4-2884e7b58689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd5affcf-545e-4f4b-8b9d-ab451f47628a",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "651f8965-879f-4c9b-9f25-ed4e53413a82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c9f3ba0-ccd8-460c-88b9-d6dd16d29c77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "795de445-f180-41eb-894f-be725662a4ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7462d7bf-d726-4a14-8790-adf426bb264c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f9e77ae-e2d0-4c53-852a-c9025b2da51b",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "449841b8-6c32-4b87-adf1-add9225df0e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "509a6324-d6e2-43ca-997a-f6f444244528"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8fc2c04-a67b-4031-b486-1b32eb266f7b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15eab008-74a9-4224-8014-12f74c2e7682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "309f0c3a-cd9b-42fb-980a-7d6aeec9eac2",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b45ee42b-d1d1-4517-bb27-9754116ffab1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f89f3bb7-c9d0-46fb-8165-8e5bb13b7c19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e9fac5b-bcf4-4284-ab2b-dbd48b1b75f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d08dd90-0746-4921-9baf-ca44d5b9e14c"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5a90c823-4edc-46ea-8169-7a291de3b3e7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d22741da-2283-41b0-b6d8-1e1c19c4aa2d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa264619-7d8c-45fc-bf03-b5696625aa07",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5183c57c-5cb4-49ac-9677-bf824f59de5f"
                    }
                  }
                ]
              },
              {
                "id": "7e321d98-8447-43a1-a330-b308ed49a045",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4f3cfe1b-c187-4199-aea8-893c2db880ed",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63be664a-2634-4b9f-836a-65de76bfba9f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "af74dfe6-fa39-4843-a193-073e3bb2cee7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f89f6866-25b5-4120-bf4a-8af80c4c7ee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "388450c2-a504-4ec5-a66e-f0037abb6778"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6cbe47ea-d0af-437e-ae00-7777f7df97fc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "806b0b25-5ded-4a6e-8cf5-cb0ae2ec81bd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ef6d3538-02e8-4ca4-a796-e64e24717c0b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "238d7922-e128-49df-8e01-01204f6217df"
                    }
                  }
                ]
              },
              {
                "id": "7c98381a-4210-442d-823c-2c01b0c30273",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "bf190893-20a0-4729-a92b-32bfbcf9f719",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a2b28a3-dc53-4257-903e-14389240c0af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "4af1c868-426e-4317-be1d-4204a8235c04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "886d5ffc-4500-47b1-999c-cfd9dcadff12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27d83bd9-813e-4a87-b056-43ad8371601c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a393abcd-bc24-4c1f-9621-b12bbc817e43",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cb4f68f5-2b4b-400b-80ae-961d99c226fc",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9c35ba6f-fdff-44a8-be73-d3cafae2bd94",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8b2bd7df-0149-4da5-afbc-c03fe1df3ca5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5fca2370-e871-4eb2-b7bd-241e79bbb197",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "10e60df8-5a16-4f62-a70f-01f9943c949a"
                    }
                  }
                ]
              },
              {
                "id": "f548a8ef-70a8-4cb4-8efd-82882a6d3725",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8674dcc4-293f-48ce-900b-ddb9aa4e99a5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a14f996e-c602-4e42-8ba6-44e55e5193e9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "90674948-de61-424a-aa47-2234a93f53ad",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "abce75e2-4c02-47fb-87cb-732f92330fc2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bd961998-819c-4cb3-b3d8-f97d4345c1c0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "b1f31a14-02bf-467e-a325-4c59a18f2bf6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "28d6e9c6-fa53-400c-b7e6-062c934995dc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c8075fde-1257-4b57-b3b8-7c0351be9473"
            }
          }
        ]
      },
      {
        "id": "4057c839-f18e-415e-95b2-daa2080ee559",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "4222ddd4-5a89-4245-9e33-e162fe3caaf3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "37b752b8-d926-41b7-972a-dc859242d7cd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f1464ac2-7449-4ddd-aa9e-61ee58a94538",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d17bcfd-8593-47de-9193-32e0a60c1ad8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0837e6e0-f6b3-4860-9d74-6de989eb4770"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0e5a8a8-ed63-4eca-8ee0-0365976c0ab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "803bb4db-b65f-4687-b8e5-fdddec1854a8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "81ed564d-c279-45c8-a766-032e85fb8bf2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "861b22d8-c854-4a5e-9fb1-a8efff6dd39f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "61a29888-abca-4e8d-a23f-c5ce950f0451",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "adedb9e7-4a5c-4d8b-98a3-956346b99397"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "10e82270-9bdb-41d7-b91c-693f889ce17b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "066724a0-b688-48df-81c3-706fcd4f6131"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "311e24d2-12db-484d-af67-14bb602539d9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f4e32fc7-b200-49d9-bb33-b1b4cf87f590"
            }
          }
        ]
      },
      {
        "id": "f4e934a7-282b-476b-ad05-826e6b669817",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "5691ea69-e500-44b7-8c26-1ddbfbabd1ee",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ae8d903f-c760-4489-9a80-9a14194e8ed3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4a70a7ff-dcdb-4779-bac5-6b948e67e6be",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3c9cfd7-d2ba-4b3b-9358-fc88554820c4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b8a1da9d-9f75-47c1-9172-46dd84c37c5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25e81be5-580d-4b90-8649-ee8081958b30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "17ad6e60-66c8-4eb7-a48d-74df9ed19a8c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d2ac1dc-6518-4e02-86b8-99068139ff94",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7a09e510-bf2d-429a-a6aa-06d0cb5cf2b5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8491f1b6-558a-4e83-8974-5ee6809e785d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b8a29cb-ac41-451d-808a-cfcadeea2e83"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ca596348-1d9a-4bb1-8d03-8687e4bf6a97",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "42709161-8212-4ffd-ac92-cc78ebd7acab"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "20551c5a-ab0e-4246-b0a5-85b5ef3108d6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "01cf8859-05b3-417e-a4a1-cabed8bd9c27"
            }
          }
        ]
      },
      {
        "id": "4c47b309-4f3e-46ee-9ccb-ba4c131e285d",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "b21abf01-7e44-4891-84b2-2c0e13834ee8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5d477f83-cf86-4044-9ee9-d25b131600a4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ae226765-436a-49ae-9997-3e3f7c2508a3",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4526c59-d9b7-485e-b81f-5f585413a682",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "278fdc3b-5e1b-4bb2-9d76-a58084530719"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78e81876-4a88-444e-afef-a6da3280097a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b881253d-8a7f-4a15-82ac-dec16f2e035b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8fddb955-c088-43eb-8a2b-157ca58410c0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b275475-a99b-4a50-983b-6f1a32e976c2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c69274da-3fc0-4aee-8e52-a03604b9e8cb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ff29e64a-7b92-4fdf-bfc6-f7bf0067ac5d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9caa88ac-cd5c-4e0e-ad4c-e6b6f1df6688",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ff7572a1-9887-432f-a3e1-c24b30fc492f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c546dabe-0d90-4eee-b425-cf27cb3f3f22",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8aa82503-0a83-4af3-afa4-89a0695111a8"
            }
          }
        ]
      },
      {
        "id": "41f04314-8b8e-44b4-9dee-41dff13e9490",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "47b7ff27-8e58-4c14-9d3b-9b904818500d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1b671a1d-995d-47a2-921f-d8a71d3038d9",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "467543be-2a92-4d54-8bd2-975aa89b8a51",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4692c513-30f7-4f95-969f-ff45d37806ed",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "260ddcb6-8a45-478d-9ff0-cedfad7d2eb8",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 84.57894736842105,
      "responseMin": 6,
      "responseMax": 639,
      "responseSd": 84.65085099590289,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1708821417271,
      "completed": 1708821450665
    },
    "executions": [
      {
        "id": "ce615905-094b-440d-a4c2-312b20dfb6d2",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "33379f75-42b8-4ff4-981f-fa4b380ca4cb",
          "httpRequestId": "43a310b3-eb68-44ee-aa8a-12b99e7b225e"
        },
        "item": {
          "id": "ce615905-094b-440d-a4c2-312b20dfb6d2",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "979820bc-d43c-45ae-ae2c-d70a6d374dc6",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 0
        }
      },
      {
        "id": "8550d1b9-8861-49dd-8eaa-6da4820e715f",
        "cursor": {
          "ref": "f209a571-8fec-4f5e-b5ba-5311b2bf43ea",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d8c9321f-6f74-41c6-9bce-b792dfc46a3a"
        },
        "item": {
          "id": "8550d1b9-8861-49dd-8eaa-6da4820e715f",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "201e6345-64c7-413c-a00e-ad728f88df90",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "0c723d6a-ea92-4038-85e7-cfca005b779d",
        "cursor": {
          "ref": "1983738f-c1a8-4199-8f51-01ed8e0f1597",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "144c24ba-38bc-4a53-956b-2fe0d771a8b3"
        },
        "item": {
          "id": "0c723d6a-ea92-4038-85e7-cfca005b779d",
          "name": "did_json"
        },
        "response": {
          "id": "b0e7d421-d3fc-4453-bd01-b5e49047db95",
          "status": "OK",
          "code": 200,
          "responseTime": 378,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ed899ec-3d36-40bd-b6a4-9e094af1c986",
        "cursor": {
          "ref": "8392d17d-5afa-474b-9f0a-588f4c80d02a",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b28f8c1b-c0d0-476d-9465-d47627614952"
        },
        "item": {
          "id": "3ed899ec-3d36-40bd-b6a4-9e094af1c986",
          "name": "did:invalid"
        },
        "response": {
          "id": "e9eaebf5-b67d-4b77-aec9-402bcab53928",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ed899ec-3d36-40bd-b6a4-9e094af1c986",
        "cursor": {
          "ref": "8392d17d-5afa-474b-9f0a-588f4c80d02a",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b28f8c1b-c0d0-476d-9465-d47627614952"
        },
        "item": {
          "id": "3ed899ec-3d36-40bd-b6a4-9e094af1c986",
          "name": "did:invalid"
        },
        "response": {
          "id": "e9eaebf5-b67d-4b77-aec9-402bcab53928",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21f56252-a649-44a2-8b9d-934a9a969125",
        "cursor": {
          "ref": "4a32e4fc-647f-4be5-a21c-154f3540984d",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "95d0ef77-515d-4707-bad5-b32a8d900f58"
        },
        "item": {
          "id": "21f56252-a649-44a2-8b9d-934a9a969125",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "75e1af74-b6bc-4af2-b6d7-d46925a0c22d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 370,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77c920ad-664a-4518-a051-234273090595",
        "cursor": {
          "ref": "f259439d-d50e-4a9c-b65f-032b59c81375",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "3072570e-ccd8-40fe-b7b3-ef6ac8e27ba1"
        },
        "item": {
          "id": "77c920ad-664a-4518-a051-234273090595",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "f4c79e85-b791-404b-b54f-ebca0c8d2895",
          "status": "Not Found",
          "code": 404,
          "responseTime": 53,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21640b10-39df-455a-8376-30b095d2c2d9",
        "cursor": {
          "ref": "d1dacfee-8ab6-4ce2-938d-0d3e65395b82",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "aa342cd6-6ef0-4709-912d-a78c3823cb48"
        },
        "item": {
          "id": "21640b10-39df-455a-8376-30b095d2c2d9",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "ca5093f9-9876-407b-b0e0-e532da49da75",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d28b3a34-903b-42ed-985e-96ccd4180870",
        "cursor": {
          "ref": "9bf142cd-02eb-4a80-847d-e8ce1b5ed06f",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "86d5ed2c-b73b-43b6-8e77-fce269eb9522"
        },
        "item": {
          "id": "d28b3a34-903b-42ed-985e-96ccd4180870",
          "name": "identifiers"
        },
        "response": {
          "id": "e4873464-0f37-4635-811b-3a6d37f73214",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef480f62-4306-4265-8072-a1f870b60838",
        "cursor": {
          "ref": "20036396-6f4c-4b69-9bb2-d46ec28fcaec",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "64270ffe-3a43-43e4-8ca3-209ce853b1ca"
        },
        "item": {
          "id": "ef480f62-4306-4265-8072-a1f870b60838",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "abf33046-c82c-4a3e-8b4d-4a81656ccb1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "446e4c25-75da-4cfe-bf09-31198cbb3816",
        "cursor": {
          "ref": "5d1b0dcc-43c9-4fc9-a63f-4391ba12f243",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "29b185ba-ff66-4032-b403-5e0b28bc0b50"
        },
        "item": {
          "id": "446e4c25-75da-4cfe-bf09-31198cbb3816",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "dcfcda05-0fb4-437c-aa98-d5404b4a197a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b0ec2d4-22e9-4e6e-8f9c-85de08815c10",
        "cursor": {
          "ref": "bfd0ff66-6619-4701-ba17-d137dc61fb45",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "80f1c43d-67f5-4e07-952a-e997da6889d4"
        },
        "item": {
          "id": "3b0ec2d4-22e9-4e6e-8f9c-85de08815c10",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "db3aa704-0662-474e-933c-c281601ffae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2243beb-c073-4f1f-ac4a-c62ac1265ce2",
        "cursor": {
          "ref": "05e6b19f-786a-436f-a990-e1ec4bfbd464",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "e1706b36-39a6-43c0-952a-9eca97afc487"
        },
        "item": {
          "id": "e2243beb-c073-4f1f-ac4a-c62ac1265ce2",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "982aa9b4-ccaa-433b-a3d3-6a2883feaa62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdf1c9c8-25f7-4fe6-82f0-54f659eb2fb0",
        "cursor": {
          "ref": "336eb943-3524-4a11-97bf-a9d650de9d34",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "e817dae6-b2ec-48ab-ab0a-14ce703a2cbd"
        },
        "item": {
          "id": "fdf1c9c8-25f7-4fe6-82f0-54f659eb2fb0",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "f99b2c4c-e3e4-4fe1-9d88-7233542dcf3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eb2292c-0107-4a10-b16a-8e919f205c89",
        "cursor": {
          "ref": "c69e5c76-a965-4c41-9460-71d64873a922",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "d7973816-992c-4eda-807d-3cfe8ca566a6"
        },
        "item": {
          "id": "2eb2292c-0107-4a10-b16a-8e919f205c89",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "9c706b85-1dd4-411e-a1a2-817f85e8267d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b83d6dd-4a81-48e9-8ca9-9e1ee7732947",
        "cursor": {
          "ref": "1398a340-bde6-47f7-a636-7634e7d2b014",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c9cd456b-cc15-46af-8757-c1012895223c"
        },
        "item": {
          "id": "4b83d6dd-4a81-48e9-8ca9-9e1ee7732947",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "43b09cfc-cb11-454b-a056-827c339b1616",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4290379d-c3bd-4532-9176-ae29e3113fd7",
        "cursor": {
          "ref": "7a588217-d52a-4a17-973d-a53d10c7d939",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "96b12a4b-6848-4196-87e4-a0c7e26eb579"
        },
        "item": {
          "id": "4290379d-c3bd-4532-9176-ae29e3113fd7",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "683209ec-57b2-4913-bdae-d1d2a2c4cf90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e727b53-3dca-4cc6-88e9-2e4bea9a166b",
        "cursor": {
          "ref": "998641bd-3cb0-451f-8b00-463e688a093f",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "8e32ac20-61a3-4a19-8080-57edc38fae68"
        },
        "item": {
          "id": "5e727b53-3dca-4cc6-88e9-2e4bea9a166b",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "01cf0fa5-02c2-42b8-a296-89e58ad5295a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0f8ab59-0fb3-4700-acf7-961f8c33eeb3",
        "cursor": {
          "ref": "2a8215b3-c080-46e1-90ee-46e1b9ad82ec",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "0fd8b061-292e-454c-92db-3a9fee5ffe9f"
        },
        "item": {
          "id": "d0f8ab59-0fb3-4700-acf7-961f8c33eeb3",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "06891dbc-ee72-447f-a81e-cec11cb3e18c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de7729fd-ffa5-4eca-9538-f321938fa1f5",
        "cursor": {
          "ref": "a525305f-a238-415a-8e72-7f37b6c5b4dc",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7f0ffaba-0f6a-4fc2-bb7d-97c734772c71"
        },
        "item": {
          "id": "de7729fd-ffa5-4eca-9538-f321938fa1f5",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "0eecad5f-cb6c-4aee-8f7c-48dffbbd29ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb35cb15-4a6e-46bf-9de6-36f72a0b3d45",
        "cursor": {
          "ref": "1e53239a-60a8-494d-a82c-63b023bdde42",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "c90e8c97-b652-4f9b-a3c4-d483d27d5d78"
        },
        "item": {
          "id": "fb35cb15-4a6e-46bf-9de6-36f72a0b3d45",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "c3c4c104-e4bb-4ab0-9d82-3c9082ebbf59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f59d18e8-c663-4d80-8758-7c7fe465327b",
        "cursor": {
          "ref": "3138c801-cb05-4df7-854a-8230c39b37a7",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "7e34ac42-9446-405b-bebd-50e09a3e6240"
        },
        "item": {
          "id": "f59d18e8-c663-4d80-8758-7c7fe465327b",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "718680d9-4270-4c7f-8228-8447358bbc16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a96480b-2acf-4b86-bfde-c5a47e1af191",
        "cursor": {
          "ref": "7311f7d6-5d0f-44ba-9545-ad484d5d2762",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "574fb07c-a70b-4f15-b391-f0b35badce28"
        },
        "item": {
          "id": "7a96480b-2acf-4b86-bfde-c5a47e1af191",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "722cc57b-3ef9-4528-830d-9c71af942b9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd550892-4cc7-4659-8e27-8f6cece05462",
        "cursor": {
          "ref": "3d65a000-7de6-42a5-a75c-416151a64362",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "d58f90f8-80b9-46f1-ab8c-b7eb496075fc"
        },
        "item": {
          "id": "cd550892-4cc7-4659-8e27-8f6cece05462",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "495237ff-db77-4a5a-90a6-6cea87e10eec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89ebc891-3ad5-4292-9934-4b9bb5714910",
        "cursor": {
          "ref": "2fd09f0b-949e-4a40-84c3-63de11e9410b",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "ccd3555b-6d96-42b6-8d09-865ed7ca17e5"
        },
        "item": {
          "id": "89ebc891-3ad5-4292-9934-4b9bb5714910",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "8d7bc9e4-cc81-48fa-a08a-c912c13df626",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b9c7fdc-3ab4-43d7-84ca-fd86c946fc81",
        "cursor": {
          "ref": "f1d02ece-cf4a-4d24-9890-e8bf57d84226",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ad4711e5-6e9c-4f26-b18e-36b6d808a550"
        },
        "item": {
          "id": "3b9c7fdc-3ab4-43d7-84ca-fd86c946fc81",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "207579ae-7c1b-45eb-b93b-9d584b5a3717",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a632ef7e-27fd-4c4d-9a32-9050ab1334bb",
        "cursor": {
          "ref": "b0dc6d41-c0d3-4dc1-92a7-c9ae07f7d63c",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "9094a63b-96b7-4177-a760-d40ca80e7f71"
        },
        "item": {
          "id": "a632ef7e-27fd-4c4d-9a32-9050ab1334bb",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "6e0a7b4b-2d52-49b5-9567-4d8700c2acb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfcd9a1d-428b-4ab5-b0d7-51212c7f03fd",
        "cursor": {
          "ref": "b9c70e5d-5691-4ea0-989d-b45bc45e4003",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "91cf907f-7880-42b4-95db-e14963b33f21"
        },
        "item": {
          "id": "bfcd9a1d-428b-4ab5-b0d7-51212c7f03fd",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "5833eed9-c4ad-465b-a776-7ab6edb3438b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "663cc790-17ed-4f91-b559-6f07be25605a",
        "cursor": {
          "ref": "d7a0a5f9-e558-4b6b-9ba2-11e6a7160043",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "682063ed-aa38-402a-8512-f9cbf2ec37d8"
        },
        "item": {
          "id": "663cc790-17ed-4f91-b559-6f07be25605a",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "795ae8f0-246c-495a-8c80-c98e74dc2543",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04312e1f-0489-48ae-8d68-82e7657d7ae5",
        "cursor": {
          "ref": "b14ebb3b-4d25-4b02-844c-a8f014001c58",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "8dccab8a-b622-4ca1-babf-217d93c378be"
        },
        "item": {
          "id": "04312e1f-0489-48ae-8d68-82e7657d7ae5",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "47cfc7ae-990c-4487-8f7b-381810241aea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0905fcf-72b9-4448-a5e3-d183c0a68cb2",
        "cursor": {
          "ref": "24525841-891d-4cc4-a800-243cdcd22342",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "79b2a056-48b7-442a-8571-b5597dc04082"
        },
        "item": {
          "id": "d0905fcf-72b9-4448-a5e3-d183c0a68cb2",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "7be415b2-0187-4072-863b-4ce440c34fb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b44197c9-e7b5-4ab3-a8b5-bbff65ebd777",
        "cursor": {
          "ref": "533f8ac9-66a7-45d0-9749-55d5cdca844b",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "4828d958-7902-4528-98a6-f4456daa5005"
        },
        "item": {
          "id": "b44197c9-e7b5-4ab3-a8b5-bbff65ebd777",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "4c487c2c-eb3c-4520-ae5c-12b8f0a4b602",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c54dd96d-103c-4313-89f9-5999a2428e70",
        "cursor": {
          "ref": "20d0bb47-6407-488c-8ba6-8f4dd86ffc98",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "565743e0-a84c-4023-b7f4-848636f140c7"
        },
        "item": {
          "id": "c54dd96d-103c-4313-89f9-5999a2428e70",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "35f7f7f3-8372-4ccf-8da7-23277db237b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93c1d71c-0067-400a-8f7c-e535c582bbeb",
        "cursor": {
          "ref": "3e8b7abb-9f7f-4ff0-bcef-2970d56c317c",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "f0fc2b09-00e3-4250-84b4-deca657ad2b7"
        },
        "item": {
          "id": "93c1d71c-0067-400a-8f7c-e535c582bbeb",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "935f9afd-8207-46d5-80b2-9b56090dc5d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb84bdbd-10a2-42e6-b873-7c7756736d5c",
        "cursor": {
          "ref": "6f1afe5f-26ff-48d6-a2cf-c3a2944d929f",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "06cffdbd-2434-4b38-8d5d-5da737e31916"
        },
        "item": {
          "id": "fb84bdbd-10a2-42e6-b873-7c7756736d5c",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "c3deb69e-de7f-4cab-a214-e52affbeede3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cf4e415-5969-45a8-ac68-ede067254bec",
        "cursor": {
          "ref": "6fb5770f-3c03-4ce4-a1a8-91b7dadfb15c",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "c9d643a7-2104-4463-b303-796e9cb18c56"
        },
        "item": {
          "id": "5cf4e415-5969-45a8-ac68-ede067254bec",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "45f2689d-128e-48c9-9b1a-a2f8650b3d09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a197fec8-acd5-484a-8fb1-b69ddddde55d",
        "cursor": {
          "ref": "278810d2-bd7b-4146-a061-5d42232abb92",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "68da2bf0-fe9c-4d81-8f91-ce5463910888"
        },
        "item": {
          "id": "a197fec8-acd5-484a-8fb1-b69ddddde55d",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "b9913d0a-5c56-451e-97d4-b6f1263c0d59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b81157bf-e066-4f28-a389-b5987c2738c9",
        "cursor": {
          "ref": "801d62d7-3e40-4ce7-99c6-67ebbd083339",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "1e99ce6e-be07-459c-b364-1438eeea5dd2"
        },
        "item": {
          "id": "b81157bf-e066-4f28-a389-b5987c2738c9",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "cdf31e6b-6433-44cd-9a1f-2f2344fe9872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2fb944a-89a5-4491-a55a-080b1f3ed479",
        "cursor": {
          "ref": "956c2e27-0fb9-467b-8ae0-575dc4924f17",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "64b70725-772d-4882-8a79-731fe068818b"
        },
        "item": {
          "id": "f2fb944a-89a5-4491-a55a-080b1f3ed479",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "ecc35fea-e2a7-435d-9095-f63c5b2279c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b66a2324-3671-4500-87b0-c7bfafb4b77d",
        "cursor": {
          "ref": "ed5ba87b-cd51-4957-8227-b6d1ab8c1265",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "83dc5a5e-300d-4d09-a424-01e0a4b5f036"
        },
        "item": {
          "id": "b66a2324-3671-4500-87b0-c7bfafb4b77d",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "fe886d58-8bcc-44e2-82bc-4ca5fdb325e3",
          "status": "Created",
          "code": 201,
          "responseTime": 639,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "3dd49f4b-39f1-4222-80fe-18d78eff2f30",
        "cursor": {
          "ref": "76544216-ddda-49cb-85d2-5e354689e953",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "48351315-3a54-4237-bc1f-cf318aefa886"
        },
        "item": {
          "id": "3dd49f4b-39f1-4222-80fe-18d78eff2f30",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "a1e19ab4-02d4-48d4-a548-c0b6822f84ce",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "f3f4d6e8-a3de-4273-bcca-6ac642215d63",
        "cursor": {
          "ref": "2cdc6e54-0ae2-486c-8664-01995cf1781f",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "86df0d0d-2c0b-4358-a97f-d6302ce8ae15"
        },
        "item": {
          "id": "f3f4d6e8-a3de-4273-bcca-6ac642215d63",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "af89f0a2-2333-47fb-87ca-cd14085c3e42",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "896144af-afdb-4315-8cd5-4c53c0c1aa03",
        "cursor": {
          "ref": "65b48da0-5950-4f91-98a3-41d578e637d1",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "8af85428-603b-4bf9-b6a3-22c0f997657e"
        },
        "item": {
          "id": "896144af-afdb-4315-8cd5-4c53c0c1aa03",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "ae6df8ac-902f-4e59-b3f7-59df45d9a15d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a570cf54-2d9e-41fd-99d0-a371db4c71bf",
        "cursor": {
          "ref": "01c7f604-8b41-412f-8e9c-f997ade9a2bc",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "6d7e8cd1-a537-46e3-9e36-f0ed684865ec"
        },
        "item": {
          "id": "a570cf54-2d9e-41fd-99d0-a371db4c71bf",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "d4b18cfe-c1f3-43ce-a94f-2df989104280",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "6f4744eb-530f-412c-8301-dfaa36762985",
        "cursor": {
          "ref": "5fbfb514-f3dd-43a1-bdb9-f383c40c41dc",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "b5a7c12d-e3eb-481c-8ab1-45793bec8abb"
        },
        "item": {
          "id": "6f4744eb-530f-412c-8301-dfaa36762985",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "95b64bd8-b76c-4bb7-bc78-f641bbc44451",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "59656a19-d8bd-432e-9442-d2b5be97ede3",
        "cursor": {
          "ref": "d84eeada-403d-4596-8c79-eca3d87b7b94",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "9027f251-5ced-40d5-a3bf-e5cdfe45b803"
        },
        "item": {
          "id": "59656a19-d8bd-432e-9442-d2b5be97ede3",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "15789552-f3e0-4e4b-a9e4-2641289f0f11",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "a2c1c2fe-575f-438f-b8d9-5771d2713dba",
        "cursor": {
          "ref": "281d987c-cd8b-4c8b-8fab-b1030a25da06",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "fa514d40-db02-4870-a739-d47531eef8bc"
        },
        "item": {
          "id": "a2c1c2fe-575f-438f-b8d9-5771d2713dba",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "72444ae8-f92a-434c-9dfb-37c43834f10c",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "85b2a72f-a656-4c9c-a842-3668cdae5bec",
        "cursor": {
          "ref": "d56bc10c-a1dc-4558-9e1b-bb2d9a6274a9",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "ff98945c-7450-45ad-9767-c0a5a6a8b25f"
        },
        "item": {
          "id": "85b2a72f-a656-4c9c-a842-3668cdae5bec",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "d1dece04-6fd6-42bd-80fc-afd5fafc0036",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "535c9582-e0bd-463b-a187-cb489b23e18d",
        "cursor": {
          "ref": "e7d902ba-19da-4375-9483-32c59bd0fbe3",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "85ef23b9-d360-4b03-b7c9-658de05de140"
        },
        "item": {
          "id": "535c9582-e0bd-463b-a187-cb489b23e18d",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "168e2dad-b1c0-4d9e-9039-a7cf7483578d",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "10ac923e-cc55-436f-84cf-cc5fbceba3fb",
        "cursor": {
          "ref": "f4d32995-ac8d-43a1-9d77-08b53d2ef5fc",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "28e74e62-3fec-4dc3-bc8d-6f73e8cd3b29"
        },
        "item": {
          "id": "10ac923e-cc55-436f-84cf-cc5fbceba3fb",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "35e0e943-b7c8-4f69-a8d1-2cae73b30b26",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "615cd679-d052-4c13-b5a4-efc0a2a664fe",
        "cursor": {
          "ref": "489a0d36-b1fb-4094-ba43-9cb9924b80a4",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "dbac365e-bc0f-4cb3-a74b-622dd2176bec"
        },
        "item": {
          "id": "615cd679-d052-4c13-b5a4-efc0a2a664fe",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "02521090-b83b-4149-b331-8e2e590a6475",
          "status": "Created",
          "code": 201,
          "responseTime": 439,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "cf1bfd16-837e-4eac-9402-0b03be3825dd",
        "cursor": {
          "ref": "8c02364b-3a3b-43ea-9133-c07305d9372a",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "681e0820-6dd2-4f24-836d-3761fd2fe812"
        },
        "item": {
          "id": "cf1bfd16-837e-4eac-9402-0b03be3825dd",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "23e52cc7-b4d0-411a-8146-e4de1e553525",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "c89c0c2b-79be-442f-b1e7-fcc29b861661",
        "cursor": {
          "ref": "787d5ca9-f1e6-4f86-9db4-6b003f564cbb",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "938316a6-d586-4a98-94f9-3cab2e56d060"
        },
        "item": {
          "id": "c89c0c2b-79be-442f-b1e7-fcc29b861661",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "69e43f9f-5b14-4567-b719-127cfe7cae2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ec78dec-f2d5-4a2f-a83f-d77246b13b7c",
        "cursor": {
          "ref": "7f3d2624-821a-45a6-84a3-b305af093e54",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "a58e410c-5cb2-4748-8926-b895887f1128"
        },
        "item": {
          "id": "4ec78dec-f2d5-4a2f-a83f-d77246b13b7c",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "50dee70c-fbe8-4aaa-bcdf-4f53778ac484",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1c4f9d7-43c1-4441-be1d-5db7cedabfe0",
        "cursor": {
          "ref": "ec8c4792-2875-4bcf-a2a1-22b2ed539cd0",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "31c54de1-1d30-4b76-b6b8-3ed8859f0367"
        },
        "item": {
          "id": "a1c4f9d7-43c1-4441-be1d-5db7cedabfe0",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "ba539aa9-641b-453b-8538-2422426fcd7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9d69a7b-8ae5-4ca3-9b6a-b019554aacc5",
        "cursor": {
          "ref": "d07c9fa9-efed-4856-a807-04d3fe2efd4b",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a5f63d39-9a1b-4604-a1ad-ca4e7651c332"
        },
        "item": {
          "id": "e9d69a7b-8ae5-4ca3-9b6a-b019554aacc5",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "adae6f91-a3e5-46c3-a16f-05fc83222eaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03d3cb68-eb76-4658-8c3e-5de184aa41d8",
        "cursor": {
          "ref": "391f1fb9-9df4-4053-a557-4c6848212b1d",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "04cdd108-95df-4fbe-b900-c197b1a8353d"
        },
        "item": {
          "id": "03d3cb68-eb76-4658-8c3e-5de184aa41d8",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "485c4449-0b3b-4f6c-8858-ccb0ace34e92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd4db294-de15-4f5f-b0e9-69f14bac3be7",
        "cursor": {
          "ref": "1d00b12e-c414-4f1c-80a3-ecda7bcf5f16",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "5e1705cc-0b6d-4f48-bf77-b47da11da7e1"
        },
        "item": {
          "id": "dd4db294-de15-4f5f-b0e9-69f14bac3be7",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "adec8e18-a3d1-41cb-841f-f1833ceb82d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7b16493-00a7-486d-a6d2-20e3b7568b17",
        "cursor": {
          "ref": "588dd537-2bdc-470a-a291-883aa658c7ba",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "75cf0b41-3842-44b3-b1ad-60b25036d342"
        },
        "item": {
          "id": "c7b16493-00a7-486d-a6d2-20e3b7568b17",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "33ac26d5-17b8-4cf5-b318-14690cf19348",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ba4fd8b-9d3f-4688-9902-5c1919cb3446",
        "cursor": {
          "ref": "8fc705bd-2cee-4d66-95b3-ea5e23c2afac",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "b3905d47-4b93-44d3-ba9b-d4060e77a9d8"
        },
        "item": {
          "id": "7ba4fd8b-9d3f-4688-9902-5c1919cb3446",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "1e260d40-4792-48fe-b44e-e0bc574cc44c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a0dfaa1-c244-4f7d-915f-2c535607057f",
        "cursor": {
          "ref": "a6dcaaa0-b1ae-48b9-9443-7d74ff457dde",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "c4982042-4ca1-45cc-b8b5-e589feca5240"
        },
        "item": {
          "id": "8a0dfaa1-c244-4f7d-915f-2c535607057f",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "f04f750a-1c52-4d60-bce5-274536d2762c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f782125c-918d-463f-b119-3580baf82e5c",
        "cursor": {
          "ref": "50b55f70-6281-4739-a699-677bbd5c592c",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "195be210-3b26-4db6-bffa-b043240a1f31"
        },
        "item": {
          "id": "f782125c-918d-463f-b119-3580baf82e5c",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "de65c890-5f97-4ac4-9cda-d18a1bdc7453",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "481eaa69-c046-474e-af75-88761f003602",
        "cursor": {
          "ref": "8e8e395d-2eb8-4d57-8019-0686ec4c2318",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "248b40bf-c501-4cf6-832f-d8bf8927f28f"
        },
        "item": {
          "id": "481eaa69-c046-474e-af75-88761f003602",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "2ffed948-37d2-4f47-acbf-bc007f46395d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "769175a7-23bb-45a6-97fe-0172d1bcbd93",
        "cursor": {
          "ref": "fd86525d-bc3a-4405-a07e-9ff53de9d977",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "9686ea5f-ac4f-4d08-8a29-c4c98f252e3a"
        },
        "item": {
          "id": "769175a7-23bb-45a6-97fe-0172d1bcbd93",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "74334cb9-d484-49c8-952f-33bd0795e9b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b18daf4e-8ca3-44e4-a3d1-55875bba408d",
        "cursor": {
          "ref": "99ed7c3f-3eb8-42ba-8447-5b40c6ff3af5",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "8fd7d1ab-c53b-4f86-8eda-ea9b90bdacc5"
        },
        "item": {
          "id": "b18daf4e-8ca3-44e4-a3d1-55875bba408d",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "22698477-0abb-437a-bbb8-eeb9be7e32df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b2673b2-2cdc-4810-9495-5aaa2daeafad",
        "cursor": {
          "ref": "d89601e6-28f4-4db5-b640-6c9d296a3a8d",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "73f108c7-3880-4d69-b91a-f86da29eb8d9"
        },
        "item": {
          "id": "3b2673b2-2cdc-4810-9495-5aaa2daeafad",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "834a41ea-f1cf-4b2d-a3b2-d5e9287f7961",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "513a355c-bf83-47d6-8166-46558cec3b15",
        "cursor": {
          "ref": "d3642918-82e0-4593-b4b1-ab07c4151e55",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "21341ad6-7c23-4240-89ad-1d9f38c0ceae"
        },
        "item": {
          "id": "513a355c-bf83-47d6-8166-46558cec3b15",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "eece31e1-ffb2-4a84-86ff-8001c30661d6",
          "status": "Created",
          "code": 201,
          "responseTime": 334,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "4ec6c819-c641-49ce-9293-510927c84279",
        "cursor": {
          "ref": "e9a63e90-dc09-4847-8807-7a669900739e",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "887fdeb1-6a55-4588-927c-8f7e67f6548f"
        },
        "item": {
          "id": "4ec6c819-c641-49ce-9293-510927c84279",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "53d5a52a-e3b4-4057-9b1d-08f29665ca44",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "b0d1a29a-943c-4716-89f9-2eaf27b3a231",
        "cursor": {
          "ref": "ec8c2ae9-f817-4ffd-a2a9-94db9c1416ee",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "0403bc50-e46c-4a3f-bdff-72d464b63403"
        },
        "item": {
          "id": "b0d1a29a-943c-4716-89f9-2eaf27b3a231",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "356846f5-026a-47ee-8837-4f782cbd4b9a",
          "status": "Created",
          "code": 201,
          "responseTime": 317,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "26557d3a-c108-4e6c-b0d5-37c6fd3ae1c0",
        "cursor": {
          "ref": "ef43a0b2-f19b-4d53-b170-d9c69b2eb2a8",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "73839b43-7eb9-4553-9a02-440738460489"
        },
        "item": {
          "id": "26557d3a-c108-4e6c-b0d5-37c6fd3ae1c0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "15093e55-9aca-4da5-bfd8-62203a1dc602",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "af500361-51bc-4c8b-baa1-1221c7c47050",
        "cursor": {
          "ref": "611481d4-4e63-4216-b289-ef3b5025e79f",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "d0951924-c850-474b-a1a2-cb965956e472"
        },
        "item": {
          "id": "af500361-51bc-4c8b-baa1-1221c7c47050",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "1ac2abe6-340c-4d91-acf0-1979d4cfdc0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6ca7a98-1838-4d10-a6d8-783ae5624963",
        "cursor": {
          "ref": "d6bcbace-9101-40c6-b673-519728a7092f",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "97364d06-6b8e-44d3-b386-abfb88f2a075"
        },
        "item": {
          "id": "f6ca7a98-1838-4d10-a6d8-783ae5624963",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "fc2c3566-b18e-4588-a9cc-efb990f0916a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b906dd79-4c5b-43a2-870f-907a94d75299",
        "cursor": {
          "ref": "ee272469-2c18-40fd-81c2-76bea980339f",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "2fd9fee8-8f6a-4fa5-9a30-15c6cf3981bf"
        },
        "item": {
          "id": "b906dd79-4c5b-43a2-870f-907a94d75299",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "77192520-be6c-4743-85ec-a4adc9cb0480",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f35034d-6d95-40c9-a19b-19749b1c148c",
        "cursor": {
          "ref": "96280d82-88b3-43ee-a674-794c3dbf5a99",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "4476430b-e84d-4696-b0c7-73d813df7c3d"
        },
        "item": {
          "id": "2f35034d-6d95-40c9-a19b-19749b1c148c",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "a5fcde69-06e2-4155-958b-060438348ec8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cd2d242-adb3-4963-bc10-e576779034f7",
        "cursor": {
          "ref": "26e05bfb-ca94-4b96-972a-bfe074db3a21",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "ecd82b28-1c97-4621-8a06-0ed63a0d2211"
        },
        "item": {
          "id": "2cd2d242-adb3-4963-bc10-e576779034f7",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "ea9333ae-6585-4ad2-83d9-472c2d154f9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82d3d154-888e-4d78-8763-a38e3e6104f4",
        "cursor": {
          "ref": "0b9932c9-5a93-49ca-b5c7-31a9c4c8c094",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "6341d910-b350-4670-b9d2-e38b5e669137"
        },
        "item": {
          "id": "82d3d154-888e-4d78-8763-a38e3e6104f4",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "b6f8b33a-f570-42ca-b995-37566e021b14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96c4e084-29b5-496c-a3a1-be3921b0ee2a",
        "cursor": {
          "ref": "99d8aa0e-e9ba-423c-9df9-5534dc3b5f2d",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "c1d92d75-f0e6-4d67-9458-e97a4ba22df1"
        },
        "item": {
          "id": "96c4e084-29b5-496c-a3a1-be3921b0ee2a",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "e788af1c-adbe-4a61-91e9-2b998fba4587",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c066313-6bb3-4ba5-bbfe-d840b84224a6",
        "cursor": {
          "ref": "344690b6-bdb2-4f42-8beb-b7c0cb5fabe5",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "504d0a99-40bf-48a4-9583-0e908a20933e"
        },
        "item": {
          "id": "3c066313-6bb3-4ba5-bbfe-d840b84224a6",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "c139e4a9-f430-4a74-a603-c394ece29c89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b854e04-cd3f-4433-9b04-6692b7c73898",
        "cursor": {
          "ref": "0b6a0dc8-ff3d-4109-bc46-1a71398fd37f",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "970eb809-b622-4e92-99b1-4f4ade7f8348"
        },
        "item": {
          "id": "4b854e04-cd3f-4433-9b04-6692b7c73898",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "4376f670-5aef-4a2f-b263-5f74c14dc480",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b104d721-a33e-4e84-a9cc-729a071b012f",
        "cursor": {
          "ref": "62fa6fe4-ca2e-4961-b9c6-cb66634a8a6f",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "359979a7-5bb6-4bcf-b3c9-3f641b1c35e2"
        },
        "item": {
          "id": "b104d721-a33e-4e84-a9cc-729a071b012f",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "38c3d4cf-c344-417a-9f48-c07127d8bb39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07379dda-71af-4592-a568-bf6d50e953f3",
        "cursor": {
          "ref": "a43f42e7-fe07-48ca-9120-5555a52e13ca",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "2cb2ed14-627c-46d4-8003-9ca7f5a42e04"
        },
        "item": {
          "id": "07379dda-71af-4592-a568-bf6d50e953f3",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "674a4ad8-c42e-41f4-adb7-032be3fddc36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfa2a037-e43e-4f46-ab44-92c91df67b98",
        "cursor": {
          "ref": "e4ff2991-ae63-4e0f-8b6c-96a9d7469ddf",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "b3294231-8c89-4333-adf1-5ab423ab7b95"
        },
        "item": {
          "id": "cfa2a037-e43e-4f46-ab44-92c91df67b98",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "06b032aa-186e-4b98-9280-ed43389f3d27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "730df3c1-7adb-43a6-a204-49bf45db3044",
        "cursor": {
          "ref": "79c05836-4246-4783-a601-c87282f2df74",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "31b236ba-5944-4a59-97ad-4c0748952a4e"
        },
        "item": {
          "id": "730df3c1-7adb-43a6-a204-49bf45db3044",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "f1e8287b-ab2a-4406-96bb-b9b57c742042",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c4cfecc-c75c-4853-8d49-4121600bb8fd",
        "cursor": {
          "ref": "35d37253-4f9c-4456-ab9e-30ee229ec095",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "8a5d23de-0d72-4461-89d4-0d50982542fd"
        },
        "item": {
          "id": "5c4cfecc-c75c-4853-8d49-4121600bb8fd",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "379d039a-4c59-4a11-8114-5f6b8fb630c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45c6f75c-9efe-425b-b9d7-414f514e9888",
        "cursor": {
          "ref": "504e8d99-bf6a-4bff-9e4f-dd1e7bfb93aa",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "c2fe8b53-1e86-43e7-907f-3155267d24e9"
        },
        "item": {
          "id": "45c6f75c-9efe-425b-b9d7-414f514e9888",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "ba48b986-bb68-4871-b373-2aead6e0cb33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfed0965-aedc-46b0-a374-48171250229e",
        "cursor": {
          "ref": "32b9ddac-bec7-4e07-b31e-965673d17ed7",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "2d643b23-ab83-4255-9872-ebb81f6d1c93"
        },
        "item": {
          "id": "bfed0965-aedc-46b0-a374-48171250229e",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "f762bde4-c5b8-4103-b76b-310e69541aa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85bf0bca-280e-45ec-bb2a-8da300c83a31",
        "cursor": {
          "ref": "1484a71a-b1ff-4073-b788-ce2a17b36d05",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b80e3a5a-7879-4019-9733-513c736d89ff"
        },
        "item": {
          "id": "85bf0bca-280e-45ec-bb2a-8da300c83a31",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "746bf16c-0784-4b56-9b80-16614e346afe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2bf92d0-1e02-43cf-8969-2daff7fa1da2",
        "cursor": {
          "ref": "bffbd49f-3a46-4b3e-83e7-3af473616a0b",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "844f0a8c-8aa4-4946-b57a-0645f10a060d"
        },
        "item": {
          "id": "a2bf92d0-1e02-43cf-8969-2daff7fa1da2",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "70fd75e3-64a1-4aa0-8fd4-fc95046d38b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dc9b251-5239-42e4-9e2a-efdffd26a8a3",
        "cursor": {
          "ref": "cb937882-0297-4a03-beab-e7fccbdd955f",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "65a0b5ca-390d-413c-b3a0-aa5494d17937"
        },
        "item": {
          "id": "0dc9b251-5239-42e4-9e2a-efdffd26a8a3",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "e9f105dd-ba2c-4b48-8a90-b3df580509ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78d5f036-86af-4cd4-9eef-98758fbdda0a",
        "cursor": {
          "ref": "0b5e7f3b-8a3b-4839-91f6-f74bccf3d3bc",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "7731cf60-eab2-4dfc-8c71-7eba04a4fec0"
        },
        "item": {
          "id": "78d5f036-86af-4cd4-9eef-98758fbdda0a",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "3dc1e0de-83af-403d-ac27-6481e07f56f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a041e7b4-3c25-4eb3-911a-87bc760d5916",
        "cursor": {
          "ref": "3f38cbc1-86d6-49e3-8e1c-a27ae664dbd1",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "faeaa755-2efd-4f65-99b8-25479625157f"
        },
        "item": {
          "id": "a041e7b4-3c25-4eb3-911a-87bc760d5916",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "a39474fb-a349-4272-9778-e61dd0c10a0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55e1629f-89a2-4ba4-ac8f-8d503bd8bebc",
        "cursor": {
          "ref": "7c12c116-906e-441c-8000-552ef0107e9f",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "fdfa6993-7bd8-4d6f-8c54-2b0cf7e8d3dd"
        },
        "item": {
          "id": "55e1629f-89a2-4ba4-ac8f-8d503bd8bebc",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "b0cbd315-b903-4fcb-9219-5394ae8c5e48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a13a1cc-6537-472a-9c5f-dea65ba08101",
        "cursor": {
          "ref": "df94de51-08ef-4dc2-9111-2bcf9e5f0755",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "45cb7a55-8107-4958-8cf5-1e8976e58e7e"
        },
        "item": {
          "id": "1a13a1cc-6537-472a-9c5f-dea65ba08101",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "1c003cae-c26e-49fa-ad7e-a9e065376a73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bdb5266-1649-4c67-85e7-cc121ef6642c",
        "cursor": {
          "ref": "1ab7e384-be1e-4e68-a2e7-f119f407c145",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "cf62403e-628f-4e9f-9070-9bdd7f67c744"
        },
        "item": {
          "id": "2bdb5266-1649-4c67-85e7-cc121ef6642c",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "d19d043e-4ca7-4daf-a0a7-55a3bcb24560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "310e9b8d-de2a-4229-9cfd-f4701c093752",
        "cursor": {
          "ref": "ed30aa4d-57ea-400f-bf08-05cd564219de",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "ae12148b-3262-46b3-bf85-043d24789088"
        },
        "item": {
          "id": "310e9b8d-de2a-4229-9cfd-f4701c093752",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "de582e9e-3e49-40a4-85df-dd2e622be296",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f975254-dc82-4ba6-98ab-f6026b50b2b9",
        "cursor": {
          "ref": "24259ab3-2f9a-463b-ac0b-b20f75c0eb45",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f2e33600-2f7b-43f7-aecf-aec1ef386df2"
        },
        "item": {
          "id": "4f975254-dc82-4ba6-98ab-f6026b50b2b9",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "6cb86f93-7d09-4eb4-b418-fb6cf675e03c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e85b7e3-9b28-450e-8e5e-5673715cdb15",
        "cursor": {
          "ref": "9269cda3-4c13-4557-ae2e-dcadc6f0cc88",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "7f36ece7-0e86-4514-85db-c1bdfde7ba6a"
        },
        "item": {
          "id": "6e85b7e3-9b28-450e-8e5e-5673715cdb15",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "447bbce7-0b12-4907-853b-500c51e97781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23c49ce5-7aa4-47e2-abf1-c2df05f5d7d6",
        "cursor": {
          "ref": "6b6f8f28-9fc6-4481-a0c0-f0a76957494e",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "fd855e3b-a6e0-4827-a590-c9c459ab542f"
        },
        "item": {
          "id": "23c49ce5-7aa4-47e2-abf1-c2df05f5d7d6",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "0b53161c-5eb8-44b2-87a1-9c1f38fb001c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "632c51a6-4181-4cd0-adfd-ed6340b5c680",
        "cursor": {
          "ref": "32c23239-bbec-45f1-aca1-ac8cdc5b8ea8",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "18e3072e-9f89-410d-9e3d-4ff49d43e8bc"
        },
        "item": {
          "id": "632c51a6-4181-4cd0-adfd-ed6340b5c680",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "afaeb1ab-1483-4798-837a-e9812cc14004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97b63816-64a3-4668-bbe1-8f2b8175cfe6",
        "cursor": {
          "ref": "87c9f7a0-1f9d-4911-8b28-3277f3b34874",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "8cbc3f7e-13d1-47b1-94c1-fd9f1db3f79a"
        },
        "item": {
          "id": "97b63816-64a3-4668-bbe1-8f2b8175cfe6",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "d3f2d18c-4867-4a87-9981-1085d1b0d1d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d92f326-722c-44f3-ab31-233b84bfaeda",
        "cursor": {
          "ref": "772e1787-3da0-4e2b-92ae-2055cf773f17",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "0948b27c-b0c6-42f6-82ff-b17d8097a97c"
        },
        "item": {
          "id": "2d92f326-722c-44f3-ab31-233b84bfaeda",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "41efe41c-cecc-44a3-8ad4-bfdf01e4afc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0382ca84-795e-40d4-8467-c72016e017a2",
        "cursor": {
          "ref": "9345e53d-421c-4bd8-a695-48069d343189",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "cfd27580-91ed-4b7d-a1a4-04700412c8d3"
        },
        "item": {
          "id": "0382ca84-795e-40d4-8467-c72016e017a2",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "4668a19e-9f14-444a-9c43-0b9778bffe32",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5ba7843-231e-4887-9db1-7acad0577430",
        "cursor": {
          "ref": "6e5df5e3-848e-4f50-b53b-da510a8b9f1d",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "f6f5936f-0a1c-45ce-89d9-dff98722e221"
        },
        "item": {
          "id": "b5ba7843-231e-4887-9db1-7acad0577430",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "6cb5dcfb-24ac-4ab7-8d74-8a0b319b2980",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "29edc540-7891-40af-b878-d56b428fc062",
        "cursor": {
          "ref": "45ef0743-dee3-4d1c-b58f-810ffb35c2c0",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "b2f2f5e8-249b-4e29-ad27-369074d4066b"
        },
        "item": {
          "id": "29edc540-7891-40af-b878-d56b428fc062",
          "name": "credentials_issue"
        },
        "response": {
          "id": "17b727c8-ec6d-4d0d-9e88-014483163a0e",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb0d61d9-308f-4039-b3eb-d8a044ea0daa",
        "cursor": {
          "ref": "38435cc5-3937-40f6-9c2c-6298729ea445",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "74587bf5-b896-4183-ad63-a93309f37d21"
        },
        "item": {
          "id": "fb0d61d9-308f-4039-b3eb-d8a044ea0daa",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "8b9e328e-9762-4ce2-9acc-66ec0f403cd3",
          "status": "Created",
          "code": 201,
          "responseTime": 447,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f14ca8b5-aefa-437e-87fd-52b531c85b5f",
        "cursor": {
          "ref": "05c8816e-a145-42f1-a5a6-49aa5a9e7646",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "6d129ec6-0ae2-4718-9a18-6acd0e439bb6"
        },
        "item": {
          "id": "f14ca8b5-aefa-437e-87fd-52b531c85b5f",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "29cb9509-8a6c-4aa1-947c-0e65f3f0a8f0",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "722296bf-0a90-494d-a2b7-97acc53e9fc3",
        "cursor": {
          "ref": "5681040f-8f11-45ad-9b78-93efe300adab",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "4e0d9789-425f-4ee6-987e-a8fb51610d8c"
        },
        "item": {
          "id": "722296bf-0a90-494d-a2b7-97acc53e9fc3",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "d01dd990-6a61-467a-917b-360e6c9c7895",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5276a452-f45d-47dc-ae65-ce00f3b2e859",
        "cursor": {
          "ref": "f41dab38-12c7-452b-9f16-9144b8c61aa7",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "0b3434d0-700d-42e2-8b6e-da35014b4e0e"
        },
        "item": {
          "id": "5276a452-f45d-47dc-ae65-ce00f3b2e859",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "1972d9bb-868a-4176-ae67-b346a3c8c1cb",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-02-25T00:37:13.564Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-02-25T00:37:13.564Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "a1dff383-80a9-4bbf-b0d1-b10aa324775d",
        "cursor": {
          "ref": "4ccaaaed-0519-4599-b116-7ea26b680a07",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "d40e1134-e373-4b3a-89ce-3faa0eb300a2"
        },
        "item": {
          "id": "a1dff383-80a9-4bbf-b0d1-b10aa324775d",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "3e78e769-2d28-47f6-859f-c30ec686bc26",
          "status": "Created",
          "code": 201,
          "responseTime": 350,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d35d44c-d1aa-4dc2-8322-6c41f484015f",
        "cursor": {
          "ref": "92694003-722d-4b1a-b454-0f3f56ddf7cb",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "31ce4ab1-e762-4852-8e17-b895354d063c"
        },
        "item": {
          "id": "6d35d44c-d1aa-4dc2-8322-6c41f484015f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "419f5a6a-71e8-4eb9-ba88-f581544ae9b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fed65449-805f-4ae2-92b4-57ba95eaa627",
        "cursor": {
          "ref": "c8456f25-5ce1-4f3f-aedb-bc05ba79984c",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "08ee527d-75f7-4bc4-b94f-f6a5d265e244"
        },
        "item": {
          "id": "fed65449-805f-4ae2-92b4-57ba95eaa627",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "4e89066f-1489-43af-bb38-4421b2a475aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "637d1446-a5cb-4611-b418-c6b26dffd6f1",
        "cursor": {
          "ref": "88a9ce8a-d4a6-4040-a305-783697630b1e",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "c5b171c4-b9f9-4018-bcb8-b38a8a631352"
        },
        "item": {
          "id": "637d1446-a5cb-4611-b418-c6b26dffd6f1",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "58d42d9c-de48-41fa-862d-219054668451",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbf0a27c-052f-433f-9cd4-6a416223f4f0",
        "cursor": {
          "ref": "a1ddfae4-3251-4c9f-a9f5-b374deda73e9",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "6876e1fe-5c19-471b-bc70-c47eeee16560"
        },
        "item": {
          "id": "cbf0a27c-052f-433f-9cd4-6a416223f4f0",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "2a16e25d-7c66-41f5-8374-b4bb83b352db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "637ccd79-bd61-49a0-8762-121ca0587d5c",
        "cursor": {
          "ref": "26a10cd1-c1ef-4e40-98ee-411afc6ecd23",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "e635038a-cddd-44c8-844f-3b18ee5788b8"
        },
        "item": {
          "id": "637ccd79-bd61-49a0-8762-121ca0587d5c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "059c9581-65c8-4f06-bad3-7da483b28eee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d0588f1-2cfb-4fc1-9bec-7802710231d1",
        "cursor": {
          "ref": "8648ba5b-54be-4f97-aa48-e0c0d07e118b",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "39ac0a18-dd2c-4086-a37f-0ead6e35f70e"
        },
        "item": {
          "id": "0d0588f1-2cfb-4fc1-9bec-7802710231d1",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d781a27f-4d27-41a0-8366-1e5cc8caf777",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9a46b8f-ad53-4171-a34b-21ff2f7fea02",
        "cursor": {
          "ref": "a188914f-46e4-423e-b0d6-1209a6ce67fd",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "7c219403-2709-412e-a646-578e0467d7ab"
        },
        "item": {
          "id": "f9a46b8f-ad53-4171-a34b-21ff2f7fea02",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "ca066ce9-54a8-4fa6-97bb-60a41aaeafd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2669ce9b-5f01-40cb-80c7-20a4c98b12d0",
        "cursor": {
          "ref": "1271674d-4c1c-4c9b-a0f2-233fa0fd30bc",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "1761652e-e299-4858-a3a9-e0b1a8f41c4f"
        },
        "item": {
          "id": "2669ce9b-5f01-40cb-80c7-20a4c98b12d0",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "74861224-8a12-4f1d-a50c-d0fb87f743c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d8aab3f-90dd-4c9c-9050-63ef158b38c4",
        "cursor": {
          "ref": "6299bea4-e06b-42f3-8714-bf27f8a2764e",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "44df4dd8-5e8f-4c45-b704-7257a5b0a42c"
        },
        "item": {
          "id": "0d8aab3f-90dd-4c9c-9050-63ef158b38c4",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "60ca547b-3d86-4249-ac24-8695facfb6d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f5383de-be23-4145-b713-ee977c3a9c89",
        "cursor": {
          "ref": "83615926-c4cf-4f14-a618-0ef7b362269e",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a861c6c3-9f6f-49b7-b845-d24d9b4e6125"
        },
        "item": {
          "id": "0f5383de-be23-4145-b713-ee977c3a9c89",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "de6903d5-590d-4c1d-9a68-b4e6054216e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa63f67b-c0aa-46b7-b2a7-9c18d6bbc91b",
        "cursor": {
          "ref": "786e64ef-ae76-4fe9-b007-ebc8c7b49e24",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "d2673880-15ac-448b-9188-db66eec444dc"
        },
        "item": {
          "id": "fa63f67b-c0aa-46b7-b2a7-9c18d6bbc91b",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "7d332152-0a5e-4b8c-b30c-47a6c29daaa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "470e0bf1-c2b6-4af9-9100-13ffbe98c633",
        "cursor": {
          "ref": "895ed916-1fe3-4582-809f-5ab5bc0d5d89",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "5f082fef-0530-41df-a4c4-4cad643fddb0"
        },
        "item": {
          "id": "470e0bf1-c2b6-4af9-9100-13ffbe98c633",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "11948f0a-fa42-4e49-96cf-e8dc8111bb32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07d9f24a-0cb8-489f-9e6f-ff62493dec47",
        "cursor": {
          "ref": "ec1663b9-9fd1-48b0-9f70-2a919e3af3b9",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "04ee1d2d-6bb6-4739-9700-0d9d1d74effa"
        },
        "item": {
          "id": "07d9f24a-0cb8-489f-9e6f-ff62493dec47",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "63c2867f-8dc5-4d3c-9bf6-34dc57e8214f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 100,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "284ae481-611d-4169-82c9-21ce00295a5d",
        "cursor": {
          "ref": "fb364a99-cc18-4631-b85d-5582e93f32e6",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "d89e0caa-9bac-46cc-89cc-7ad3084d03e3"
        },
        "item": {
          "id": "284ae481-611d-4169-82c9-21ce00295a5d",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9bd69a4b-aeda-4cbd-ba16-e69af76a2bcd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 101,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "d2efa667-6a1a-4c89-9197-d808eae954da",
        "cursor": {
          "ref": "5667c63f-9bca-4fd3-bc7f-39cb088a5f08",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "859125ec-59a9-4153-b8ac-5e1b52d18eaa"
        },
        "item": {
          "id": "d2efa667-6a1a-4c89-9197-d808eae954da",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "1e7167fc-e0a7-4013-8c4d-5798b11cdb5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53c334b3-cf41-45d2-bd28-91f7d5a0a8e7",
        "cursor": {
          "ref": "69d0a70a-d73a-4989-ae11-eb8b6775111e",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "75af0b03-edb1-4b5f-b389-e9a3a5cc365a"
        },
        "item": {
          "id": "53c334b3-cf41-45d2-bd28-91f7d5a0a8e7",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f93c60be-6b34-4ed5-b2c7-18ff8f2402e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a021fc53-7715-4745-a970-750f721029cf",
        "cursor": {
          "ref": "b3eda7c4-245f-4160-9710-d9936f97460b",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "57690833-ca47-49b9-a84d-f1c2c66040b2"
        },
        "item": {
          "id": "a021fc53-7715-4745-a970-750f721029cf",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "581566c3-1978-4bf7-81d4-5a21e2076225",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d08b62e-b1be-480b-a775-815a4b570f4e",
        "cursor": {
          "ref": "8007489a-0173-4b6d-9bce-e9fc4329d083",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "1fb1fc6d-dced-408e-88f9-897883c4c2e1"
        },
        "item": {
          "id": "3d08b62e-b1be-480b-a775-815a4b570f4e",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "f09575a1-719e-48e3-ae52-9e291207e2c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cc1e3bc-7359-4654-8d09-75a0dd8aebc0",
        "cursor": {
          "ref": "15090d33-b8e9-413c-90da-7973346374b1",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "2503cbc7-47fb-4c75-bf20-ca31b8d0bd93"
        },
        "item": {
          "id": "0cc1e3bc-7359-4654-8d09-75a0dd8aebc0",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a47b1424-9c01-420c-b829-4ca539215486",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f1c4253-3822-4c95-8ca4-7172846f32f0",
        "cursor": {
          "ref": "2c8423e8-ffc4-48ff-bf06-64138ca7eda8",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "b1e14364-2318-4580-a923-e8341e4d5ccb"
        },
        "item": {
          "id": "8f1c4253-3822-4c95-8ca4-7172846f32f0",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "231c7b76-9bae-4ef9-be0a-cfb7e07e5e2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "991e389a-4d28-4a7d-a3c2-5d379f41cc19",
        "cursor": {
          "ref": "ecfaaa48-10eb-448d-b803-1ef2755daea3",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "3e230f41-c8b3-430c-8409-a21663d12a31"
        },
        "item": {
          "id": "991e389a-4d28-4a7d-a3c2-5d379f41cc19",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "75a342af-288b-42ba-8d34-08780b780ad7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a098ac6b-d081-438f-9816-8d156534235b",
        "cursor": {
          "ref": "da6d5194-8c61-417e-a0a7-799e1c0b2a9e",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "5952ad1f-970e-41a5-bf2e-6e3da61720bd"
        },
        "item": {
          "id": "a098ac6b-d081-438f-9816-8d156534235b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "d433c161-b4fa-4d4f-b894-0a763752931f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04c1bc45-5b84-4780-8592-95413cfd44d8",
        "cursor": {
          "ref": "92d1935d-7cd3-4d55-b1e3-6e525563d7cc",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "6105cffc-49b0-48e1-865b-4b4f8a22d21f"
        },
        "item": {
          "id": "04c1bc45-5b84-4780-8592-95413cfd44d8",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b5c40b0a-910d-444c-ab66-59ecdb869145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad53a060-5212-4b71-8695-568462c39fd4",
        "cursor": {
          "ref": "958178dd-7113-4dcc-81f9-03a080401e13",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "b77551f5-cfd6-4401-8544-7332fc6d6faf"
        },
        "item": {
          "id": "ad53a060-5212-4b71-8695-568462c39fd4",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "40acb11a-3e31-4d0c-9af5-9e60ecf577de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a10d20cc-22be-48e7-b509-5744e35b2b2d",
        "cursor": {
          "ref": "cd484686-588e-4cc6-8b18-3e20e9a1bd80",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "1797fc54-6e99-46a9-ba2d-99d9786e20db"
        },
        "item": {
          "id": "a10d20cc-22be-48e7-b509-5744e35b2b2d",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "36d486fc-b542-4e1a-a31a-4b95c2e43c90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b4b7f45-b479-4aa3-9e9c-e66893da8ed8",
        "cursor": {
          "ref": "5b8d1ae5-19d3-4138-82f8-802aa9912494",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "e43aea6a-45b5-4169-82f9-21a0552f796e"
        },
        "item": {
          "id": "6b4b7f45-b479-4aa3-9e9c-e66893da8ed8",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "afad66a4-86fa-4f28-853b-b3b898c9a440",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d94118dc-4170-4bcc-bec4-9a3445d1150a",
        "cursor": {
          "ref": "13f220a9-455d-4bf0-8c91-de19f9a1611c",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "d9e1ee47-6277-4cbf-961d-eb60df82fbe4"
        },
        "item": {
          "id": "d94118dc-4170-4bcc-bec4-9a3445d1150a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "26cfab84-1ecc-46a9-bf28-758ee6ee5662",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e15bf5f-1f76-4c6f-aca8-77e8cd12d420",
        "cursor": {
          "ref": "0f148dab-5a3d-4b2f-9d4c-0b722d9ed518",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "1a02ceb5-c71f-4741-b441-024b849c27a9"
        },
        "item": {
          "id": "5e15bf5f-1f76-4c6f-aca8-77e8cd12d420",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "03a1badc-1d2e-4c5f-b151-ded3a61eb879",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7033e7a4-3f0a-41fb-9ab9-67250c78cf2d",
        "cursor": {
          "ref": "b67b2ce1-ecd9-47bd-82a2-190b3fb36c08",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "01c9814b-34f1-4211-8b2c-80e846cb71f6"
        },
        "item": {
          "id": "7033e7a4-3f0a-41fb-9ab9-67250c78cf2d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ea6b0c84-f357-4907-b482-54db50258141",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a24a534-5553-4c87-a9ea-3b1a97061160",
        "cursor": {
          "ref": "54291ec5-d51c-4609-8543-e115240bc008",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "cb4d7f9d-abaf-4eb0-a349-487761468f2a"
        },
        "item": {
          "id": "0a24a534-5553-4c87-a9ea-3b1a97061160",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d91e2640-229e-4216-8bd0-a7c41e877c41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00e398aa-3b7f-41e8-bf31-a7fac103eb07",
        "cursor": {
          "ref": "4969db4b-f649-45ce-951a-e32fb295d331",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "41c08421-ad77-477c-a246-049d74bede90"
        },
        "item": {
          "id": "00e398aa-3b7f-41e8-bf31-a7fac103eb07",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ab0047ef-f576-41e5-85a2-cff7cd94aaec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6900f39-4e12-4e50-9cbb-f4705a874e58",
        "cursor": {
          "ref": "f07b9b88-fec5-4c14-b9c0-caecc522cf56",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "b3118cd9-f875-4cae-8a0f-4123cb629a87"
        },
        "item": {
          "id": "a6900f39-4e12-4e50-9cbb-f4705a874e58",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "e96da346-1d47-4166-a70e-a06e9dd657d4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 92,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "4f51060e-cf14-4051-b4d6-138367830da4",
        "cursor": {
          "ref": "03d812e0-e647-4835-bff9-e91d4fa98cf6",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "83f9a07a-a4cd-48da-989f-38267502e07b"
        },
        "item": {
          "id": "4f51060e-cf14-4051-b4d6-138367830da4",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1f56cef0-9d1b-4cc1-96ac-51e3b7d4e26e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2662bfee-167a-4876-9469-e8cc29cbbfbd",
        "cursor": {
          "ref": "92d7e23a-89a5-4c78-9e96-a567fab5bf8e",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "0cd9dccc-9f31-4152-aa40-5ef9c32123cc"
        },
        "item": {
          "id": "2662bfee-167a-4876-9469-e8cc29cbbfbd",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "eca15bc5-17a1-4658-aa86-7bf1fe8b9102",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc0c96a9-200f-4b4b-bfe0-63d55bf3951e",
        "cursor": {
          "ref": "2c984945-96c3-499c-a01e-482e6fdc888f",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "7795150c-2695-4b30-a576-1ff20778df0f"
        },
        "item": {
          "id": "cc0c96a9-200f-4b4b-bfe0-63d55bf3951e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "b0949650-6947-4408-8697-6c9dd5153e6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b88562b-1d98-4624-bc19-48bda52a12d0",
        "cursor": {
          "ref": "61d6cb79-af0c-4771-afad-587e0147e2b5",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "f46e9a42-7b64-482e-b146-c6799c5abb66"
        },
        "item": {
          "id": "0b88562b-1d98-4624-bc19-48bda52a12d0",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "7ef9b8c9-bdcc-43ca-9b72-a4777b093216",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "568a4720-f0c0-45e3-8628-049a990d0fa6",
        "cursor": {
          "ref": "b448cf8c-f6b2-406b-8190-bbdc96a5ddc4",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "06b7f453-5036-4388-ae17-4c04c9012efc"
        },
        "item": {
          "id": "568a4720-f0c0-45e3-8628-049a990d0fa6",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "a7e1ef74-70c4-45be-9d98-3ed8a50678bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4d12072-c6a9-498e-bf84-fecac667bb95",
        "cursor": {
          "ref": "f79dbe8a-69c5-411a-a4fc-71337e14c8ec",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "8b65c435-0b0b-43ac-9479-1263efcbd9f8"
        },
        "item": {
          "id": "a4d12072-c6a9-498e-bf84-fecac667bb95",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "753e9819-289b-4bfe-ba1e-52ef64e498f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72f17d32-d540-4210-92ef-67a83d32d6c3",
        "cursor": {
          "ref": "6826f4e2-537a-4a4d-82cb-7755a078ef3a",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "c71927df-f9d2-4da5-827e-acead84a3458"
        },
        "item": {
          "id": "72f17d32-d540-4210-92ef-67a83d32d6c3",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "a88be824-cbba-4a2f-80e9-59b82bd21277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ad442d4-bf8d-4dfd-97ef-c107c2098298",
        "cursor": {
          "ref": "1cc35c8e-27fa-4c62-a125-a0893f6520de",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "84e0d68d-19bf-47c5-beff-f25f7f514b22"
        },
        "item": {
          "id": "9ad442d4-bf8d-4dfd-97ef-c107c2098298",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "660060bb-95d5-4f22-9e4b-190017938849",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22ee610b-0da2-4684-9653-8c478691436b",
        "cursor": {
          "ref": "a5c4cd43-4cd9-42ec-9ef6-d4b377e62ded",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "aef4a1da-4210-48a9-ac15-ae3e38a9e107"
        },
        "item": {
          "id": "22ee610b-0da2-4684-9653-8c478691436b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "b671dc54-b42c-46fc-8b86-104601f4dd95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e6f5e8f-c5f5-438b-9fbf-f2b8e66a228c",
        "cursor": {
          "ref": "1a68cb42-e416-4d24-a3d3-d0558534fa7f",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "b5ad5d5b-ab0e-43a1-9c24-974edb4a2f14"
        },
        "item": {
          "id": "6e6f5e8f-c5f5-438b-9fbf-f2b8e66a228c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "87d72643-ff58-483a-9665-b391498933c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "880adcdd-51c2-4722-8702-b1bb1ea453b6",
        "cursor": {
          "ref": "a45fd4ba-2782-4818-95e6-6093f75cd321",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "c25a1fcb-59db-4548-b3bf-67d33dfb5543"
        },
        "item": {
          "id": "880adcdd-51c2-4722-8702-b1bb1ea453b6",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c5fd5cce-5c42-4c23-b732-159b6cfc171b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "326ea554-726e-4ce8-9d19-ca5748e2aed8",
        "cursor": {
          "ref": "eb2e5417-8ea8-4449-8b4d-d543df128427",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "bbd864ca-4321-4e19-b306-b6567f88789e"
        },
        "item": {
          "id": "326ea554-726e-4ce8-9d19-ca5748e2aed8",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "c5e97d55-92c5-4a4e-b296-3cbb32d92291",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bce4c86-8379-4499-99df-b43ec2e8aa62",
        "cursor": {
          "ref": "ded2f092-2bc3-4a50-a94f-3c1aeb463fd2",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "7183314a-0fbe-4241-9c73-babc81ef7d11"
        },
        "item": {
          "id": "7bce4c86-8379-4499-99df-b43ec2e8aa62",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b8a76fae-917d-4b3d-818f-9bc7474985dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9be06d5d-73a0-4d31-b7a0-c1861c0171ba",
        "cursor": {
          "ref": "60c32172-b1c1-418d-9b28-5d3cd7677b5d",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "b61a7247-cb0d-4a0d-ab42-cd7a98291bfe"
        },
        "item": {
          "id": "9be06d5d-73a0-4d31-b7a0-c1861c0171ba",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8e74451a-4c49-44dc-8b5e-ccc5914cc1fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0fe9757-b0e2-40a3-aff6-60698e3cd517",
        "cursor": {
          "ref": "492b60bc-179d-448d-a568-fdfe2b46a4b6",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "e3b53082-0ac8-4b4b-9621-53f2a97696a0"
        },
        "item": {
          "id": "d0fe9757-b0e2-40a3-aff6-60698e3cd517",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "770be706-f30e-47a8-8588-34203374c5e6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 96,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "bc03fc7b-ca43-4f7e-ba25-95f659dd1464",
        "cursor": {
          "ref": "14896a0d-60df-4056-829a-9cd1ab8730ed",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "d7baea57-ae63-45e4-8795-9569bce90814"
        },
        "item": {
          "id": "bc03fc7b-ca43-4f7e-ba25-95f659dd1464",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "dc8df834-b4f8-40fd-bdbd-15bdbf2dbe72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3d7728b-4916-4daf-a010-2e55869730f5",
        "cursor": {
          "ref": "5b0ef5e6-0ae1-4e4b-8d34-52d8bd4eb3e2",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "5b04782a-c82a-4707-8e0b-f1fb2e81759a"
        },
        "item": {
          "id": "f3d7728b-4916-4daf-a010-2e55869730f5",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "d914389d-42a0-45f6-8de4-25d281691269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33ce089a-6c0d-4f9d-bd79-d038639dd750",
        "cursor": {
          "ref": "47afd51c-753e-4665-a2c8-50ce9177b995",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "97713252-327b-4eaa-a6fe-5269d5503c6c"
        },
        "item": {
          "id": "33ce089a-6c0d-4f9d-bd79-d038639dd750",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "1b3a6fae-9934-47b8-9000-e35c835c7c12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18c39373-b160-457b-953f-0e9efc05e004",
        "cursor": {
          "ref": "ff39037b-a571-43b6-80bd-1e7fbf5ddbe6",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "40231f33-5259-49de-bf9d-566e86093349"
        },
        "item": {
          "id": "18c39373-b160-457b-953f-0e9efc05e004",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "dfa6bdde-51c5-438b-929d-f3f97f793e0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e89f109-2b51-472a-b061-a9b626c83ad6",
        "cursor": {
          "ref": "b6ce675b-7c45-4b32-bf03-ab770d29abef",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "9ce65555-bab0-406a-b8fb-b6f0579c910a"
        },
        "item": {
          "id": "3e89f109-2b51-472a-b061-a9b626c83ad6",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b210320a-c0a4-4467-8b0c-cca37399290b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e92a2db-7ba2-481b-85fc-33927f7c8a6b",
        "cursor": {
          "ref": "5e5aea09-0450-4020-9de2-5a1f594bd236",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "7f692a9f-d627-4692-875c-ae7b6f8fa437"
        },
        "item": {
          "id": "6e92a2db-7ba2-481b-85fc-33927f7c8a6b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "d38fa927-6dab-4a91-bc3c-ba35fd45f1e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffa32161-28b8-4dd4-98aa-83434dd36dd4",
        "cursor": {
          "ref": "94a4fe82-ab0b-4af7-937d-90c3554a356a",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "f43298de-432c-42f2-83b2-383552d50515"
        },
        "item": {
          "id": "ffa32161-28b8-4dd4-98aa-83434dd36dd4",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4a749873-b3b6-4d0e-b23f-fe29b24bd357",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "701c3f1e-9643-4a60-89af-fc288352288e",
        "cursor": {
          "ref": "2d7f50e0-9b4c-4776-aded-dfb46d61f880",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "d64c2581-5de0-4d52-be92-02a8bcfefa6a"
        },
        "item": {
          "id": "701c3f1e-9643-4a60-89af-fc288352288e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "83e90bd8-01ac-4d00-a660-79cf27d4bc5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f0542d9-1ffb-46a4-a609-fe935b4b73f3",
        "cursor": {
          "ref": "07f71a6c-b006-454b-8dc2-55b2cfe32f92",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "4392e748-6737-413e-8354-f831c591732b"
        },
        "item": {
          "id": "3f0542d9-1ffb-46a4-a609-fe935b4b73f3",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "47d7e4da-1c60-4830-8f86-d2324a1adb36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60c9d110-2328-40f2-8d15-1f440bec542a",
        "cursor": {
          "ref": "0aba6595-a6ee-4b0d-b5f2-d8054cd5fac0",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "c46e9241-bd9c-46a9-ad7b-4fd9356670b6"
        },
        "item": {
          "id": "60c9d110-2328-40f2-8d15-1f440bec542a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "260db32c-c1d7-4ef6-bc82-b90a134e74ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "217cb7c9-68a0-407b-b9b3-2e1b421cc83f",
        "cursor": {
          "ref": "d8eb7f75-e37d-4c5f-8a27-8b4793aa7f14",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "f7dde85e-71cb-4d87-aa9a-7047822416eb"
        },
        "item": {
          "id": "217cb7c9-68a0-407b-b9b3-2e1b421cc83f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "7d50fb8a-487e-447e-9907-368fbcc57fdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ed66d34-5b0e-4af9-84fd-16d95ac689e1",
        "cursor": {
          "ref": "3c48afd0-ccc7-474c-9dd9-d9cd7a471847",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "3e08224e-774b-4e38-bf2e-b2a06a013cd1"
        },
        "item": {
          "id": "7ed66d34-5b0e-4af9-84fd-16d95ac689e1",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "51325838-ecdb-4ce0-b4fc-9bb16eea477c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d332d109-2af3-4eda-a7c4-7600704959bb",
        "cursor": {
          "ref": "a4979c02-7bba-454c-bf07-09a02d784ce3",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "16d8f893-b86f-40cc-b9e8-9ad443f8acaa"
        },
        "item": {
          "id": "d332d109-2af3-4eda-a7c4-7600704959bb",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "75abd594-8e3e-4d4f-844f-8becacdd8f2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4221537f-3a8b-4fb1-89fb-4ad722001349",
        "cursor": {
          "ref": "a766c478-2211-4318-8336-0dd902ae55e3",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "559693b7-98bf-48ca-bd10-991949a45e94"
        },
        "item": {
          "id": "4221537f-3a8b-4fb1-89fb-4ad722001349",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "62da5325-f8e8-4337-a125-3529431f85ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85b140d0-b74b-46d4-90f5-9aa694f1e296",
        "cursor": {
          "ref": "8c0d5180-c90c-4c10-9934-4ce6b03b4d25",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "523cec68-f9cf-4888-8ea1-e3a519b9b156"
        },
        "item": {
          "id": "85b140d0-b74b-46d4-90f5-9aa694f1e296",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ad2d971b-5a8a-48f0-9b7c-c5614acfd89c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44bba8cd-6e7b-4e92-9e11-ea797763b1e2",
        "cursor": {
          "ref": "acb2d569-ef8b-4376-90cb-14b7afa14969",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "ad0f8c71-86a1-4986-8a92-97621191ea8b"
        },
        "item": {
          "id": "44bba8cd-6e7b-4e92-9e11-ea797763b1e2",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "16b02077-fe28-41bd-9909-27894794354b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bb7c39f-5d43-4721-9455-9df39a983193",
        "cursor": {
          "ref": "4c169ce9-acc7-4d6a-b857-0e5cb12cad0d",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "cabc6cca-6dbf-45f9-a81e-cd2896caa4f1"
        },
        "item": {
          "id": "4bb7c39f-5d43-4721-9455-9df39a983193",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "b1086a15-6415-42ee-b4f0-eeead3b30293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fd9667d-ff17-472f-84eb-e9a7ac7f2c7d",
        "cursor": {
          "ref": "550418ee-e7d5-435f-b036-aee3f96d71f6",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "ccf69494-90cc-40f3-88af-4e24d2b96b88"
        },
        "item": {
          "id": "2fd9667d-ff17-472f-84eb-e9a7ac7f2c7d",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "1b965899-f253-4862-ad8a-14806be2c754",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a03b0a1-f66c-4c26-a29f-ce579484b9d6",
        "cursor": {
          "ref": "baef24dc-f603-4a2e-b493-71c00721147f",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "a06d9d32-8cf8-4eba-9b69-30f5f814ac58"
        },
        "item": {
          "id": "0a03b0a1-f66c-4c26-a29f-ce579484b9d6",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "c71022c8-3108-455e-9e38-ebf70a3ddd93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7215f98-2a2b-4efd-b3e9-76bf772ea8fe",
        "cursor": {
          "ref": "02485c0b-a261-49cb-9b53-3ae9b90b1e7e",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "5be9e723-28e1-4363-8106-3b5667ef3645"
        },
        "item": {
          "id": "b7215f98-2a2b-4efd-b3e9-76bf772ea8fe",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "4aa9f93f-0b8d-4e43-b43a-ba29ca28777f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ef1a676-fe5d-4c99-821e-0f4ef97bbeb9",
        "cursor": {
          "ref": "faef88ff-3a26-4970-a99b-d682efa0ff4e",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "8519515b-a3d4-4178-9131-f2e396e0237d"
        },
        "item": {
          "id": "9ef1a676-fe5d-4c99-821e-0f4ef97bbeb9",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "ea550a86-0bfa-4a85-852f-b9fb86f6f26a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6100dcf7-9c8a-4a39-b229-bba283d926f8",
        "cursor": {
          "ref": "2452b494-9350-417d-bbcf-6a5efad5ad8d",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "e15a805f-f29d-477e-927d-8cc272352adf"
        },
        "item": {
          "id": "6100dcf7-9c8a-4a39-b229-bba283d926f8",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "a5e736ab-edbd-42ee-b2d9-734b63f76b63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33e2d3cf-2f73-4f31-9b1c-831c6c9b4d53",
        "cursor": {
          "ref": "1e5e1228-4414-4ea3-b448-126b3835b9c3",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "def5567e-2452-465f-9e81-08d2f4d87013"
        },
        "item": {
          "id": "33e2d3cf-2f73-4f31-9b1c-831c6c9b4d53",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "fa28f098-a991-4942-bf31-54bf47c96eaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "565b6710-3fbc-4b7f-b56d-c6e394db7b6a",
        "cursor": {
          "ref": "3839d1d9-8ce2-4926-9d81-f1ad668e3a33",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "ec975fc4-c47e-49c5-b637-5fc4de348328"
        },
        "item": {
          "id": "565b6710-3fbc-4b7f-b56d-c6e394db7b6a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "53890be4-9797-4b3a-8202-e0c2f38b0c2b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8623e91-2976-4003-be8d-638cb3982bff",
        "cursor": {
          "ref": "69bdf20a-a35c-418e-89ec-bae673db1a47",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "da626df1-259d-4ec7-9e9d-3141b35bede8"
        },
        "item": {
          "id": "d8623e91-2976-4003-be8d-638cb3982bff",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5647dfec-4d8e-47de-ab08-bf2d4b7bbed7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1bd888b-cc1c-406e-a76d-1453e5eac370",
        "cursor": {
          "ref": "3b84f224-88f0-47b1-8036-3c3dcefb8074",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "ff8c9675-477d-41b2-903b-6ec62eb2d935"
        },
        "item": {
          "id": "e1bd888b-cc1c-406e-a76d-1453e5eac370",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "338be44a-2ab8-4d89-9b44-5f2635df0fe8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0bd2694-fb40-4d37-a2f8-89c5a6c446fb",
        "cursor": {
          "ref": "61244830-c351-4d69-999d-3b6f042518a8",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "6b863ac1-2760-4c52-b8bf-d54139cd760f"
        },
        "item": {
          "id": "e0bd2694-fb40-4d37-a2f8-89c5a6c446fb",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "19f21dee-7d55-4c39-b270-5e8ad49d9d84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c38af69-a37a-478d-8db4-ad1656bde02e",
        "cursor": {
          "ref": "e06844b4-41ef-4c66-b88a-9aad108fc2b0",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "517804a8-6d74-453f-84eb-84699ef5269d"
        },
        "item": {
          "id": "0c38af69-a37a-478d-8db4-ad1656bde02e",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "2b237af7-9fec-4dad-80a3-1dec86b9f53e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e7f4cf3-1047-4127-b015-d2a69f7abedf",
        "cursor": {
          "ref": "adff7e6a-8052-441d-bb08-4946a72f813e",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "c5f3c49b-4b41-41bb-89d4-6ceb84447c46"
        },
        "item": {
          "id": "7e7f4cf3-1047-4127-b015-d2a69f7abedf",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "f4f1b83e-ae8c-4d83-afdd-964b806075ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16e1f608-d9d1-436f-a335-acd91833e15c",
        "cursor": {
          "ref": "49546eb5-3726-4a6e-81ee-b7a709a7102c",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "fb43c28c-4845-47ee-8fc1-7e8411fbfcae"
        },
        "item": {
          "id": "16e1f608-d9d1-436f-a335-acd91833e15c",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "b45d98ca-3f02-401e-bf64-a3cb4714063e",
          "status": "OK",
          "code": 200,
          "responseTime": 166,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "87cde046-11cf-4d9a-8767-8a85ea5af0b7",
        "cursor": {
          "ref": "70741197-26a9-4ae9-a29b-60890fdd94bc",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "89bab6de-717d-42c1-94d9-14d97de2639b"
        },
        "item": {
          "id": "87cde046-11cf-4d9a-8767-8a85ea5af0b7",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "a2701204-ff8c-42fa-987d-6fba02799d06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4ca2388-68cb-4456-a4c3-bad6be8f9cdc",
        "cursor": {
          "ref": "14025c86-f3f4-42fd-94a6-68ec5cce5089",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "ef2d495d-a83c-4b7a-b96b-645f76dfe8a5"
        },
        "item": {
          "id": "c4ca2388-68cb-4456-a4c3-bad6be8f9cdc",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "eedd8308-7c06-4126-9289-33dc4244ebf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cada9155-dd88-4e3d-b866-aca1d7885e82",
        "cursor": {
          "ref": "ae09c0d9-32ae-42d7-a2df-666f6d016c7c",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "a918c5ae-17ad-4914-81ee-6821f54c8048"
        },
        "item": {
          "id": "cada9155-dd88-4e3d-b866-aca1d7885e82",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "982e411f-3f2a-47d7-98f2-7c5b5bb7cf99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ac3cb11-c05f-4e19-ac75-7913e9904c4a",
        "cursor": {
          "ref": "03ac0c81-ef9f-4f0e-a0dc-5abeba7a1e34",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "711294c8-1a6a-432b-a17d-93857825fb60"
        },
        "item": {
          "id": "5ac3cb11-c05f-4e19-ac75-7913e9904c4a",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "17bf4e7e-ecab-4652-85d5-8c342f6d75f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32163a68-a592-4a47-82ef-ccef3b3b8c1b",
        "cursor": {
          "ref": "ac3e3746-3bcc-4b35-923b-03aa2e07d0b9",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "36d07c53-924d-4874-8b6e-4aa4acea4eb3"
        },
        "item": {
          "id": "32163a68-a592-4a47-82ef-ccef3b3b8c1b",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "2d822b03-0d94-4b2b-9561-5842a0f69d3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ce947af-ddc1-4211-b410-738a04a734e2",
        "cursor": {
          "ref": "17e823f9-4a9c-4bb2-a90e-6f6a8fdf08b1",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "2ffc5504-8a32-4065-86c3-0dca556d1c87"
        },
        "item": {
          "id": "8ce947af-ddc1-4211-b410-738a04a734e2",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "6fce58b8-0716-41c1-af84-e9207edc9057",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f74f6e9f-6bf9-42a5-9331-72024b4c49dd",
        "cursor": {
          "ref": "cecb081a-d46d-487f-9716-368af30a3d8a",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "66d171b8-ee7d-49f6-a33c-ad6acdded697"
        },
        "item": {
          "id": "f74f6e9f-6bf9-42a5-9331-72024b4c49dd",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "b2283afa-0692-4ef8-83dd-de457316addb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17f4df80-3bbc-405c-a973-605a1d3b7ad8",
        "cursor": {
          "ref": "b441ff68-e643-4955-8585-c1765a87ee0c",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "23e1341e-231c-4dfc-8829-bf1b403b28e4"
        },
        "item": {
          "id": "17f4df80-3bbc-405c-a973-605a1d3b7ad8",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "a626cee2-9ad5-4bd8-bda0-6233bbb98390",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3458acf-f47f-404a-8557-b5193bd42c4e",
        "cursor": {
          "ref": "388a7e9b-7a83-49c1-a575-b8750e608c7b",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "e41837c6-5025-4df4-98e7-fffd1a27a7f6"
        },
        "item": {
          "id": "a3458acf-f47f-404a-8557-b5193bd42c4e",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "c0209920-96ca-4ac6-844c-d06b0cce2826",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b68e6310-253e-41ec-904e-8f944b50e80c",
        "cursor": {
          "ref": "52956f74-10eb-499f-b810-4e4cfdbdc7ae",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "a67f6a9a-fbe0-4e7f-865e-7d9b7ca4bdda"
        },
        "item": {
          "id": "b68e6310-253e-41ec-904e-8f944b50e80c",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f6fe32fe-47fb-4eb7-9566-55d671a3f060",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43eee0d5-5025-4713-95c0-b839ee9e5180",
        "cursor": {
          "ref": "7294fe59-3ad4-4a77-b04f-2289ce1938fa",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "d8a28cbc-0cd5-47ed-9061-be6967ff4fac"
        },
        "item": {
          "id": "43eee0d5-5025-4713-95c0-b839ee9e5180",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "220c3164-7247-43d1-8b88-b182ac065ecf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "855d3183-c966-4930-ae88-0a6c3da041ff",
        "cursor": {
          "ref": "2922b284-a9e8-4205-9bfb-780312df96d1",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "b4977284-878e-4bf3-83c7-d5f7eb1d80f8"
        },
        "item": {
          "id": "855d3183-c966-4930-ae88-0a6c3da041ff",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "2241e127-7da4-4d5a-9345-5467acb048b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03675174-769c-405a-820d-d61ff4909952",
        "cursor": {
          "ref": "329e9245-27f5-4d01-910f-39f80e9ccc6e",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "66ba0734-37aa-4f60-a8e8-b45ed37ab95f"
        },
        "item": {
          "id": "03675174-769c-405a-820d-d61ff4909952",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "603dec86-5e5b-4f79-9a9b-7055f0fa5552",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53c47dc4-ee99-4d95-b56b-df9b63d8356c",
        "cursor": {
          "ref": "a13be89c-3cd1-4fc8-b09f-a8cafc2841ed",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "5e3b2543-0b67-4404-82be-ab95071efcd1"
        },
        "item": {
          "id": "53c47dc4-ee99-4d95-b56b-df9b63d8356c",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "eecab2fb-a6b0-4223-b258-9c5619eec1ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66ae16d0-e5a4-4170-ad2c-e32f04258cb0",
        "cursor": {
          "ref": "190b80b2-ab92-434e-8d32-4631b6d03e81",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "efb7bdb4-8d1f-4d96-aa58-795913f0eaeb"
        },
        "item": {
          "id": "66ae16d0-e5a4-4170-ad2c-e32f04258cb0",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "ba3a1409-ab5a-4c8a-ba00-1e2342b23d3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1b5f772-79a3-4cd0-afe0-9d9915915eed",
        "cursor": {
          "ref": "d9b44302-bdb0-4d71-8fc3-f0ee887abd38",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "b4bc8fd4-6108-41f2-a13f-138340feba45"
        },
        "item": {
          "id": "a1b5f772-79a3-4cd0-afe0-9d9915915eed",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "c58f2b87-d363-46de-8b69-3b22e6b34da8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3ccba61-8c82-46fc-b05b-339603c24eda",
        "cursor": {
          "ref": "724ac39f-07b6-481a-bf76-865fdb4b0b2a",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "9ad4fdee-2a71-4329-a99a-426217ca5abb"
        },
        "item": {
          "id": "b3ccba61-8c82-46fc-b05b-339603c24eda",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "c77e4586-32c9-42f3-a9f3-aa79eeced824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "509e78aa-bfe2-4f42-90b8-c8a2ea7ea354",
        "cursor": {
          "ref": "5c793432-b01d-47a4-a27e-5c4a90b751d3",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "637a8eec-6c13-4160-aad7-e18f992581d8"
        },
        "item": {
          "id": "509e78aa-bfe2-4f42-90b8-c8a2ea7ea354",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "0e1a9ea9-d6c6-442c-9f54-be488010ce52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08f9769c-0575-4318-8d97-d48c379355ce",
        "cursor": {
          "ref": "52124504-c229-4a2b-a680-0c4d06b2284d",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "6aa8d9c0-9878-4131-892e-d516d33e4941"
        },
        "item": {
          "id": "08f9769c-0575-4318-8d97-d48c379355ce",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "bd1bec52-c828-4c07-b996-56a79049c4d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b6ea67c-92e9-4a77-8f4b-af650093af2c",
        "cursor": {
          "ref": "93ac93f4-4793-42fd-be14-de74a939a0af",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "2f2c2adb-39f4-4632-ad1a-1157740b3ae7"
        },
        "item": {
          "id": "8b6ea67c-92e9-4a77-8f4b-af650093af2c",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "1d87d962-dfab-4661-a611-a17704aad75d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "308445d7-7069-44dc-a136-5a98c567ea65",
        "cursor": {
          "ref": "aacc674f-f27a-40ae-b82c-c390723b5889",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "79061dff-f6ac-4bf3-b4dd-0831f324428e"
        },
        "item": {
          "id": "308445d7-7069-44dc-a136-5a98c567ea65",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "8ddeefc8-8f27-46c6-88bd-ae3c40854205",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4ac3556-38f5-45c7-bebb-407661c09b25",
        "cursor": {
          "ref": "8247ddce-6790-40c6-b798-5cf25d8ea61c",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "045cabac-ba0a-4c04-b405-5b86d5a70377"
        },
        "item": {
          "id": "b4ac3556-38f5-45c7-bebb-407661c09b25",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "66a7007d-8175-4a01-a616-8bbdaa15b74a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae7ab3f6-585b-459c-b478-e9f2d1320c75",
        "cursor": {
          "ref": "0d5b153f-9b50-4b91-8fa1-bb51bc1e02cf",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "7426092b-ce78-4200-b3d3-59d626b8232f"
        },
        "item": {
          "id": "ae7ab3f6-585b-459c-b478-e9f2d1320c75",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "eacddea4-71bb-4c9f-9918-7b8d5a97d8a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "463576a0-e3fd-4936-9344-270485346a7c",
        "cursor": {
          "ref": "0c026de3-4695-4871-9eb7-73c8aa84935f",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "c80c8d79-1246-4d55-8eb3-fd5e7704bb82"
        },
        "item": {
          "id": "463576a0-e3fd-4936-9344-270485346a7c",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "d04ed835-69b1-4be1-b3b0-ce68c22f0716",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18f65bb3-d57c-44b3-a29c-f2cfcf3cfbdf",
        "cursor": {
          "ref": "dadde513-1b11-47c9-9a0f-e6fafd63d22b",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "1661b0dd-025f-49b5-a93b-5136673d2220"
        },
        "item": {
          "id": "18f65bb3-d57c-44b3-a29c-f2cfcf3cfbdf",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "4206d159-63c5-4560-bfac-b8309c423be7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9eb9db4-1dca-43ff-9d4f-1274b75ac049",
        "cursor": {
          "ref": "21a60d27-a27a-4be2-a541-1ebd517a0c29",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "f5280d57-c0c1-46e4-a982-da723fbb235e"
        },
        "item": {
          "id": "f9eb9db4-1dca-43ff-9d4f-1274b75ac049",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "6c2952a3-bde4-46b0-92b4-2c7f94dac0a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6910a8c2-5e0d-4815-aa7a-90e7db2068c9",
        "cursor": {
          "ref": "59005d2c-384c-4b5d-a0fd-da792382dbef",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "52122519-4047-450d-8bc1-5c29c30a1c6d"
        },
        "item": {
          "id": "6910a8c2-5e0d-4815-aa7a-90e7db2068c9",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "5ca2a884-e091-44d2-9bc2-9e6b8d6dffc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0178a78e-aabd-4206-bd9a-61cf577d1cdf",
        "cursor": {
          "ref": "f96ac918-e458-4d3e-b8bc-9a63f19b8579",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "99609657-a030-4ebd-976e-7c184dd87148"
        },
        "item": {
          "id": "0178a78e-aabd-4206-bd9a-61cf577d1cdf",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "f7eb80ba-a039-4877-a672-1143a8a0fea8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51abbbe0-8bef-4f1e-985a-3a85790a3c26",
        "cursor": {
          "ref": "c49f980a-9151-465f-ad20-0f252738e69c",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "ac95d9ff-685a-4c3c-8cc3-75c3d826774d"
        },
        "item": {
          "id": "51abbbe0-8bef-4f1e-985a-3a85790a3c26",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "7bf85691-98a1-4012-9291-d034678682e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "279c01a7-df0b-4e1f-abd8-9e262de06f7a",
        "cursor": {
          "ref": "eb76bae0-35ff-41ab-95f3-1087e67a35a7",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "2aa0000e-23be-4ae9-98db-5c50fb62ab87"
        },
        "item": {
          "id": "279c01a7-df0b-4e1f-abd8-9e262de06f7a",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "e7831333-96f6-4ea2-8d08-3f6e9fc4c280",
          "status": "OK",
          "code": 200,
          "responseTime": 157,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "c2a00c35-7da0-4915-91ec-40cfa01fe4a5",
        "cursor": {
          "ref": "acd5fea0-d0da-4585-86bd-f16abbcccf43",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "d01007ab-940b-4923-8e26-708d9ec74951"
        },
        "item": {
          "id": "c2a00c35-7da0-4915-91ec-40cfa01fe4a5",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "588c64f8-81eb-4082-8e91-53222703d78b",
          "status": "OK",
          "code": 200,
          "responseTime": 156,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "af2a47bc-b5a4-413c-87d6-2d30d9cb8764",
        "cursor": {
          "ref": "2c279899-6558-42e7-a98e-d892ff8a4077",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "1b47ca38-d3f3-4982-b786-5506473d3139"
        },
        "item": {
          "id": "af2a47bc-b5a4-413c-87d6-2d30d9cb8764",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "256d0d19-e2de-448b-99fd-a440de7278a5",
          "status": "OK",
          "code": 200,
          "responseTime": 161,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "725ac221-43be-4df4-9885-3c93e1c1ca97",
        "cursor": {
          "ref": "88bbdc12-efbb-4054-baf8-dba474752f79",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "c6ddb170-403e-4aaa-8721-293aa0e60733"
        },
        "item": {
          "id": "725ac221-43be-4df4-9885-3c93e1c1ca97",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "91b50b57-8ede-4c43-9933-cff606250849",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fd0d7a4-d51a-4125-82be-f002b5da5eaa",
        "cursor": {
          "ref": "c95951d7-0017-4e60-b62a-d3ecd0084af2",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "ae1248a0-d62c-46c0-bf50-bf48cb42ec6b"
        },
        "item": {
          "id": "5fd0d7a4-d51a-4125-82be-f002b5da5eaa",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "07ca7757-20c7-4f34-af0b-02c7d112311d",
          "status": "OK",
          "code": 200,
          "responseTime": 159,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "5000dba2-93c4-4ce5-9735-cae6a288b944",
        "cursor": {
          "ref": "aa3a4bc4-ed43-4376-86b3-10f02f07b627",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "0976ccbe-8bf8-4053-b39b-dde06c74c68c"
        },
        "item": {
          "id": "5000dba2-93c4-4ce5-9735-cae6a288b944",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "77ec28b3-dd3d-433a-8715-841f7d17aa2e",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "dbabf043-b879-4076-8d80-4f7b950412d5",
        "cursor": {
          "ref": "6d1ea5cc-a741-4bdb-841d-cd455032af51",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "a9687eeb-feec-45e8-ac56-76e6f9335c22"
        },
        "item": {
          "id": "dbabf043-b879-4076-8d80-4f7b950412d5",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "13e19f79-eeda-4478-83e6-8f4388aecd5c",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "1a40d4f1-3282-42c8-81ba-a919e0e141d5",
        "cursor": {
          "ref": "d90e6a09-2886-4f4e-8ed3-4a9b23fe3bb2",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "2875bac6-12ac-42bd-a24f-b1dbc96ff377"
        },
        "item": {
          "id": "1a40d4f1-3282-42c8-81ba-a919e0e141d5",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "9741e4c1-18bf-4d1a-b3de-56a09512a511",
          "status": "OK",
          "code": 200,
          "responseTime": 156,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "35fafdc1-0beb-42e4-bc89-67ff65a52668",
        "cursor": {
          "ref": "1ad65faa-dbdd-4025-b0f4-9442d8c7de97",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "eb83ca76-5dc0-45c6-831f-6f8d09718c26"
        },
        "item": {
          "id": "35fafdc1-0beb-42e4-bc89-67ff65a52668",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "ebfd511f-4b21-49ea-b556-dfe6943929ea",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "84d110af-93c1-4987-a7d2-3448dae73387",
        "cursor": {
          "ref": "e41bc866-ca02-4ebe-8d18-d4f85074807b",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "f20e5ee9-decd-4d22-bf14-0b13652693aa"
        },
        "item": {
          "id": "84d110af-93c1-4987-a7d2-3448dae73387",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "74857b09-a012-418e-9d85-8472c8163462",
          "status": "OK",
          "code": 200,
          "responseTime": 151,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "224fc4cb-7638-403e-9a5b-d62e3cb29b00",
        "cursor": {
          "ref": "36ceeea8-2222-4b47-a6f9-281356e552f9",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "bc84552b-c644-47d2-91ea-e00f35c23300"
        },
        "item": {
          "id": "224fc4cb-7638-403e-9a5b-d62e3cb29b00",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "d7f2acc0-ce17-4f97-9417-7aecd3828a85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cff74c6f-dfb5-4844-8d44-f1262342ac96",
        "cursor": {
          "ref": "cb91c050-f745-4be2-9b74-1f22102bc339",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "172e46b2-259a-49d2-b3a8-0cd3bdc59a9b"
        },
        "item": {
          "id": "cff74c6f-dfb5-4844-8d44-f1262342ac96",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "62a97a0e-3c07-4e76-8b3c-9daeaaef39e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ef13072-0783-49fa-be9c-69ecbbe52f3c",
        "cursor": {
          "ref": "14bf7f44-fa4c-4a7c-a53e-fe52a732498d",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "e4852182-8051-48a8-ac01-62b5182aac0a"
        },
        "item": {
          "id": "2ef13072-0783-49fa-be9c-69ecbbe52f3c",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "45f05d1d-0d89-42c4-a496-668e5adbe630",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6b2649f-0d16-45d4-8467-aa71d05c7f18",
        "cursor": {
          "ref": "913edf3e-aa29-42c8-92dd-0e9f218cedc7",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "3ea2ce90-8b10-48eb-a652-0b57172bedf0"
        },
        "item": {
          "id": "e6b2649f-0d16-45d4-8467-aa71d05c7f18",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "b0adecaf-f445-4d2e-91bf-d6b2e7f6c309",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c0ebc5d-408b-4914-ae98-1fbcf97ff619",
        "cursor": {
          "ref": "0400e592-a380-4fcc-996e-df7c2f574039",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "7cd04162-11d0-49a7-bdb3-1f85e4c5be2c"
        },
        "item": {
          "id": "0c0ebc5d-408b-4914-ae98-1fbcf97ff619",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "a4532777-41d4-4754-b540-adcc31dc223b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d79d0fca-e427-45df-9965-f03996aded30",
        "cursor": {
          "ref": "0f45b3b9-46fc-43cf-bb7f-4fe6eb141add",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "cd86e985-14dd-4e15-a2eb-64ed32238888"
        },
        "item": {
          "id": "d79d0fca-e427-45df-9965-f03996aded30",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "86d819e0-e1e7-4f00-8b01-2c23b6507e7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e1e7d06-b7ca-4fdf-9d45-6f39f7105cd0",
        "cursor": {
          "ref": "48f16ea9-f557-4d28-89f7-c4e176fd97ee",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "4f063188-c209-4dbd-aabb-c6d78a79851f"
        },
        "item": {
          "id": "9e1e7d06-b7ca-4fdf-9d45-6f39f7105cd0",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "b7e47f57-b3e6-4d4d-87c4-f0acff9944bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a518db9-0572-49af-a1b1-9d2e5275373b",
        "cursor": {
          "ref": "b5fec77d-f838-44b8-ab7a-b19d96d0b988",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "b4ed4e7d-6ca0-4f58-848f-9ea171dfc0a4"
        },
        "item": {
          "id": "3a518db9-0572-49af-a1b1-9d2e5275373b",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "95d739ae-e518-4fc4-9c1e-343b73fe4d56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3489ac64-7b03-428b-9e9a-3885169b5b5b",
        "cursor": {
          "ref": "a0164374-01ee-46ec-8526-88ccf678a656",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "894bad91-2815-451c-abbd-c0c9c76b50a5"
        },
        "item": {
          "id": "3489ac64-7b03-428b-9e9a-3885169b5b5b",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "d3902659-dbb2-496c-986f-ef0b720d59fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dd1a437-dfa7-42be-a61e-cffce793f8d7",
        "cursor": {
          "ref": "ffda426c-9ea4-4c35-af40-7b73e514958a",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "010cb82c-6693-4a22-80fa-7d2046478dca"
        },
        "item": {
          "id": "1dd1a437-dfa7-42be-a61e-cffce793f8d7",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "52d3d966-5749-4f44-8ae7-619def14c5d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d956c5df-bd61-4497-8a4e-c3d0cb7c35b5",
        "cursor": {
          "ref": "39953db3-3327-4325-b591-dc7935f39289",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "7e345ab0-4716-4030-8115-e2b2514f05f2"
        },
        "item": {
          "id": "d956c5df-bd61-4497-8a4e-c3d0cb7c35b5",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "8fe4cae4-103b-4423-a50f-2ecdf36ccb02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c677ee80-e216-48aa-b9d7-966255d9fbcc",
        "cursor": {
          "ref": "d4145476-4e1b-4cd8-b99f-a77cd6a54231",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "80096d09-b864-4313-8150-f886dad1fa9d"
        },
        "item": {
          "id": "c677ee80-e216-48aa-b9d7-966255d9fbcc",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "16da14f7-1a0a-41eb-be38-03668ebe1a16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a948d9d1-cc9b-41c1-b542-886124665d65",
        "cursor": {
          "ref": "044f757f-c469-4dd0-abcb-45980221fee1",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "0260ea91-6009-4315-9486-e354de67c2d2"
        },
        "item": {
          "id": "a948d9d1-cc9b-41c1-b542-886124665d65",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "97aa5336-a17a-4658-bdce-91e032c057e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5320258-1a81-4ab4-b855-26ec6faf2020",
        "cursor": {
          "ref": "e743e9f5-5273-475c-86ac-d478042babd4",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "28b99cbe-f6a5-4f10-8ffc-523c67398d07"
        },
        "item": {
          "id": "a5320258-1a81-4ab4-b855-26ec6faf2020",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "8ede7f88-ba3b-4a90-8afa-5ffd4022e64b",
          "status": "OK",
          "code": 200,
          "responseTime": 151,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "7a27edee-cf57-40a5-983b-a95bc360a2ef",
        "cursor": {
          "ref": "d3f7c825-d0ae-4636-9e82-6199ef31de70",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "44135cc3-9603-4b13-8dd4-91306e0cfad7"
        },
        "item": {
          "id": "7a27edee-cf57-40a5-983b-a95bc360a2ef",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "d41d3b09-6c2e-4c48-8fb1-cfbfcafc3881",
          "status": "OK",
          "code": 200,
          "responseTime": 150,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "b90d2769-d7a9-4744-9b6e-f2a1526ff4b8",
        "cursor": {
          "ref": "f32d21db-aef8-45c1-8a51-f2d9a7e64176",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "81f9597b-407c-4330-9709-62b861ad1398"
        },
        "item": {
          "id": "b90d2769-d7a9-4744-9b6e-f2a1526ff4b8",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "fc821d81-ddc1-4353-a6aa-d5f769da26c0",
          "status": "OK",
          "code": 200,
          "responseTime": 156,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "61935b9e-4013-424a-8526-2cd0d67cb313",
        "cursor": {
          "ref": "ec63f515-400a-434e-a839-026ad85dcfe4",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "03824e7f-7ac6-427e-8ef9-2f5776b46872"
        },
        "item": {
          "id": "61935b9e-4013-424a-8526-2cd0d67cb313",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "0033d4d3-c706-4c42-9c5c-738b9acbb945",
          "status": "OK",
          "code": 200,
          "responseTime": 155,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "b59e236d-29ba-46b7-ae44-5430c7e8b048",
        "cursor": {
          "ref": "260dc4d5-a889-4073-9791-f59c2706e11b",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "8181c1d7-863e-4aba-a0cf-6f1cbd976986"
        },
        "item": {
          "id": "b59e236d-29ba-46b7-ae44-5430c7e8b048",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "239d36db-95bb-477e-952d-db65414d0845",
          "status": "OK",
          "code": 200,
          "responseTime": 158,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "fca20b29-c552-41da-84e9-ce0251f3fe0b",
        "cursor": {
          "ref": "b98e680c-9fcf-4a83-9c79-471a90fcc085",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "bfbeaebc-d83d-4473-9838-45cdd0733926"
        },
        "item": {
          "id": "fca20b29-c552-41da-84e9-ce0251f3fe0b",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "a4c78eba-4913-4131-a286-db31c0ce2f0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c670f506-26a9-4815-b1ca-d3dafffbf44d",
        "cursor": {
          "ref": "5f236ac3-ba3d-489e-bad7-6e2b7d68bc57",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "218406ac-4483-4256-9ec0-f242466f98fb"
        },
        "item": {
          "id": "c670f506-26a9-4815-b1ca-d3dafffbf44d",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "a579697c-a340-4178-852e-d961d4a21d0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33e1da0e-db77-4abb-b07f-27a476b624b3",
        "cursor": {
          "ref": "9208dca6-52e8-4f97-949b-a132ecc0dc23",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "4084ad5c-9dfd-4ab8-b9f7-a071c1aefb39"
        },
        "item": {
          "id": "33e1da0e-db77-4abb-b07f-27a476b624b3",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "bdd68d7c-85de-4f3f-85a1-4c3838bfa78c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60216e98-5c64-49c9-b1bb-c54fbd048948",
        "cursor": {
          "ref": "e93988ef-d6ec-4404-b0de-919d07b0f0e9",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "1d9f84e8-3704-439e-8cc3-d5ccaa9fea97"
        },
        "item": {
          "id": "60216e98-5c64-49c9-b1bb-c54fbd048948",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "1bacfd24-d0a1-4b2c-89de-c1e76e0c7e0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c5e0fcf-ea03-4cb6-b8ee-73e34d80d7a6",
        "cursor": {
          "ref": "c7dcb25b-6a58-4b7c-9ca2-5f1a5884bccb",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "8be4bb8e-1819-45d8-b40b-532df5b6809a"
        },
        "item": {
          "id": "6c5e0fcf-ea03-4cb6-b8ee-73e34d80d7a6",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "b050da0d-3677-487d-bfb8-b8b1c86f40bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a7c0121-b5ed-4abc-a5ee-1067b8fbd199",
        "cursor": {
          "ref": "282dc3ec-0f50-423f-8a33-fad25420e9d0",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b30b8acd-3073-47de-a13c-c97a76e015bb"
        },
        "item": {
          "id": "8a7c0121-b5ed-4abc-a5ee-1067b8fbd199",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "ee517fa6-aa27-4e78-bfba-7f113a3009dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4339699-7bcc-419e-9a5e-c5a31f630e49",
        "cursor": {
          "ref": "ea912256-399a-4961-b00f-ffffbfd2af91",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "63f608b6-82ba-45d8-9abb-8e06e46104ad"
        },
        "item": {
          "id": "d4339699-7bcc-419e-9a5e-c5a31f630e49",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "475c1a94-8990-449d-a2c0-b726670a1cfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a082320b-b3cd-42df-8081-94f55c7df4f4",
        "cursor": {
          "ref": "b241ebb2-14be-4964-ba12-09b7ce7a65c8",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "0a780e2c-d85d-4beb-8c27-4b4334d2c81c"
        },
        "item": {
          "id": "a082320b-b3cd-42df-8081-94f55c7df4f4",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "6768bb67-ebec-485c-80c7-d246fa1cdb42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "086cfe7b-e38e-41f1-8a9b-8f94f99e6090",
        "cursor": {
          "ref": "86af5a3e-fec6-44af-8f5b-cafc2ef786b7",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "294881dc-a9c1-48bf-95ef-b565c2efa056"
        },
        "item": {
          "id": "086cfe7b-e38e-41f1-8a9b-8f94f99e6090",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "84c89516-9cc5-478b-a775-448081f5aae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b08663d-a640-43a1-a4e2-9f9343a133a3",
        "cursor": {
          "ref": "1590ab73-836e-45be-a742-44cf8da33e4c",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "8204730e-f9d4-4380-b21b-48cdccdbba10"
        },
        "item": {
          "id": "8b08663d-a640-43a1-a4e2-9f9343a133a3",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "104e717c-1005-48e4-9112-cf205ca0a458",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "470ef353-bbe7-4860-88da-51356f84e4bb",
        "cursor": {
          "ref": "fd0339be-3a9d-4c53-8fa2-6fee31e11341",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "299c038b-3c56-456b-99e4-fee1dec9dca1"
        },
        "item": {
          "id": "470ef353-bbe7-4860-88da-51356f84e4bb",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "a8e20e9b-8bad-4f72-b3ea-e74facaf4d24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5cbf209-c01d-4c19-992f-19f32df3ab2e",
        "cursor": {
          "ref": "a77dbf62-b86e-4650-a853-28884c788dc8",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "12530f15-a51f-40c3-adf4-dd43f49bfe67"
        },
        "item": {
          "id": "a5cbf209-c01d-4c19-992f-19f32df3ab2e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "134100ed-6102-4a54-8960-cb09e0386f1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1342d719-0aa7-4de9-bd6e-aa5f4be60b33",
        "cursor": {
          "ref": "f73ecf81-d495-4fb4-b002-2955461c3fd4",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "d246515e-8320-4a6e-ac3b-0ec81269b156"
        },
        "item": {
          "id": "1342d719-0aa7-4de9-bd6e-aa5f4be60b33",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "a3c21e87-799e-4442-affc-3d6a4b263e0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1afc474-4d0a-42e0-b224-6dec8331f3f0",
        "cursor": {
          "ref": "e897b9cc-db9f-4228-b97c-b288a2948d41",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "6626fe7c-3190-4a17-9c33-ae44fdcfd9c2"
        },
        "item": {
          "id": "b1afc474-4d0a-42e0-b224-6dec8331f3f0",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "fee6a61b-f02d-4b27-831a-c77b7f3dd9d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4d993c6-72df-4dd0-8c6e-834dbf374a01",
        "cursor": {
          "ref": "bdaef353-5a90-4e5c-8167-74d8fcaf85c1",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "c100ae2d-5795-45b0-b7ef-c5d7e35a49b0"
        },
        "item": {
          "id": "a4d993c6-72df-4dd0-8c6e-834dbf374a01",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "4bd15c50-32d9-4390-bdcc-96fb25810734",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cdbeb8a-19c7-467b-818a-57d6da243582",
        "cursor": {
          "ref": "d7d8dc5d-bd99-40d9-9856-3d4b543538bc",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "dc9c1208-b466-49c7-80ac-f8576f30cc82"
        },
        "item": {
          "id": "5cdbeb8a-19c7-467b-818a-57d6da243582",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "8e417d50-35ba-48e4-a961-b24192f54225",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "301cdfff-821b-44b4-8085-53223a991c13",
        "cursor": {
          "ref": "c828bf55-edcf-4cb4-b7a6-25eaaf8cfd53",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "6949ca9a-b41f-4761-b9cf-5c09db5626ef"
        },
        "item": {
          "id": "301cdfff-821b-44b4-8085-53223a991c13",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "1e3b5679-90e3-48c8-a68c-152ffd843199",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63d4643c-32e7-46a2-bdab-89b9b311e2a5",
        "cursor": {
          "ref": "94dbeafb-7895-4092-9756-d4890b9ce860",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "2253d867-58b1-44bd-ba1f-4141975fd8b0"
        },
        "item": {
          "id": "63d4643c-32e7-46a2-bdab-89b9b311e2a5",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "4e57019c-9004-4c63-a2bb-c06556247b4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3507333-f4ed-41be-9aa3-c9728f9fdae2",
        "cursor": {
          "ref": "faa913ab-30b5-47e9-8989-892233b3adc5",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "dffe92fc-a9a3-4d51-b998-33841ff7d74e"
        },
        "item": {
          "id": "d3507333-f4ed-41be-9aa3-c9728f9fdae2",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "5d9a1934-3d2d-4380-a9b1-d84548ce3806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ebda6c7-2134-4556-aa3a-768dbee65c60",
        "cursor": {
          "ref": "39df775a-24d9-4e13-a42c-509986049c27",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "9d649909-2af7-4539-b5e6-e9e443726acc"
        },
        "item": {
          "id": "0ebda6c7-2134-4556-aa3a-768dbee65c60",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "d56eb8a4-098b-4ebd-811a-7aa54b296391",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da118c6c-4548-41b9-b511-b4e3d57b6019",
        "cursor": {
          "ref": "8ccc6423-c503-47f2-9131-b9f84214e6a5",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "a71a078e-d652-488c-beea-e462d7c50654"
        },
        "item": {
          "id": "da118c6c-4548-41b9-b511-b4e3d57b6019",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "38fbc78f-2e49-4c30-a606-8fe8fcfde02d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f863ecd-7b57-4450-bff9-2a0c9a928c20",
        "cursor": {
          "ref": "dc896e6c-61fd-417e-aaed-3de02615e930",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "77797a0e-a9aa-4bff-ad81-49d7be592953"
        },
        "item": {
          "id": "7f863ecd-7b57-4450-bff9-2a0c9a928c20",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "01b449f1-3dcd-4149-aadf-a699eb7b068f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ab24e08-eac5-4478-b303-30d89a065c7b",
        "cursor": {
          "ref": "0ce4b728-511c-44d7-b7ee-de2c839be2e9",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "8dbf0490-534e-4a4b-b0b4-b090abb9e479"
        },
        "item": {
          "id": "3ab24e08-eac5-4478-b303-30d89a065c7b",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "81b544c7-58a6-4d2d-b587-88d21d17102f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fddb3d21-3e9e-4345-aa22-5c6c5ad3cca6",
        "cursor": {
          "ref": "b4e6f636-0cd0-45f9-8088-1b993ba808f8",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "cce85e18-6fc0-49ca-a76c-21324354c461"
        },
        "item": {
          "id": "fddb3d21-3e9e-4345-aa22-5c6c5ad3cca6",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "80a2606b-26c0-4328-930d-0a0635d9f266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f67513e-1f56-4a68-a7e6-3336c20762be",
        "cursor": {
          "ref": "cf4e45a7-2dfe-4fc3-996a-fbbaa45e123f",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "8ea4aadc-4c84-4e63-a81f-9967bb27d73a"
        },
        "item": {
          "id": "0f67513e-1f56-4a68-a7e6-3336c20762be",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "53760377-3631-4985-a06c-19822fd1f96f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43f349da-b972-4797-ba3e-9dd7fc33ec22",
        "cursor": {
          "ref": "4e6bd9e5-2b59-4844-af5b-25cea360adb2",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "f6032336-2c47-4446-b680-9474cdec0ad1"
        },
        "item": {
          "id": "43f349da-b972-4797-ba3e-9dd7fc33ec22",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "2cc4c049-efd3-4335-bb63-82401a10471d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c0d43a5-9f9c-420c-8030-314670ac000e",
        "cursor": {
          "ref": "bbd9683f-00ac-4568-a8b8-95faee7754a3",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "07a8c35b-ffc9-468e-a191-b94624fce11c"
        },
        "item": {
          "id": "3c0d43a5-9f9c-420c-8030-314670ac000e",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "d8b7448a-0cd4-4b90-948e-8e2fbef0279c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2410056-b31c-42f1-b1ae-21851d46c63f",
        "cursor": {
          "ref": "edf98273-cf55-42f5-873c-2235e26aca3f",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "bc4e4e3e-b4e8-4dad-81d6-b40f729d4305"
        },
        "item": {
          "id": "f2410056-b31c-42f1-b1ae-21851d46c63f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "7ac9fef7-15da-481d-99c4-8d3d32020c02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7573234f-6936-4278-b58c-21b72e9f01b2",
        "cursor": {
          "ref": "4688f063-27a4-48be-b6e0-7cda975bbb11",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "c6a30d01-a294-4d28-a66f-a4b7f002b895"
        },
        "item": {
          "id": "7573234f-6936-4278-b58c-21b72e9f01b2",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "7d3fd82c-5bae-461d-842c-b3a28685cbbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9964bda5-bc1d-4368-8693-f6f849a2bf3e",
        "cursor": {
          "ref": "f25155c7-a95f-428e-9d1c-79eab79d6f1c",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "9a2c730f-9d97-4ecc-82a0-711322e14876"
        },
        "item": {
          "id": "9964bda5-bc1d-4368-8693-f6f849a2bf3e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "631866f8-6acf-4d19-ab77-014a5130895e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8a996ad-8018-42ad-bf1a-b92c74abd1d1",
        "cursor": {
          "ref": "041f5b10-cd48-4b27-ac1b-86753caa7721",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "2fda0ab4-5851-4ddd-b10d-da324edbe9df"
        },
        "item": {
          "id": "f8a996ad-8018-42ad-bf1a-b92c74abd1d1",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "a4d6a772-ae9e-43ff-bb7a-219918e14a89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd5affcf-545e-4f4b-8b9d-ab451f47628a",
        "cursor": {
          "ref": "407f8451-a570-4611-a7d5-3ac6643a9146",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "9f45ad6a-0921-4d6e-811d-0c39b9004b5b"
        },
        "item": {
          "id": "dd5affcf-545e-4f4b-8b9d-ab451f47628a",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "021e5f2f-0b85-4a58-8176-4a3ed4369524",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f9e77ae-e2d0-4c53-852a-c9025b2da51b",
        "cursor": {
          "ref": "69151963-ab52-4098-a42d-54ea31e70943",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "018f337b-e23f-4c45-9f3d-078d1e0c000e"
        },
        "item": {
          "id": "2f9e77ae-e2d0-4c53-852a-c9025b2da51b",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "9376e0ae-d3ee-4d8d-88ef-0633196151bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "309f0c3a-cd9b-42fb-980a-7d6aeec9eac2",
        "cursor": {
          "ref": "6e607278-76c9-4529-9abf-8db936a096b5",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "b90e091c-cdd1-4dd6-8543-79bfe19c0daa"
        },
        "item": {
          "id": "309f0c3a-cd9b-42fb-980a-7d6aeec9eac2",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "da4ce2c8-93a1-4bb1-8f0e-34b511512dff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f3cfe1b-c187-4199-aea8-893c2db880ed",
        "cursor": {
          "ref": "68c622d3-8b5d-4e43-b9c0-d20af8c7bdb2",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "2c69b8df-89ca-4fb1-86b4-9220dedf7927"
        },
        "item": {
          "id": "4f3cfe1b-c187-4199-aea8-893c2db880ed",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "1944148e-b851-42ee-a382-bea441b10e61",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf190893-20a0-4729-a92b-32bfbcf9f719",
        "cursor": {
          "ref": "55cbdd12-f95a-43ad-b4db-0d54ea7b3ee7",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "3dcec6c1-cb4d-4784-99c3-bf57d1079413"
        },
        "item": {
          "id": "bf190893-20a0-4729-a92b-32bfbcf9f719",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "029caddf-ddb4-4b4a-8597-88096dada073",
          "status": "OK",
          "code": 200,
          "responseTime": 170,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "cb4f68f5-2b4b-400b-80ae-961d99c226fc",
        "cursor": {
          "ref": "e2cb9377-d7c7-47d5-a969-8b815a90664f",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "590069b0-6c15-4513-8847-52a80320668b"
        },
        "item": {
          "id": "cb4f68f5-2b4b-400b-80ae-961d99c226fc",
          "name": "credentials_verify"
        },
        "response": {
          "id": "bf578496-3c69-4c6d-a5a9-18ffe66cc056",
          "status": "OK",
          "code": 200,
          "responseTime": 155,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f548a8ef-70a8-4cb4-8efd-82882a6d3725",
        "cursor": {
          "ref": "2816f67c-c0cf-407b-a05f-b97636ae9b55",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "47f894b6-5f67-4bab-886b-f5bc4b80f962"
        },
        "item": {
          "id": "f548a8ef-70a8-4cb4-8efd-82882a6d3725",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "c1066d8c-0206-42ac-a663-a42d1c2f8099",
          "status": "OK",
          "code": 200,
          "responseTime": 153,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1464ac2-7449-4ddd-aa9e-61ee58a94538",
        "cursor": {
          "ref": "1f55a0ba-7769-43b0-b04b-c5e4396a078b",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "099e42d6-045a-4d0f-b046-c5d2a0e12209"
        },
        "item": {
          "id": "f1464ac2-7449-4ddd-aa9e-61ee58a94538",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d7f7fe52-52fe-466e-b01c-e0480c9fd082",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1464ac2-7449-4ddd-aa9e-61ee58a94538",
        "cursor": {
          "ref": "1f55a0ba-7769-43b0-b04b-c5e4396a078b",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "099e42d6-045a-4d0f-b046-c5d2a0e12209"
        },
        "item": {
          "id": "f1464ac2-7449-4ddd-aa9e-61ee58a94538",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d7f7fe52-52fe-466e-b01c-e0480c9fd082",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a70a7ff-dcdb-4779-bac5-6b948e67e6be",
        "cursor": {
          "ref": "1388b960-50b3-41e2-ac10-0245441fc7a9",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "4e167e2d-54b8-401b-9f87-06f5fcd93323"
        },
        "item": {
          "id": "4a70a7ff-dcdb-4779-bac5-6b948e67e6be",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ec66d38d-4d2d-489b-a032-fc3e4f077855",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae226765-436a-49ae-9997-3e3f7c2508a3",
        "cursor": {
          "ref": "c324ed91-db4b-4e40-8df0-5f815712d374",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "3a9cd36c-f7d3-4a5c-a764-b164389fd40a"
        },
        "item": {
          "id": "ae226765-436a-49ae-9997-3e3f7c2508a3",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "1999e47c-aaa5-4bce-9cd4-f2edd2e226aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}