{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "fe625a6c-241f-46ee-8849-8e61d6d1f076",
        "name": "Clear Cache",
        "item": [
          {
            "id": "52a74214-7943-41cf-8525-cfd7dfa243e7",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "714020c7-a64c-451f-a461-7c262bd50653",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "80cd1d6e-bfa4-43d4-87a4-b95ee395b8da"
                }
              }
            ]
          },
          {
            "id": "57578449-ede8-46c7-b18e-7d4edfdf18f1",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "be20f51a-d557-42c4-a9bc-f2b8402e3352",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4105e0c9-252f-40a5-af15-4f2f3553fba1"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8dc73014-a849-4ed5-96e2-52a35971dde1",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "10871414-2c36-42dc-9feb-4acaa364834e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b75b137e-4aad-4b1f-8cf4-ec5f661efbe4",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c86bf8f0-229d-418c-bc01-e6cd2e5a46df",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "641786a5-9cd0-4df4-9261-59bd2565f7de"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3400e8d7-9e18-4063-8e7a-677a142c9dbc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "86dedfb3-f031-442a-992d-9b53e3736e5b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "02a60c6b-bfaa-4c35-88d4-7593dc77b356",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fbb2e3c9-ae34-4f62-977e-5b4067358faf"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4b791e9e-99a4-44b9-826e-1cf31ec50108",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "c37adfad-1763-4504-8850-9f472ffef36d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2e94422b-cfa9-4699-aa88-f4811fc95462",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9b5b94bc-9a78-4f4e-a8d9-d52c5f1edc01"
            }
          }
        ]
      },
      {
        "id": "209058f7-f550-4e31-9309-0f44e26e2e32",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "225bec9a-9228-4c4a-b7e7-7b9ec60dce82",
            "name": "Negative Testing",
            "item": [
              {
                "id": "21f295ee-6e84-40c3-a528-990838c76efd",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "07a2f4e5-b3a1-4733-b6cc-fcc481eaa86b",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69a71880-efca-4835-b205-7c46134b98a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "09b8620d-f89c-400f-8d0c-45bc065457aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90ac404a-164d-4038-9390-6cfe294fb78b",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd0fe66b-3c2e-4c32-8ced-836ff7047c3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8eb7ab81-97dc-404f-9a83-879b20220af9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb3dc72c-53c4-414c-a8e9-1f7c64b32ee8",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84cf4fdf-66f8-4158-9ed6-8746b19f59b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bb76ccd0-f137-478e-83d7-05cdbf506651"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5afc4e4f-700b-489c-b726-959c37fd0a08",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "41fdf1cd-fd6f-4c79-9a4a-4f28ee4cb685",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92be741a-d0e9-4aff-851b-cc0979e6ffb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cacf6e6c-170e-42e0-bd4f-88a974c6ac07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c8637d8-d1d7-4301-ae3f-ebbace1c86ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09050b20-cbae-4eef-ba54-5fa59ac2bc22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c6afe29-01b4-45fa-9552-b15594ca328c",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b6514da-5ccd-4c19-9e70-58cfb1afd72a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5683f903-757d-4a97-bcc8-fd1e0c5e99cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efeb593b-bf75-4b1c-b76b-606e6a112172",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "79171548-9334-4f8a-9709-d19a023b8c4b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "90b29591-32c4-4db2-849e-45a87cc5c914",
            "name": "Positive Testing",
            "item": [
              {
                "id": "507ed9b4-6eee-4924-add2-d7b1efa2aeb4",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e1e623d9-a25d-40e0-9149-0f7594c8ae85",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "e11ee8bc-ae8e-4b33-b0bc-6da84794fa4d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4f8162c9-21ab-4ad9-93f7-b77213b86765",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "d8c12de1-b02c-4c11-816b-0faa9b0457fc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f5ec9fdf-8d22-4dbf-bdca-5b4f9594ffdc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b3da4076-db47-440d-8036-afe302c577f3"
            }
          }
        ]
      },
      {
        "id": "6b860f7a-9839-4d3f-bc06-73f74412db07",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "5782a9c8-9915-4b9f-9492-8f46e1870489",
            "name": "Negative Testing",
            "item": [
              {
                "id": "92270bc8-be40-491c-9804-6ac925f59885",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "af4096c8-a457-4077-9adc-37c6f545b58a",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed430fa0-bb3d-4411-a5e7-4d76fe303885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2e05a4b-22fc-49f5-be59-b35e425b2b0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6020547c-0c16-4a06-8b81-34eef6f0d3a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "409529cb-a76e-44ff-a6da-b38d70c1c047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1730c12a-ef60-43aa-a73b-54a338654f08",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5626be9e-de05-406e-8311-36c0ee900473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18399bcc-7fe1-4755-9006-998ae88f658c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "715a83fc-7f43-447f-800b-78297a669ca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "180e052e-bf47-4231-9967-d65ce34a4f64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c79d7282-a074-4bed-8c94-76134c8e270f",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c41cabee-34d9-4a35-bdaa-9e869e469407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "815a9789-8155-4714-986f-61d63417d7c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37aeaa22-387b-4603-b069-6b3c3675570b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "83575f5d-1142-4f1c-9ba5-77cf8ae81fc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f836678-56f9-47c2-bc27-613d1e9c2dd2",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21e3e87a-32de-46b9-aa98-3c95ca9132e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78d15e4f-9edf-497c-a1a9-27bf48bdc48e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4f0e1f7-9098-48f2-b742-a0403e145f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "77736111-1cc3-4e8b-a147-1160da62a5c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a88361dc-a6f2-40f8-ad97-1fa9e6f4017e",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bbad967-f4b2-457f-8f19-9c19f859dd63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28b202c4-0555-40c8-a7c2-c33196e76ba8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "159d6874-7300-4cb1-b73d-8c233db45881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "900e8ef7-b654-4c8a-b589-acbf548cd658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19bf9a38-750d-4370-a227-f4aef0589988",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ce73326-d4c3-4ce7-b15c-f0142c25d5eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3913adad-51a6-4e3a-abb1-38cf73b7e6a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05878699-3295-41eb-bef4-45a7710df2b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e8572cb3-858b-45d3-b80d-5ee1f621c582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33816756-0a7e-43b9-b223-c39dbf828327",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f5fc585-e6b7-43e3-b566-09f28df4b909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e653c3a7-299d-42b9-bb97-afae4d288187"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bf0b98a-55c4-4c19-bcef-80af30169600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7bfa3192-db7e-4fe9-8988-32cb7889aec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15bbda3d-ab94-4ef9-9f3b-44d005033d7d",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04e1cb19-d4d5-42dc-83b2-93f8461608c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18624e72-ccd9-42e8-a3f6-61e276bd189a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8132fcd1-3bb4-465b-b69d-349a8a890284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "54fbcc99-9cab-43a5-ad62-009cc13d9e0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73f6bf8b-1d33-4329-b525-923ccc5616df",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4276dafd-8282-4fd6-9954-6e827facc596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b595cad-3e1b-462a-b5da-55cc29851845"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69933018-5e37-47c0-a6ae-1cd683e4ade5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d3f35866-c4f0-4d21-a44c-e4e4a35e9443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30cf97a6-adb8-4228-8c7f-739e76af82fe",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbe0f085-a74f-442f-bc7e-ca794b41c399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b97c4d2-decd-4d38-918d-04b8e40ca1bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1964dc9-aba5-4302-9ec0-4a261c4b56e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2f759cea-151b-4eb1-8fea-f1c68014ad56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fcacc58-5f49-44bd-a215-ecbdb93a75f6",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeccd038-2444-4f92-b6da-ed62b6c13be4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83e578d6-3542-4126-b903-d2862c50b3a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05afe230-da91-4dec-aee9-1777314f6d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "615f39e7-c152-4c87-88a0-9e2392756913"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3247567a-e3cc-41a3-b5e7-78441b1c364e",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cedf05ec-5a3b-4b42-86df-53ad7e2582ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1a5747b-9634-4f86-a20c-ff5d967159c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "320ed099-da0e-4131-84d7-792e20e7349b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cb4deb1e-2ace-4920-b40e-8b91ba5f44e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e400ba2-aded-4377-8c77-960d598e5a17",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4858b457-8f45-45a1-b374-052be9d8da5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "786b3ed4-f1b6-4718-93e3-fbf724e6f5b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e4144f9-f7a9-436b-a457-a96715d99e71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd22302e-9a10-4436-ad14-0791854b49f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94d68e09-a7a1-4396-bbca-5857f33101ba",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e6432dc-1e1c-499f-b899-5054c4c1b3d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a49695e7-eee4-4d73-a561-ed4f09606bc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aeba7a1-e631-4d83-a4a5-6a6e4046d2de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2fead019-5dd9-49a2-87d7-3ad774e16683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1753008a-c0d5-4ed4-8204-30914b2cae53",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99a1dd71-2b7d-4fcf-92da-0d415750258a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c7f628b-e0a4-42f1-9c58-2cdce78bfb3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f2b7d1d-e56f-4d6d-9c1d-0639d6ba6422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d37549a-5d60-49e7-aa8d-ee6e0fb0fe2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7dc4fae-0ace-451d-8fed-278b5c5cb038",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "052a2ae8-f985-4420-b866-e54c9d004828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2d5a2ca-4c80-4ffd-83e2-b63a427df9b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2940ec91-2467-4543-9b7b-54d31a9e99f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "990edfaa-d3a5-421c-902f-c14a1178425b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed54fc29-089f-4316-ada1-95362f83fea2",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b0e8277-08e3-4dc7-b7e3-cecb41c7f986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8508caf1-cc0d-4a46-b57b-9505c97e2eda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fde786e7-e1c8-4be5-841d-32ab5219972d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "daa55e24-b4aa-4f35-b7d2-e07d67582938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07c0ce26-a711-47a2-849d-6a5623d03326",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6481f6cb-7c7c-4ba3-bbcf-a848472bd491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01957f89-2b19-424a-a647-bfd215f2f743"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5051b15f-ae7e-498b-8341-c3c0f1d1ea9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf4f82bc-176c-440e-b20f-602aaa4eba0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6b6f1a2-6262-4ab3-a5cc-11ab9386950b",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92df4a5c-fd1f-448b-81aa-e3dbfc77f902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bf494fb-a3ab-4839-85d1-eb0d26d8207c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36c8c53d-dfa1-49d8-858f-4be2c3ca1b1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "13d977fa-ebff-4335-80c4-7dbfa000e906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75d83a7a-6c05-4de0-ac4f-922a53146808",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "598201ec-de69-49f3-93b9-006dbe6c1dc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e801915-dc7d-4fb0-b894-67fd7cd2192a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "959d237a-f33d-40bb-b8f7-3c8a86828954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "63508ba6-3de1-42d9-a257-76f908775d90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7dbc59d-5443-4cbf-af15-3c41d02d5e7e",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d253c59-afdf-4f25-b336-b36188cfa7dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8657525-c84a-4cbe-953d-b028f53879d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7101e2a-4696-4217-98af-1369d885d457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0f95721-4429-43e2-b3ee-36475d1b611f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2568303f-0053-4e36-8700-3afa4134dc9b",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c2d572f-ba40-41e4-92e5-249e2229d6f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a229957-0742-4c28-9490-b369a5f8a897"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25b525ff-64a8-4b68-9ce1-421d40cb5094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "51db818c-4603-48c7-8211-b2b96426652a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17b585e1-e37b-4697-a706-8d854084a80e",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b652c20c-d543-45de-bd03-f4906f88e0de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f64bcaac-c59b-4a0d-9845-7c0fadd822f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7d9c4bb-8fe4-4fbc-a3be-b5a04ce7537e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "43c4059b-255b-4cac-99a2-ee8c02197e21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12751180-e5c3-486d-82b7-937b304bf1da",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "797c72e2-c551-434f-8660-6e0b865ef2c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a76d2c2a-86b1-400f-beda-f3ba8a01697e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2672fcf5-6ab6-4b8a-8f2b-b5d3a95aa829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ae21a3e-7df6-4d0b-b296-76b67723b06d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da5cda1f-f401-4b7e-ac43-d02800ddd9c5",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "089c7019-91ef-468c-ba47-b3afb5d69cf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "558bbd28-abbf-43a5-a570-35064fcdc16c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1238904-cee1-4d7c-8d69-0cd2ba9059af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "74104740-fe4b-4f54-b337-85a6f02b03be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c28a3693-67ae-4a77-97ad-bd1d4dae49ab",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "349eb46f-8037-4563-8356-179b46579ff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c55e0e36-f984-41cc-b823-ef2e37bca86c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b77f4ddf-bbfb-4434-8648-dda030fdcbe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "964b44ce-7e6a-4582-b8f5-15de019698f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fceb0d5-6112-417f-a349-4c39f9e5f074",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1c7b95e-0bf4-4546-8f13-86706d92eea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "031ff133-429d-4d73-9361-d4f0310febe0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f5c6fbe-7d28-4004-bf94-cf5f91f946cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "94152585-b6ca-46d4-901e-6275d98b3f13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d495d8f6-686b-4261-8813-fd247e67466c",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e66fad0-e708-43a7-82d2-6e6f3561b1a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aa275f3-bb50-4bce-931b-7a23fc3e8c7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3a756c7-acc9-4197-82c9-47ef47879a55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7618aba4-02b4-4d06-adbc-bd61a7cea08e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db46e7ab-ac8a-4fd0-a7c1-a0e6eb44deef",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30902497-42d0-4f22-a934-d9bd13ea4fe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21efc02c-c4c7-4c35-a622-3688818a1b99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd5914f3-0524-471b-a371-d12f281ba0ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0fa785ba-9e27-43fe-a934-0d4e49a5b08f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fc98360-6d3b-441f-846b-fea6b92fdcb1",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c35e1957-b8ad-4075-8ede-fe216e17c146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0da350ab-11a1-4308-865e-3fab31a691b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4499b5df-cfeb-43da-b58d-c5bbf18e63a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f3c0a45-7749-4519-94db-d1b7973e1053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e82967ca-3b11-424d-ac05-c3b67a3920d8",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28797c77-9ea1-4fd7-b42a-9f20953f3f50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "824ffa99-5498-48a5-8e14-c2d23e5e3d20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0a0d931-4f7c-4f57-ba71-5fd5152ac3d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8eaae2a0-e3c8-4111-9bb7-55dff0461b27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dabb83d8-836e-4b45-8629-d37380ab6dd5",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "381d29e1-7088-4ca6-9551-26016a9ada21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bad9a25-2d1d-4a7b-a271-0536d26cc911"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "235b2f89-00fa-4587-b043-aecc22606174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e14a6a15-fde8-405a-a03a-77eec05e2fd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e9da113-2ff5-4388-8bee-0f0d64107e8e",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e81c0784-91d7-444d-88a0-08581a2a7bd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ae921c3-9521-4b72-b35a-7c206239f4e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4392328-3bf9-49ff-ab26-755279ae0a26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc54b6f7-c3c9-49ca-95b4-81c758e88b87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52013c35-31e0-4afd-aaea-282433a75cc1",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7846a8d1-2f24-4361-a0f4-77868d0922e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0326a612-b815-4146-bc9e-4a2e81ebbd1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "947cd194-0237-491c-9466-17a764b34ede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9329b22-5272-48a0-8bf1-e647968bf166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebdd8930-744c-4f88-9f7c-cb954103e55d",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e46b411-5add-40c4-8486-d77ddfa165dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1dcc881-1b03-46c2-9e1c-39bf6aafff61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b9994e4-992f-439c-a6ec-81643339416b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "01617b3b-0be6-4903-a99b-17f159fb1742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b25a42b4-435e-4d05-93f6-78422e9b13fc",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64587596-a84b-401d-8e54-e089c4df3d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d17f31f2-533e-4a45-8b47-e42bfea52bdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb169c7d-7c16-4a4a-8774-aa4e45cd6993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "49e26133-0987-4a0f-8c88-01806a49888b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "625f7af2-857a-466d-acb8-abfdbef3df64",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35df9836-ffc1-4545-bb7e-16f7e9858c8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9001395a-21a1-4872-9046-1cd8ad954c8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "168f2c16-e1e5-4d5b-91d7-00dbfbb57858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "285ab8fe-5a7c-464d-ab25-994183a81536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf0e0b25-0e6c-4bf3-b541-ef3d88525544",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "421894c4-062a-4569-9b38-708aa25dac2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffc0bba2-07cd-48d9-868b-fe4c9e329f79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1cb9b6c-0690-4686-a6f1-c0978e406408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "29e2f065-26d4-41cd-9141-4bd0cd2e491d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f01b0f7e-1c3c-4f22-a8d0-04ab68bccb93",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0be47127-86f6-4e4c-8e79-c10b9452f785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "719963b4-e6ad-44df-a457-c7bd1669d9c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98cb9a84-2e04-4752-9592-a1b4d84b2029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c7ede873-82e5-4792-9b70-61dcf7191714"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8542410-ac96-4287-ac95-d791c28cfc1a",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23d9b343-8b11-42ee-9058-a9842ba8d202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fabfec2f-1b68-4e4a-ae6d-380555a3a8e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51b98051-8503-4bdf-90f1-6a13664b114b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ed0a0f6-6616-4686-a330-15057867862f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df9ff421-8fc3-4381-92a3-139b6736750b",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bb2e758-683d-48e0-819b-bb137e2f6e9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60d4dbe9-922c-4311-9fe2-95b499b53e2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "360ff7ed-5e55-432d-8c3d-587b4e980afd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "776236ff-979e-4c66-b372-de9ce18e0393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e479c0d0-afee-44ee-b2c8-0483c3b2ac39",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57686a4c-1e44-431e-b8a4-edcc55d2e6c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1b1fb8f-d8f1-4eba-9c35-a5b5a3f8444f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eac722f0-7290-4d44-aa9e-68187a38a813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "bd52b624-14ea-4a34-83d2-8eb93702750c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6657b175-8ef2-48bc-991f-f522b40d9baf",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0af79431-9a24-472e-8496-f720e34cf486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67cdd4b6-7ffe-4b7a-95ad-e64f62b47015"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f727734e-246b-47bd-ac6e-9fc5dbbbca39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7499e941-abd8-4ee2-b611-3a69860c90b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3564f28-ea51-4012-80d4-74492c114e4f",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f2f09b1-47ba-4a41-a9b7-035a466d7bbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2d2c7d3-4d73-4d50-ba00-57f921bc21a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf15815f-9626-4cec-8564-e6d14e7ea65d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "af8d4636-240f-4767-92dc-f6a0f22b79a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a77e46b-c9bb-484c-8ffe-4dbdbe0a60e5",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c1b2abc-a3ee-41e7-aaf0-8b17e71e19a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf4e5e5b-5587-48dc-91ce-f42dfdf94801"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7dfd5f5-164b-4c6b-9360-95d0af3888b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf98e128-c885-43d2-ae5b-0dfff37b4127"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aacb473-4d42-4cf3-93cf-d13742f1bf1d",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "448e4b23-320f-4cf9-bb65-da4bccadb07f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3433d592-9eb3-4603-811d-1d454f26e936"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d56765d0-8966-4301-b641-19cb38af037c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "098c8d09-f039-49f5-ac8f-f3a74109cd1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91c01796-4e74-47bb-8d21-57dcef861918",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0bd85ac-355b-4199-bdc6-eb4aa479e9be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "596f8c35-f7d8-4032-b845-08ecf29a361c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc9ed4d0-f150-4e3f-b513-72d4df339400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "74bdca82-6736-4832-b2f7-644995b54fcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd4228d4-9083-43a2-8145-a4ad7a596e3c",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcca0094-d2aa-4591-bd50-baf636054c64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2068211e-d72e-4299-9c4a-24539297491b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b486e91e-251a-4711-87b6-711722251508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6cce177-e9b4-4290-9a99-1e9f3f619d06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cb20b62-6a80-4990-9020-378789430f42",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9da99fca-e279-44db-b2bd-7c1dca808f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "323b429b-4410-4dce-b001-cfc459209fe3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "875252da-39fa-474b-bc64-d94e8a5384c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f60216a6-a00f-44c1-9ddc-07828ab9bb33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f11989f6-b383-4e18-91a3-b146fabf1b1d",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "feeb59a0-58f5-4bbc-ba53-e3515be460ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9eb2a8b5-205e-46d4-b75f-dfb7e9218f81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "251a8e93-4ef5-4b54-9c0b-5a103bb04c52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "91a6226e-99e4-4340-8069-698cc2d344b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb327e1b-e69d-438c-b996-fbeec848e70f",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e17ea029-26d4-478c-a05f-6549758fe51e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33356cf3-ad87-469c-81e4-7cb84793bb08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "644e9e4e-df13-4576-8799-60ae2d420084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b88c4e2-3914-43e1-8561-ea2d4de5c2ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baa0848c-c248-400d-8691-4f52cbf5b4d9",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7088ab89-16dc-4026-a32e-0d3d91d63546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "919323e2-a9a2-4fc6-9264-c4270d21871b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6731349-ec1b-4fa6-a7d7-c03ca8486d90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "04932d3a-5ff5-46df-a5bc-fc37395974f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b70f91ca-cca1-413e-9985-0867182c9a04",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b15e8ac9-c6a9-40d2-a181-8ab41c8dc9bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "245e0827-4869-44dd-a455-17ae568f4def"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e186e1a2-1c3d-4a64-b20a-f1aea8bae7f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e4c95de-7ba1-4f69-8127-243f0780eab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cafe4c6-d94f-4a35-bd27-36f92571fa50",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60b18c7d-1aa6-41ec-bd75-4dc48fe0afab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d7b57a5-5ea1-4617-b32c-cfe22dfc024d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bb22df7-a672-43fd-b2ca-e66613ab75d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f464d110-9b99-490c-b3d9-a3c16fe7c3ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1fd543a-f170-403f-8b9f-695a2cd89ff6",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f2f9b5d-5c16-413f-8e80-33bdf61f9cb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "079a00d1-30e2-44f4-bf95-747269995af3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e8a1eb8-bb1e-4c8c-9ad3-b5e5811a7a2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ab3cab9-849b-4351-88c9-d6d00ba3ec0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0eb1cb8-8157-4f0b-9e42-2bcc06ffe835",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d2e7e8c-2610-43f0-81a5-b3785712cb8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5349074e-9225-4458-8172-949b97d8243f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd0b2593-52d1-448e-b33b-093a93ef7581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "fae4bb36-f7cd-4058-ac35-36ceddbb7930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0642f26-27be-46b3-8463-f49e073a223d",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1ef830e-7362-433a-af6f-da920d3785b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03b6d328-cf2d-4447-a3f0-3ad837391fa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "122126e4-9372-410b-9c09-b64775c305ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2f9d7ac4-92d6-4b5e-b53e-870867778ada"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9351e22-9603-4736-8cf0-44799257b8f5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4680446d-7c2e-46fe-b950-b13ebc4b3a44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bf5dd93-eebf-4216-bad4-f02781f7da3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32113fb6-a60a-4f10-96e6-c5f404165552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d1ac3a3d-922c-4129-bd29-04238f6ab763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "603c9618-e19c-42a0-900a-689a5ccd14a1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef98133c-a120-45ff-9ea3-4edb6ce9d2b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b53ceaad-ceeb-486d-beeb-31653f9ead7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58c0d470-ee15-4041-a24d-21c0ec7334f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a91d4603-6311-484c-880d-6100f6c58c46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2115abed-ed95-4db2-9771-b8cedc845529",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2be2e653-e142-44b0-b5e0-681f51adbae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "466be17e-9910-4e04-8172-91a8d065a48f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "078c9cd3-36f4-44fb-b899-a292070c57ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "718c1a47-2f00-4494-81ef-22e71eec28a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1af6b279-1bc0-4e50-9fca-0abd31f61698",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c91d8cef-5ece-4f6f-abea-f485fc72b590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32c4d356-fc21-4f81-a266-552972b1c5d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf30a7bb-9d50-46b0-931e-ee23e6b29391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2b17819-6e9d-4eb3-ac7f-98ff75c3e345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ae6b097-a5d3-4045-b25d-33a6f00b05cb",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a33b6324-7287-451c-b6b9-96c596fa9f19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0acc2ce1-700c-4c47-891a-224fda36b41e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "925f601c-f522-4af1-803b-3053d89d343e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c3119bf-4d67-4543-918d-99763d832fb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e6398b9-e343-4847-be64-e4f59432467a",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da7491af-2e8c-48e8-883b-18531d935b2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8530c1f-6a6c-44ba-b244-abd028f768d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c566c750-cf57-49d7-9053-da2ef8b8bdaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "cab8c075-af4c-435f-8b01-2d93306ab259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fb2ad97-8a97-4225-85cd-58138791a318",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d329f34a-3534-4eaa-a113-35894c404b6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edd615bc-dbfd-49e3-a9ea-f623fdadfdc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0022e5f-65c6-491d-9d20-fa102af2118f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7834ffb3-cd35-4fe0-ad69-ac8db9a7dbfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a7e97a4-daed-49b9-87ec-32ea8d4b18e0",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28511696-da5a-4e72-8ab8-577bfe810071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cae79783-f688-4559-afa0-bad2f0f92e6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "168c8703-2232-4282-bad6-3c8db86a6b97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ae0a8d2-1b2c-4631-956c-98bc698032d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25ef449a-ab83-42aa-8308-51018457718d",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "471c8094-8920-47ad-a40f-8803adde17c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d8b0f4f-1bb0-4f1e-b484-107d2ded305a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c58a9776-0461-4e85-8158-20c386e5ce17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "107974a4-34e5-4865-923a-1f7b765af657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a831bb65-8940-47e9-9a86-f0d4474440f9",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b327372-a765-4e33-bcea-7401a8600457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0b147c9-f701-4fb6-b4d9-9c0ad6090d1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42ef9db5-1a40-43a3-ba8d-834a5e497b0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "430248ed-14e1-41fd-a469-e6fcc2440378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a807cf4-227c-4473-bfad-c0b87b851c0f",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f98035d6-cc79-423a-97cf-173840ae8b24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "961028ef-d54a-4998-ba6e-15c74d767f1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff297b36-8137-4e9e-8b18-3794e3ffca96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a38e899-7013-48f2-9894-e1ce6b131e0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8463498c-5a21-462a-bc17-0e6605bfdb02",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "821ee006-b516-4057-8e98-53c988c572d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82804c9e-3a9e-4c01-8877-59bedd46a7d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5805680-5900-4189-a2af-eb134130838c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b7ed0f2-bdbd-4c6a-998e-b449c8fc1389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05465a3b-698e-4130-a1c0-8cac0ff7802b",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66db7eab-098d-4a03-a2d1-e77f85087bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06673ee7-0fdc-4d0b-8498-5026af405ac4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09e85652-bb06-44a1-bf6b-be2b18590106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "36835cc0-3399-4194-b677-c61bd841b304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a25041f-8f01-4bd7-9e56-2201c52bcc39",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baef25ea-556b-4418-b1b0-cf13a1763208",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f82b33c-1255-4294-8f87-b046fee151ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6db8536d-845b-45b9-8e23-1614029c39b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "853d1c68-6c39-4650-8425-bfc6be1ec2af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43ffb409-1817-42c0-b91e-617996384453",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2eb0192-8c71-4eed-ad9c-61846e73157a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49b1c39f-664e-423f-a613-95fffed6c1b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31fc6ff2-01c5-4978-a726-710e95f3a3e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff03efa1-8616-4f2c-b931-79de952bfa0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "481961d9-9a39-4d19-846e-29b76f4c1fd4",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7ef07b2-667b-4f5b-b9c6-4c76aa0572d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7edfa5f1-3efe-4ea7-b5da-5adc4b8e5de6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b965c22-b9cd-4259-80e8-d651e4a116ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "52d11a37-6ea5-4700-a758-1e3057f5a2ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c61c326c-e90b-4931-b60a-94e6633aa0f3",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c547fa8c-8565-45aa-b98d-bd68689da238",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f299afc-7ced-4021-8443-8643a20bf57c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e5d56f4-ebe2-4280-9c27-f5c269ab9f37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c29cc2e8-6f92-4ab9-81d1-58da5af22cb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "643c1aa3-7fcf-413d-8a4e-214d2f3f70ba",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12118c10-a9c1-46f2-beab-e8c054f81a07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "694c178b-b8b6-4665-b803-4240e9c60eaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea75006d-f291-48d7-9f5c-60b9023697dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e698657e-cb44-4d3b-819e-f4a05f4771da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52232dae-feb7-4225-b55f-f9dc0a77faa8",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33ce8ec8-8692-4413-a0ec-5184a0571ad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51b7dc3e-250f-4510-9e3a-aa49f65cbd69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "825ebfcb-ae4f-43e5-9b4b-df3500be43d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "30b20973-d79f-4d11-a41c-21c32b5b25df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8977293a-5924-4a8a-8944-8ff1b3da5986",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8951baf-899d-41fe-a6f6-9bc89778b63c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55f2d9e6-3fc6-4a5a-86a5-874519828b96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "305d3f10-2991-4f61-b6da-190937e6ed49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f893283e-bd51-44cb-90a0-ae47da211c94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c832cc3d-d204-4c15-9a66-20591f369925",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6978f650-93e7-4ecc-99dc-85c5fc3c4b21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3caf6e04-88e2-44bd-9bf6-307d1525be7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "615ecd7b-23da-4b97-85e9-10a58aa62ade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "80be9bbf-8563-4ac2-a21b-42152e53aa5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b799e0e-b8bd-4129-92ca-3908f050259d",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d2ca17d-f34c-4182-8eca-0d23060ffae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b85550af-a2c0-4910-9023-4b3d6b7bdb2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f79e958e-d24b-4fc9-8971-5ad594de8f41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8f83292b-4078-480d-9a5d-d91a44eb8ef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1210c788-9d51-4321-bc25-88dbf91742dd",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af4317af-a6ac-4ae1-83ee-41325a4c5ebc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed68b264-c1e0-4b37-8932-e3fbfd1e12ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97a4b303-c7f3-4200-9389-a294bab9bcc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2ca10f83-0731-461e-b02f-948735941ec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1183d79-3e35-44bd-90d5-f03f6fc07a98",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee9216db-77e5-4859-b314-c487ce349800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e524f48-d705-4b84-836b-2bd850ca0626"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dda87f4-3189-4f4c-bd0f-d08fc395b83e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bff8c8a4-87e7-4ac9-b2d0-6ac8cb94acc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a8f7f75-1b60-46c2-96ea-0faf0f51b6e3",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b96321-bf2e-461d-ade8-a501acf15045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6aaab05a-e5ba-4425-bdb2-64e43b99ea97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb2e9d4a-77aa-480d-bf56-c865036408b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "42b63bd9-ed43-4928-8506-738106d89164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dfa12e0-2c80-4a50-b6bc-721071c028b1",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea20bf36-80c2-41e0-8785-49ea77268b82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07193659-08e0-48a8-bd8c-f76b14bee184"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea6643d3-986e-4aab-94cd-3847bb3850bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a779c6c-ff64-4adc-8c5c-bb4ba7aeea61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0360c6b-5a39-43ba-9d96-8df116a77e17",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a01840ee-3459-4ebc-b4ff-e1c6c0738e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85cea9f8-62bc-4321-aad9-1f376371f3b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daf4f6bd-6b54-4d1b-933d-463f1b791213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d128fd46-1940-4958-86e6-13b16efd857d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5efc4c13-a35a-4501-b8db-7059db270c9d",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47081a6d-ad50-4722-9494-34ffb3db9d9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5716eab1-15b8-4218-9d7b-1ff29d6aef62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc41232a-5416-4663-acb8-42cc64a4e259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "51955536-c263-41d2-8e30-f0ac4b84afa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49de01b7-2d84-49b1-aa01-f9829e44b40b",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2d7db4a-dc45-4116-acd9-1dde6c7b1c11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "385c0e65-dcf4-463f-8106-b6c6ac1971ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "232402e4-0e03-4937-a3b5-83d85b2f2527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "56339ddb-cd4b-439b-b30e-f6ad21bb1d76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e3be983-7e7d-4e8d-b4fd-ec0bd537a2b9",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f1a9e13-633e-49af-87b1-bbdddeb4517b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d23f5865-1e48-414e-af72-7ecc83476389"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82bd3650-e178-4b0a-a862-3930aebaadb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3619b23d-320f-4661-8415-d0812bcc3266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb3f7c50-c2d5-440c-a048-d8874dddd840",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e8f67b5-dc19-4dba-8385-6e3478b84737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b275f4d2-5066-416f-9735-b03ac527c6ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07e2455c-3747-48f9-bafe-44a7740adcc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e882a984-0c96-4a68-a431-16c8bbb137cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8bc890d-1c0f-47eb-af35-27f0c32c3e02",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50e5aa7c-1b1e-445f-b208-b7e93dc9b9c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c0d552f-b0e3-4bd8-8f51-e0155482f9fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70021b61-2505-4aa9-85c7-fe9771f1b063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a45be0f-1c05-45cf-8ec8-2fab56ece33a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4df09758-d7d4-491f-993b-339e885cce10",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6976ec14-d6df-461b-9cbe-8414568ac740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2efd507-9110-4ef0-a7d5-308b029542dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0decced1-4732-4085-8ca5-f0894666df43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8240bd15-7e32-43c3-9ecf-82dd06892a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aa26cc5-a44d-44f0-92cb-4531fd4ac4ee",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c28bf61d-f3d7-41d6-b202-356816e7b4df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cb97623-acbe-4ca7-82fa-397edaef029c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d585d762-cb45-4abf-9891-73edba3eda3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e6b75937-205b-45d1-aea6-d74f9bfb01f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "316fdba3-a0c6-4a53-abcc-cd3731dd76e9",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccfd0c96-5b40-49df-b96d-927e2bf7b5da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "bfaaba43-ba5a-442e-82cc-687fe1857c4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39ea2b2e-a093-4ec6-b4b1-6b3960a12c2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef1b06ae-a3d3-4986-b396-3dc243175605"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "95b314ed-b15e-4c9f-bbcb-38b2fde32f8f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "42462157-796a-441a-a23c-8ff538fa4669",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97e96166-0d33-41f4-be82-09246ea02bec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "794df1ff-4860-44c4-a613-22b75d329148"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a271b89-69d8-4879-bd90-2b4b2a80fa04",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7ce62d33-66b3-421a-8108-1776f2c55e13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cd2ff72-2a42-4e62-8247-0f4c4d1b977f",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c45a47de-7fdd-46c3-9049-f2c8aab9b8ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "815d452d-d263-4254-a5a1-a70ee4084f18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19123925-99dc-4701-a01f-04fa738e260e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "833998b8-78cf-4a25-9397-d67f627db3dc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "38be9743-20e7-427b-b9b2-0783eebe203c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "53e833cd-4fea-41f4-9c77-4e9addab3869"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "49a5403b-7c23-4df4-a75c-0998db161f1e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "92daac7e-6d77-4ac2-9932-b2c2fbc66604"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fd646bc9-d973-4cd0-bcf1-737182dfe450",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9b078e66-a1ec-4ed5-a017-5f030aae236a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "47c4f59e-ed5f-41fd-b0c3-658d83b07d57",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ff9b6b05-2ea3-4b42-9105-119c11278be7"
                }
              }
            ]
          },
          {
            "id": "3e627a6e-57ff-4993-8252-25b7e936fb6b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "81031bb6-39f8-451c-a2c8-bd9666385124",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8dce68c4-7f26-45f3-8745-832cff06a13d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "df13f08b-b390-4890-a098-05a7cd33c3c4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "11e7384e-e65e-49d2-b5a7-5fc5bb4bacb5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b2a50b72-4f60-4886-a4ee-96f4c8302181"
                    }
                  }
                ]
              },
              {
                "id": "df0a7d91-5fb5-4113-a0d8-9528d93275a9",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4fa34a60-03b1-4525-ad86-932060cc49a8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "19a12d27-e525-4052-92ad-07a87a2bc284"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "de588d42-2216-4812-89ea-71fe8d073514",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0084d168-1872-48bf-9f2a-708e7c76421f"
                    }
                  }
                ]
              },
              {
                "id": "6ffe2fdd-c06a-48ce-9333-49c7ad58f026",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "af92cc47-bc37-46d3-b209-c6854cf228e8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "87476179-5ef9-4374-a3e8-dc2f5c132816"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "435beb1b-54ed-4573-ae63-8a0045610d91",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "73242a49-0e1e-4749-8e20-04e17826835f"
                    }
                  }
                ]
              },
              {
                "id": "d2d4ac21-e378-49f2-8136-f7ea821c6875",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c9d3973f-9d57-492c-98b9-9ce6b72cd552",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "db06a8aa-ed49-4d79-8d74-42fe4cf727ac"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c8f14fac-0f6c-4af8-b5bc-31ddcf9a4f72",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "f322c011-9a4f-404c-9f74-a674a5c059d7"
                    }
                  }
                ]
              },
              {
                "id": "bc922566-eaac-43d3-a04f-98945a8d77c2",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fef1a0f5-86cb-4c08-b75d-44d5888c17ad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "503eb920-6df0-4551-a713-003983719a56"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "55ab8d16-546f-49ad-9d14-5640df50554a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "d7073668-8c27-47ef-a5e4-5fc988531aeb"
                    }
                  }
                ]
              },
              {
                "id": "5dd4d485-799b-4f57-b047-453218d940ac",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "71c163ab-0b82-491a-99d4-a9c68bdecc42",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "70d71cd3-cc44-455b-ae96-fbeff9bd2e21"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1d54aca4-f799-44cf-ba61-930bbdeb1a2f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0412bc70-eccb-400b-bd92-02e49c67f276"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "22ebc54f-8f02-4822-8fd7-01cd09c8a5c8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "08e01fd0-100d-4c4f-818e-5834bbf9d1d4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e6bd4778-61b5-490a-88b8-9aea636fbd51",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ad2c24cb-e49b-4d68-a371-74e2fe225c9a"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b171b076-c372-4fd1-b012-f36c87493e09",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "36a6a9ce-4e1f-4917-8a5b-16ed0d637794"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b02bb296-6680-410e-ada8-053569cb0597",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d73a157e-d99a-4e25-8117-f6ac6d650832"
            }
          }
        ]
      },
      {
        "id": "4bc317f2-749f-4c8a-8933-5687d3b657a3",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "252dd830-ab47-47b7-ba6f-0a50c4c52701",
            "name": "Negative Testing",
            "item": [
              {
                "id": "92a25c98-33db-47ca-bbec-bb4dd8746e15",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "87c08de0-d002-41db-ba61-d709bd2e8d51",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac9bc6b8-ce51-42c3-af8b-6a80a377f24e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb516a25-85a8-4b50-9f36-75faafd5d281"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53df1442-8e39-42c1-9d13-5071159d6f6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "511dc6df-da84-4aca-af48-25a554aa24cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aea1750-8903-4e53-a9f9-f8db6676c185",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36154b31-9b2c-46ef-86d8-90aaf5f1ae8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6870cea3-c34a-4590-8b11-07a7f50f9c3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b722b6e-37cd-4bf0-b386-7db5d02d3286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ba0b131-1479-4e9f-b4c1-4b495fe6497b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cca4d805-ccaa-4a96-9285-0721a5f986e0",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d55bb2b6-ffae-4280-873d-a865474a1885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7ae6156-4dd0-440c-9aac-f39dee23be3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc2dd40d-de16-44ee-a61e-53e9ef85f1d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "61192394-4fcf-4bc6-b86a-55e700c248e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7d2714f-b71d-4ecc-beb5-658a21539ea8",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9cfc21d-d6df-47b5-b4b2-ab202ada1132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4092a29-6ec2-4b23-a3c6-58f9c08d1f23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2ce998b-b167-4631-85b5-73297aca677b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cfd8d2e9-d55d-4610-acbd-ec2519efe961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "434f87ca-84bc-4178-b845-f1e16635cac5",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14d3301b-1f07-4704-988d-64ff7cb612f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "517cbc23-fd95-4e7d-a2d9-938b4e4b2a21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1b97bd6-29be-4cc8-a6f0-023fd7afaf26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "48282b06-6f99-4a39-b084-b09f97f34114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d2e8fb0-280c-40c8-90a6-c90adb0acbe2",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b669f186-699f-4a71-832f-6e892b5c5d18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7780142d-2c43-44d5-b6d5-3f98016524d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9f59dff-1c55-4eb1-9dba-3eff07306277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2b5f56d6-8ae6-41fd-8510-ed32fdc478a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e612f904-9c42-43d3-9218-2e0fb3c20137",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbfb016b-e7cb-460b-8482-481e458d41bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c9a7c5d-b0b4-465d-87a6-2dbd79f69a9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2067986d-3d4b-4fe5-a1e1-08fe213cf843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "6103effd-add6-4c1c-9f59-9371b0e38e71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e7dbb3b-9a9a-451b-9aa6-39c61473cdab",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ee8c9d1-6c57-402c-a494-9aecdeb51179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df0a8417-751b-4b4d-95a8-fbc41d41f684"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9b2e500-4d13-4b98-a532-d5baa7bca958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c34433ec-5609-457a-8fce-78d07d2e2929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87edbccb-5517-40dd-b4de-0d6805abd83a",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d3f75a4-595d-4039-8200-8649c71cc972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fe6911b-c87e-4499-89f8-11cde7877261"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2514dce-42ad-412e-8a9d-000be9a20dfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2233192a-7b5f-460e-b580-090649e7a9ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cacc760-7874-409b-a1b7-43134e6b71fa",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e7a4b7b-8883-4048-ad3c-6da0c2598887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8349ef22-1b68-4fd4-a0e7-0907c8723927"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbca5123-5cbb-485a-a85f-3bd5908f7c8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3034b3f3-56e6-4d63-b77a-4d9083b72a94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d49df159-347b-4368-b49f-a21a4bd62d08",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dac977ad-237c-4dec-9691-53b838559227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bfe013c-915d-41d6-9979-ed122941db6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daad365a-53a9-4669-b799-7e0c6ec34072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "0b1e4de4-3044-4897-b44b-5f22b4a9cc94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e09d8a6-45e5-4edd-a45b-13db49947e28",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb798149-3cf8-4590-bc86-dcb94de8a4da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "640112a9-c2db-46a7-b201-867286eb1606"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae07bde3-a52d-4b14-80ed-77aef0419fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cdb62518-57f1-4b15-92ca-10ece51902bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28b34ef7-c23f-48c0-89f2-95b8723439cc",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0490c055-b313-499b-b589-1ef98ba30d8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7424a827-ca2f-4b77-a285-00ac6701f242"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17dc3a58-4d7a-4826-a08e-cdcf529acc74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "97686d7d-b8da-4f6f-a676-9960a7608e3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a70011e-0776-42f4-8200-aa96ec97bb24",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "702f856f-cf2e-4eb3-81d6-23e103196e86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5208a3eb-eab2-4a95-98ee-bbb1c369a5ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "687f730e-341c-4ada-92aa-afb9e7e378c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "90b9a0c9-2c52-4cd5-b854-0c4cf10e4614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcc7b06a-4b65-4f3e-be0e-0510a0e26475",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7bbc51f-47a1-47c5-8ad7-8abfb04137ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34e829ab-f822-4352-9e62-00aa1b3abd2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a644d8b5-bb1a-4e02-aee2-6bf40f3525e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba7a7cd8-573a-4f21-a8b2-0cc7e5056bb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ee20231-5c2d-4a66-9be4-ea1f0a1fbc6e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9994fa58-5962-438b-aeef-84e24904c307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "774cbc2a-d030-4b17-9f45-c0263f0a0d23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e0f9ab5-a119-4493-af29-49b57bcb5dcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e5f0869-f661-431f-b185-a0147c7c2566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e55b49d-c9f0-47a5-87aa-9eb473b559a1",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e58e5f86-ebb6-4df8-9d77-092789355619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84e97aaf-ef82-4588-87b6-3d8ad078da9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d5b06cf-4ca1-447f-af1f-047a8cca80c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "66f8bc8d-3ac4-4489-a073-f892b32852aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c023bb8-d5f4-442d-8a9a-4b918555370f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3245c117-f9ac-4237-8b21-4b8ac6b37b1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43ea52c6-5490-47de-99f5-5f9715e05448"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d3dc94c-6ce8-4734-bb3a-ce4f8ab465bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c20ba55-e01b-4356-b6a2-0b0cf215c17e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12b5cdcd-3bc4-4db4-8bbc-af5a5e731ac6",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "730a440e-3270-44f3-962e-a992b87c2180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "413d4016-2a69-4286-afc7-9c219445f227"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a68252b-bb27-4de8-9a63-a5c3c440dde5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "03dfaf2c-4fb2-4481-b92c-8b5282e80ac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "702d7683-bc4b-4c68-b54f-068ff32ca421",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a303f666-2cfe-4e9c-b812-d7e8b596bdc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb9177f2-73a2-4fd4-9998-3ff6509f08e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19b075d7-b636-40c8-b45c-afb9403363e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e972da0-b638-41c5-b36c-accf4603ee8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ff83539-b1b5-4ce8-9f34-2ab6340e041d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d1a59cf-f5ad-4d3c-8515-124c26c6e7b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5eb27d51-c6d5-4446-9d6a-205ad1bee563"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "228c1e6b-9277-4fd8-87e2-6fedfe299feb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "095e279c-c13c-4807-8b93-20a592cc2c5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "409b03b8-6bc0-46f5-b392-8893232f0a6f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b5e1944-90a0-4e6c-bf67-fd6f8749ea4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a2db19a-c45c-4287-854d-8ac18abffbff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05fcd9da-0992-4c9d-ad71-7d569e8e2e03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0def26e-8574-4ae4-ab6b-2566b379b3fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ffef5db-fff9-427e-a3f9-373ca8ea5f0d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0499a990-5fb5-4674-8e99-18854d65272a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55af8c2f-7353-424c-8e3c-12ecd6ef426a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "416ce62c-f930-4f20-a49b-e07a6a79a120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a48addcd-48ad-406a-a3b4-9bee9877416a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c9627aa-fb15-4f15-b3f9-46d5a4a01fac",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "015027eb-6f79-4b46-bc46-e12c4cd06863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fc5dd5e-0174-4192-be35-278e27c0f171"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d9b375a-f3eb-4aa1-9740-3dc3d3466eb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07bac772-e2aa-4c93-8cdf-1edc00ad3dfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23ef6bcf-ea2f-4c5c-ab26-ad6f1b605cb5",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "148a60ba-7529-45b1-bfc8-4fd287aee37c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c13550b-6043-47ed-a88e-fde5c2eddcd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce83e474-ff5c-4a0a-b627-a00d24cbb1e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e85c2cca-dd56-4516-bce2-0d9ad55c5375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "039ec66c-b8c7-4859-80ae-c6c1e62a3364",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a51a0a0a-92c8-4fb7-ae54-f80a18fdb634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd8140f2-59f2-400c-a863-24805237b198"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b12e610b-7e5c-4a2b-9f46-07dfddcdc2e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1185a00c-a8bd-4246-9620-8ee091f6d20c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a02bc31-0c98-44d8-9606-106f6cf362fd",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4506749c-e390-463e-a91d-6791f3e14d6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99d54f55-edea-45cc-9153-22bc425f98ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdeece9c-b213-4949-bf6f-210b439f5a5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "150ffa07-1b39-4c97-a0d3-57a895743cec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "964266a3-7cbe-4467-93c0-a262979732da",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da4cdfdf-60a9-4eac-9424-8baf7a48313a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5ce4762-f0f7-4640-aac7-681c6b6eef4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2c441bb-3eea-4237-9e5d-83561a7665b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9abac44-2165-458c-8aab-444c08b827e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b89c0e6b-d832-4f9a-b41a-6f3e681e30a2",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3000acef-7dea-40ca-801e-a9e20b50227d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6f561f1-49d5-4a73-9ada-54d0ba10b98e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a2b1da0-006c-452d-bad2-d30e8e8bceb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d90c1ff0-53c4-4a81-9107-94882a476488"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9237ce90-62c1-4972-98ee-cc6a89e9af80",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aad2aa65-8fbf-4ec5-b119-c595a454fb93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8f0b02d-d7fa-4b0c-ae36-38923610e5bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13903a71-6352-415f-9f6b-047113bb9859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b013f517-a0ac-40ba-bf3f-02615d194d9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f04b6ba2-4d60-4598-a6cf-f2f1de54e49c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2c11c7d-c6e6-4976-9ee7-b1f266867aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4e1a109-d00f-4b1a-90e3-61cd016b8f46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ad653b7-df0f-4d77-8eaf-081bb709fb2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "08422d5a-e7f5-4d6f-8d50-e30336731bc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "290e84a2-c286-40a6-b307-953ea8e31202",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e932bee-466f-4212-9f00-18f814ba72b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98c7a8ed-4bb4-4d5c-a198-70e8532d0870"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8177df0-ea70-4e3d-9e22-70aa29ff9c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c3d1cee-b741-4d92-945d-87172e7e41eb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f0630ece-605b-44ac-8282-08bc87f77331",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cbbe0f54-6aa6-4998-ac6b-9a09f26e2c02",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec076ebf-cdb4-435c-bf6f-7dd912bcd7e7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b127b518-c024-452c-a4ee-aba07195b95e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6517a434-826f-4115-90b3-4303395c7dbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "697b9dd9-580a-4ac2-bc4a-49adecb35739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ff5874f-b5c8-4487-aa04-77098afe57c3",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c0113ff-f2ec-41f9-af40-2aad3a671044",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "6c8df100-0a18-429f-8748-d53ecde8bfca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49e2ea22-ff5f-47c4-a6a5-5c0164bb071a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "202f6eef-a45d-44ca-9520-a11ddd36bc05"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b211dee2-e580-4488-884f-b7cfb84c4472",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aae41077-6052-430b-8045-c29fbe15bd4a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "df74b7c1-eb7e-4ebc-8167-cfc739cd9970",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "38577e16-1709-4c21-b997-a309b958d651"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "399328b9-c065-44da-8af7-c8927a75b1a4",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "fc871dc0-d05a-4ba5-b1e4-94f6fbf9f39c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "702c5787-0330-493b-b11d-bd35094b1f86",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c218295f-e7e8-46b6-95df-7f39ba4f5d4e"
            }
          }
        ]
      },
      {
        "id": "1dfd2ce7-6e3a-40bc-bb98-b33b321a09d1",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "7c079388-b799-41da-ad66-ea17b991b7ef",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8c65178c-8154-48ee-8667-eb948ea6e336",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c10a1d0f-ca65-4f80-91c2-f545e52e5b42",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3b8e3c5-99e5-4544-a216-9acf76311373",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ab5d169-2af6-414c-b2ee-85d0e23353d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "475badd0-4149-4144-940e-b50a0e6862da",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "854378e6-efb2-4919-b218-c5920dd67c8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb61ef47-8cf4-455e-8b5b-10e00c383674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c44d5afe-201b-49ee-920b-70bedecdaec2",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e043476b-c46b-404d-965f-bdce10bb3a02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb37f45d-8701-48d2-901f-11766cda1d7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fec1b1dc-e831-4134-9610-08197838d3c3",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9b0ef0f-1ad4-4a8a-96e9-7874882aec62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4a14a5f-63a9-4597-8245-1a510ffe35f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cf313c1-9ca8-473c-a530-1031edae94e4",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f54709aa-aa85-484c-a82b-be208d7328ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0a26c29-0c6e-4fc3-94b8-2d8ddee03553"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5afd6d8-95ba-4e7d-a949-7cebbc14037a",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8acb2b0d-d69f-4fee-9219-a4191f40b4ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c07b42f5-031a-4fbf-9c07-b8a143d079ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a76928b5-ad86-464b-8073-78756663ad70",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d75ec062-a70d-44b0-821e-bb4174ce0348",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd1f0ceb-f1dc-4ab3-b8ae-b1b6a238eb1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3648d494-1a99-4e80-9b4a-b9703907b084",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e301af2-6ee0-4033-b4b1-0d6922d2ea10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6500f5d-086f-4514-81b8-d3ac3c7a2fc9",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1365043-88b2-42da-beee-dd81fa3bc982",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca952011-f7e3-429b-a2c1-2aa4a779fcc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "240e4171-7ea0-4e4e-b614-1b00af23cf0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9806c7f-4049-478d-bcb1-8a814cc8e2cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c47c823-d776-4ae6-b8ae-f847ded404b0",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfb71489-e1de-42bb-a515-cc056354b39a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "439c1dcc-f047-467f-8529-c68cb90e5367"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4c108e4-b17f-4cbe-b415-0057bb00744e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "686a7080-cdaf-46e0-ab3a-d176c9d86bb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "303326df-32cb-4c4e-b2a0-2660a13b6c3a",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "943646d8-44ab-4a40-a081-09bf0d50356b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b42f3cc6-b0fe-4efc-a699-60ac1db5b037"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee184eb-5029-4229-981d-876465302115",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1cc5dea-e150-4403-b129-7e587e9a412e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9acc8ca-e4d8-4177-950b-728f83c1940b",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0318f699-7ac3-4a3d-a81e-0d633800c625",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "280ef7e7-e387-4b3b-8338-3cd97f98eca3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "faa94889-94b4-4faf-86db-b8558310b381",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c437ed1e-341b-4731-b22d-7d6bce8a6f58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce682e62-dcca-4a91-bedb-cb4fb45c12ca",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9f611fe-3d7b-4966-9742-284bb994a55d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0efc851b-1ddf-4baa-984e-c7e152425dcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23409521-1a4b-4f0a-ba5d-cd269cab2a5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ebf3e5b-9ad2-4c52-8285-8d270ebb6a54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dcbb034-8236-4426-ab8c-caf0775dc6d0",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e6b49ed-93a0-4e85-bf28-7cbd0daa389f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7eb4055b-61fd-4376-9d27-9ec6af634907"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca0d570e-0a16-4f94-8b66-2e9f82bbae52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e82c4ad7-5657-421d-bf60-b3a384b4cfc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e9b0bbf-2494-4e88-81af-75cabf8a282f",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9a4ba1a-39f4-4b99-9ec5-758dcd9036bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21e85f06-48cc-40cd-b570-f471cc719d76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dacd434-36d0-4cb1-8390-f057e35c8eb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a390a66-bbc7-4110-9f67-d257c6b5b1b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "092f39b2-7973-4798-ac92-36850da26c5e",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82d12651-9fc2-4489-9994-06ef7fcef1ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ae945e7-b226-4bed-bf0f-101b6bade666"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d307a59-be18-4bda-808a-c0b2d502ddc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3d07b5c-556a-4ebb-b54a-b6388b6ef491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf7e8cf9-ec5c-487e-a7b0-97ccc1738685",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1adbef30-ca93-4420-9b8b-25db424f8e67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1adccfb-63e1-4701-bdbc-58b7172c1e4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bff5e258-f194-4ef6-8f5a-85ddd831ca47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1866ab95-ab58-436a-b5cb-e3ef90f70fc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4a4e130-8176-437e-80c0-954eded40426",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5f3ebcb-1a2b-4d1f-aa65-2a5690e63e1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edb06da5-2a6d-48c9-ac1d-6cdbe3942c5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9e8c713-932a-4688-a9fc-bc9eeff04283",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9087034-7f2a-4235-9b5d-a5e9f2c8ef03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "671df923-7ef8-41a6-aed7-3c20641e9888",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f0cd491-a07b-4f9e-9e76-a268f0ef94fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7789bddb-4691-4f96-b95b-5a473d3e5ce5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea67b7cb-a357-4597-aa02-5940b5fb6d50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a50236f-83ae-4d93-92ef-ec1ac9fd75bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "272d83a0-9f3d-418e-8445-64bd03c3c315",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d56b9fa8-5fc1-4e2d-81fa-752c92ef200e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "108cc08b-e2ab-47f9-b70f-696151bcd542"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da447858-1228-467b-9e48-ebd9fd43b924",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd7d1919-a715-491c-9b43-d3cd1eff6407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a4bf171-dfcc-4b48-a2b2-d2ff40856580",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc886eed-a531-4917-a64f-e267087bd24f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b0d97d8-5bf2-46fb-8c9c-5d92ac9f27cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c94c074b-030a-4d65-917c-48a070eb2b6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bba8035-7def-4c4e-b45c-c180903e570b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "075472f5-c8e8-4398-9173-da59a6f0fb42",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "780b0a4e-99fd-45b1-8fa4-44f6f154c09a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58eeb261-6bb1-4070-ba02-c418d0e5b741"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29a90872-e9ee-4f80-9dff-39532f9ad445",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8278720-1f2f-41f1-a76e-165e2bfd940a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5067bb3-9516-4c1b-92b2-adca3f858092",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59ef05e7-2510-43ec-811b-2476a5e29c68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c810e08-6cd1-4c96-873d-a1e076c2428b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef870b43-17d8-4b15-97e0-137a0ce55191",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bd2c7b1-4789-46ab-ba40-8e7c1e98de38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28940f6b-1a6b-43ef-8ff0-a8b1d558061d",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eb3189f-e196-494d-9636-4be446124625",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f4f74fa-ea62-4603-a83b-b47206016179"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55bc24b1-9973-47d2-8b0b-1b6013cecadc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "689814a7-975f-4e79-86ab-bf5214767620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d073e2ec-0935-42a5-8c55-8bce55871cd1",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e53a3bf0-edf7-4f09-b653-455d6156e0dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1b4871b-2769-4ade-b314-8af9874cbdff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69cc237f-9989-4d2a-97ff-ac819e4da427",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "852eb503-d2fd-4296-8fb7-66cf5538e367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e7eeb92-19b7-416b-aa7f-c078928c96bb",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10df1bb9-d414-44f5-a471-a64b89744ba2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d7b7986-d157-4b9c-bec7-a1c113cea7f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15e04701-e250-4b55-ae9b-cd66bc854f6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6811ca57-927f-48d1-825a-7131b8cf4f48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57e221bb-f99f-435b-a898-4335d7f9ae4e",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac2810a3-2a87-41ee-ab4d-c77ec2297fa2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ac56b51-84cb-420d-927c-c7d3abdc040f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5251b063-95e3-4b95-90dc-71573a4b9b48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b28d467-f650-41a3-a98c-4aad03df252d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0650eab7-8fcc-4142-acf1-f3853ce1a6de",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e502150-ae08-4daa-abb5-1db9fc6f3557",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38c2846c-1409-4444-aa18-588d5de26527"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b7f672a-6303-4dd4-aac2-4c0237b1acfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d872608-4d5e-438b-a6ae-c73d46c47202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "574507a1-feff-4bf5-b951-b2fd493fdf45",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8a31e73-5244-4501-8232-2082dd7d5032",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f73078f-431f-4320-9e9c-a4d91d89a271"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99760865-00fd-4d36-8c0a-772d6c527481",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb621c01-67d5-4ef3-ae4b-7936faddaddb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ea42875-ec23-41d1-ad10-29e751793b70",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "872ab96a-5176-4b85-8e1c-9e4f1515cf08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5f02087-892e-4c85-9079-4b5e38aaf498"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6639a6a8-0c2a-4c1f-b71a-86a06ec744d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10a0ef3a-c92a-4efe-9bf4-49e87d50055c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50897dfd-5535-4199-a9dd-83784c8fb46a",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f322a397-1300-400d-a25b-e0a97c4a9ebf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44291f3b-e4dc-4a63-b21e-ade4cdbfd09d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fa015c8-5aa9-40a1-8099-5d84b601957e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc39ed33-539f-440b-a512-3ee9287eaca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df6310f4-4563-437e-a871-4dd7cd555280",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f03fc1bc-ebd2-4cd3-a70d-edc823261a06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e636c89-5af0-4494-9939-585473e0a1c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cac94d82-b441-42b6-b375-30f528b2bcdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54794df2-b92b-48ba-a8c7-121b791f6c51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6212fef7-c34f-4bc8-ad04-2ef87ff11119",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59309001-18ae-47d2-8202-07dd9aecc60f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01abb642-9841-43a7-92ac-57b842963981"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8537647-af0d-4e20-a3bc-d76205aa518a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6df3dc04-41d9-4624-97da-24bfede83f58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5076c713-c7ee-4d97-b7a0-1e120b1d9268",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f95e095-4367-4577-beb6-061cbb874255",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b28ccca7-7ca5-408c-8bdd-5cc82844dd6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94751231-ed25-40c8-bfcd-a1f597ee1949",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e02c6160-187c-4355-8031-0fe1ba4565e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52477049-8565-465b-a550-ed68816562f9",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5ff1ed9-5825-4f0c-835a-cac616450780",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20952ca3-8ef2-495b-9a79-6918c913213b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a86c957d-4af8-4aa7-af55-f68bb561d768",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38c3cb7b-9f7c-4fa9-8344-220f13583c77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b793a13-d98d-47d8-8109-7f10a67c140d",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12eb1485-a309-4a67-b723-d8df03a61256",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d35eb19b-304c-43b0-b307-fc95ff879d45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fdbd92b-99ad-4edf-91b4-1eaf56e98e19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91d870db-5c17-4daf-a1ef-e22f6c703a10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c4caf58-6ff2-4be9-b592-8ce44d36f593",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03f39ef3-2651-4baa-acd1-326c969aeb2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5634a43f-09c7-4e9b-afa0-cae684a0223d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "852396ce-8552-4916-b775-bd59c8a93740",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fa20d2a-f8e2-412b-a455-859d4832ad10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4e4ffd8-1317-4e03-9cc9-6d5e3463f9e4",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8917171d-5539-4f30-8b92-627f1e8cb6ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88353f92-c0e9-4d26-9b11-625dd5ccbc04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb56931-1729-45ed-9dd6-f59a2841df9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55d9a7ed-cacc-4435-b68f-65174977712d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2570090-e76a-497d-934c-91fa5d9c8ac6",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a4ca5f0-6581-46a5-9e85-b4c029577b48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7658d7b3-37a9-4c59-ad7c-f782c0c28355"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a78369fb-5e64-4d1f-909c-2c1e3b4473a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94b1b42f-3c11-4b3e-8443-fe043c040ed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c191b4f9-b642-45c6-859c-675fa39f7c97",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1ffcd50-2823-4ba7-bc82-0425e00d98b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0297b16d-8230-44d7-9538-bc2ef9e9dca2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df0d548f-80c7-4e8a-92dd-067d6844ad05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c273abcd-07de-4689-8ba9-f116f865254d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "880abc77-83ee-4b63-ae27-2052279e998d",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ae27a63-d4eb-4e81-b763-9d1634ec23ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11c92cd2-5072-4837-988a-e73731739167"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8925080-9457-425c-9f3c-ddc5ecb34156",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e6c15dd-f27c-44d4-be5f-36fb763f55de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55c4edb2-1ea2-46b3-9db5-dd3ee4f71a30",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e843152-84d2-469e-b20d-d7d279806b08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "328cc2b9-f53e-47d7-b78b-39b982482bd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c9db7fc-5a06-4e12-b65c-c4aee910cafe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50c8e6e6-9293-4cee-9d9a-2d432014e823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "678899e8-01b0-40f1-a890-c0f2123d03e7",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9d3140e-dab1-4a29-8e88-5e2a642b62dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14240815-b346-4c29-925b-cd88a6389525"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4e02793-23b3-43b4-b380-fdae22dc3cac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a6c9934-5dc8-4892-9d82-6a02a1b9286f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35aa93ee-5bbd-4123-a1d9-a3bfee6a9b54",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91af99e5-75ce-4536-b529-bebbaf82c0ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78ffa7ff-8929-4f01-be86-4f7074df9670"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "834f4127-eff8-40e5-a8ab-51ebe2e05373",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1dae581-0255-4f98-9654-4b64891c6fbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6fc1799-75b9-4ba3-a9f0-f11338307418",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c99d6419-56b5-40c2-9ab8-731d461972b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0e12ca3-034d-433e-8ead-942b120fc83b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38395105-8d95-4db6-b84f-5eab5533c122",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f5b7338-1e47-4d2c-a193-b252464fcd56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89f9fb95-8b23-461b-ae78-5a205c82c95b",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fde35f9-3421-48c0-b06a-c0316e06c761",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87b2754b-93a1-4d58-9bfc-b55b612fd4cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e1406be-5ba3-420f-a860-16ac35345e91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56faccff-7910-41be-b373-2d4972cb0cfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe307a3c-81bb-4104-8239-74705e969154",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea8f117e-2d33-4af7-ba75-71e32933b4ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28db7a7d-0229-4fa9-917e-e06218696ffe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b37ebf23-1bf9-45da-8f66-25652fa09c50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f525849-6a00-4a72-97ed-d2c99722ff3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de8145d8-a1bb-4095-b07f-5b56673dcae1",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e8d322e-a882-46ca-954f-07e17135977c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb7916bf-29f8-45e8-828a-332bfbaa7860"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "418fe1d5-513f-4de7-8b75-17de324d5248",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b148023-fc24-4beb-9c0b-cc8c7936ae49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b4822ba-0dd8-4a6b-80cc-bd1899510082",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "077b5571-0181-49d7-a867-67268086d8bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fefec10e-228a-4453-9521-67de641a14a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d4112ea-3b94-4eb8-bf86-d40673835536",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a38ce59-673c-4725-9ef7-5a043508b47c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d85ef5a4-d86a-4b77-b575-1123258f2788",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cddf353a-31e1-4ef8-9984-da4d204426c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0260aef1-95f4-4877-9bbf-7d197fca5fd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3221a7c4-6d0f-49c3-bed2-bd4d8996dff8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "716fc6ca-60d6-4706-863c-0e0f4569047d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90235881-908e-4364-9850-367fe4c39987",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a242cc6d-26af-464a-a3d0-df65b643f20d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "481ca47a-c380-4d20-90dc-3188263640f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c06bfca0-2117-4b9c-b983-98000649f625",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e53b757a-861c-4c88-91ec-7e59bcdb127b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd91aafd-d3e1-45ed-bfc7-fdb6c8e0946b",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61381968-d73e-488d-84e8-dd1d2fbd8c6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb3e622c-36b7-4cdb-adbf-c2df09b7ba2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2933b29b-c876-47f7-b485-67b5bc25e271",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85234681-2d29-4fdc-bafb-363c7922fec2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "627da2d5-e688-45d5-9254-e4bbd3cba25d",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc8cf10d-f0f6-49a6-bcbe-77169ef9faae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82e38e90-43a1-43b5-9dce-6dc76e47c1db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f97a94a-33a5-4ecb-a513-60551c553700",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6e91838-a986-4d17-91b5-cf407b1de440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a61840bc-4cd3-4543-ba91-dbaceb000e86",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2029fc88-b7a7-4251-9ae8-34a8287b1ff3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0e7e049-f4bf-46d8-b2bd-92b267fcd7f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d78ced6-ac4b-4060-a05c-305badaaa2ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f625115-e8aa-4e37-b248-9d4c27f94837"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dcadf9d-5ab8-483b-b699-73154f88f63f",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "727184bb-043a-477f-9d95-b214bf51eb13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22ad1fe7-e24e-4e9c-9a96-0d163af8b503"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1281442d-2034-4594-a5b3-2db06970f15e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9ebd726-9184-4f24-b2de-b05579933863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf177be2-132d-4c45-b797-e483839d7bd9",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0d0c17a-dd84-4868-85f5-d49433bacb36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25a7fa74-b554-419f-9947-48828bf6729c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83f2b870-2120-4427-9ec1-9e15bdc4fb17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28cdae7c-46c0-410e-b530-41d169b5d3de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebf3cb39-b3c5-4d6e-b639-57f8c93e2995",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12bcbda9-f087-4744-8169-f03bcb0c52ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3b9e8d6-a1d6-4d03-9a50-b1e0c2779c9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbb201e3-794e-4e31-b1b5-94768b6fc892",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6692c7c6-f4f1-4c9e-aa46-edfb4741bc66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "181e976f-4917-4589-a0dc-b8f7ec6dbd72",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f0fb851-b6e6-4e99-bb4e-8fa929744a70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fda88d76-e997-4a9e-8e2f-c2ffefadaadd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9b83af3-8b08-4779-88e7-c6a843e60930",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "672da66e-e6f0-4821-8f63-2e7c0976d6c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d60a5fc-83ee-4467-8cf8-45d2d5653634",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e3a6424-e53d-44d3-bafe-e739d3f9785a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c65fe0cb-65a7-452c-9d16-210d54265517"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a452b63f-9f79-4ad9-9346-04447660f6e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b5eac8b-eae0-443f-845e-627a73a6a891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36459e1f-69aa-4f4c-8acb-795ca738e904",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1c08ed4-128b-43ed-8f0e-7147db7c1cd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "356d9ad3-d178-4642-bb66-77464f89878a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "543d7e34-c8d7-4614-897f-d67c2720ece5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d4ce483-549c-4e32-9c43-42788a559ac1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f08a521b-002f-4ed0-a934-985ab950d8ac",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8c874c4-c911-4417-b7eb-1018ba09652a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6b09709-b5ee-4e9b-8ae2-d58446159654"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6282b53a-9e76-489a-8383-d14550c533b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9ca929e-083c-46b3-a2da-7b2a5882be9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dd034d0-c27a-493c-bb75-098efea39217",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53c8b2cb-23da-4d43-bac1-a76f16f5fa3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "529ced01-7195-4d95-b186-95769ede9823"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0da0e6c4-eb78-4a83-a3e5-12c7b5e5fe5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c7a587c-b7d2-4361-810c-9907c220ac98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89344d64-aa2c-4798-ab2b-9dcc84c828b3",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88b17535-207c-4776-b3e8-5ce8e7e6949b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "823375c5-d126-4c76-8dd2-e410fb2748c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd178637-ecb9-491d-886b-8236020f220d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95d7ab06-1754-408e-9091-7dec72574171"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c983afa6-58b5-487f-90b3-bbf73931d5b0",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a73af0a4-1a0f-4f65-9f32-0b86742073f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbb93090-a57d-427e-9a57-3f7e130a7ddf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed6cd332-8451-4214-8b92-b0e555f00ad4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9730987c-4782-4954-8700-61b8fc1d0cf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c758eebc-3b58-4117-943c-10ec01c0b1e3",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55a807c5-a8f2-4630-a35d-a17f543ef78e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a11b381-c845-4468-97f5-47e2ac67c052"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bde903c7-2f0b-4451-839f-91051b558536",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4987d039-37bf-4bec-8cbc-930505ebb48b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c6e16f9-d6a6-42b8-9dd4-5bdf2098886a",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e06e1b2-00ce-4e1f-81ed-528d2f04c343",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfa9a6d5-61c3-49d7-aac0-efab11b46210"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78de77a1-01ec-4f97-901f-d9c57e36bcfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b015e80-bbbc-40a9-8749-ff7b037756f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3a6bde4-5c5f-472c-a5da-d45af1d77829",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3efa7abc-4dc3-4dae-a966-13f50a937ef2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fd6ae8f-e935-48f8-a96d-08fb39d6b277"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f92fee82-51aa-41d5-9830-5200156ac9c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c55b6013-9def-4a8e-b0e4-d2e384e3aebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e11f8606-2c11-4877-a043-f9b843485f48",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d211c4d1-1f8d-40a2-a46a-b3ee96abf33f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1051dc9f-f849-49b9-a365-e20c9d47f731"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4fd5d01-2f77-4e7d-885d-cce8fda77b81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fb0d61e-31a2-4382-b6cd-756f81bbe1d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e27b46d0-efed-4c34-bdf8-d0ca82955b16",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f7caa2e-38f9-47f6-8e3f-47cd803edc20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1a16a1b-3083-4f95-ad7e-5cb98bb7fe93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10913ec8-79ae-4447-a107-0bd43944c983",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e807ce13-590d-48c2-8846-29b80881373e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c12ac71-c949-49ca-94a8-332188238581",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49a11b14-122a-4e1b-b080-7206170412b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b33e7d33-a4b3-44bb-8995-ab9363874d21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e338a04-e646-4fb1-9ca3-ae8f47a185da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97ad0f79-e9b1-4190-996d-de22317f46bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2d1ede9-5b1d-4d08-9a4f-2f65cbf23b6f",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "555362fb-e38a-4f37-88d7-38de1263c2c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05cfe342-437e-499e-9356-956210035eca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18976cab-b00a-4e49-8b0c-f211909c8002",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a73821c6-ff07-4831-b9cc-7890db2a67df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f97abe89-0572-4dd2-a0e1-cc1d649639f9",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da580742-a7ec-4d02-8a49-afba0bc3f393",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6688d5d0-a0af-489b-b966-6499c2c7bf91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d888455-594f-4bbe-bdd4-ae1f575272ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34f0aa74-4cdd-4777-9444-d16298bfac36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "501c82f3-ed06-43c1-96e6-a1fc96398164",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0abdae21-413b-40ce-b27f-f563255b1f35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "795b8ecb-3743-4898-9f15-f8849369cf76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c6686a2-150d-4899-9823-97c38a1f3866",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "332162d4-241f-46d8-8705-9ca6e33465e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06db50e8-234b-4b8a-b52e-621e4d77693b",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3df27a3-2983-4c9a-9f42-d411737067c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "064ef0be-3ad1-4182-8b1e-c464be95251e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "006f2b40-4f3b-415d-b277-aec54888bd32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3cf9c59-02e8-4090-ae51-77b55ea2433b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3a1df30-ce06-47a8-ad21-2742de1cb06f",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62ee2022-8072-4422-9398-b0eea10dfbdc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "958e07a3-2ddd-467b-8011-5548161e5f1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0286ca3-ba7e-490a-8072-6429708bfb8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f55b7bdf-f710-49f1-a50e-ed6fe0c9d795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f1e8389-28dd-45bd-821b-b8d4559224eb",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5462650b-74c9-42d3-bd02-43045bdf402e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7129192e-f0e7-4e9c-a56a-001b54db4229"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ac6a90f-0514-47b4-9385-8793fcb18ec5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cce080e3-0185-4493-8ee4-acf227a426ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e66837cd-c0cc-4212-b35d-ab5398f159bb",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5c736af-6f12-403f-8d6d-0b160287ccad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fad0540a-6f64-42a5-97aa-10f67b03d093"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75202400-daac-4e10-9d6a-ce9cd1bb92af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3135d17b-1cb8-48cb-a611-d58782fac385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c60c9335-7262-4ec7-b1d5-ffdc57e25f93",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "109ed1dd-3fc8-4a94-b8a5-831fcd239f23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfefcdc4-b90c-464e-abc6-699baeaa39dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "599e1597-3e3e-442d-8808-c12c815eaaef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92535927-6200-4acb-bbc1-8ed7661f8ab0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47ca5178-8052-4080-a464-4034d8bea2e9",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcb1889f-6507-4ee1-82ce-17fc90471ed6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8aef051-fef4-4c55-8171-b19f6ca67003"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eefc4a59-66c9-40bf-a6af-89a793d6e457",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1046c17a-ca23-4f2d-9de5-66f4c08b2838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "234590a5-eb70-4a72-a924-395a95735b59",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23388e1d-4f33-4f55-932c-3fccb6a47aa5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "624c98d1-a8c7-48c9-8f1f-ad5948218ed7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "000772ab-9153-4360-b0c6-fbc26f995a71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe1a32fc-df69-4169-a024-b0d4780371ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31dc3c35-acff-4055-97f7-315683e8f818",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "386fe3c8-e9a0-4ee1-b9e0-0425309bcf57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7fe5eb2-05b0-48e8-be6e-cfea8965ae1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a5143d1-5680-4dc9-928d-e177d0f5ba10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64149ff4-e4db-43cc-b13c-e081e41dc589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e11c347f-170c-4662-bbdd-ed4ef866032a",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54461eb9-3d65-4101-ac71-54e02be2a1fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3e70bc9-4f4d-4360-9f52-ce983ee0e7f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ffa5a3e-8fdc-4d4f-b680-000e0814e8eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44ddfae1-e499-4912-891b-24640558eb00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58874a7e-9e0f-4d1c-b486-6bc605c253bb",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d60a9100-722a-477a-b98f-2b5c758a2ae7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d80383dd-9d93-4551-bf3b-b89f63ca7357"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31790f26-09e4-493e-9f05-a15bc29b1db2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57c6539a-6816-477d-b65f-f6636d08234b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ea30d92-7d07-465f-9ac8-339622eb70b7",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de1c1e97-3dc2-4bd7-9bec-8f17156627e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69b11b1e-f283-4e3a-bdb7-2149321ee668"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6eb356f-3d77-47f6-b59f-653cd7e0a818",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66086681-b626-4a20-84e6-f26cc1f3fc53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffd82924-5ac0-4154-a0b2-40624e1cc393",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76d2cc4f-baf3-400d-a511-97ce4e062281",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69861f65-4681-47ac-b535-940fba7659fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7516e6b3-3b5a-4a08-bafc-b192d85953b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67bb8e76-72b9-4911-9a86-bbfc7aa6ca39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9110e7e9-eaa9-493e-b278-b9cab3693f79",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71e44d0d-2aae-45b1-89df-059bc0b3daee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66f3fd26-94fa-4781-8ebd-5c6a0cd30382"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0afa763b-7b30-4b28-b37d-0230eeca5876",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d674283d-e51d-4ab3-b49f-b5741a19654b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5b01e68-a017-42e1-bc48-1aa9a451c077",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62930d94-7a6d-42f2-b447-36496f3563bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f85c4e42-bdcd-4d0e-bf7c-ed08ecd74e2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2442b6b-791c-4162-8a32-2eb2ab6974c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "819c1a08-4a7f-44a4-8c14-a2cfe071449b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2bbf8cf-651d-41e5-9c96-31ab6c0f3d50",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cde3834-5790-4cf3-9fa4-e7b4722e552c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b83e350d-1b55-4d2e-8857-bcdd1d4c1426"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b273ea1-40cd-49a2-b8f8-832b0a3c7481",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a640a161-a7dd-4d54-b111-8268d1a8ac22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06e279d2-71bc-4493-acc6-56f25a40a3f1",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1900aacc-5286-45cf-983e-e6ca657c5da5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ac40495-2b2e-4022-85d3-b93e6bcf9869"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75e75882-108a-4ccc-98ce-cc7b7f5bc722",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "356e3b0d-c174-4e25-b4d6-6b0b61b8086d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08a0fc44-9d8a-4469-94da-13a2d90cb20d",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba2d3cee-92ac-4f74-9344-ce95df5ab972",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2afc908-7400-4aac-9dba-ec7c4075c440"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45af55f9-60e6-4770-bfc2-193cbdb91c63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69ed25de-4ec0-4455-930b-5b9bf418a562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73528311-a546-4d0f-aa53-c3058ea7b85b",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baeb079d-7376-4921-b7a8-d6c468ec04b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5aee3aa-2544-468b-b56b-16c5cb116a47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b80d2c0-7517-42dc-a3a8-615bb3c2a3a7",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaf4fc9e-60f9-4bcf-9103-0d38573c1c5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bcccf87-0806-410c-a43b-ce5b45e413eb",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ebde5d4-8806-4306-bf18-3d2d8fdb521b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8dfc0885-fc54-4fd8-84a9-b4f3a938bab3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bff3cc68-4041-45bc-b7ff-fc358a6e6dff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad9394fa-2a27-44bf-82ac-28ada95dd7df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2357e1d-b72b-4e5b-9b6b-c55a9e1b4e7e",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccb52187-e90d-44b2-a620-384b8fdabef9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1afe3e97-06ee-4506-9697-85a57e228351"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ad0a993-787a-4e47-a4f9-505906cfc692",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a19a9ad-914f-4bad-875e-35840fcb8423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bb53776-e5ef-4cf5-b5b4-4a3e31bfbf39",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a314329-78a0-4b56-9a5e-cd28b0e244cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfdf13e6-7a6b-4dc4-a3e7-4b388114e5ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1a18f08-9d07-44fa-b22f-a7c97ce70334",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a9a61ec-cf94-4fa8-9189-6b92a8bde6ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e880d00c-dd37-4beb-8a71-dc2cdafb377e",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d040e41-8a68-43cc-94e8-467e07a20537",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "136de9ea-aa5a-48f1-82dc-a8c984736d05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52a95ae2-3f33-4d73-875a-5eccfc610257",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0156957d-a303-476b-837a-a3e11970acba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff6496e6-7d9c-46ae-bbfb-5a56863682bb",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59b81858-82b5-4748-b2bd-236f712c7028",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0c0a306-a880-4dc1-bea7-a3e5370140fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5371bef1-0345-4bc9-9cac-b4ab9882fecd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c87b647-0225-4a4a-8ea7-a8ae913b51c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9190bc14-efb0-4abf-8321-3e9b31144b8f",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "591d642f-ecb9-4983-8321-e0bd88eaa5a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9734d50-a07a-4f54-ab03-af8bcee24054"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d317e47-5e74-4b4b-97b0-50bcae8d7194",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b38ec6fe-ca02-4e59-8189-a85f45269e58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f1ec32d-fac0-411b-b997-6ac91318bd61",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fdc2aa3-3bfe-413c-84dd-6f1f860aa1bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d3fad2e-f520-4809-8eaf-36f9a42c2623"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23126343-7863-498e-8772-e2a83b4bdbd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a61dc251-6856-4cd1-9c79-2fa72ba1a905"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3ff7a577-a64a-42bf-bfcf-5fad9398252b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d9fd893a-9d24-4dc5-b635-425dd1aae982"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b7c2445b-3844-48cf-adc9-f2741db988fc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9589b33d-dfb5-4cd9-a3fc-f2081680255a"
                    }
                  }
                ]
              },
              {
                "id": "96a81f45-b8cd-469e-b7ae-26539766f964",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cd737157-139a-424b-aaf6-15abdf4c1fde",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed54ec3e-e7bf-4d24-89fd-8891f5b05c85",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "2d88cca9-8df8-4836-a021-cc88030b12c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cd968f7-7cb4-44f3-bba4-6de5695c3e60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "90bcba61-13a2-4b65-8105-d2d285907637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac785173-573e-4fd1-b029-d1f74a69c8ff",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41467e37-636e-4f65-b567-eed23c54a687",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "9f84717e-5770-4bc9-9cbd-4029943d46d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3190f7cc-afb6-4527-a20d-5903e77293d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "805474b3-22c7-4bd1-92d1-b3306036483d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2ce20839-b699-48bd-8aa7-0c5b9e853f33",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "de061f18-12a1-4332-a1ea-17ecbab3df15"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "adb049a1-08c6-4346-a171-95eb0c43306f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7ec4fde1-c88f-4d15-9dcc-088b710ab55f"
                    }
                  }
                ]
              },
              {
                "id": "7f8455bb-ea8e-4c48-97fa-1ce1af7ebe9f",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "6f085a30-3e95-49e4-ab20-4dc1a46c03b2",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8955210-212c-43f6-836a-f8ad791ab3b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "5ef1f01c-718d-4bf6-9480-069eda3504f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f6f329c-c640-4c92-8ff3-265f8061e79a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41a3cf57-54f1-4e11-9e3f-ba0725a56f0d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "61c8a018-0229-4727-9f56-1f60ba7a7d4b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3d3a1cb5-b804-49b6-bb35-90bc026eeae1",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "be18de3b-8da2-4fc0-bfa9-f11c63b31a1f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "29fb8e79-8341-4c0d-a127-07cb2a9d4d3f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d411662e-0c7f-4adc-97f4-e299453cc114",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "44235be3-9c27-414e-8c93-3f9f677b463c"
                    }
                  }
                ]
              },
              {
                "id": "333f9486-7354-4100-8e1f-cd3a4848b6e5",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6c1de201-810d-419f-92a9-549affb8b53f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d932a51a-b6b8-407f-80dd-1a966d4ca53b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ebcfad19-8b38-4c0d-863c-513c3067de3c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2db6b39d-9e9d-4b00-a1cb-e2cdd163795d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f1543da9-e904-4da6-b60b-832dd4b244bc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "2411b784-6bd8-4031-9327-cad49c54a65a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "46c03cf4-0fc7-4686-8bf8-08988bc67851",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "efdc4378-6777-4c93-b72a-ad05c58cf5c8"
            }
          }
        ]
      },
      {
        "id": "1037ffd0-d8e7-4e95-9281-9359fa636df0",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "4e165073-9dce-4c2b-8b9d-b234dc7fe338",
            "name": "Negative Testing",
            "item": [
              {
                "id": "99ad1b24-c285-4c7f-82c2-39f99c769c80",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "75257581-a733-47ce-ada5-188d6aad3d35",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9de48036-a89e-4b1d-9264-0e00b061fc65",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "eebdc624-5760-4b77-9794-15bd7d07087e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1c28d31-6951-4831-9d49-74f0ae218808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "80d25d68-4bc5-4bb8-a7d3-9ec893912c71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6ea4c42-8b26-42f7-913e-af5fabc1b3e9",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f74bb565-b6f8-458f-9bc0-789291782678",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "07df6304-6687-40cb-a409-d7331376896e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f875d0d7-0838-45b5-8416-1bd08755abb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c35451a0-3add-4f7d-87e5-007c2274527e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "376bbb42-f0db-46ac-819f-0684bc8fedda",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8162e7ed-e54c-4b2e-859b-faf2353e0cae"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ebe7a8ff-cdb9-4de8-a893-128f0594eba0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "21e9fd63-a617-4a74-837a-a5383841f967"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f2a59227-6e60-4944-b599-c0f2b6c5f339",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ca664913-3ff9-4919-a249-f0747eb676c0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8f235735-17c7-4fbd-b84d-5c60692ba074",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "66f78438-6b07-46a4-ac33-39dc0376c98b"
            }
          }
        ]
      },
      {
        "id": "21cb1e30-cb0f-462a-af32-54926202e6f1",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "806c82a5-5096-48b2-910e-1faf133aaeeb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3ed8bf35-3df7-4580-ad7e-af8df0e22bdb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "118d6164-3071-4b0e-be55-c2da0f8cd3bc",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c81c571-4a19-4f1a-a18c-fd72ebe85698",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5b831b46-04d7-42ea-8ddc-66ab986d08cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77611048-03e8-478d-8a03-237cdaf4822c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f8cecf10-aa67-4e50-9f07-fda4cb800ff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "953b8f34-5098-4eeb-8feb-60915a04cc87",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3beb496a-5147-4986-bd4e-dc478d32f37d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "62b348d8-8273-4a98-a87f-6bc179c9e9e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6cf5d81-f459-4ce5-ba98-fcacad27460f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c592272a-e71d-4e5f-9bbc-cbb954e1d53d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bcb639eb-941b-4f64-b5de-8bf06099a6dd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ff15a148-1e7c-45f5-827a-df62dd9438f1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1c7b9d08-7556-4456-b68f-88e76462df35",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "28e20353-b45c-4edf-862a-33fc290a8d64"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "da26305b-936d-46a1-9ee0-62a679b65e0c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "aa8ed913-e79e-4f8d-9ac8-d125c044e394"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eb6cccd5-928a-470d-b240-072e5f26db7d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "affbbde6-a440-4369-b893-4b2973814c9d"
            }
          }
        ]
      },
      {
        "id": "6e7e3704-3449-40d3-9063-2d37f2bf6353",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "f7563c9d-e51d-414c-b6c8-a660d5a93663",
            "name": "Negative Testing",
            "item": [
              {
                "id": "32aebe40-a0d7-4541-b808-7aed8790d736",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4decce3d-881a-4ce5-8d46-7b7374df2014",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95277e36-1046-406e-a8f6-61875ffefd08",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b66e600d-b937-4ae9-9ddd-03333bd8ffba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c98440e1-a9da-4f64-91d1-e2522f0f1cb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2149c688-9d58-4814-a3aa-6b92a3fcd717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ef5867d-6628-4f42-b597-8a2058d4a8f5",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e874830-78dd-46ea-a47d-e09590fb8a8b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "bf3a8a92-4dde-410c-85ae-c478e8fe747b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5b9a5f3-7137-4e45-9210-823b43ed138a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b01b2b7d-42e4-4230-879a-25174b382dcb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3d5fbf8a-f3a7-4b8b-bf43-b190e5d28583",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b54dbe70-05e3-4898-9339-3862b7283a1c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3cb4de6c-4c30-4070-8b88-4d3e9c7b04ba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e4ed48c1-404e-4596-a7a3-04cadafc472a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6069e209-253b-4fb2-819e-a305be0da59e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4ef98e96-1ac9-4a54-aa96-320018b0e1d6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "61e78a8d-777b-4113-9bb5-95cec3d168ff",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "526ad984-dfc0-4b08-95a7-bc2b10946c75"
            }
          }
        ]
      },
      {
        "id": "737f3ab3-462d-4245-ad49-af45ae9c6300",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c56ff955-321a-450f-8eb3-256bd2a65c15",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "45f3f4ce-538c-40db-96d3-aabe6ce08816",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "1ec8c97c-cb68-4851-b860-f108516bde18",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dd4aa3f6-06f2-425a-86b5-23a8e9ab26c2",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "13d2d955-a4e9-4b59-b00b-90597e91b288",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 256.19615384615406,
      "responseMin": 10,
      "responseMax": 6998,
      "responseSd": 753.795965548712,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1679531924540,
      "completed": 1679532002017
    },
    "executions": [
      {
        "id": "52a74214-7943-41cf-8525-cfd7dfa243e7",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c11f3264-3ef2-4722-a2f7-31543ed32089",
          "httpRequestId": "a917c3e3-d135-460b-9c76-cdc0f16533b4"
        },
        "item": {
          "id": "52a74214-7943-41cf-8525-cfd7dfa243e7",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "a8276f03-1b6b-45d2-8e20-4ac5ab9bebf5",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 0
        }
      },
      {
        "id": "57578449-ede8-46c7-b18e-7d4edfdf18f1",
        "cursor": {
          "ref": "d30c2724-7d28-40dc-b862-e295d7beea89",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "1e9a8919-adbb-4f44-9ac0-8c84f7ac41d9"
        },
        "item": {
          "id": "57578449-ede8-46c7-b18e-7d4edfdf18f1",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "9c776a2b-7792-41a6-b0c7-23deba4667ab",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "b75b137e-4aad-4b1f-8cf4-ec5f661efbe4",
        "cursor": {
          "ref": "82b4bf77-3058-484b-8b13-641937f97a1b",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "fd2c1498-4987-465c-8bd0-0f22e5cc96e4"
        },
        "item": {
          "id": "b75b137e-4aad-4b1f-8cf4-ec5f661efbe4",
          "name": "did_json"
        },
        "response": {
          "id": "56e28469-1e69-4ae8-a544-1d6d57911a72",
          "status": "OK",
          "code": 200,
          "responseTime": 311,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07a2f4e5-b3a1-4733-b6cc-fcc481eaa86b",
        "cursor": {
          "ref": "cee4129e-7582-4305-bedb-7a3d5a8c16e2",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c23e58bd-fe1b-46c9-b26f-85815ca24a40"
        },
        "item": {
          "id": "07a2f4e5-b3a1-4733-b6cc-fcc481eaa86b",
          "name": "did:invalid"
        },
        "response": {
          "id": "22ebd78a-8bbe-45f8-ba4a-f87149cca37d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 775,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "07a2f4e5-b3a1-4733-b6cc-fcc481eaa86b",
        "cursor": {
          "ref": "cee4129e-7582-4305-bedb-7a3d5a8c16e2",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c23e58bd-fe1b-46c9-b26f-85815ca24a40"
        },
        "item": {
          "id": "07a2f4e5-b3a1-4733-b6cc-fcc481eaa86b",
          "name": "did:invalid"
        },
        "response": {
          "id": "22ebd78a-8bbe-45f8-ba4a-f87149cca37d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 775,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "90ac404a-164d-4038-9390-6cfe294fb78b",
        "cursor": {
          "ref": "cf590a93-0ea6-4731-a765-dae7c9a40af1",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "33d837b9-bad8-45fd-ae3e-b6f090e2140d"
        },
        "item": {
          "id": "90ac404a-164d-4038-9390-6cfe294fb78b",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "26620913-2fa0-4659-a738-c38251e1a357",
          "status": "Not Found",
          "code": 404,
          "responseTime": 73,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb3dc72c-53c4-414c-a8e9-1f7c64b32ee8",
        "cursor": {
          "ref": "9c6f98e4-23bd-4b35-86e7-d9fde39ae167",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e9d36329-d4eb-4a52-b6e4-64f4516ba292"
        },
        "item": {
          "id": "eb3dc72c-53c4-414c-a8e9-1f7c64b32ee8",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "133ecf8b-ebde-4236-be3e-ec697ecb7e80",
          "status": "Not Found",
          "code": 404,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41fdf1cd-fd6f-4c79-9a4a-4f28ee4cb685",
        "cursor": {
          "ref": "eafaa71f-e686-48f4-bdc2-8bd7b4bdf6e0",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "03a5d889-65de-4039-b99f-2c7eeaafe47a"
        },
        "item": {
          "id": "41fdf1cd-fd6f-4c79-9a4a-4f28ee4cb685",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "43fc77c8-1064-418b-9e9a-cbcfd1f6cc35",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "6c6afe29-01b4-45fa-9552-b15594ca328c",
        "cursor": {
          "ref": "85d6d384-08e0-40a0-b236-78fc6942fe48",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "44bb4401-12ad-411d-9b93-35ada0f3c36c"
        },
        "item": {
          "id": "6c6afe29-01b4-45fa-9552-b15594ca328c",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "7ff489c5-5cee-41ba-bf80-823e6e15f053",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "6c6afe29-01b4-45fa-9552-b15594ca328c",
        "cursor": {
          "ref": "85d6d384-08e0-40a0-b236-78fc6942fe48",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "44bb4401-12ad-411d-9b93-35ada0f3c36c"
        },
        "item": {
          "id": "6c6afe29-01b4-45fa-9552-b15594ca328c",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "7ff489c5-5cee-41ba-bf80-823e6e15f053",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "507ed9b4-6eee-4924-add2-d7b1efa2aeb4",
        "cursor": {
          "ref": "c55eb76e-c384-46ef-a828-80bb0060995a",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "06701739-17fd-4702-bc5b-a53229f1e2e7"
        },
        "item": {
          "id": "507ed9b4-6eee-4924-add2-d7b1efa2aeb4",
          "name": "identifiers"
        },
        "response": {
          "id": "484cd7f5-42e2-49a0-9bba-0a7c02940887",
          "status": "OK",
          "code": 200,
          "responseTime": 56,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af4096c8-a457-4077-9adc-37c6f545b58a",
        "cursor": {
          "ref": "c9e3858e-ba2f-47b2-8ae4-57f71fb31163",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b94ce1b8-40d0-4bbd-ac06-a4f2fa01d2d4"
        },
        "item": {
          "id": "af4096c8-a457-4077-9adc-37c6f545b58a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "74347b7c-ce6c-4b27-abd3-e7bc67034e80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af4096c8-a457-4077-9adc-37c6f545b58a",
        "cursor": {
          "ref": "c9e3858e-ba2f-47b2-8ae4-57f71fb31163",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b94ce1b8-40d0-4bbd-ac06-a4f2fa01d2d4"
        },
        "item": {
          "id": "af4096c8-a457-4077-9adc-37c6f545b58a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "74347b7c-ce6c-4b27-abd3-e7bc67034e80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1730c12a-ef60-43aa-a73b-54a338654f08",
        "cursor": {
          "ref": "67ff0e8e-ed73-4a08-97d7-eec1f03bfc8b",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d0af92cd-62ed-4eba-8850-460986fd2711"
        },
        "item": {
          "id": "1730c12a-ef60-43aa-a73b-54a338654f08",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "ab2b2c5b-a707-48fe-9dc6-c9b3c85a386e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c79d7282-a074-4bed-8c94-76134c8e270f",
        "cursor": {
          "ref": "3dac1496-3c99-49a8-80b2-30eeddc53de2",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "f31014ce-3899-4393-804e-d7b5b8e0ac95"
        },
        "item": {
          "id": "c79d7282-a074-4bed-8c94-76134c8e270f",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "fa28f34b-c954-407c-bcb5-dc35746e6706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f836678-56f9-47c2-bc27-613d1e9c2dd2",
        "cursor": {
          "ref": "b20e3ca3-34aa-48f8-b44a-1f538d6a009b",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "d4602524-caca-4a2f-956c-348caf39bb19"
        },
        "item": {
          "id": "2f836678-56f9-47c2-bc27-613d1e9c2dd2",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "fbc65f5c-0b72-41fe-85bb-6b3f86f462c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a88361dc-a6f2-40f8-ad97-1fa9e6f4017e",
        "cursor": {
          "ref": "19f8003f-3c0a-4c85-ba76-5ddd20649671",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "1d44ff37-21a7-44df-b0fa-bd123fdd9948"
        },
        "item": {
          "id": "a88361dc-a6f2-40f8-ad97-1fa9e6f4017e",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "8e4cefdf-f436-420a-91be-b373c0010556",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19bf9a38-750d-4370-a227-f4aef0589988",
        "cursor": {
          "ref": "8873b07e-ad94-4395-a7d2-2a6846e7c790",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8eb2e92b-9f1b-4a8b-9064-b0f03f9a6b79"
        },
        "item": {
          "id": "19bf9a38-750d-4370-a227-f4aef0589988",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "8c2eb78b-c76a-4426-bd96-66c7f3eeea06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33816756-0a7e-43b9-b223-c39dbf828327",
        "cursor": {
          "ref": "963f02c7-d70a-4ca4-96d3-52905a864123",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "0bbda00b-78ea-4ca2-998a-10a9d5000a01"
        },
        "item": {
          "id": "33816756-0a7e-43b9-b223-c39dbf828327",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ec4bbd9f-e4c3-40ad-b4fa-010a1408c49b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15bbda3d-ab94-4ef9-9f3b-44d005033d7d",
        "cursor": {
          "ref": "0a7838b7-3688-4c76-91a6-06d946f2bb7f",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "26698eb8-c99b-4fa5-9d5f-489233240939"
        },
        "item": {
          "id": "15bbda3d-ab94-4ef9-9f3b-44d005033d7d",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "7f02d90f-5455-4b3d-8bb2-9a24e5e939f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73f6bf8b-1d33-4329-b525-923ccc5616df",
        "cursor": {
          "ref": "1cee9e1c-a351-4b50-8053-cada427f1970",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c01c4c9b-4386-4de4-82ca-273922e29e05"
        },
        "item": {
          "id": "73f6bf8b-1d33-4329-b525-923ccc5616df",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "b486ff07-d35b-4b3c-9776-1de87725be5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30cf97a6-adb8-4228-8c7f-739e76af82fe",
        "cursor": {
          "ref": "9c89e9f7-b212-40fd-8677-17fc14d03929",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "e7ab0210-d2d0-4a41-841c-f64dd22548d3"
        },
        "item": {
          "id": "30cf97a6-adb8-4228-8c7f-739e76af82fe",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "e65d37e9-ec17-499f-80bf-931dd40cc3a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fcacc58-5f49-44bd-a215-ecbdb93a75f6",
        "cursor": {
          "ref": "8326b775-af81-449f-ba30-4f7e1ffaa404",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "8d98e0d5-c349-4371-9f8b-47e4c7a2facc"
        },
        "item": {
          "id": "4fcacc58-5f49-44bd-a215-ecbdb93a75f6",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "1aa714f5-1203-430d-b7a3-7baecfc37843",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3247567a-e3cc-41a3-b5e7-78441b1c364e",
        "cursor": {
          "ref": "e0308cab-a5bc-4a3e-8a4e-f0e0c991bf5e",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "4f5687bb-363e-48a6-8965-3f6c62900a25"
        },
        "item": {
          "id": "3247567a-e3cc-41a3-b5e7-78441b1c364e",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "602a91af-b26a-4f29-a95e-0b97241f9cb9",
          "status": "Created",
          "code": 201,
          "responseTime": 1172,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "0e400ba2-aded-4377-8c77-960d598e5a17",
        "cursor": {
          "ref": "03a5b634-fa9e-4a4d-a5e4-727af3fd5d64",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "55d745e6-967d-4bf6-84d7-7ed244247be0"
        },
        "item": {
          "id": "0e400ba2-aded-4377-8c77-960d598e5a17",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "7f36cddd-2d85-4c4d-ba33-3aa4c5d11027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94d68e09-a7a1-4396-bbca-5857f33101ba",
        "cursor": {
          "ref": "a1e23e5e-dfcd-4d61-90c3-812b78b833e3",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "ddaa7dd0-d149-41c8-ad63-14284f673e9d"
        },
        "item": {
          "id": "94d68e09-a7a1-4396-bbca-5857f33101ba",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "98f92322-697a-4605-946b-68b7e5fdb916",
          "status": "Created",
          "code": 201,
          "responseTime": 4125,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "1753008a-c0d5-4ed4-8204-30914b2cae53",
        "cursor": {
          "ref": "49d23171-e182-4ecc-9c16-9bf65e1fb7d0",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "5f967d04-140e-413b-9288-662f2b7a1f74"
        },
        "item": {
          "id": "1753008a-c0d5-4ed4-8204-30914b2cae53",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "a2299f39-389e-4c0b-a3b6-e2fc77ec0b6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7dc4fae-0ace-451d-8fed-278b5c5cb038",
        "cursor": {
          "ref": "65dfdefc-24b9-44fa-9258-31ce30ab3c30",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "c66c8932-7910-4090-a676-0cc9a442eac1"
        },
        "item": {
          "id": "b7dc4fae-0ace-451d-8fed-278b5c5cb038",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "f5385708-050e-476d-a833-5343aa5ca833",
          "status": "Created",
          "code": 201,
          "responseTime": 6998,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "ed54fc29-089f-4316-ada1-95362f83fea2",
        "cursor": {
          "ref": "cee9764e-e4b5-44f1-96b7-7f216c63bd05",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "0f5435c5-e950-4bef-8775-9133f4fe9700"
        },
        "item": {
          "id": "ed54fc29-089f-4316-ada1-95362f83fea2",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "171dee04-1a05-4d68-90c5-aa550377acd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07c0ce26-a711-47a2-849d-6a5623d03326",
        "cursor": {
          "ref": "f766df46-0eab-4e95-bca6-9dac8a933ba7",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "faa88d66-1342-48c6-9b47-328697a91acf"
        },
        "item": {
          "id": "07c0ce26-a711-47a2-849d-6a5623d03326",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "309b48ba-27aa-4a9c-9529-d67c9dff2569",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6b6f1a2-6262-4ab3-a5cc-11ab9386950b",
        "cursor": {
          "ref": "b2e3fc2d-ce97-4c0e-b976-2bc57dfb343c",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "32577214-3345-47ca-8bfe-c888a107ad50"
        },
        "item": {
          "id": "d6b6f1a2-6262-4ab3-a5cc-11ab9386950b",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "da861b19-68ff-4051-a1b0-4574cd36a646",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75d83a7a-6c05-4de0-ac4f-922a53146808",
        "cursor": {
          "ref": "9d474513-1be4-4355-8d71-b145a4ef94cd",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "72b3ec9a-57cb-4563-a11c-3063a077e5f3"
        },
        "item": {
          "id": "75d83a7a-6c05-4de0-ac4f-922a53146808",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "7be9c829-fbe7-436e-9ec4-7c8c307b4c1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7dbc59d-5443-4cbf-af15-3c41d02d5e7e",
        "cursor": {
          "ref": "1821810e-eafc-4c62-a4e4-b0857dd163aa",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "1276262d-31c2-482a-b7a8-f76f5663424b"
        },
        "item": {
          "id": "e7dbc59d-5443-4cbf-af15-3c41d02d5e7e",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "a327d1a7-1d27-4f05-a03b-4b210bbfea53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2568303f-0053-4e36-8700-3afa4134dc9b",
        "cursor": {
          "ref": "af12f27a-b288-4f86-98c8-84333397eacf",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "d89fef4c-e6b4-4250-b9d8-662321891d66"
        },
        "item": {
          "id": "2568303f-0053-4e36-8700-3afa4134dc9b",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "e4caf257-3298-48bc-abc2-863e1987f1f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17b585e1-e37b-4697-a706-8d854084a80e",
        "cursor": {
          "ref": "56bae61b-ab90-459e-913b-d89c0417b703",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "d6c73391-2183-439b-96bb-75d80b0b9aec"
        },
        "item": {
          "id": "17b585e1-e37b-4697-a706-8d854084a80e",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "996c8bc2-d772-4f1c-9bd7-b1d134bab4bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12751180-e5c3-486d-82b7-937b304bf1da",
        "cursor": {
          "ref": "e0788fbb-7373-4a30-967b-84e1bef665d1",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "1dea8ce5-ffc8-4c84-b99b-e876f7919183"
        },
        "item": {
          "id": "12751180-e5c3-486d-82b7-937b304bf1da",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "32e1109d-1786-41a9-8dda-a4fb3adad671",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da5cda1f-f401-4b7e-ac43-d02800ddd9c5",
        "cursor": {
          "ref": "e9f9f22d-8d77-4073-9707-23995595897e",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "a0485d67-ab7c-4dd2-8676-3d7ce1478d5a"
        },
        "item": {
          "id": "da5cda1f-f401-4b7e-ac43-d02800ddd9c5",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "f516d945-4406-4b32-b45c-bb3679091fb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c28a3693-67ae-4a77-97ad-bd1d4dae49ab",
        "cursor": {
          "ref": "56b7d540-8ac0-4667-8f26-6eddc27708c8",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "7609bcf7-64d5-407d-a2df-95d5183519a3"
        },
        "item": {
          "id": "c28a3693-67ae-4a77-97ad-bd1d4dae49ab",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "6a69cccc-8799-4f80-9f2b-8580f0aff9cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fceb0d5-6112-417f-a349-4c39f9e5f074",
        "cursor": {
          "ref": "8ba69a14-3f04-4837-940a-6ebbeaf8d456",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "2ae7146e-881c-4daa-88db-4eb6bfc1ab15"
        },
        "item": {
          "id": "6fceb0d5-6112-417f-a349-4c39f9e5f074",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "63de2967-f107-4e85-bcb8-3256313769e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d495d8f6-686b-4261-8813-fd247e67466c",
        "cursor": {
          "ref": "10ad0af3-c9c7-4d2d-8813-45b2fa5b299d",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "225b0d34-a807-46b3-a943-8efaa89b39c3"
        },
        "item": {
          "id": "d495d8f6-686b-4261-8813-fd247e67466c",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "1fa9ade0-2240-40df-a1a0-dd40a254452d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db46e7ab-ac8a-4fd0-a7c1-a0e6eb44deef",
        "cursor": {
          "ref": "010895d4-3013-48ff-a86c-04e26da071c9",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "660ef810-7fd3-4258-aa18-d77294a208ce"
        },
        "item": {
          "id": "db46e7ab-ac8a-4fd0-a7c1-a0e6eb44deef",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "fb32d619-d1a3-4cb8-add8-18bff290f900",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fc98360-6d3b-441f-846b-fea6b92fdcb1",
        "cursor": {
          "ref": "daf29956-8826-4427-b9a9-d99ca8607c08",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "c54065fd-8c6f-43b8-978b-751524ea4737"
        },
        "item": {
          "id": "7fc98360-6d3b-441f-846b-fea6b92fdcb1",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "d81a4c66-9a51-414f-bddc-373d4dc02499",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e82967ca-3b11-424d-ac05-c3b67a3920d8",
        "cursor": {
          "ref": "e703ff5f-be86-47f1-85c6-371f8a323122",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "53cecdb7-2f1a-483c-af19-e6aa4c8eff05"
        },
        "item": {
          "id": "e82967ca-3b11-424d-ac05-c3b67a3920d8",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "1aad1dfe-d564-4e7f-b868-033e981e517d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dabb83d8-836e-4b45-8629-d37380ab6dd5",
        "cursor": {
          "ref": "6f193ae3-09d2-4415-9b06-d72a0907c2be",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "c3ea4769-d13f-4a10-afe2-3f3cbb318547"
        },
        "item": {
          "id": "dabb83d8-836e-4b45-8629-d37380ab6dd5",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "bcfc6808-e205-4210-a083-38cbb61b5f90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e9da113-2ff5-4388-8bee-0f0d64107e8e",
        "cursor": {
          "ref": "35ab08dc-98d3-47a1-954d-fb8af000024c",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "7f3a7839-0526-4290-9d7b-8e6f8c746469"
        },
        "item": {
          "id": "8e9da113-2ff5-4388-8bee-0f0d64107e8e",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "85c33a0d-da9d-41cc-9f39-f8856a1f3e0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52013c35-31e0-4afd-aaea-282433a75cc1",
        "cursor": {
          "ref": "382b9e56-5dd8-4e12-987f-4e6fd0a230c6",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "3d332d2a-f8e4-4374-a5be-dabcc49ec6f6"
        },
        "item": {
          "id": "52013c35-31e0-4afd-aaea-282433a75cc1",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "832b0d83-87e3-4245-9390-9007cd90d0b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebdd8930-744c-4f88-9f7c-cb954103e55d",
        "cursor": {
          "ref": "9854037c-f09b-4f53-8610-17235fd12599",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "08cdc970-efd1-4c29-996c-779bd28b9dcb"
        },
        "item": {
          "id": "ebdd8930-744c-4f88-9f7c-cb954103e55d",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "8eb634c1-beb2-4548-aa4d-29b3b0b69b4b",
          "status": "Created",
          "code": 201,
          "responseTime": 2872,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "b25a42b4-435e-4d05-93f6-78422e9b13fc",
        "cursor": {
          "ref": "3cddf831-6c33-4dd8-b47e-7683272a6502",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "9f47f3b6-294b-41ac-b6e4-ffb91ad9d0fe"
        },
        "item": {
          "id": "b25a42b4-435e-4d05-93f6-78422e9b13fc",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "b35cf44f-5046-42a3-985c-080e98f9de3a",
          "status": "Created",
          "code": 201,
          "responseTime": 2862,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "625f7af2-857a-466d-acb8-abfdbef3df64",
        "cursor": {
          "ref": "8d220ef9-b5be-4dd0-b7ae-2c2cba7df174",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "eaa2a6b9-e8ae-4c39-8cd1-acab62daa29f"
        },
        "item": {
          "id": "625f7af2-857a-466d-acb8-abfdbef3df64",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "52e15925-0153-4204-a637-59826a0ef7cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf0e0b25-0e6c-4bf3-b541-ef3d88525544",
        "cursor": {
          "ref": "0773261b-9471-4b64-a9f2-56f2ebf29a8b",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "42e159e8-d72c-4ab4-b2e0-3070e2cc20c0"
        },
        "item": {
          "id": "cf0e0b25-0e6c-4bf3-b541-ef3d88525544",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "dfb3e532-a201-4427-8c03-26ede38717dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f01b0f7e-1c3c-4f22-a8d0-04ab68bccb93",
        "cursor": {
          "ref": "97ff411f-daa2-4e85-a251-38e96dca88d0",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "26d8dde0-4f22-4786-b6cf-27dafe65f499"
        },
        "item": {
          "id": "f01b0f7e-1c3c-4f22-a8d0-04ab68bccb93",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "31d7a389-4acf-4997-981c-c78a6fb78ca4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8542410-ac96-4287-ac95-d791c28cfc1a",
        "cursor": {
          "ref": "2da63f07-2b2f-4580-8d62-5ae2a9324077",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "330c7994-cfe0-4450-88ce-9bca60cbe226"
        },
        "item": {
          "id": "e8542410-ac96-4287-ac95-d791c28cfc1a",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "bd4d2b0c-53ab-4899-ba0c-a5cd5435ad13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df9ff421-8fc3-4381-92a3-139b6736750b",
        "cursor": {
          "ref": "6d9ad0fa-6231-46e3-84bc-8f7731a0274e",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b97d2555-d886-4988-ab91-cbffc65ab1d4"
        },
        "item": {
          "id": "df9ff421-8fc3-4381-92a3-139b6736750b",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "0b3f48f8-6541-4151-8f16-11b2aacf4320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e479c0d0-afee-44ee-b2c8-0483c3b2ac39",
        "cursor": {
          "ref": "ebb041e6-d317-4723-90f0-0ea9a14e357c",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "67423d69-721b-4b23-a46f-b4e7a74f20e4"
        },
        "item": {
          "id": "e479c0d0-afee-44ee-b2c8-0483c3b2ac39",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "28378693-604c-412a-8ab3-c9e61ae88aa2",
          "status": "Created",
          "code": 201,
          "responseTime": 3109,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "6657b175-8ef2-48bc-991f-f522b40d9baf",
        "cursor": {
          "ref": "ad118fc7-85ac-44a2-ab8d-5cc8fb7dbb59",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "39352054-795d-4226-8a15-150a9de9eb1e"
        },
        "item": {
          "id": "6657b175-8ef2-48bc-991f-f522b40d9baf",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "9ea17a80-89a6-4233-aca8-5ca561efc332",
          "status": "Created",
          "code": 201,
          "responseTime": 1957,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "c3564f28-ea51-4012-80d4-74492c114e4f",
        "cursor": {
          "ref": "3a5891cc-6837-4137-91dd-88b86e8df83c",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "72f54a43-f12f-4462-8619-4e3f85765806"
        },
        "item": {
          "id": "c3564f28-ea51-4012-80d4-74492c114e4f",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "19c7587a-2f34-447e-81aa-04919fe44585",
          "status": "Created",
          "code": 201,
          "responseTime": 2632,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "1a77e46b-c9bb-484c-8ffe-4dbdbe0a60e5",
        "cursor": {
          "ref": "d7945223-0e85-4da4-b011-595662658e29",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "b763088b-c758-47e3-8b42-f4495f854d45"
        },
        "item": {
          "id": "1a77e46b-c9bb-484c-8ffe-4dbdbe0a60e5",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "941d3139-67b3-4d28-ad54-1d7ad1b2ad1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aacb473-4d42-4cf3-93cf-d13742f1bf1d",
        "cursor": {
          "ref": "178e5aa7-c32e-496d-ac4e-7ad8ab012fef",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "2350ae04-7a21-451e-9cec-2c614cf4d28a"
        },
        "item": {
          "id": "3aacb473-4d42-4cf3-93cf-d13742f1bf1d",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "71a141c8-d035-410d-827c-42b0537fe9d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 147,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91c01796-4e74-47bb-8d21-57dcef861918",
        "cursor": {
          "ref": "26e93822-5f17-45c8-a69c-dc057187db69",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "36677416-d113-4a11-ac54-e7251938a7fb"
        },
        "item": {
          "id": "91c01796-4e74-47bb-8d21-57dcef861918",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "4f617840-f7ae-4403-b7d5-538134f9e59e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 186,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd4228d4-9083-43a2-8145-a4ad7a596e3c",
        "cursor": {
          "ref": "ea714fc7-9d1d-4d2c-8d38-dcb4809b6b4c",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "ceae7125-bde8-42a0-a9f1-0f99f40c7df9"
        },
        "item": {
          "id": "cd4228d4-9083-43a2-8145-a4ad7a596e3c",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "13af4509-d21a-4db1-a345-40d5052b3ba2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cb20b62-6a80-4990-9020-378789430f42",
        "cursor": {
          "ref": "45854f6c-fbc8-4eff-be95-01d523977ce0",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b291de5a-1c48-4ea3-a7e0-0b815ab62d14"
        },
        "item": {
          "id": "7cb20b62-6a80-4990-9020-378789430f42",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "cf3f6e14-15fa-4e7b-ad90-5e991eb5e484",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f11989f6-b383-4e18-91a3-b146fabf1b1d",
        "cursor": {
          "ref": "c10455bc-250d-4eaa-908c-f827f898ca5b",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "15d1809e-ad37-4189-9407-60e8ac15ddd1"
        },
        "item": {
          "id": "f11989f6-b383-4e18-91a3-b146fabf1b1d",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "5dad73c0-5b82-4ad6-95e9-8f9d320dcd5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 152,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb327e1b-e69d-438c-b996-fbeec848e70f",
        "cursor": {
          "ref": "84a17cbc-0f01-4d43-a087-eccec270fec3",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "30077c60-45f7-427a-b730-8b8f76c99dd2"
        },
        "item": {
          "id": "bb327e1b-e69d-438c-b996-fbeec848e70f",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "c141482e-0eb8-4212-978b-623a6885814b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 141,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baa0848c-c248-400d-8691-4f52cbf5b4d9",
        "cursor": {
          "ref": "25552f6e-7c01-451f-9915-afa5062de914",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "a65e0286-f946-42f8-8466-15bc84e591e3"
        },
        "item": {
          "id": "baa0848c-c248-400d-8691-4f52cbf5b4d9",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "943c37ff-a1a8-4d6f-a190-1feecf12aa6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b70f91ca-cca1-413e-9985-0867182c9a04",
        "cursor": {
          "ref": "69853dbb-cbc5-4a35-93bc-0e368e814748",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c1cc51bb-0e0e-4ec9-a627-5a90b400df1f"
        },
        "item": {
          "id": "b70f91ca-cca1-413e-9985-0867182c9a04",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "aa5e4641-bd68-4954-a6b8-d6d1fb5a20cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cafe4c6-d94f-4a35-bd27-36f92571fa50",
        "cursor": {
          "ref": "33bee495-e2a1-4213-b046-42228a681ab1",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "6f0d9d32-ddaa-404b-8f35-f3f4e358919b"
        },
        "item": {
          "id": "8cafe4c6-d94f-4a35-bd27-36f92571fa50",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "9a4cbeda-0062-4c7d-8cf2-eda4bc4192b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1fd543a-f170-403f-8b9f-695a2cd89ff6",
        "cursor": {
          "ref": "1720bdb8-0a9e-4fb0-871b-4bd8398db813",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "61c6b2cf-b863-487b-8bd1-d743f51a67ea"
        },
        "item": {
          "id": "c1fd543a-f170-403f-8b9f-695a2cd89ff6",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "7c9ea47e-c0a0-441a-a12f-05a8bc87a654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0eb1cb8-8157-4f0b-9e42-2bcc06ffe835",
        "cursor": {
          "ref": "9eba289a-cfe3-4149-9916-2c466652a854",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "429ae4c7-136a-4393-bbd9-36863180638e"
        },
        "item": {
          "id": "f0eb1cb8-8157-4f0b-9e42-2bcc06ffe835",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e0cee077-7a73-4ae9-9512-5070d3fff516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0642f26-27be-46b3-8463-f49e073a223d",
        "cursor": {
          "ref": "1be04325-e7ad-4562-a3ac-0e76faa6bedc",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "c4aa9b77-d6eb-4b24-8c62-2a5a55376525"
        },
        "item": {
          "id": "d0642f26-27be-46b3-8463-f49e073a223d",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f0dce9c7-132e-448b-bc09-2c7f9c09dd42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9351e22-9603-4736-8cf0-44799257b8f5",
        "cursor": {
          "ref": "6280982e-ddc2-41be-bd2f-89c7ab9816fa",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "79445938-5ce5-4ed8-8b0c-7f52fbd92084"
        },
        "item": {
          "id": "d9351e22-9603-4736-8cf0-44799257b8f5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "2ffb5600-0fba-4706-93eb-c208724f3b47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "603c9618-e19c-42a0-900a-689a5ccd14a1",
        "cursor": {
          "ref": "27593053-237b-440a-8d50-347a6de5348d",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "e2c3ebfe-0994-4bab-b1a6-7183d051c351"
        },
        "item": {
          "id": "603c9618-e19c-42a0-900a-689a5ccd14a1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "09092537-66ed-4c13-b58d-f0a1365420f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2115abed-ed95-4db2-9771-b8cedc845529",
        "cursor": {
          "ref": "f5ed5396-2efa-4f09-a71c-4755dc6d30b3",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "89c7c95b-cd69-4465-8217-cda6f028156b"
        },
        "item": {
          "id": "2115abed-ed95-4db2-9771-b8cedc845529",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "976adc0a-31f6-4092-b7ff-cef8b49b7ebe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1af6b279-1bc0-4e50-9fca-0abd31f61698",
        "cursor": {
          "ref": "98f1671c-2ab4-49c1-afaf-826d8e5bfe05",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "8e5a4817-e7ea-493e-84f9-c25cb17783e0"
        },
        "item": {
          "id": "1af6b279-1bc0-4e50-9fca-0abd31f61698",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "8717c5d1-6e7c-454c-b4a5-3389b7ebd374",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ae6b097-a5d3-4045-b25d-33a6f00b05cb",
        "cursor": {
          "ref": "677cf326-2cf6-4703-b75c-12c85a1fb2f0",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "d748e427-7dfc-48b6-968d-d45616ba3fc8"
        },
        "item": {
          "id": "7ae6b097-a5d3-4045-b25d-33a6f00b05cb",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "9ad2d4f9-60ef-4859-8d03-7082599c512d",
          "status": "Created",
          "code": 201,
          "responseTime": 2496,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "7e6398b9-e343-4847-be64-e4f59432467a",
        "cursor": {
          "ref": "b433abf0-e72c-4664-807b-6167dcf23880",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "710dcb6c-cf79-4abd-8412-83dfe4d25664"
        },
        "item": {
          "id": "7e6398b9-e343-4847-be64-e4f59432467a",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "a6ce1373-5209-4b83-b65d-2b16c333fd47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fb2ad97-8a97-4225-85cd-58138791a318",
        "cursor": {
          "ref": "6e61ff5e-7330-4040-9c38-0d64a118c11d",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "d3025efd-878e-4076-98ad-f436f4445fad"
        },
        "item": {
          "id": "9fb2ad97-8a97-4225-85cd-58138791a318",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "2696d972-9616-42be-b0e6-9df880c2ef34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 151,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a7e97a4-daed-49b9-87ec-32ea8d4b18e0",
        "cursor": {
          "ref": "0bcd0d54-42b5-4f35-85e3-a8e96f586ea8",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "9cc0a7f1-77e3-44e0-a3f4-d51c3f103442"
        },
        "item": {
          "id": "5a7e97a4-daed-49b9-87ec-32ea8d4b18e0",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "9a1493f0-5672-4cc3-af94-e63058a8f3d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25ef449a-ab83-42aa-8308-51018457718d",
        "cursor": {
          "ref": "d276f8d3-a58c-42d8-8616-b6da3adc0095",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "62c38587-7797-45e2-97dd-7ce292c198da"
        },
        "item": {
          "id": "25ef449a-ab83-42aa-8308-51018457718d",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "761c2f84-9e36-4238-a02b-fe5654031306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a831bb65-8940-47e9-9a86-f0d4474440f9",
        "cursor": {
          "ref": "9c8209c3-822a-4111-9492-09c21a29e4f5",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "f6e61e45-8b51-4e1f-8309-fcde9fa75f0a"
        },
        "item": {
          "id": "a831bb65-8940-47e9-9a86-f0d4474440f9",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "34bea01c-a50e-4713-b07b-49a46b47c8c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a807cf4-227c-4473-bfad-c0b87b851c0f",
        "cursor": {
          "ref": "d2fe415e-95ec-4771-b365-36ba45c28929",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "ab70ec88-9e1a-4cf7-b7f2-ee714602b592"
        },
        "item": {
          "id": "9a807cf4-227c-4473-bfad-c0b87b851c0f",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "5dcc2390-9a05-4ee2-bc53-dd39a40270ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8463498c-5a21-462a-bc17-0e6605bfdb02",
        "cursor": {
          "ref": "5d5aa596-29b0-4217-8c93-cb138f6ba49d",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "02b1ae05-ba32-4471-849f-b483a55bbf49"
        },
        "item": {
          "id": "8463498c-5a21-462a-bc17-0e6605bfdb02",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "1ac6c7d7-3362-44cb-8b95-84bee84f3b4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05465a3b-698e-4130-a1c0-8cac0ff7802b",
        "cursor": {
          "ref": "ee0a0bc6-778e-4f77-acd5-bdfb33c6c095",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "53c2a494-34d2-40d5-a620-134bb00fe6d9"
        },
        "item": {
          "id": "05465a3b-698e-4130-a1c0-8cac0ff7802b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "6aef8137-a7a9-43b8-9e83-68789967c9ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a25041f-8f01-4bd7-9e56-2201c52bcc39",
        "cursor": {
          "ref": "6eefa65a-359e-4e43-9087-30678cc5af8f",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "96a466d0-e135-404e-b3f0-09fdc6ff17be"
        },
        "item": {
          "id": "6a25041f-8f01-4bd7-9e56-2201c52bcc39",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "de9c5e57-e22c-4e83-b638-6cc4a80876b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43ffb409-1817-42c0-b91e-617996384453",
        "cursor": {
          "ref": "f91ca467-636b-4b34-9118-18b3ac0ff437",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "4c9d2e05-77a7-4323-ac07-4d8ebacb7e33"
        },
        "item": {
          "id": "43ffb409-1817-42c0-b91e-617996384453",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "9e488ebc-55d0-49a0-8548-4863bda0570f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "481961d9-9a39-4d19-846e-29b76f4c1fd4",
        "cursor": {
          "ref": "ee52cc26-8803-485f-951a-2d2f18ce9e1e",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "c30fff70-53d4-46e5-91f0-f76e380f42a0"
        },
        "item": {
          "id": "481961d9-9a39-4d19-846e-29b76f4c1fd4",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "8aae98be-e84f-4441-80df-aadb65873187",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c61c326c-e90b-4931-b60a-94e6633aa0f3",
        "cursor": {
          "ref": "dc3ade39-199a-4d50-9e6f-435388a743a0",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "d969d23e-9026-47ba-b74d-af206b850ac1"
        },
        "item": {
          "id": "c61c326c-e90b-4931-b60a-94e6633aa0f3",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "da2a367e-245a-4269-86dc-d98899f27fc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "643c1aa3-7fcf-413d-8a4e-214d2f3f70ba",
        "cursor": {
          "ref": "35545879-f42b-48c2-ad25-e23527ef9bac",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "e1a18b43-2648-44d2-9eaf-7a53300d4917"
        },
        "item": {
          "id": "643c1aa3-7fcf-413d-8a4e-214d2f3f70ba",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "2b8e0ff4-bd7d-4a0a-a54a-07f006ae3fca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52232dae-feb7-4225-b55f-f9dc0a77faa8",
        "cursor": {
          "ref": "3e0d2e93-d16f-4d37-823c-b0e09a524866",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "bd693c58-03e3-4a17-8c10-f2c3cd1e69b1"
        },
        "item": {
          "id": "52232dae-feb7-4225-b55f-f9dc0a77faa8",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "8843e3ef-1a26-4810-aca0-b1bdc3eca831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8977293a-5924-4a8a-8944-8ff1b3da5986",
        "cursor": {
          "ref": "aa3c2404-bb24-4c32-9090-e89af3fe6e73",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "c6f9e96c-1dab-4635-93a7-19842cccd47b"
        },
        "item": {
          "id": "8977293a-5924-4a8a-8944-8ff1b3da5986",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "cd04df19-2181-499f-ae25-6285fc5732de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c832cc3d-d204-4c15-9a66-20591f369925",
        "cursor": {
          "ref": "d225a42f-f305-4361-a55b-02ca5dacebf3",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "471b6592-c438-4015-8196-9fdb812dbb7e"
        },
        "item": {
          "id": "c832cc3d-d204-4c15-9a66-20591f369925",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "126709ca-09b4-41c7-af22-d283d6aff5e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b799e0e-b8bd-4129-92ca-3908f050259d",
        "cursor": {
          "ref": "f874f4cd-ba5d-4248-ada3-c26c66c39727",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "84d5216d-f01f-4fbd-b0a5-e0299d489996"
        },
        "item": {
          "id": "8b799e0e-b8bd-4129-92ca-3908f050259d",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "db33a0fb-1f64-43db-bc89-7d2e6abbf850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1210c788-9d51-4321-bc25-88dbf91742dd",
        "cursor": {
          "ref": "d78cb82a-eea9-4603-bffc-d269261801af",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "c4632af0-981d-42b9-952f-c2c1cc851653"
        },
        "item": {
          "id": "1210c788-9d51-4321-bc25-88dbf91742dd",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "9852ee6a-b64b-46a3-ab80-96106ad3a148",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1183d79-3e35-44bd-90d5-f03f6fc07a98",
        "cursor": {
          "ref": "32022995-9081-4b2b-8468-53ac341a734f",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "4f838f75-b2b0-4214-a02a-9f6bee0c1c06"
        },
        "item": {
          "id": "d1183d79-3e35-44bd-90d5-f03f6fc07a98",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "ded21aac-ee4e-432e-9ed4-2aa511b556df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a8f7f75-1b60-46c2-96ea-0faf0f51b6e3",
        "cursor": {
          "ref": "933a11d0-d57b-4da3-a3fb-bbda95ac357d",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "0e3a13a7-7e61-4eab-a406-0634ab595f9a"
        },
        "item": {
          "id": "1a8f7f75-1b60-46c2-96ea-0faf0f51b6e3",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "993497eb-97eb-4675-8dad-8adfeab25b9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dfa12e0-2c80-4a50-b6bc-721071c028b1",
        "cursor": {
          "ref": "b213ba83-554e-4779-a68f-1713fde5d381",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "2acb6d67-0074-4144-8db1-68abe6510e1e"
        },
        "item": {
          "id": "0dfa12e0-2c80-4a50-b6bc-721071c028b1",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "b80c8d27-8bee-49e4-b877-76e40d4fe5fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0360c6b-5a39-43ba-9d96-8df116a77e17",
        "cursor": {
          "ref": "be82da15-1e7a-4dbd-8d87-5982b7fc13a9",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "f9624938-a988-444e-a182-8cf7d504a522"
        },
        "item": {
          "id": "b0360c6b-5a39-43ba-9d96-8df116a77e17",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "b3fce2aa-6a88-4018-ae43-91b927803d68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5efc4c13-a35a-4501-b8db-7059db270c9d",
        "cursor": {
          "ref": "a971509f-7ffc-4760-b044-bf97eb632513",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "42c083c0-4b00-4747-8402-29e309e476f2"
        },
        "item": {
          "id": "5efc4c13-a35a-4501-b8db-7059db270c9d",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "5ed012a1-298e-471b-b866-ddf8d48cb980",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49de01b7-2d84-49b1-aa01-f9829e44b40b",
        "cursor": {
          "ref": "49bea4cb-d4b3-4598-a2cd-5e8e775735f9",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "42d21a59-135d-478b-8fb4-5e77b174f590"
        },
        "item": {
          "id": "49de01b7-2d84-49b1-aa01-f9829e44b40b",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "9e8d1d9c-99d5-412d-9b69-8ba4cd985bbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e3be983-7e7d-4e8d-b4fd-ec0bd537a2b9",
        "cursor": {
          "ref": "9f801cb1-d2bd-4ca4-ac6b-35bbab754d38",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "0bd1f5f8-37b8-4680-be8b-96945d736f45"
        },
        "item": {
          "id": "7e3be983-7e7d-4e8d-b4fd-ec0bd537a2b9",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "d18dd57b-a23f-4854-aae8-6b218441fcf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb3f7c50-c2d5-440c-a048-d8874dddd840",
        "cursor": {
          "ref": "a3abe742-5e46-41b0-92a5-0f55dd8996e5",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "99478074-f5ea-4c6f-a413-dc3b32d7bc98"
        },
        "item": {
          "id": "eb3f7c50-c2d5-440c-a048-d8874dddd840",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "dccc4bb5-6826-4946-b5cd-d829da179092",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8bc890d-1c0f-47eb-af35-27f0c32c3e02",
        "cursor": {
          "ref": "c321c2b5-9682-4a9c-bfbd-9baa10696939",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "2b9d30e3-2d58-4611-919b-f5ab65b02d0d"
        },
        "item": {
          "id": "f8bc890d-1c0f-47eb-af35-27f0c32c3e02",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "106b7efa-2ca7-43c4-8b64-732a02ba55e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4df09758-d7d4-491f-993b-339e885cce10",
        "cursor": {
          "ref": "a4efc26a-f111-4d8b-a31d-c5572a0dd8fe",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "febddd9d-e5a4-445c-bb1e-13c323810647"
        },
        "item": {
          "id": "4df09758-d7d4-491f-993b-339e885cce10",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "0977979a-5d53-4af1-8249-65972868beab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aa26cc5-a44d-44f0-92cb-4531fd4ac4ee",
        "cursor": {
          "ref": "211c1ff7-7454-4d60-a7fc-c0152a3a7725",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "ab517822-334e-4844-a2e5-401196c8f3ee"
        },
        "item": {
          "id": "2aa26cc5-a44d-44f0-92cb-4531fd4ac4ee",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "b30dbf2a-757a-46f1-b164-dbe978bdae91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "316fdba3-a0c6-4a53-abcc-cd3731dd76e9",
        "cursor": {
          "ref": "11a27ab1-842c-4d78-a7fa-cfab671ecc98",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "ec072a70-7489-4d11-8af4-03afc40aeb2e"
        },
        "item": {
          "id": "316fdba3-a0c6-4a53-abcc-cd3731dd76e9",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "ae1a7f01-336b-413d-b074-8f669b1926ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42462157-796a-441a-a23c-8ff538fa4669",
        "cursor": {
          "ref": "5d3975fd-6d96-4794-9827-ee0fd8ddc9d7",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "19741647-355a-4ef6-b14a-e3cda9126b65"
        },
        "item": {
          "id": "42462157-796a-441a-a23c-8ff538fa4669",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "36554400-59bf-4661-b033-fb678b924b93",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "1cd2ff72-2a42-4e62-8247-0f4c4d1b977f",
        "cursor": {
          "ref": "f11ff9cf-0163-466b-9f4f-ecd9c4099306",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "9e96c394-509a-4f55-9d24-7af0d23dbe67"
        },
        "item": {
          "id": "1cd2ff72-2a42-4e62-8247-0f4c4d1b977f",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "d4936c70-23f3-420f-9413-3ceca583eb94",
          "status": "Created",
          "code": 201,
          "responseTime": 2330,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "81031bb6-39f8-451c-a2c8-bd9666385124",
        "cursor": {
          "ref": "85891fd5-0cb2-4aa2-a319-27f6d5740d39",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c4673fc0-b6de-490c-b763-c14b9aa3db18"
        },
        "item": {
          "id": "81031bb6-39f8-451c-a2c8-bd9666385124",
          "name": "credentials_issue"
        },
        "response": {
          "id": "b1ded91d-6ad4-45cf-9651-8310a2982dee",
          "status": "Created",
          "code": 201,
          "responseTime": 2950,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "df0a7d91-5fb5-4113-a0d8-9528d93275a9",
        "cursor": {
          "ref": "07d9445b-f0c3-482b-962e-e0dfadeed43c",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "43742c7f-dab9-4cb5-9d22-e73a36c17059"
        },
        "item": {
          "id": "df0a7d91-5fb5-4113-a0d8-9528d93275a9",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "6017bebe-69b5-48fd-ae72-d8ae4bc225e5",
          "status": "Created",
          "code": 201,
          "responseTime": 1976,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ffe2fdd-c06a-48ce-9333-49c7ad58f026",
        "cursor": {
          "ref": "417d595c-040b-4f64-95e3-eb9f067169d5",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "0b988dc1-8851-408a-91bc-198f265713b8"
        },
        "item": {
          "id": "6ffe2fdd-c06a-48ce-9333-49c7ad58f026",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "8fad88d0-3b67-4c52-8fe1-ff046dc61085",
          "status": "Created",
          "code": 201,
          "responseTime": 2274,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2d4ac21-e378-49f2-8136-f7ea821c6875",
        "cursor": {
          "ref": "828e901c-1d6a-4126-be69-8c0b9acef022",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "0cf16542-64dc-47ef-a0df-b736fe751a4d"
        },
        "item": {
          "id": "d2d4ac21-e378-49f2-8136-f7ea821c6875",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "da3f37e9-2c42-45db-ab33-2aa5d79d3f1e",
          "status": "Created",
          "code": 201,
          "responseTime": 2371,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc922566-eaac-43d3-a04f-98945a8d77c2",
        "cursor": {
          "ref": "55ab1f73-5123-4210-b0ca-db435824b9b9",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "58879f66-0772-4304-aa78-4396f07ba620"
        },
        "item": {
          "id": "bc922566-eaac-43d3-a04f-98945a8d77c2",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "156c01ee-0e6e-4b2c-97da-9e9966871aa0",
          "status": "Created",
          "code": 201,
          "responseTime": 2380,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-03-23T00:39:39Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-03-23T00:39:39Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "5dd4d485-799b-4f57-b047-453218d940ac",
        "cursor": {
          "ref": "5e18c2ce-bb14-419f-8fdb-c23488bf3113",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c83bc42f-ba46-42fa-bbc7-7dd7a18a40e7"
        },
        "item": {
          "id": "5dd4d485-799b-4f57-b047-453218d940ac",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "a3d65436-7fd3-469a-b351-e31c9bff6129",
          "status": "Created",
          "code": 201,
          "responseTime": 2512,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87c08de0-d002-41db-ba61-d709bd2e8d51",
        "cursor": {
          "ref": "f4b85b84-13a9-403c-8df0-95703d93e806",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "f56a6d95-b983-44a9-9921-29c9da0d8880"
        },
        "item": {
          "id": "87c08de0-d002-41db-ba61-d709bd2e8d51",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f87668c6-661c-4bc5-9ac2-66a817718843",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87c08de0-d002-41db-ba61-d709bd2e8d51",
        "cursor": {
          "ref": "f4b85b84-13a9-403c-8df0-95703d93e806",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "f56a6d95-b983-44a9-9921-29c9da0d8880"
        },
        "item": {
          "id": "87c08de0-d002-41db-ba61-d709bd2e8d51",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f87668c6-661c-4bc5-9ac2-66a817718843",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aea1750-8903-4e53-a9f9-f8db6676c185",
        "cursor": {
          "ref": "5b71c25d-5392-45d9-bbe9-a3ab2641027e",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "0006add9-85b3-4df3-9fc4-376f7fd1ffa0"
        },
        "item": {
          "id": "8aea1750-8903-4e53-a9f9-f8db6676c185",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f6919fc4-080b-425c-af71-7a5bedfa6886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cca4d805-ccaa-4a96-9285-0721a5f986e0",
        "cursor": {
          "ref": "d2740dfc-55b9-4676-a0c7-294082479fbb",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "6022e004-561a-46e8-9308-45cde7b9db2a"
        },
        "item": {
          "id": "cca4d805-ccaa-4a96-9285-0721a5f986e0",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "6dcf6ddf-3d54-47e6-9276-cff4e5f65fc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7d2714f-b71d-4ecc-beb5-658a21539ea8",
        "cursor": {
          "ref": "452097f7-3b92-497f-bf95-e20aa8ece161",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "c61e8761-85ac-440f-a2af-d417171e422e"
        },
        "item": {
          "id": "a7d2714f-b71d-4ecc-beb5-658a21539ea8",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "12f91511-afaf-4dbe-bbbd-c38b7ff0e3d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "434f87ca-84bc-4178-b845-f1e16635cac5",
        "cursor": {
          "ref": "60103fc8-8534-4d04-8773-4bcfb4e7cb5f",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "edfb5695-784d-4036-b767-d2f24dfa39de"
        },
        "item": {
          "id": "434f87ca-84bc-4178-b845-f1e16635cac5",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "07f888d5-f488-4b49-b224-79b3d0921eff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d2e8fb0-280c-40c8-90a6-c90adb0acbe2",
        "cursor": {
          "ref": "f9792caa-19cb-4626-8561-33de06941c46",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "6efd20af-3a70-4952-a821-342672f52397"
        },
        "item": {
          "id": "2d2e8fb0-280c-40c8-90a6-c90adb0acbe2",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "70c2c158-9075-4a2a-baa3-d33e7180510a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e612f904-9c42-43d3-9218-2e0fb3c20137",
        "cursor": {
          "ref": "04df4080-0003-40a6-a8e8-927659e9254e",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "7a6fa0e9-4230-4d44-80e4-78daaaaad4cf"
        },
        "item": {
          "id": "e612f904-9c42-43d3-9218-2e0fb3c20137",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1945afeb-b2cb-456e-bd89-2a33ec788b0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e7dbb3b-9a9a-451b-9aa6-39c61473cdab",
        "cursor": {
          "ref": "0bafc04e-7928-4415-b620-138fe46b0f96",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "cf23e9b1-8104-464b-b955-b1fd11722a64"
        },
        "item": {
          "id": "0e7dbb3b-9a9a-451b-9aa6-39c61473cdab",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "253c0249-06cb-49af-ab99-2554ba63eabc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87edbccb-5517-40dd-b4de-0d6805abd83a",
        "cursor": {
          "ref": "8fa4a60b-49f0-4eb9-855d-464ebbdff154",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a98bc734-e451-4410-b3ce-86c5f9723368"
        },
        "item": {
          "id": "87edbccb-5517-40dd-b4de-0d6805abd83a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "9d4e4705-ee6d-4ed3-8513-2a970583b449",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cacc760-7874-409b-a1b7-43134e6b71fa",
        "cursor": {
          "ref": "d37bb6d7-e318-4461-8c72-c9174a3d699e",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "9ba805cf-3b3f-40ec-8bcc-8e2213101dee"
        },
        "item": {
          "id": "4cacc760-7874-409b-a1b7-43134e6b71fa",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e7b1e24a-9e60-44f8-8ce9-6ce2affe7f4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d49df159-347b-4368-b49f-a21a4bd62d08",
        "cursor": {
          "ref": "3df5dc6e-dea4-4d28-9813-c74c1e684199",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "76384f91-6205-4ae3-bf79-d33467e25916"
        },
        "item": {
          "id": "d49df159-347b-4368-b49f-a21a4bd62d08",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "336e2f03-b464-460f-a9ce-779bd98aea79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e09d8a6-45e5-4edd-a45b-13db49947e28",
        "cursor": {
          "ref": "fc616bcf-869a-4432-9a4c-67a2b42e3250",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "8b692510-2065-4146-8db8-4a34030c44e9"
        },
        "item": {
          "id": "0e09d8a6-45e5-4edd-a45b-13db49947e28",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "2fef989c-8c14-4739-ba06-bd57f17e5386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28b34ef7-c23f-48c0-89f2-95b8723439cc",
        "cursor": {
          "ref": "f02f4405-cba2-4ca1-83bf-31f131311610",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "a753bfb6-69dd-48a0-a22f-0a084940333f"
        },
        "item": {
          "id": "28b34ef7-c23f-48c0-89f2-95b8723439cc",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "3d4beb15-3bbf-4cc9-9ee8-df761908c7ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a70011e-0776-42f4-8200-aa96ec97bb24",
        "cursor": {
          "ref": "c40cb7aa-570c-44bf-a012-4bb014384196",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "4e4f14f5-ff13-4b6d-a4db-4b5c80e56b89"
        },
        "item": {
          "id": "1a70011e-0776-42f4-8200-aa96ec97bb24",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "8912f51c-d007-47af-aa23-7087cff47f5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcc7b06a-4b65-4f3e-be0e-0510a0e26475",
        "cursor": {
          "ref": "c035222f-5760-46de-a2ac-3cc81f62f035",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "8d19e9fc-698e-42c7-8931-c31f82a00b23"
        },
        "item": {
          "id": "dcc7b06a-4b65-4f3e-be0e-0510a0e26475",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "89991ec8-2ffb-4dd7-9dd4-e07723e39118",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ee20231-5c2d-4a66-9be4-ea1f0a1fbc6e",
        "cursor": {
          "ref": "afd87c89-12ca-4ede-a953-e05aa98a9566",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "c5baaa8d-950a-4ddb-90c1-14c97d9bc17b"
        },
        "item": {
          "id": "5ee20231-5c2d-4a66-9be4-ea1f0a1fbc6e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a546f1fa-8463-4259-be38-0a7dfadbcdd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e55b49d-c9f0-47a5-87aa-9eb473b559a1",
        "cursor": {
          "ref": "88291cad-665a-4ed1-b5b3-e92653df8107",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "3afa8ff9-c79d-486f-b766-f175465393f4"
        },
        "item": {
          "id": "0e55b49d-c9f0-47a5-87aa-9eb473b559a1",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "12da6afa-dc63-4a85-856c-4b7c1c863ee3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c023bb8-d5f4-442d-8a9a-4b918555370f",
        "cursor": {
          "ref": "d92e75d5-310c-4f09-946c-3a27d258746a",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "040ec98b-d5dc-40b1-a514-ac3014450914"
        },
        "item": {
          "id": "8c023bb8-d5f4-442d-8a9a-4b918555370f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "a998af63-2198-43df-9332-3ab069a214aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12b5cdcd-3bc4-4db4-8bbc-af5a5e731ac6",
        "cursor": {
          "ref": "9b9a6607-6bbe-4c55-ac3b-735f26903330",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "9dccea99-cd3b-4d64-8361-08d2f547c583"
        },
        "item": {
          "id": "12b5cdcd-3bc4-4db4-8bbc-af5a5e731ac6",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "16b1fe34-2891-4047-befc-ed0c1b49bfb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "702d7683-bc4b-4c68-b54f-068ff32ca421",
        "cursor": {
          "ref": "a19eaaeb-94d4-4c72-bc9e-292d743f494a",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "a9b24d98-00c7-4f1b-8204-9378c4f8801e"
        },
        "item": {
          "id": "702d7683-bc4b-4c68-b54f-068ff32ca421",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "9c79df84-29ba-4ed3-9739-cb94e1ecf967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ff83539-b1b5-4ce8-9f34-2ab6340e041d",
        "cursor": {
          "ref": "f5c5baa7-7c32-467d-b8e7-ee21c01bc6e8",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "ad2e0fe5-e89c-4072-947f-cc70acf7e49d"
        },
        "item": {
          "id": "4ff83539-b1b5-4ce8-9f34-2ab6340e041d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "0ff868cd-8f5e-432c-ab62-2fdaca6e9822",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "409b03b8-6bc0-46f5-b392-8893232f0a6f",
        "cursor": {
          "ref": "aee9d8ec-520e-4100-965d-4f3ccfb89699",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "6873a5b5-d4d7-46a0-9755-6a7a7f234414"
        },
        "item": {
          "id": "409b03b8-6bc0-46f5-b392-8893232f0a6f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ec4a2681-c45c-49bf-a913-b7a09d4e281e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ffef5db-fff9-427e-a3f9-373ca8ea5f0d",
        "cursor": {
          "ref": "33fcc876-4cc0-459a-8c65-37f4b18ffe0c",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "84c054fb-4cd6-4170-9b63-1bddb4a1ae09"
        },
        "item": {
          "id": "8ffef5db-fff9-427e-a3f9-373ca8ea5f0d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "90441afb-5794-43e8-bb08-29ec95e1c4ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c9627aa-fb15-4f15-b3f9-46d5a4a01fac",
        "cursor": {
          "ref": "d79f2a9a-8f70-4852-9943-d4bcfc40a4c6",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "24f73c41-c2c8-4dd9-9c7c-a05a8d525f00"
        },
        "item": {
          "id": "9c9627aa-fb15-4f15-b3f9-46d5a4a01fac",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "843cce0b-6456-4696-972a-f8f6f7dd514c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23ef6bcf-ea2f-4c5c-ab26-ad6f1b605cb5",
        "cursor": {
          "ref": "59fd122b-5038-4194-bafc-003d5e6c7445",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "5d04a94c-5658-487d-b22a-df6d0da0d3a1"
        },
        "item": {
          "id": "23ef6bcf-ea2f-4c5c-ab26-ad6f1b605cb5",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a0dd9399-35cb-4fdd-b0cf-7a7b3a497000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "039ec66c-b8c7-4859-80ae-c6c1e62a3364",
        "cursor": {
          "ref": "e13477c3-e4f2-454a-80c7-805db7acacb8",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "b4249655-0cb3-4d55-9a8c-47a8a16f77fd"
        },
        "item": {
          "id": "039ec66c-b8c7-4859-80ae-c6c1e62a3364",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "fe83dd46-a4ff-4fe2-b92e-bfe933d06f91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a02bc31-0c98-44d8-9606-106f6cf362fd",
        "cursor": {
          "ref": "3f0fb34c-a8dd-48ff-aa3a-3c25b74d9085",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "f06c79ac-eae7-4d28-b379-330a5c54939f"
        },
        "item": {
          "id": "1a02bc31-0c98-44d8-9606-106f6cf362fd",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e07670b5-4206-4cbb-8ff0-a9bfe0335569",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "964266a3-7cbe-4467-93c0-a262979732da",
        "cursor": {
          "ref": "a9d08bb6-5e94-4112-9c58-f5bbaeb23929",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "f02226a1-3df7-4d14-b2d1-f1b5efa6accd"
        },
        "item": {
          "id": "964266a3-7cbe-4467-93c0-a262979732da",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "f3fcf431-4f57-4d88-a3b0-8ae6bfe048e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b89c0e6b-d832-4f9a-b41a-6f3e681e30a2",
        "cursor": {
          "ref": "970bfd74-cffd-468f-ac71-dbc3b0ddc62a",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "da137e13-b29e-41e1-8ae1-e353104a9241"
        },
        "item": {
          "id": "b89c0e6b-d832-4f9a-b41a-6f3e681e30a2",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "5b2e7dfb-6530-4a12-a657-8ba89c91120c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9237ce90-62c1-4972-98ee-cc6a89e9af80",
        "cursor": {
          "ref": "d9112010-a0d4-4c04-8a76-2ae4d2c801e5",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b03016e6-348f-443b-b2f4-13ed72b6f4ac"
        },
        "item": {
          "id": "9237ce90-62c1-4972-98ee-cc6a89e9af80",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "4d134171-7115-467f-a8fc-e203baf68e8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f04b6ba2-4d60-4598-a6cf-f2f1de54e49c",
        "cursor": {
          "ref": "66771e3a-e7a3-4547-b01d-9b84c550c976",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "d19ae8ff-6e07-48e5-b417-ca0faba8645e"
        },
        "item": {
          "id": "f04b6ba2-4d60-4598-a6cf-f2f1de54e49c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ae77ff75-b60f-4be3-8b1d-b8f942eac9ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "290e84a2-c286-40a6-b307-953ea8e31202",
        "cursor": {
          "ref": "07818ecb-397a-409b-9630-d1ce55cec192",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "cba3c818-cd62-4112-a7b2-21f191baec30"
        },
        "item": {
          "id": "290e84a2-c286-40a6-b307-953ea8e31202",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "b0b80222-cafa-472c-acab-aef7782d7814",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbbe0f54-6aa6-4998-ac6b-9a09f26e2c02",
        "cursor": {
          "ref": "78d6995d-c464-48d8-9e32-6df63278bd2a",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "d640255c-b730-4514-a575-e38c8e31f430"
        },
        "item": {
          "id": "cbbe0f54-6aa6-4998-ac6b-9a09f26e2c02",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e7f33c63-1450-45e2-8b58-136e42abbf2e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "8ff5874f-b5c8-4487-aa04-77098afe57c3",
        "cursor": {
          "ref": "c2416c3e-c3d0-4d08-9841-64452abedc51",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "d67be71c-1002-467a-9a26-786ba37cffce"
        },
        "item": {
          "id": "8ff5874f-b5c8-4487-aa04-77098afe57c3",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "d6ddccd6-da39-460a-934e-d9c2695405c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "c10a1d0f-ca65-4f80-91c2-f545e52e5b42",
        "cursor": {
          "ref": "3084c8f9-1d7e-45ac-84f7-786a3c9f6ecf",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "3aa94af2-f495-4823-998f-155a4bde328e"
        },
        "item": {
          "id": "c10a1d0f-ca65-4f80-91c2-f545e52e5b42",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "7b00504a-4b59-4b3c-8ad2-659aa3ec3425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c10a1d0f-ca65-4f80-91c2-f545e52e5b42",
        "cursor": {
          "ref": "3084c8f9-1d7e-45ac-84f7-786a3c9f6ecf",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "3aa94af2-f495-4823-998f-155a4bde328e"
        },
        "item": {
          "id": "c10a1d0f-ca65-4f80-91c2-f545e52e5b42",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "7b00504a-4b59-4b3c-8ad2-659aa3ec3425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "475badd0-4149-4144-940e-b50a0e6862da",
        "cursor": {
          "ref": "a8a975dc-01e6-47eb-8485-a98474101c5e",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "d0e1c332-f572-4ab9-bc73-929a67973844"
        },
        "item": {
          "id": "475badd0-4149-4144-940e-b50a0e6862da",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "114bb305-a18d-400e-a4bd-f52f68834340",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c44d5afe-201b-49ee-920b-70bedecdaec2",
        "cursor": {
          "ref": "1819b05d-0777-4c51-b081-38dc461835d0",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "9145812f-047b-43ae-98e4-7dddf1257312"
        },
        "item": {
          "id": "c44d5afe-201b-49ee-920b-70bedecdaec2",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "754912aa-088f-4250-98ca-2fb2e41f9ede",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fec1b1dc-e831-4134-9610-08197838d3c3",
        "cursor": {
          "ref": "f702b1c3-c8f6-459c-ae0d-222dd9c95ca2",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "abb89e61-3076-4e94-a783-d32a8a746772"
        },
        "item": {
          "id": "fec1b1dc-e831-4134-9610-08197838d3c3",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "4b3d4baa-e536-46b2-bfc6-94e10aecb8cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cf313c1-9ca8-473c-a530-1031edae94e4",
        "cursor": {
          "ref": "85d531f6-f183-4df0-8b37-e08d6fe7e9f6",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "99ce1118-4bbc-4812-891f-787057b121ac"
        },
        "item": {
          "id": "3cf313c1-9ca8-473c-a530-1031edae94e4",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "ead9cdbf-d5ec-4e76-8e3f-86af1d9ae412",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5afd6d8-95ba-4e7d-a949-7cebbc14037a",
        "cursor": {
          "ref": "93a0c968-31d8-4543-9718-4e1f1c4f2bc9",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "0079050d-728b-4daf-8a1e-517db8dca2b0"
        },
        "item": {
          "id": "e5afd6d8-95ba-4e7d-a949-7cebbc14037a",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "5d36c146-9e5b-4877-8828-3ff4eae8ad35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a76928b5-ad86-464b-8073-78756663ad70",
        "cursor": {
          "ref": "f6c83bf7-7088-4c4a-820f-429105aedef6",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "68b6516c-5ff3-4ef3-964d-075a0388d0a5"
        },
        "item": {
          "id": "a76928b5-ad86-464b-8073-78756663ad70",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "d71ed8d7-7a69-45ac-9dc1-263ef755f076",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6500f5d-086f-4514-81b8-d3ac3c7a2fc9",
        "cursor": {
          "ref": "ec7669d9-6fd3-4f5c-be9a-b7050cbb8926",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "22a166c0-df78-4d28-bf5d-f5ff730a1482"
        },
        "item": {
          "id": "f6500f5d-086f-4514-81b8-d3ac3c7a2fc9",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "022387e4-951d-4918-9c04-2c7a674cd6d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c47c823-d776-4ae6-b8ae-f847ded404b0",
        "cursor": {
          "ref": "c5f9f834-27dd-4a45-a9e3-cc5f0d7b157e",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "8ab3afc7-6fe3-4e91-9cc6-8935580d3036"
        },
        "item": {
          "id": "7c47c823-d776-4ae6-b8ae-f847ded404b0",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "8f78e171-b2cd-4cc9-aeaf-a69842662605",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "303326df-32cb-4c4e-b2a0-2660a13b6c3a",
        "cursor": {
          "ref": "9a74eadd-592b-4d0f-ad45-0607206afc88",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "6b57d0c2-59dd-46ac-b015-0c7af8ad393a"
        },
        "item": {
          "id": "303326df-32cb-4c4e-b2a0-2660a13b6c3a",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "c6e33faa-8dd2-46e8-a3cc-23a3f385b14a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9acc8ca-e4d8-4177-950b-728f83c1940b",
        "cursor": {
          "ref": "8820d086-a717-4600-b4dd-830b88c47d41",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "2c0e627c-2903-4ea6-b080-f08ceffa274b"
        },
        "item": {
          "id": "a9acc8ca-e4d8-4177-950b-728f83c1940b",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "0ad354a8-b01c-4e11-b394-19956c8ec203",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce682e62-dcca-4a91-bedb-cb4fb45c12ca",
        "cursor": {
          "ref": "075c816b-b510-48a5-b276-42a1e8406687",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "10ca0e13-94dd-444d-a0ea-fcdd0ae88b8c"
        },
        "item": {
          "id": "ce682e62-dcca-4a91-bedb-cb4fb45c12ca",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "e45253f0-fdf9-4e7e-9b7e-2fe88c100e84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dcbb034-8236-4426-ab8c-caf0775dc6d0",
        "cursor": {
          "ref": "32cbc754-698a-46ef-bb4f-94b9697613e1",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "b11bad48-58d9-4c65-8f1a-688177ead6b8"
        },
        "item": {
          "id": "8dcbb034-8236-4426-ab8c-caf0775dc6d0",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "ca0f7276-4abf-42ee-aa93-d7399798023c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e9b0bbf-2494-4e88-81af-75cabf8a282f",
        "cursor": {
          "ref": "fd7e9542-1420-421c-b16b-8e8a6efa8f34",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "86759400-c063-44ae-99f3-345b520374f0"
        },
        "item": {
          "id": "9e9b0bbf-2494-4e88-81af-75cabf8a282f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "035980b0-adb6-48f4-9199-33c8b25a395b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "092f39b2-7973-4798-ac92-36850da26c5e",
        "cursor": {
          "ref": "30a6d8a4-1cbd-401e-942e-ca2aa60196c4",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "97de3447-6212-4e0e-ad9a-9e8f21161ba5"
        },
        "item": {
          "id": "092f39b2-7973-4798-ac92-36850da26c5e",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "0f07af08-f78f-4439-bae2-db3410422c0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf7e8cf9-ec5c-487e-a7b0-97ccc1738685",
        "cursor": {
          "ref": "c2771759-04cf-411c-8a9c-55b548e7f008",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "1aeaf492-916c-4040-97bf-691b86c38b93"
        },
        "item": {
          "id": "cf7e8cf9-ec5c-487e-a7b0-97ccc1738685",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "4d42ecee-8416-45db-978c-4e00ed8e1514",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4a4e130-8176-437e-80c0-954eded40426",
        "cursor": {
          "ref": "e32532b3-23cc-4322-91df-2bdd888b810e",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "79c19f89-0581-4ebe-a408-9782489d9a44"
        },
        "item": {
          "id": "e4a4e130-8176-437e-80c0-954eded40426",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "f9c8f46e-eb03-467a-8eb9-8669025168fc",
          "status": "OK",
          "code": 200,
          "responseTime": 256,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "671df923-7ef8-41a6-aed7-3c20641e9888",
        "cursor": {
          "ref": "3f1158b5-5680-435f-9826-914d2124bd6b",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "2c2088e5-dc2e-4d6b-ae08-be1bc23a9afb"
        },
        "item": {
          "id": "671df923-7ef8-41a6-aed7-3c20641e9888",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "30683076-dde6-4338-8025-aabb96b890a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "272d83a0-9f3d-418e-8445-64bd03c3c315",
        "cursor": {
          "ref": "3761941e-af8c-4f3c-88a8-f1d95738873f",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "21ac1201-6d4d-4a8f-986a-dda5819c7c69"
        },
        "item": {
          "id": "272d83a0-9f3d-418e-8445-64bd03c3c315",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e927d64c-047a-4ea2-bab4-6b812aa0723d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a4bf171-dfcc-4b48-a2b2-d2ff40856580",
        "cursor": {
          "ref": "b46c0499-077b-4115-94c7-acf24f223aeb",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "0b62334d-65d0-4397-9512-d411d03a3076"
        },
        "item": {
          "id": "5a4bf171-dfcc-4b48-a2b2-d2ff40856580",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "2cb46268-9fde-4f3e-8c27-577c3cb867c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "075472f5-c8e8-4398-9173-da59a6f0fb42",
        "cursor": {
          "ref": "875e5c50-b475-4092-9d30-4a59b1d31a52",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "688679ec-c33c-4b09-865c-5a8599b07c2c"
        },
        "item": {
          "id": "075472f5-c8e8-4398-9173-da59a6f0fb42",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "4cd1fc8b-4742-4cb0-9e8e-4ca3004cb6df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5067bb3-9516-4c1b-92b2-adca3f858092",
        "cursor": {
          "ref": "6362a2da-68b0-437a-8283-e07d234f6800",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "62773f82-167c-4b35-9662-49b2b2ab044d"
        },
        "item": {
          "id": "a5067bb3-9516-4c1b-92b2-adca3f858092",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "3629688c-9b3d-426c-8c38-d41a448cef6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28940f6b-1a6b-43ef-8ff0-a8b1d558061d",
        "cursor": {
          "ref": "9da98868-d09d-4cde-8976-3c7d9f32ccd3",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "8bba17b0-3a54-4ba6-9b29-5f15476ff9c6"
        },
        "item": {
          "id": "28940f6b-1a6b-43ef-8ff0-a8b1d558061d",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "fe87b679-380f-4766-b922-cf425152ee94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d073e2ec-0935-42a5-8c55-8bce55871cd1",
        "cursor": {
          "ref": "5427dfc0-f855-42b0-b2d6-d11b299ede00",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "c27564c4-cfdd-4f52-8e16-ba1c4b46d50a"
        },
        "item": {
          "id": "d073e2ec-0935-42a5-8c55-8bce55871cd1",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "b99e9379-255e-4127-abb6-a9bf6c9c7acb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e7eeb92-19b7-416b-aa7f-c078928c96bb",
        "cursor": {
          "ref": "150df4a4-87ba-4ae6-92a1-e31b35de6480",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "d071be2f-1e49-4aad-be56-15f2f5c60637"
        },
        "item": {
          "id": "5e7eeb92-19b7-416b-aa7f-c078928c96bb",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "55e4b011-5091-492b-ac5a-23e680f11e29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57e221bb-f99f-435b-a898-4335d7f9ae4e",
        "cursor": {
          "ref": "2ea4b1d2-316f-4b7a-9e52-13a8efb7f4e4",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "1778c67c-23de-4466-bb8f-22002cc5aea6"
        },
        "item": {
          "id": "57e221bb-f99f-435b-a898-4335d7f9ae4e",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "130acaa6-e2c4-47aa-9920-52c804dba802",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0650eab7-8fcc-4142-acf1-f3853ce1a6de",
        "cursor": {
          "ref": "ff7061d1-576e-4d75-b5db-41b92a05258a",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "b2a32d9d-dc15-4e99-be6e-b928624e7db5"
        },
        "item": {
          "id": "0650eab7-8fcc-4142-acf1-f3853ce1a6de",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "1be41690-22b8-4ee1-8ce2-3a8b76b3a331",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "574507a1-feff-4bf5-b951-b2fd493fdf45",
        "cursor": {
          "ref": "383e3197-c500-4405-ac1a-50388015d436",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "8c151b87-bc2f-449f-9176-b3c51539e13d"
        },
        "item": {
          "id": "574507a1-feff-4bf5-b951-b2fd493fdf45",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "e2758ce4-49ae-4c37-8bb1-6406acc70779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ea42875-ec23-41d1-ad10-29e751793b70",
        "cursor": {
          "ref": "07b8a9eb-dbdb-43fa-b8cb-383f969cf7da",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "7639f292-3e0e-45e1-b06c-f434539a7119"
        },
        "item": {
          "id": "2ea42875-ec23-41d1-ad10-29e751793b70",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "c4602d29-0f93-42fa-be22-f2e9821dafdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50897dfd-5535-4199-a9dd-83784c8fb46a",
        "cursor": {
          "ref": "4a230617-5eea-419b-b6e0-32494c219cb8",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c9ababdf-fe94-48ab-8e2f-3a23771193ca"
        },
        "item": {
          "id": "50897dfd-5535-4199-a9dd-83784c8fb46a",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "4047104e-a124-4193-95b2-112278e6b606",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df6310f4-4563-437e-a871-4dd7cd555280",
        "cursor": {
          "ref": "b0c3886f-c579-4819-ac97-73cf44efd43c",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "6dc838f2-79af-421a-afde-9f963fc2a314"
        },
        "item": {
          "id": "df6310f4-4563-437e-a871-4dd7cd555280",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "7634a1a3-7ebf-4d57-ab29-d5d8b46890e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6212fef7-c34f-4bc8-ad04-2ef87ff11119",
        "cursor": {
          "ref": "eb7ba580-5ca6-41d4-b792-910456843a0d",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "d1b75139-c3e2-4518-8b69-227b263d170e"
        },
        "item": {
          "id": "6212fef7-c34f-4bc8-ad04-2ef87ff11119",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "f9725a69-e43a-4c85-bac0-5bd150d2a795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5076c713-c7ee-4d97-b7a0-1e120b1d9268",
        "cursor": {
          "ref": "17d5217e-bc18-4463-9b19-eaaf81e2c511",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "6892114d-054d-4c2f-bb15-64aef45f62d8"
        },
        "item": {
          "id": "5076c713-c7ee-4d97-b7a0-1e120b1d9268",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "a28b9bae-2fe9-4e7d-a43f-4011ca852583",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52477049-8565-465b-a550-ed68816562f9",
        "cursor": {
          "ref": "1634ba57-a3bc-4782-a127-446653a1563b",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "04f9fe69-cf68-4622-b5a5-2c9b6859b026"
        },
        "item": {
          "id": "52477049-8565-465b-a550-ed68816562f9",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "e1a47369-8172-44a8-bba1-e2163eb8bf96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b793a13-d98d-47d8-8109-7f10a67c140d",
        "cursor": {
          "ref": "7b511ce5-df58-4dee-9966-ff9f0cd16cd1",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "113adaf1-8db4-4df9-b022-e3ec67ecbc0a"
        },
        "item": {
          "id": "2b793a13-d98d-47d8-8109-7f10a67c140d",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "ec69ab00-cbd6-44d1-95ec-da45cb511385",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c4caf58-6ff2-4be9-b592-8ce44d36f593",
        "cursor": {
          "ref": "f994aae9-9dab-465c-86d8-b02f383e5e97",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "79f85983-40bd-4abf-990b-82b2a6d3ce49"
        },
        "item": {
          "id": "6c4caf58-6ff2-4be9-b592-8ce44d36f593",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "f0d944be-d19a-4887-af14-fec9089a9688",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4e4ffd8-1317-4e03-9cc9-6d5e3463f9e4",
        "cursor": {
          "ref": "f3622aa1-ac6a-4155-b026-4ed5356a1792",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "6bf459ec-b539-4bb8-99f3-4472af350238"
        },
        "item": {
          "id": "d4e4ffd8-1317-4e03-9cc9-6d5e3463f9e4",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "3ee62076-a3ce-4713-b067-9628f9ad479f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2570090-e76a-497d-934c-91fa5d9c8ac6",
        "cursor": {
          "ref": "3b08e6f6-c127-4038-b438-a98d4da6c0a4",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "3d5cbf9a-c55c-45ed-95c6-5d98983a4aed"
        },
        "item": {
          "id": "c2570090-e76a-497d-934c-91fa5d9c8ac6",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "8a417b0c-300a-4e5f-8b66-8a741aa29f73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c191b4f9-b642-45c6-859c-675fa39f7c97",
        "cursor": {
          "ref": "1e8b82b0-f337-4539-aace-753deb7e04bf",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "12052884-b8a4-49f3-96a4-bf4dcb0a51ee"
        },
        "item": {
          "id": "c191b4f9-b642-45c6-859c-675fa39f7c97",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "dc73dd77-1156-4f97-9de7-0718f59e2ab0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "880abc77-83ee-4b63-ae27-2052279e998d",
        "cursor": {
          "ref": "0628f59e-ea83-4ff0-97da-a49235f49134",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "7036f092-9f0f-47f2-8979-48c7afb67c6b"
        },
        "item": {
          "id": "880abc77-83ee-4b63-ae27-2052279e998d",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "85bc0e28-22aa-43db-8b4b-d8ba70624e30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55c4edb2-1ea2-46b3-9db5-dd3ee4f71a30",
        "cursor": {
          "ref": "26bda9e2-1d74-4c0c-8af2-286a50bdc258",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "cde951d3-1461-4a4b-aea1-546fdf5f8386"
        },
        "item": {
          "id": "55c4edb2-1ea2-46b3-9db5-dd3ee4f71a30",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "06d2a541-711c-466c-9534-ee5cc7a59e11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "678899e8-01b0-40f1-a890-c0f2123d03e7",
        "cursor": {
          "ref": "b6284029-f840-43b4-b778-1c5913b0f15f",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "8cd0bdbe-20db-4bc5-8741-f514c5542048"
        },
        "item": {
          "id": "678899e8-01b0-40f1-a890-c0f2123d03e7",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "b973756f-dc0e-47e4-8e58-e2da0e52b8a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 185,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35aa93ee-5bbd-4123-a1d9-a3bfee6a9b54",
        "cursor": {
          "ref": "12b801ca-d0db-464a-9b99-6df3a3ff6818",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "93da462c-fd10-4158-b63a-83904e8ae184"
        },
        "item": {
          "id": "35aa93ee-5bbd-4123-a1d9-a3bfee6a9b54",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "5a570c08-6af2-43f6-81e4-cd48fb454d0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6fc1799-75b9-4ba3-a9f0-f11338307418",
        "cursor": {
          "ref": "92ee9245-893e-4648-a0a9-d2ed13a48f8a",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "1e83c59f-3b40-47e7-96f6-36f1ad8ed2a1"
        },
        "item": {
          "id": "e6fc1799-75b9-4ba3-a9f0-f11338307418",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "c5e87558-d170-4b08-babd-524417d4231a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89f9fb95-8b23-461b-ae78-5a205c82c95b",
        "cursor": {
          "ref": "f8fba922-b54f-443c-a0f8-1149a322d1b8",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "2ef4582f-9799-4ee8-adfd-aa3e7476daea"
        },
        "item": {
          "id": "89f9fb95-8b23-461b-ae78-5a205c82c95b",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "111aa63b-6677-4c66-b2b7-7badeb315484",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe307a3c-81bb-4104-8239-74705e969154",
        "cursor": {
          "ref": "7f1624a9-6670-4b4b-8b4d-0e6e20fb4e79",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "53e1745d-ee79-49bb-b855-91341c590b94"
        },
        "item": {
          "id": "fe307a3c-81bb-4104-8239-74705e969154",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "a283e41c-af3e-4fc8-b1f8-96f8b4d184a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de8145d8-a1bb-4095-b07f-5b56673dcae1",
        "cursor": {
          "ref": "ab4d8a90-2c7d-4ca6-8040-3db4ca09209a",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "fa1d5dee-7fd5-4bc5-81df-4d715c24189c"
        },
        "item": {
          "id": "de8145d8-a1bb-4095-b07f-5b56673dcae1",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "3d299c52-eba6-41c3-80e5-3cfe9f03e206",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b4822ba-0dd8-4a6b-80cc-bd1899510082",
        "cursor": {
          "ref": "ce129177-c8ec-4df5-83d6-124b38398ef4",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "6df8ed41-a727-42eb-9b74-32d12ec4ac8c"
        },
        "item": {
          "id": "5b4822ba-0dd8-4a6b-80cc-bd1899510082",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "a2a79c0d-3c44-4865-83b3-7278a0f6e0f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d85ef5a4-d86a-4b77-b575-1123258f2788",
        "cursor": {
          "ref": "ccc13a25-60a3-49a5-a713-c19faaf74843",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "dafe4be5-582a-401a-9bed-6ec5f9f3b2b8"
        },
        "item": {
          "id": "d85ef5a4-d86a-4b77-b575-1123258f2788",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "039fda2e-b242-470b-a676-58ae2624b3c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90235881-908e-4364-9850-367fe4c39987",
        "cursor": {
          "ref": "e48f1dea-f843-4681-95bf-920cbaea772c",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "ba0df644-a275-45bb-8907-c5cebf9d7288"
        },
        "item": {
          "id": "90235881-908e-4364-9850-367fe4c39987",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "d315885e-c519-482b-8006-9e4e42b0e19c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd91aafd-d3e1-45ed-bfc7-fdb6c8e0946b",
        "cursor": {
          "ref": "b1b1f1bd-231b-4e3f-96b3-91e6b83a3a8b",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "cd94f984-3b9f-4cb3-8369-e76933980115"
        },
        "item": {
          "id": "fd91aafd-d3e1-45ed-bfc7-fdb6c8e0946b",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f0208643-a442-4a20-b63b-f47c5980eaf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "627da2d5-e688-45d5-9254-e4bbd3cba25d",
        "cursor": {
          "ref": "d618fed2-6db3-42b9-a78b-cee91a6337be",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "610f1ef1-9b92-4d05-a789-a10cabefcd59"
        },
        "item": {
          "id": "627da2d5-e688-45d5-9254-e4bbd3cba25d",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "942137c0-06c3-40ff-ae52-a7f929f9e051",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a61840bc-4cd3-4543-ba91-dbaceb000e86",
        "cursor": {
          "ref": "65fbc347-0203-4c82-bbd5-7040b6a64d61",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "eff19876-70f6-45fb-8eda-77926ffea55d"
        },
        "item": {
          "id": "a61840bc-4cd3-4543-ba91-dbaceb000e86",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "81eda5ce-8ad6-4bf7-8957-9d27632e3f83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dcadf9d-5ab8-483b-b699-73154f88f63f",
        "cursor": {
          "ref": "5f0a0f46-288a-4502-957d-85722a56ed85",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "fb2c9d53-52bc-49e3-b59b-5046301cbca5"
        },
        "item": {
          "id": "9dcadf9d-5ab8-483b-b699-73154f88f63f",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "b13a56a3-4106-472e-bfd1-d79170f8c4c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf177be2-132d-4c45-b797-e483839d7bd9",
        "cursor": {
          "ref": "8972f84c-e1d7-4cc1-a2a5-850ce761e5ef",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "1835ffef-3bdc-468b-855d-5ebebd38d317"
        },
        "item": {
          "id": "cf177be2-132d-4c45-b797-e483839d7bd9",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "131e10bb-d37a-4097-8b94-8a73b4064ee0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebf3cb39-b3c5-4d6e-b639-57f8c93e2995",
        "cursor": {
          "ref": "83fdcfbb-2ad5-4ff5-9770-fb8bf9aa9e37",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "d8dd2831-05e4-4715-80ea-830cff7481ac"
        },
        "item": {
          "id": "ebf3cb39-b3c5-4d6e-b639-57f8c93e2995",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "e46fe012-0ae4-42b2-9f19-bb329da1e662",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "181e976f-4917-4589-a0dc-b8f7ec6dbd72",
        "cursor": {
          "ref": "c81d6460-84f0-4a1e-abc2-32c3c1395ad5",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "4f10c2d9-77f9-494e-94ac-4f6421a2ca28"
        },
        "item": {
          "id": "181e976f-4917-4589-a0dc-b8f7ec6dbd72",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "54874f8c-6f3b-45dc-b137-895367be9172",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d60a5fc-83ee-4467-8cf8-45d2d5653634",
        "cursor": {
          "ref": "fc4b99bb-d8a0-418b-9f61-31fc89e29905",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "9ace5d8d-f758-4d91-8312-ef5c00b25419"
        },
        "item": {
          "id": "0d60a5fc-83ee-4467-8cf8-45d2d5653634",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "ca1fdee5-625b-40d4-b955-3dfc3264bac2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36459e1f-69aa-4f4c-8acb-795ca738e904",
        "cursor": {
          "ref": "0c89529c-1c12-43b8-8832-faf9143f1c2b",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "192a69d6-6877-48e2-af26-501b0fa6af41"
        },
        "item": {
          "id": "36459e1f-69aa-4f4c-8acb-795ca738e904",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "3828f20a-29d0-411d-90b7-b1a20007ebd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f08a521b-002f-4ed0-a934-985ab950d8ac",
        "cursor": {
          "ref": "af17657c-89bf-4d85-98e8-addaca6c6969",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "bb3723bb-da32-428e-87c2-425ee16358c8"
        },
        "item": {
          "id": "f08a521b-002f-4ed0-a934-985ab950d8ac",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "7b9ec8a5-96ae-44e1-b831-1091a00812c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dd034d0-c27a-493c-bb75-098efea39217",
        "cursor": {
          "ref": "5d265cbb-c712-4a84-8d1a-fdce492c0abc",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "9ba295c5-31cc-449b-9aaa-4e259365f519"
        },
        "item": {
          "id": "4dd034d0-c27a-493c-bb75-098efea39217",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "6b8c65d7-db5b-4b1f-ad93-a920306dd186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 754,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89344d64-aa2c-4798-ab2b-9dcc84c828b3",
        "cursor": {
          "ref": "a1c1ee81-4e22-46f1-891d-dbe429d221fe",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "ececd691-123b-4823-9676-a5ba0df8c9de"
        },
        "item": {
          "id": "89344d64-aa2c-4798-ab2b-9dcc84c828b3",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "9bfe949d-4f56-4b44-a927-01a96a047ca0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c983afa6-58b5-487f-90b3-bbf73931d5b0",
        "cursor": {
          "ref": "d60a4f5e-29af-4023-b5fe-07d24fc790b2",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "d510fabe-8d7d-4c54-a23f-89d21761e538"
        },
        "item": {
          "id": "c983afa6-58b5-487f-90b3-bbf73931d5b0",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "8363b824-4325-437f-b1b2-e104afc0428c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c758eebc-3b58-4117-943c-10ec01c0b1e3",
        "cursor": {
          "ref": "beee077e-c0c2-4f71-9f37-18e67fda676d",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "244b4aaf-f451-4619-a231-183b75a4221f"
        },
        "item": {
          "id": "c758eebc-3b58-4117-943c-10ec01c0b1e3",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "a3f93256-fc12-48cb-b613-a6820dbda2c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c6e16f9-d6a6-42b8-9dd4-5bdf2098886a",
        "cursor": {
          "ref": "ce541cdb-0c8d-44a3-bff3-37e28245b0f9",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "7724dbe4-ea46-4f4e-86e7-8e5366fe2f98"
        },
        "item": {
          "id": "7c6e16f9-d6a6-42b8-9dd4-5bdf2098886a",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "744f1c74-41cc-4f6c-a776-fb6c8ef5ea3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3a6bde4-5c5f-472c-a5da-d45af1d77829",
        "cursor": {
          "ref": "aeb77ce6-84b2-4299-a950-50c42140cd3e",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "72e03a2d-e479-4fe7-9275-0da5be9f1781"
        },
        "item": {
          "id": "b3a6bde4-5c5f-472c-a5da-d45af1d77829",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "6be40db1-5ea9-40ad-80ed-233eb52678be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e11f8606-2c11-4877-a043-f9b843485f48",
        "cursor": {
          "ref": "d1db3894-e303-499e-ac07-2d665d3ce1e3",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "87fe230a-c588-4efd-9c40-a7fbd79fd618"
        },
        "item": {
          "id": "e11f8606-2c11-4877-a043-f9b843485f48",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "19c26761-7854-4ace-ab74-820d575063b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e27b46d0-efed-4c34-bdf8-d0ca82955b16",
        "cursor": {
          "ref": "cff4c918-2e8c-4f33-83bf-0931cf181769",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "e9bd5cb2-884f-44b0-8df7-c9870d5bed52"
        },
        "item": {
          "id": "e27b46d0-efed-4c34-bdf8-d0ca82955b16",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "aab074dc-b797-4bb8-8bdb-b7a6ceeaa73b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c12ac71-c949-49ca-94a8-332188238581",
        "cursor": {
          "ref": "dc20eaeb-5949-442b-b06b-995e55525fa3",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "8f32d222-f72f-432f-ba35-a8363f2c2b63"
        },
        "item": {
          "id": "1c12ac71-c949-49ca-94a8-332188238581",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "b5b5f4d8-71b1-4e65-bd0e-8533f36f3f09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2d1ede9-5b1d-4d08-9a4f-2f65cbf23b6f",
        "cursor": {
          "ref": "1e6c3677-0cd8-4968-bc47-c40425805186",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "dee669f5-7188-4c0a-a491-7604be7bff30"
        },
        "item": {
          "id": "e2d1ede9-5b1d-4d08-9a4f-2f65cbf23b6f",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "1bb07a1c-fbf0-4b29-a0da-c40e3f781fb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f97abe89-0572-4dd2-a0e1-cc1d649639f9",
        "cursor": {
          "ref": "a1e08705-9d20-4e06-a934-ddee4766cf4c",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "5c30b9d5-e656-4e8a-87b8-4f46c8b85c67"
        },
        "item": {
          "id": "f97abe89-0572-4dd2-a0e1-cc1d649639f9",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "e7c831bc-8b72-42b9-82dd-1fb61aafc2f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "501c82f3-ed06-43c1-96e6-a1fc96398164",
        "cursor": {
          "ref": "ad3692f9-e4c4-4d54-a621-f6e20bdbf71b",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "37b295eb-0373-43c4-8e48-b2e115d29f35"
        },
        "item": {
          "id": "501c82f3-ed06-43c1-96e6-a1fc96398164",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "58c8e57d-30cc-4056-a81b-73afafe2e05c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06db50e8-234b-4b8a-b52e-621e4d77693b",
        "cursor": {
          "ref": "8df6cf8d-010d-4954-96a3-4086205aa555",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "13f07ecd-6178-46be-8dde-15a842483a15"
        },
        "item": {
          "id": "06db50e8-234b-4b8a-b52e-621e4d77693b",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "6923d9a2-3286-4212-b092-a0fea91ff1af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3a1df30-ce06-47a8-ad21-2742de1cb06f",
        "cursor": {
          "ref": "d32dbd70-c32a-4d62-8c18-28e9781a1036",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "917c8772-29ad-4d21-86c8-562541c520ad"
        },
        "item": {
          "id": "c3a1df30-ce06-47a8-ad21-2742de1cb06f",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "86a68530-3b03-4fa1-aa88-db4a86073736",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f1e8389-28dd-45bd-821b-b8d4559224eb",
        "cursor": {
          "ref": "457395a0-a5d4-4613-9eee-8fabbaeaa8b8",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "9988cc6a-da90-4452-b746-e55e79ffb89a"
        },
        "item": {
          "id": "2f1e8389-28dd-45bd-821b-b8d4559224eb",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "68c715ee-1235-4763-8747-c4f1c544b37b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e66837cd-c0cc-4212-b35d-ab5398f159bb",
        "cursor": {
          "ref": "53cb35d8-d621-468b-9645-087a58e71581",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "1a03b965-cef0-4c76-bfe5-95a1a11a8d2d"
        },
        "item": {
          "id": "e66837cd-c0cc-4212-b35d-ab5398f159bb",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "29159af2-7325-4dad-9067-44f17c4a1d1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c60c9335-7262-4ec7-b1d5-ffdc57e25f93",
        "cursor": {
          "ref": "7dd84e6b-f714-4aa6-b79b-8760f6fef3bf",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "d71f407d-e3ab-43d1-a323-001f797dabfa"
        },
        "item": {
          "id": "c60c9335-7262-4ec7-b1d5-ffdc57e25f93",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "dc28a67c-7307-4c45-aae5-b98081e8df36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47ca5178-8052-4080-a464-4034d8bea2e9",
        "cursor": {
          "ref": "7384f6d7-969d-4506-a202-8d55681ad993",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "6c15e269-b196-4dac-81cf-8d08538436ca"
        },
        "item": {
          "id": "47ca5178-8052-4080-a464-4034d8bea2e9",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "6a0438ef-4089-4e2b-8017-aa9b5d2ec8d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "234590a5-eb70-4a72-a924-395a95735b59",
        "cursor": {
          "ref": "e6050ba0-add0-4a38-b901-88d6bae4f540",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "1dd0d5ca-70d9-494d-b8e8-075b7c63f8f4"
        },
        "item": {
          "id": "234590a5-eb70-4a72-a924-395a95735b59",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "d3b7cd47-219f-4cc6-a203-4a806450be8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31dc3c35-acff-4055-97f7-315683e8f818",
        "cursor": {
          "ref": "e43dd1ba-fee9-47f9-b0c8-1dcf34258960",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "28ea26ef-f7a5-40a0-8a06-2a805d8abb93"
        },
        "item": {
          "id": "31dc3c35-acff-4055-97f7-315683e8f818",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "b94ecd56-baab-4aa6-aea9-9fcf20e92285",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e11c347f-170c-4662-bbdd-ed4ef866032a",
        "cursor": {
          "ref": "567b5018-7a4a-4183-a6fc-653009dd62ce",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "8e2a175a-277b-4756-84c0-095901a0bce6"
        },
        "item": {
          "id": "e11c347f-170c-4662-bbdd-ed4ef866032a",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c958f4f5-213c-4ed3-bb48-69b35246b2ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58874a7e-9e0f-4d1c-b486-6bc605c253bb",
        "cursor": {
          "ref": "68ff2286-be9b-4cf4-9fa4-6413c7161984",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "080afc14-9e2f-4ebf-a4b0-629e927f2948"
        },
        "item": {
          "id": "58874a7e-9e0f-4d1c-b486-6bc605c253bb",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "48d2c6cc-fdc6-41c2-b645-10fde63cbc9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ea30d92-7d07-465f-9ac8-339622eb70b7",
        "cursor": {
          "ref": "1644d88b-ca94-4f37-87ac-bbf9f1e71946",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "a326c920-f729-44a1-807e-b33321c2bc54"
        },
        "item": {
          "id": "6ea30d92-7d07-465f-9ac8-339622eb70b7",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "3c2bd99a-8a11-4d12-952c-861370caa586",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffd82924-5ac0-4154-a0b2-40624e1cc393",
        "cursor": {
          "ref": "dc3b32c4-26ff-44df-8d28-06fb26243d1d",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "b74bf590-359b-43cd-9a52-65bc62e43f3f"
        },
        "item": {
          "id": "ffd82924-5ac0-4154-a0b2-40624e1cc393",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "cbac29be-b6b2-4d2c-8c24-4e628f1bd645",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9110e7e9-eaa9-493e-b278-b9cab3693f79",
        "cursor": {
          "ref": "df704641-257f-4f4b-8956-ceb4f072fe2a",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "7c205885-1b8c-4e20-b069-00c138a4962f"
        },
        "item": {
          "id": "9110e7e9-eaa9-493e-b278-b9cab3693f79",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "54d8286a-fc57-4a26-8378-3885d38bdabd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5b01e68-a017-42e1-bc48-1aa9a451c077",
        "cursor": {
          "ref": "3a5fd299-c3e0-4624-a44f-25b09d1e0754",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "def8cb9b-7817-4b56-9e38-d10d0136241c"
        },
        "item": {
          "id": "e5b01e68-a017-42e1-bc48-1aa9a451c077",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "f1e0da44-fbe6-41b4-8f1e-dcaf3a542bb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2bbf8cf-651d-41e5-9c96-31ab6c0f3d50",
        "cursor": {
          "ref": "d47fe818-fab9-4c2b-88c9-1f7d9ee9b9f3",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "afbbc7ee-9250-4ef6-8ad0-5bd4b07cb6d7"
        },
        "item": {
          "id": "c2bbf8cf-651d-41e5-9c96-31ab6c0f3d50",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "25684839-8edc-459c-9579-8a76e8dbc8df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06e279d2-71bc-4493-acc6-56f25a40a3f1",
        "cursor": {
          "ref": "769a0b4a-b5a3-489d-8551-eda27907caf3",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "4e9a5ba5-dcfa-4955-a720-645d1a4c29f0"
        },
        "item": {
          "id": "06e279d2-71bc-4493-acc6-56f25a40a3f1",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "39bee244-c411-4a7e-8233-eda53ead546c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08a0fc44-9d8a-4469-94da-13a2d90cb20d",
        "cursor": {
          "ref": "f3d1df07-03d5-4f34-a9e7-b7ea6e7edfbc",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "a9467370-3974-475e-8b02-d8f6f6780461"
        },
        "item": {
          "id": "08a0fc44-9d8a-4469-94da-13a2d90cb20d",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "80d11492-719b-4928-8603-53ddf8ca8de6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73528311-a546-4d0f-aa53-c3058ea7b85b",
        "cursor": {
          "ref": "ccbd91f0-40f9-4d8c-a7e8-6e17373ee62f",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "2f228282-644b-4bd2-bdf3-815d1c852743"
        },
        "item": {
          "id": "73528311-a546-4d0f-aa53-c3058ea7b85b",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "996dca5c-cf11-45f3-b1b9-5b9461fb88c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bcccf87-0806-410c-a43b-ce5b45e413eb",
        "cursor": {
          "ref": "cf3e08d6-075a-4843-88f5-d9470a819301",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "eb6a4949-757a-4d99-b56f-804ce4b95d7c"
        },
        "item": {
          "id": "1bcccf87-0806-410c-a43b-ce5b45e413eb",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "5144b378-d729-4d2b-8069-ed51e46e79c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2357e1d-b72b-4e5b-9b6b-c55a9e1b4e7e",
        "cursor": {
          "ref": "7bd1e34d-de01-439d-a3f3-9d228a849395",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "acc90a4d-7eb9-493f-855c-1e0e1beff4d3"
        },
        "item": {
          "id": "a2357e1d-b72b-4e5b-9b6b-c55a9e1b4e7e",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "f810484c-4c0f-44a0-abbe-b692dc2309d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bb53776-e5ef-4cf5-b5b4-4a3e31bfbf39",
        "cursor": {
          "ref": "cbf963e3-db27-4690-9916-8e408e9a27bf",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "9dd0a390-f4ae-49fc-b94f-6bf6349366c1"
        },
        "item": {
          "id": "6bb53776-e5ef-4cf5-b5b4-4a3e31bfbf39",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "34faf247-a885-4b8e-b560-eacc99703b12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e880d00c-dd37-4beb-8a71-dc2cdafb377e",
        "cursor": {
          "ref": "efdf63eb-1ae6-4e9e-8e90-723910e63cdb",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "45af531c-7ef4-4982-9089-a3d49aef0eaa"
        },
        "item": {
          "id": "e880d00c-dd37-4beb-8a71-dc2cdafb377e",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "7b307d46-59c0-4dce-bf40-9bcd1aa2cbda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff6496e6-7d9c-46ae-bbfb-5a56863682bb",
        "cursor": {
          "ref": "0e1bcf4e-855b-478e-b468-15923d6bff1d",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "4f37c9c1-dcde-4d58-8a75-d84099cea618"
        },
        "item": {
          "id": "ff6496e6-7d9c-46ae-bbfb-5a56863682bb",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "8bcbee68-3869-4255-a249-73e34f0f8a16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9190bc14-efb0-4abf-8321-3e9b31144b8f",
        "cursor": {
          "ref": "c24006b6-7342-4c09-8c3a-5eeef7b7dd61",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "5006eed0-b461-4de2-811f-bf56106001ae"
        },
        "item": {
          "id": "9190bc14-efb0-4abf-8321-3e9b31144b8f",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "f778523c-96dc-4cdc-a970-7dc11c87c17d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f1ec32d-fac0-411b-b997-6ac91318bd61",
        "cursor": {
          "ref": "5cfccfa8-4d87-4f3a-af99-6047f8b3e5fd",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "35319c1f-6e3d-4238-b9a2-076f4dc10ddb"
        },
        "item": {
          "id": "4f1ec32d-fac0-411b-b997-6ac91318bd61",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "0a50509e-c617-4823-833a-44fe054503d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd737157-139a-424b-aaf6-15abdf4c1fde",
        "cursor": {
          "ref": "67772fc9-f94e-49b3-bd6f-f9cd6b0c2913",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "a2d2292d-46cd-42ab-948e-5fd007ec86e3"
        },
        "item": {
          "id": "cd737157-139a-424b-aaf6-15abdf4c1fde",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "f34b4d83-115a-45b0-9832-fa7f27ad0ac6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "ac785173-573e-4fd1-b029-d1f74a69c8ff",
        "cursor": {
          "ref": "dcb01b5e-d6cb-4915-bb35-09df1ce52321",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "95d6cd5a-c2a4-4f53-b422-3d5b6530a88d"
        },
        "item": {
          "id": "ac785173-573e-4fd1-b029-d1f74a69c8ff",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "acda0762-3214-454d-8b1c-6764ec9f86b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "6f085a30-3e95-49e4-ab20-4dc1a46c03b2",
        "cursor": {
          "ref": "e733c4b3-7d4a-4ec1-9faa-0f195e8f3ea3",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "2952455c-9f24-49d1-9558-64db8851adf2"
        },
        "item": {
          "id": "6f085a30-3e95-49e4-ab20-4dc1a46c03b2",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "e00bc6af-f228-45f1-84ae-80c8cb24dfae",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d3a1cb5-b804-49b6-bb35-90bc026eeae1",
        "cursor": {
          "ref": "7699a494-bba7-46ca-83d9-3a1062b5df13",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "336f5a73-0bce-4e50-8cc7-dd82f8989a9a"
        },
        "item": {
          "id": "3d3a1cb5-b804-49b6-bb35-90bc026eeae1",
          "name": "credentials_verify"
        },
        "response": {
          "id": "df2dac1a-6f0e-49fa-ae76-9942971215fa",
          "status": "OK",
          "code": 200,
          "responseTime": 1749,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "333f9486-7354-4100-8e1f-cd3a4848b6e5",
        "cursor": {
          "ref": "50c116d8-692c-475c-9197-c86560c21ba8",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "0556087c-f4c9-437a-b12b-394391511649"
        },
        "item": {
          "id": "333f9486-7354-4100-8e1f-cd3a4848b6e5",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "8c624970-a26d-41c9-9b1e-d380ddfd0861",
          "status": "OK",
          "code": 200,
          "responseTime": 2264,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "75257581-a733-47ce-ada5-188d6aad3d35",
        "cursor": {
          "ref": "9d638861-3e17-449c-bba2-daac7c341c87",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "d5f9affe-0e2f-40e6-b037-6b73f1976f1b"
        },
        "item": {
          "id": "75257581-a733-47ce-ada5-188d6aad3d35",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b864d3d0-7f37-40f8-bc73-789c1ac8e751",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "75257581-a733-47ce-ada5-188d6aad3d35",
        "cursor": {
          "ref": "9d638861-3e17-449c-bba2-daac7c341c87",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "d5f9affe-0e2f-40e6-b037-6b73f1976f1b"
        },
        "item": {
          "id": "75257581-a733-47ce-ada5-188d6aad3d35",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b864d3d0-7f37-40f8-bc73-789c1ac8e751",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "75257581-a733-47ce-ada5-188d6aad3d35",
        "cursor": {
          "ref": "9d638861-3e17-449c-bba2-daac7c341c87",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "d5f9affe-0e2f-40e6-b037-6b73f1976f1b"
        },
        "item": {
          "id": "75257581-a733-47ce-ada5-188d6aad3d35",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b864d3d0-7f37-40f8-bc73-789c1ac8e751",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "f6ea4c42-8b26-42f7-913e-af5fabc1b3e9",
        "cursor": {
          "ref": "8f57e4be-c91a-423b-bc23-56bd0f2f2d50",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "aee29368-00b2-42a4-a255-e600b9a3cce0"
        },
        "item": {
          "id": "f6ea4c42-8b26-42f7-913e-af5fabc1b3e9",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "8e6d8ebe-92aa-457c-8494-c64812fa5db1",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "118d6164-3071-4b0e-be55-c2da0f8cd3bc",
        "cursor": {
          "ref": "9bd92347-0c1d-4a4c-b92c-8319751c8db9",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "a58d0d73-0e86-4dda-92f0-97e69f83857e"
        },
        "item": {
          "id": "118d6164-3071-4b0e-be55-c2da0f8cd3bc",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b611565f-4301-479c-be7e-4e292c7e5f2f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "118d6164-3071-4b0e-be55-c2da0f8cd3bc",
        "cursor": {
          "ref": "9bd92347-0c1d-4a4c-b92c-8319751c8db9",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "a58d0d73-0e86-4dda-92f0-97e69f83857e"
        },
        "item": {
          "id": "118d6164-3071-4b0e-be55-c2da0f8cd3bc",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b611565f-4301-479c-be7e-4e292c7e5f2f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "953b8f34-5098-4eeb-8feb-60915a04cc87",
        "cursor": {
          "ref": "c96d4441-56a5-4282-b0de-1fa84c5f78be",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "6ed6b37d-fea7-4fb4-85e4-d145cbebac0b"
        },
        "item": {
          "id": "953b8f34-5098-4eeb-8feb-60915a04cc87",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "8803b53a-abd6-4f84-a8c9-47aa89b095be",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 161,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "4decce3d-881a-4ce5-8d46-7b7374df2014",
        "cursor": {
          "ref": "27d2ddb2-ea61-439e-9e3f-eb0e890bf18c",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "c60c3816-29a6-4ad4-bbf1-bea739f82d9e"
        },
        "item": {
          "id": "4decce3d-881a-4ce5-8d46-7b7374df2014",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "30026fc1-1552-429a-b51d-0bcad99bde7e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "4decce3d-881a-4ce5-8d46-7b7374df2014",
        "cursor": {
          "ref": "27d2ddb2-ea61-439e-9e3f-eb0e890bf18c",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "c60c3816-29a6-4ad4-bbf1-bea739f82d9e"
        },
        "item": {
          "id": "4decce3d-881a-4ce5-8d46-7b7374df2014",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "30026fc1-1552-429a-b51d-0bcad99bde7e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "5ef5867d-6628-4f42-b597-8a2058d4a8f5",
        "cursor": {
          "ref": "4669a19c-0030-426d-9eda-c441e3a74428",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "e0d440d8-b92f-45f1-9d37-2a7ff90bd0ff"
        },
        "item": {
          "id": "5ef5867d-6628-4f42-b597-8a2058d4a8f5",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "3c177efb-64f4-4a88-ba03-9f8daac5e41e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}